#ifndef crclj_h
#define crclj_h

#include <jni.h>

namespace crclj {

    extern JNIEnv *getEnv();
    extern void releaseEnv(JNIEnv *);
    extern void PrintJObject(const char *prefix, jobject jobj);
    extern void DebugPrintJObject(const char *file, int lineno, const char *prefix, jobject jobj);
    extern void SetDebugJ4Cpp(bool debug);
    extern bool GetDebugJ4Cpp();
    
    namespace java {
        namespace lang {

            class Object {
            protected:
                jobject jthis;
            public:
                Object();
                Object(jobject _jthis, bool copy);
                Object(const Object &ref);
                jstring toString();
                ~Object();
            };
        }
    }
    
    


    
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class NodeImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class ChildNode;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class ParentNode;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace java{
		namespace lang{
			class Throwable;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace lang{
			class Exception;
		} // end namespace java
	} // end namespace lang
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class ElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace java{
		namespace awt{
			class Component;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace lang{
			class RuntimeException;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace awt{
			class Container;
		} // end namespace java
	} // end namespace awt
	namespace crcl{
		namespace base{
			class DataThingType;
		} // end namespace crcl
	} // end namespace base
	namespace java{
		namespace lang{
			class Enum;
		} // end namespace java
	} // end namespace lang
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace java{
		namespace lang{
			class IllegalArgumentException;
		} // end namespace java
	} // end namespace lang
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MathIllegalArgumentException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class TypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace crcl{
		namespace base{
			class CRCLCommandType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class MiddleCommandType;
		} // end namespace crcl
	} // end namespace base
	namespace java{
		namespace awt{
			class Window;
		} // end namespace java
	} // end namespace awt
	namespace javax{
		namespace swing{
			class JComponent;
		} // end namespace javax
	} // end namespace swing
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class AbstractRealDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class AbstractUnivariateStatistic;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class BaseOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace java{
		namespace io{
			class InputStream;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace awt{
			class Frame;
		} // end namespace java
	} // end namespace awt
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class AbstractFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace java{
		namespace io{
			class OutputStream;
		} // end namespace java
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class BaseAbstractUnivariateSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class AbstractEvent;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class AbstractIntegrator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class AbstractStorelessUnivariateStatistic;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class BaseMultivariateOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class ParserConfigurationSettings;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace java{
		namespace util{
			class EventObject;
		} // end namespace java
	} // end namespace util
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class AbstractGrammar;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace javax{
		namespace swing{
			class JFrame;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			class JPanel;
		} // end namespace javax
	} // end namespace swing
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class AbstractDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class XMLEventImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace java{
		namespace lang{
			class IllegalStateException;
		} // end namespace java
	} // end namespace lang
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MathIllegalNumberException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace java{
		namespace util{
			class AbstractCollection;
		} // end namespace java
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							class AbstractStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MathIllegalStateException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace java{
		namespace util{
			class AbstractList;
		} // end namespace java
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDAbstractTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class AbstractUnivariateSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class AbstractValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace java{
		namespace io{
			class Reader;
		} // end namespace java
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class AbstractDateTimeDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace java{
		namespace awt{
			class Panel;
		} // end namespace java
	} // end namespace awt
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XMLParser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class BitsStreamGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class AbstractFileComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class AbstractRestrictedCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class AbstractSchemaInformedGrammar;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class AdaptiveStepsizeIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class RungeKuttaStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace java{
		namespace awt{
			class AWTEvent;
		} // end namespace java
	} // end namespace awt
	namespace rcs{
		namespace nml{
			class NMLmsg;
		} // end namespace rcs
	} // end namespace nml
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class BaseAbstractMultivariateOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class MultivariateOptimizer;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class AbstractIntegerDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class CharacterDataImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class AbstractEXIBodyCoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class AbstractTypeCoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class CMNode;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace java{
		namespace lang{
			class Number;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace io{
			class FilterInputStream;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace io{
			class Writer;
		} // end namespace java
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class DefaultNode;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLScanner;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class CoreDOMImplementationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class AbstractXMLDocumentParser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class ProxyInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class NodeImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class RungeKuttaIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class AbstractWell;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMImplementationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XML11Configuration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class DefaultHandler;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RealLinearOperator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							class BaseAbstractUnivariateIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration
	namespace java{
		namespace text{
			class Format;
		} // end namespace java
	} // end namespace text
	namespace java{
		namespace io{
			class FilterOutputStream;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace io{
			class IOException;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace awt{
			namespace geom{
				class Point2D;
			} // end namespace java
		} // end namespace awt
	} // end namespace geom
	namespace java{
		namespace awt{
			class TextComponent;
		} // end namespace java
	} // end namespace awt
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class AbstractBuiltInGrammar;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLInputSource;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace rcs{
		namespace nml{
			class NMLFormatConverter;
		} // end namespace rcs
	} // end namespace nml
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class AbstractRegion;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class CoreDocumentImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class BaseMarkupSerializer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace java{
		namespace text{
			class NumberFormat;
		} // end namespace java
	} // end namespace text
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class SchemaDVFactory;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace javax{
		namespace xml{
			namespace validation{
				class Schema;
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class AbstractSubHyperplane;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class BasicParserConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace java{
		namespace awt{
			class Dialog;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace applet{
			class Applet;
		} // end namespace java
	} // end namespace applet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class AbstractConvergenceChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							class Clusterer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								class MultivariateVectorOptimizer;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							class AbstractStringCoder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings
	namespace rcs{
		namespace nml{
			class NMLFormatConverterBase;
		} // end namespace rcs
	} // end namespace nml
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class AbstractConvergenceChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class AbstractRealMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DocumentImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLDocumentFragmentScannerImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class AbstractCurveFitter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class AbstractFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class AttrImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class AbstractXMLSchema;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class Pair;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class ProxyOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace java{
		namespace awt{
			class MenuComponent;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			namespace event{
				class ComponentEvent;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace geom{
				namespace Point2D{
					class Double;
				} // end namespace java
			} // end namespace awt
		} // end namespace geom
	} // end namespace Point2D
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								class BaseRuleFactory;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class BaseSecantSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class BaseAbstractMultivariateVectorOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							class CurveFitter;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class FirstMoment;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								class JacobianMultivariateVectorOptimizer;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						class VectorFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace geometry
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class IterativeLinearSolver;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class AbstractSchemaInformedContent;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class TextImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					namespace events{
						class EventImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom
	} // end namespace events
	namespace java{
		namespace lang{
			class Error;
		} // end namespace java
	} // end namespace lang
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathException;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace org{
		namespace xml{
			namespace sax{
				class SAXException;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					class DefaultHandler2;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class AbstractFieldMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RealVector;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class AbstractEXIBodyEncoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class AbstractTypeEncoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLDocumentScannerImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLDTDValidator;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class CurveFitter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XMLResourceIdentifierImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace java{
		namespace util{
			class AbstractMap;
		} // end namespace java
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class AbstractDOMParser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class NamespaceSupport;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class MultistepIntegrator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class BaseMultivariateMultiStartOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace crcl{
		namespace base{
			class GripperStatusType;
		} // end namespace crcl
	} // end namespace base
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class AbstractTypeDecoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XIncludeAwareParserConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class AbstractEXIBodyDecoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class Chromosome;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class AbstractMultivariateRealDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NumberIsTooSmallException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class AbstractDatatypeEvent;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class EmbeddedRungeKuttaIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class SymbolTable;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace javafx{
		namespace scene{
			namespace transform{
				class Transform;
			} // end namespace javafx
		} // end namespace scene
	} // end namespace transform
	namespace java{
		namespace nio{
			namespace channels{
				namespace spi{
					class AbstractInterruptibleChannel;
				} // end namespace java
			} // end namespace nio
		} // end namespace channels
	} // end namespace spi
	namespace rcs{
		namespace posemath{
			class PmCartesian;
		} // end namespace rcs
	} // end namespace posemath
	namespace java{
		namespace awt{
			class TextArea;
		} // end namespace java
	} // end namespace awt
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							class AbstractLeastSquaresOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class BaseAbstractMultivariateSimpleBoundsOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class BaseMultivariateVectorMultiStartOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace java{
		namespace util{
			class Random;
		} // end namespace java
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							class AbstractMultipleLinearRegression;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class SecondMoment;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							class UnivariateOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class BaseMultiStartMultivariateOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class PreconditionedIterativeLinearSolver;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class DimensionMismatchException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace crcl{
		namespace base{
			class JointDetailsType;
		} // end namespace crcl
	} // end namespace base
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class AbstractBinaryDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace exceptions{
						class EXIException;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace exceptions
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class CMBuilder;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace production{
							class AbstractProduction;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace production
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						class AbstractGrammars;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class AbstractBinaryValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class ElementNSImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class ElementImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace java{
		namespace awt{
			class List;
		} // end namespace java
	} // end namespace awt
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								namespace jacobian{
									class AbstractLeastSquaresOptimizer;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace vector
	} // end namespace jacobian
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									class AbstractSimplex;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv
	namespace crcl{
		namespace base{
			class TransAccelType;
		} // end namespace crcl
	} // end namespace base
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							class AbstractEncoderChannel;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLDTDProcessor;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace diagapplet{
		namespace utils{
			class StandAloneApplet;
		} // end namespace diagapplet
	} // end namespace utils
	namespace javax{
		namespace swing{
			class AbstractCellEditor;
		} // end namespace javax
	} // end namespace swing
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class IterationEvent;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace crcl{
		namespace base{
			class RotAccelType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class TransSpeedType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class AttrNSImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class BaseSchemaDVFactory;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							class IdentityConstraint;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDAbstractParticleTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDAbstractIDConstraintTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class AdamsIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace crcl{
		namespace base{
			class RotSpeedType;
		} // end namespace crcl
	} // end namespace base
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class AbstractEXIHeader;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class AbstractBuiltInContent;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							class AbstractDecoderChannel;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class DatatypeException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class DTDDVFactory;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class Container;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class DTDConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace rcs{
		namespace posemath{
			class PmPose;
		} // end namespace rcs
	} // end namespace posemath
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						class AbstractAttributeList;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class DurationDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class AbstractListChromosome;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MaxCountExceededException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class AbstractSimplex;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class XNIException;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace java{
		namespace awt{
			class Image;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			namespace geom{
				class RectangularShape;
			} // end namespace java
		} // end namespace awt
	} // end namespace geom
	namespace java{
		namespace awt{
			class MenuItem;
		} // end namespace java
	} // end namespace awt
	namespace javax{
		namespace swing{
			namespace plaf{
				class ComponentUI;
			} // end namespace javax
		} // end namespace swing
	} // end namespace plaf
	namespace java{
		namespace awt{
			namespace event{
				class InputEvent;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace lang{
			class AbstractStringBuilder;
		} // end namespace java
	} // end namespace lang
	namespace javafx{
		namespace scene{
			class Node;
		} // end namespace javafx
	} // end namespace scene
	namespace javafx{
		namespace event{
			class Event;
		} // end namespace javafx
	} // end namespace event
	namespace java{
		namespace nio{
			namespace channels{
				class SelectableChannel;
			} // end namespace java
		} // end namespace nio
	} // end namespace channels
	namespace rcs{
		namespace posemath{
			class PmQuaternion;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PmRotationMatrix;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PmEulerZyz;
		} // end namespace rcs
	} // end namespace posemath
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class AbstractUnivariateDifferentiableSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							class BaseAbstractUnivariateOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							class AbstractLinearOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							namespace evaluation{
								class ClusterEvaluator;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace clustering
	} // end namespace evaluation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class ThirdMoment;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class DescriptiveStatistics;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						class Dfp;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class GradientMultivariateOptimizer;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							class StringEncoderImpl;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						class EXIContentModelBuilder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class SchemaInformedStartTag;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class ElementDefinitionImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class NamedNodeMapImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					namespace events{
						class UIEventImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLNamespaceBinder;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLDTDScannerImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class PSVIDOMImplementationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class AbstractSAXParser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class AttributeImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					class XIncludeTextReader;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class XMLString;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLEventFactory;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace transform{
				class TransformerFactory;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace validation{
				class SchemaFactory;
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathExpressionException;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace rcs{
		namespace posemath{
			class PmSpherical;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PmHomogeneous;
		} // end namespace rcs
	} // end namespace posemath
	namespace diagapplet{
		namespace utils{
			class CountList;
		} // end namespace diagapplet
	} // end namespace utils
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class AbstractPolynomialSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							class AbstractScalarDifferentiableOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general
	namespace crcl{
		namespace base{
			class PoseType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class ProcessingInstructionImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ranges{
					class RangeException;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ranges
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLEntityScanner;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XML11DTDValidator;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLDTDLoader;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class XSCMLeaf;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class Printer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class HTMLSerializer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class XMLSerializer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace javax{
		namespace xml{
			namespace transform{
				class TransformerException;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					class SAXResult;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class LocatorImpl;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace rcsdesign{
		class rcsDesignGui;
	} // end namespace rcsdesign
	namespace rcs{
		namespace posemath{
			class PmEulerZyx;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PmCylindrical;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PmRotationVector;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace nml{
			class RCS_STAT_MSG;
		} // end namespace rcs
	} // end namespace nml
	namespace javafx{
		namespace application{
			class Application;
		} // end namespace javafx
	} // end namespace application
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class AbstractDifferentiableUnivariateSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class BigFractionFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class ConvergenceException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class IterativeLinearSolverEvent;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class QRDecomposition;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MultiDimensionMismatchException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class ThresholdingOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class XMLFilterImpl;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class CDATASectionImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class CommentImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMImplementationSourceImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeepNodeListImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DocumentTypeImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class EntityImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class EntityReferenceImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class NotationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace validation{
						class ValidationState;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XMLGrammarPoolImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class XSNamedMapImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace javax{
		namespace xml{
			namespace parsers{
				class DocumentBuilderFactory;
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class TeeXMLDocumentFilterImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace javax{
		namespace xml{
			namespace parsers{
				class SAXParser;
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers
	namespace javax{
		namespace xml{
			namespace datatype{
				class XMLGregorianCalendar;
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					class MultipleScopeNamespaceSupport;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude
	namespace javax{
		namespace xml{
			namespace datatype{
				class Duration;
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype
	namespace javax{
		namespace xml{
			namespace validation{
				class ValidatorHandler;
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class AttributesImpl;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace javax{
		namespace swing{
			class JLabel;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			namespace table{
				class AbstractTableModel;
			} // end namespace javax
		} // end namespace swing
	} // end namespace table
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class AbstractEvaluation;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class MultivariateSummaryStatistics;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace java{
		namespace io{
			class FilterWriter;
		} // end namespace java
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class RegularExpression;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class DTDDVFactoryImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class NMTOKENDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class BaseDVFactory;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class DecimalDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class RegexParser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class Token;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class DefaultElement;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class DefaultText;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class DefaultXMLDocumentHandler;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class DefaultDocument;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XMLGrammarParser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class StandardParserConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class SerializerFactory;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace rcs{
		namespace posemath{
			class PmRpy;
		} // end namespace rcs
	} // end namespace posemath
	namespace java{
		namespace net{
			class DatagramSocket;
		} // end namespace java
	} // end namespace net
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class BicubicSplineInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							class Cluster;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								class Percentile;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class SummaryStatistics;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class LinearOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class FractionFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							class SAXEncoder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						class AbstractUriContext;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class EXIBodyDecoderInOrder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class EXIBodyEncoderInOrder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XML11DocumentScannerImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class DTDGrammar;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class IDREFDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace javax{
		namespace xml{
			namespace datatype{
				class DatatypeFactory;
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype
	namespace javax{
		namespace xml{
			namespace validation{
				class Validator;
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation
	namespace java{
		namespace awt{
			class Button;
		} // end namespace java
	} // end namespace awt
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							class Covariance;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class ListPopulation;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class MixtureMultivariateRealDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace java{
		namespace lang{
			class UnsupportedOperationException;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace lang{
			class ArithmeticException;
		} // end namespace java
	} // end namespace lang
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class IOExceptionWithCause;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					class SAXSource;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							class StringDecoderImpl;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class IDDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class DateTimeDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace java{
		namespace io{
			class CharConversionException;
		} // end namespace java
	} // end namespace io
	namespace javax{
		namespace xml{
			namespace parsers{
				class DocumentBuilder;
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers
	namespace javax{
		namespace xml{
			namespace parsers{
				class SAXParserFactory;
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers
	namespace java{
		namespace awt{
			class TextField;
		} // end namespace java
	} // end namespace awt
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								class GaussIntegrator;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class SparseRealVector;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace java{
		namespace io{
			class FilterReader;
		} // end namespace java
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class DOMParserImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace rcsdesign{
		class rcsDesignWriterInfo;
	} // end namespace rcsdesign
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									class AbstractConvexHullGenerator2D;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull
	namespace java{
		namespace io{
			class ObjectInputStream;
		} // end namespace java
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					class XIncludeHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude
	namespace java{
		namespace util{
			class AbstractSequentialList;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace awt{
			namespace geom{
				class Rectangle2D;
			} // end namespace java
		} // end namespace awt
	} // end namespace geom
	namespace java{
		namespace awt{
			namespace geom{
				class Dimension2D;
			} // end namespace java
		} // end namespace awt
	} // end namespace geom
	namespace java{
		namespace awt{
			class Menu;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class AWTKeyStroke;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace util{
			class Dictionary;
		} // end namespace java
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace XMLEntityManager{
						class Entity;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace XMLEntityManager
	namespace java{
		namespace nio{
			class Buffer;
		} // end namespace java
	} // end namespace nio
	namespace javafx{
		namespace stage{
			class Window;
		} // end namespace javafx
	} // end namespace stage
	namespace java{
		namespace util{
			class Calendar;
		} // end namespace java
	} // end namespace util
	namespace javafx{
		namespace scene{
			namespace input{
				class InputEvent;
			} // end namespace javafx
		} // end namespace scene
	} // end namespace input
	namespace javax{
		namespace swing{
			namespace text{
				class AbstractDocument;
			} // end namespace javax
		} // end namespace swing
	} // end namespace text
	namespace java{
		namespace nio{
			namespace channels{
				namespace spi{
					class AbstractSelectableChannel;
				} // end namespace java
			} // end namespace nio
		} // end namespace channels
	} // end namespace spi
	namespace javax{
		namespace swing{
			class AbstractListModel;
		} // end namespace javax
	} // end namespace swing
	namespace pvjscript{
		class Main;
	} // end namespace pvjscript
	namespace rcsdesign{
		class QueryDialog;
	} // end namespace rcsdesign
	namespace rcs{
		class RCS_VERSION;
	} // end namespace rcs
	namespace rcs{
		namespace posemath{
			class PM_CIRCLE;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_QUATERNION;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PmCircle;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_EULER_ZYZ;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace nml{
			class NML_PERFORMANCE_TEST_MSG;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLConnection;
		} // end namespace rcs
	} // end namespace nml
	namespace diagapplet{
		namespace plotter{
			class ParseOptionsJPanel;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		namespace plotter{
			class plotterJFrame;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		namespace plotter{
			class ParseOptions;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		namespace plotter{
			class PlotGraphScreenMap;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		class PlotTracker;
	} // end namespace diagapplet
	namespace diagapplet{
		class HierarchyLoad_NB_UI;
	} // end namespace diagapplet
	namespace diagapplet{
		namespace CodeGen{
			class CodeGen;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenTextAreaWrapper;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class LoadHierarchyUpdateInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class DiagNMLFormatConvertErrCallback;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class BufferInfo;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class DefinedValue;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class DiagNMLMsgDictCreator;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenTextFieldInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenBellRingerInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class DiagNMLmsg;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class MultivariateDifferentiableVectorFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class UnivariateMatrixFunctionDifferentiator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class SparseGradient;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Inverse;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Abs;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Rint;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Expm1;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Cosh;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Subtract;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								class LegendreRuleFactory;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class PegasusSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class NevilleInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class PiecewiseBicubicSplineInterpolatingFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class SplineInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class DifferentiableUnivariateVectorFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class UnivariateFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class EulerIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							class StepNormalizerMode;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							class NordsieckStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							class AbstractDifferentiableOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							class GaussNewtonOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class MultivariateFunctionPenaltyAdapter;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class CMAESOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							class UnivariatePointValuePair;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							class BracketFinder;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							class UnivariateMultiStartOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							class LinearObjectiveFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							class NoFeasibleSolutionException;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							class SimplexTableau;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							class Relationship;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							class SimplexSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							class LinearOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							class HarmonicFitter;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							class PolynomialFitter;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							class GaussianFitter;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class BaseMultivariateOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class BaseOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class GoalType;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class ConvergenceChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class DifferentiableMultivariateOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class Target;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class MultivariateDifferentiableOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class BaseMultivariateVectorOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class DifferentiableMultivariateVectorOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class MultivariateDifferentiableVectorOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class SimplePointChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class DifferentiableMultivariateVectorMultiStartOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace twod{
								class NeuronSquareMesh2D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							class UpdateAction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							class Network;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							class Neuron;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							class SquareNeighbourhood;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							class FeatureInitializer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							class MapUtils;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							class FeatureInitializerFactory;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							class EuclideanDistance;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							class DistanceMeasure;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							class ManhattanDistance;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							class CanberraDistance;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							class EarthMoversDistance;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							class ChebyshevDistance;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							namespace evaluation{
								class SumOfClusterVariances;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace clustering
	} // end namespace evaluation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							class DBSCANClusterer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							class KMeansPlusPlusClusterer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class RandomGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class RandomVectorGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class Well19937c;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class RandomDataImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class HaltonSequenceGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class CorrelatedRandomVectorGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class NormalizedRandomGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class AbstractRandomGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class ISAACRandom;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class GaussianRandomGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class UnitSphereRandomVectorGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class RandomAdaptor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class Well44497b;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class EmpiricalDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class Well19937a;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class StableRandomGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							class OLSMultipleLinearRegression;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							class MultipleLinearRegression;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class StandardDeviation;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class FourthMoment;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						class RootsOfUnity;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace gradient{
									class NonLinearConjugateGradientOptimizer;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace gradient
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									class BOBYQAOptimizer;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							class MultiStartUnivariateOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							class SearchInterval;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class BigFractionField;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class LogNormalDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class TriangularDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class PoissonDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class ChiSquaredDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class BSPTreeVisitor;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class NonPositiveDefiniteOperatorException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class ConjugateGradient;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class NonSquareMatrixException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class AnyMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class CompositeFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class TransformerMap;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class MultidimensionalCounter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace crcl{
		namespace base{
			class JointSpeedAccelType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetIntermediatePoseToleranceType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetEndPoseToleranceType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class EndCanonType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetRobotParametersType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class ByteOrderMark;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class NameFileComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class ReverseComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class FileCleaner;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class AgeFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class NotFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class WildcardFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class BinaryHexDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class XSDBooleanCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class XSDDoubleCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class XSDIntegerCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class Datatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class DecimalDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class FloatDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class IntegerDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class NBitUnsignedIntegerDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class StringDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							class BoundedStringEncoderImpl;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							class StringDecoder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							class StringEncoder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class UnsignedIntegerDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class EncodingOptions;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class EXIBodyDecoder;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class EXIFactory;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class EXIStreamEncoder;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class GrammarFactory;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class AttributeGeneric;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class AttributeNS;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class Comment;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class DocType;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class EndElement;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class Event;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class EventType;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class NamespaceDeclaration;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class ProcessingInstruction;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class SelfContained;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class StartDocument;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class StartElementGeneric;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class StartElementNS;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class BuiltInDocContent;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class BuiltInFragmentContent;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class DocEnd;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class Fragment;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class SchemaInformedDocContent;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class SchemaInformedFirstStartTag;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class SchemaInformedStartTagGrammar;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace production{
							class SchemaLessProduction;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace production
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						class SchemaLessGrammars;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						class XSDGrammarsBuilder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLBodyElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLBuilder;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLFieldSetElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLFontElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLFormControl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLIsIndexElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				class WMLCardElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLHeadElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLOptionElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLStrongElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLAElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLDoElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class LCount;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class ObjectFactory;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					namespace events{
						class MouseEventImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class Constants;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XML11NamespaceBinder;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLEntityHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class AttributePSVImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class FilePathToURI;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class SchemaGrammar;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSAnnotationImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSAttributeGroupDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSConstraints;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSElementDeclHelper;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSGrammarBucket;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSImplementationImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSLoaderImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSModelGroupImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSNotationDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSParticleDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSWildcardDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							class XPathMatcher;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class XSCMValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XPointerParserConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					class ImmutableLocation;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace stax
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class CharactersImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class DTDImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class EndElementImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class NamespaceImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class StartDocumentImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class AttributesProxy;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class DefaultErrorHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class EntityResolver2Wrapper;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class EntityResolverWrapper;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class HTTPInputSource;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class MessageFormatter;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class XMLDTDContentModelHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class XMLDocumentFragmentHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class XMLLocator;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						class XMLGrammarLoader;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLComponent;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLDTDContentModelSource;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLDTDSource;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLDocumentSource;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLErrorHandler;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLParserConfiguration;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					class XPointerErrorHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					class XPointerPart;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class AttributePSVI;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class ItemPSVI;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class StringList;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSAttributeGroupDefinition;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSConstants;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSModelGroup;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSObjectList;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						class ObjectList;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes
	namespace javax{
		namespace xml{
			namespace parsers{
				class ParserConfigurationException;
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLStreamException;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class EndElement;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class XMLEvent;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace transform{
				class OutputKeys;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				class SecuritySupport;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				class TransformerFactoryConfigurationError;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					class SAXTransformerFactory;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax
	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					class TemplatesHandler;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax
	namespace javax{
		namespace xml{
			namespace validation{
				class TypeInfoProvider;
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathFunctionException;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace org{
		namespace w3c{
			namespace dom{
				class CharacterData;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class DOMImplementationList;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class ElementTraversal;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class ProcessingInstruction;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSPrimitiveValue;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSValueList;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					class DocumentEvent;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLAnchorElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLCollection;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLFormElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLImageElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLMenuElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLParamElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLTableColElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSException;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSSerializer;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					class StyleSheet;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets
	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					class XPathEvaluator;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath
	namespace org{
		namespace xml{
			namespace sax{
				class ContentHandler;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				class DTDHandler;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				class SAXNotRecognizedException;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					class EntityResolver2;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext
	namespace crcl{
		namespace utils{
			class DefaultMain;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class PoseToleranceChecker;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class SimRobotEnum;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class PendantClientOuterStub;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class OverHeadJPanel;
		} // end namespace crcl
	} // end namespace utils
	namespace rcsdesign{
		class BackupLineData;
	} // end namespace rcsdesign
	namespace rcs{
		namespace posemath{
			class PM_SPHERICAL;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_XYA;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_HOMOGENEOUS;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_LINE;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PmException;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_ROTATION_MATRIX;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		class ClassChooser;
	} // end namespace rcs
	namespace rcs{
		namespace nml{
			class XMLFormatConverter;
		} // end namespace rcs
	} // end namespace nml
	namespace diagapplet{
		class plotSetPreserve;
	} // end namespace diagapplet
	namespace diagapplet{
		class auxBufferPreserve;
	} // end namespace diagapplet
	namespace diagapplet{
		class LineInfo;
	} // end namespace diagapplet
	namespace diagapplet{
		namespace CodeGen{
			class STI_Tokenizer;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class StringFuncs;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace utils{
			class URlLoadInfoFrame;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class FakeFastListPanel;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class CountButtonInterface;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class SaveImage;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class DiagError;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class CountListInterface;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		class diagappletFrame;
	} // end namespace diagapplet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Sin;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Ceil;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Sinc;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class UnivariateSolverUtils;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class RiddersSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class BaseUnivariateSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class DifferentiableMultivariateVectorFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class MultivariateVectorFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class ClassicalRungeKuttaIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class JacobianMatrices;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							class EventFilter;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							class EventState;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							class NonLinearConjugateGradientOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class Variance;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class SynchronizedDescriptiveStatistics;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class StorelessUnivariateStatistic;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						class UnivariateDfpFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						class DfpMath;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						class Beta;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace special
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						class MeasurementModel;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						class DefaultProcessModel;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					class RealFieldElement;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace math3
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					class FieldElement;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace math3
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					class Field;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace math3
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								namespace jacobian{
									class LevenbergMarquardtOptimizer;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace vector
	} // end namespace jacobian
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									class MultiDirectionalSimplex;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class MultiStartMultivariateOptimizer;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class ObjectiveFunction;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class MultivariateFunctionMappingAdapter;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class GoalType;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							class SimpleUnivariateValueChecker;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							class BrentOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							class UnivariatePointValuePair;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class SimplexTableau;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class AbstractOptimizationProblem;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class OptimizationData;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						namespace fitting{
							class MultivariateNormalMixtureExpectationMaximization;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace distribution
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class UniformRealDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace enclosing{
							class WelzlEncloser;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace enclosing
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class PolyhedronsSet;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class SubLine;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class Vector3D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class RegionFactory;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class Transform;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class BoundaryProjection;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class Hyperplane;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class DiagonalMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class BlockRealMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RectangularCholeskyDecomposition;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class FieldLUDecomposition;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class FieldDecompositionSolver;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class JacobiPreconditioner;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class NonSquareOperatorException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class FieldMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class DefaultFieldMatrixChangingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RealMatrixPreservingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RealMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class Precision;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class MedianOf3PivotingStrategy;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class CentralPivotingStrategy;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class PivotingStrategyInterface;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class KthSelector;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class FastMathCalc;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class DoubleArray;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class Decimal64Field;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class FastMathLiteralArrays;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace crcl{
		namespace base{
			class CloseToolChangerType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class ForceUnitEnumType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class ParameterSettingType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class CRCLStatusType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class MoveScrewType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class MoveToType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class ObjectFactory;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class PoseAndSetType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class TransAccelRelativeType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class DwellType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetLengthUnitsType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class OpenToolChangerType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetTransAccelType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class JointForceTorqueType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class PointType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class CommandStateEnumType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class LastModifiedFileComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class EndianUtils;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class AndFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class FileFilterUtils;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class TrueFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class WildcardFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class FileSystemUtils;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class BoundedInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class WriterOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class ThreadMonitor;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class EXIBodyEncoderReordered;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							class DecoderChannel;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class SchemaIdResolver;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class BuiltInType;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class DateTimeType;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class TypeDecoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						class SimpleDocTypeParser;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class CollectionIndex;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLDocumentImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLFormElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLImageElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				class WMLBigElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLDocument;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLInputElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLPrevElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLTemplateElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLEmElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLFieldsetElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLHeadElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class PSVIDocumentImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class RangeExceptionImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class SecuritySupport;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class TreeWalkerImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					namespace events{
						class MutationEventImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class ExternalSubsetResolver;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class Version;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XML11DTDScannerImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XML11EntityScanner;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class DTDGrammarBucket;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLAttributeDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLContentSpec;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class EntityDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						class Latin1Reader;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						class UTF8Reader;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							class Field;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							class ValueStore;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class XSAllCM;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class XMLSchemaValidatorComponentManager;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSModelGroupDefinition;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSParticle;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						class XSDateTime;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class DOMSerializerImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class IndentPrinter;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class LineSeparator;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class Method;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class ObjectFactory;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class XHTMLSerializer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class XML11Serializer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLDOMImplementation;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace javax{
		namespace xml{
			namespace namespace{
				class NamespaceContext;
			} // end namespace javax
		} // end namespace xml
	} // end namespace namespace
	namespace javax{
		namespace xml{
			namespace parsers{
				class FactoryFinder;
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers
	namespace javax{
		namespace xml{
			namespace parsers{
				class SecuritySupport;
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLOutputFactory;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class NotationDeclaration;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace util{
					class XMLEventConsumer;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace util
	namespace javax{
		namespace xml{
			namespace transform{
				class TransformerConfigurationException;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				namespace stream{
					class StreamResult;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace validation{
				class SchemaFactoryLoader;
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathFactoryFinder;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace org{
		namespace w3c{
			namespace dom{
				class DOMErrorHandler;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class DocumentFragment;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class Node;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSPageRule;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSValue;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class ViewCSS;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					class UIEvent;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLButtonElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLFontElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLIFrameElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLMapElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLParagraphElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLTableCellElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class DOMImplementationLS;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSResourceResolver;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					class MediaList;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets
	namespace org{
		namespace w3c{
			namespace dom{
				namespace views{
					class DocumentView;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace views
	namespace org{
		namespace xml{
			namespace sax{
				class Attributes;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				class Locator;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					class Locator2Impl;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext
	namespace crcl{
		namespace utils{
			class CRCLPosemath;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class XpathUtils;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class ListChooserJPanel;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class LauncherJFrame;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class SimulatedKinematicsPlausible;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class GripperJFrame;
		} // end namespace crcl
	} // end namespace utils
	namespace rcsdesign{
		class FileTypeInfo;
	} // end namespace rcsdesign
	namespace rcsdesign{
		class rcsdesignModuleInfo;
	} // end namespace rcsdesign
	namespace rcsdesign{
		class AutoSizedTextArea;
	} // end namespace rcsdesign
	namespace rcsdesign{
		class MakeFileRunner;
	} // end namespace rcsdesign
	namespace rcs{
		namespace posemath{
			class LineFitTester;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_EULER_ZYX;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_ROTATION_VECTOR;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace nml{
			class errlogMsgDict;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class nmlperf;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class XMLNodeInfo;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class time_tracker;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLConnectionCreator;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class RCS_STAT_MSG_V2;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLBufferConfigInfo;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class PackedFileReader;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLConnectionCreatorInterface;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class DISPFormatConverter;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLFormatConvertErrCallbackInterface;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class XMLFileWriter;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class LogTimeEntry;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLSingleVarLogItem;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class CMS_TIME;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLErrorAppender;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace utils{
			class StrToInt;
		} // end namespace rcs
	} // end namespace utils
	namespace rcs{
		namespace utils{
			class CorrectedPipedInputStreamInterface;
		} // end namespace rcs
	} // end namespace utils
	namespace rcs{
		namespace utils{
			class StrToLong;
		} // end namespace rcs
	} // end namespace utils
	namespace diagapplet{
		namespace plotter{
			class PlotData;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		namespace plotter{
			class ColorEditor;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		namespace plotter{
			class plotter_NB_UI;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		class MessageFileJFrame;
	} // end namespace diagapplet
	namespace diagapplet{
		class HierarchyPanel;
	} // end namespace diagapplet
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenCommon;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace utils{
			class FastListPanelInterface;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class ModifiedFileDialog;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class WatchVarEditor;
		} // end namespace diagapplet
	} // end namespace utils
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class View3DDragEnum;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class FXMLController;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class MainApp1;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class MainJFrame;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class EvaluationRmsChecker;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class MultivariateJacobianFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class ParameterValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class LeastSquaresBuilder;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class LeastSquaresFactory;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class GaussianCurveFitter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class PolynomialCurveFitter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class GaussianFitter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class HarmonicCurveFitter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							class PolynomialFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							class PolynomialsUtils;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class UnivariateDifferentiableFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class DerivativeStructure;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class MultivariateDifferentiableFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								class HermiteRuleFactory;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							class IterativeLegendreGaussIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							class UnivariateIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							class MidPointIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							class LegendreGaussIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class UnivariateDifferentiableSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class NewtonRaphsonSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class AllowedSolution;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class BivariateFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class AdamsNordsieckTransformer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							class StepNormalizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							class DummyStepHandler;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								namespace util{
									class QuasiSigmoidDecayFunction;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace ml
			} // end namespace neuralnet
		} // end namespace sofm
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace oned{
								class NeuronString;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class VectorialCovariance;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class WeightedEvaluation;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class UnivariateStatistic;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace ranking{
							class NaturalRanking;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace ranking
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							class BinomialConfidenceInterval;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									class PowellOptimizer;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class LeastSquaresConverter;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							class BracketFinder;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class SimpleValueChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class ProperBigFractionFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class FractionConversionException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class BigFraction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class LevyDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class GumbelDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class CauchyDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class BSPTree;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class SymmLQ;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class LUDecomposition;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class IllConditionedOperatorException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class Array2DRowFieldMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class NonSymmetricMatrixException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class CholeskyDecomposition;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class DefaultRealMatrixPreservingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class BlockFieldMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class Array2DRowRealMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class DefaultFieldMatrixPreservingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class SingularMatrixException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class DecompositionSolver;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RealVectorFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class FieldMatrixPreservingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class FieldVector;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class NonSelfAdjointOperatorException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class FieldMatrixChangingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RealVectorChangingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RealVectorPreservingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RealMatrixChangingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class MatrixDimensionMismatchException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace crcl{
		namespace base{
			class ActuateJointsType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class MessageType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class AngleUnitEnumType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class TransAccelAbsoluteType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class TorqueUnitEnumType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class TransSpeedRelativeType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class RunProgramType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class Charsets;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class PathFileComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class SizeFileComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class CanWriteFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class HiddenFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class RegexFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class HexDump;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace dom{
							class DOMBuilder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace dom
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class TypedTypeEncoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						class SkipRootElementXMLReader;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class BinaryHexValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class DateTimeValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class IntegerValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class ValueType;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLAppletElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLBRElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLDOMImplementationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLIFrameElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLOListElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				class WMLElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLEmElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLNoopElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLSelectElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLTrElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLBrElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLCardElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLImgElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLInputElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLMetaElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLNoopElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLOneventElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLOptgroupElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLOptionElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLPElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLPostfieldElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLPrevElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLRefreshElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLSelectElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLSetvarElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLSmallElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLStrongElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLTableElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLTdElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLTemplateElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLTimerElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLTrElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLUElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLWmlElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASAttributeDeclaration;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASContentModel;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASDataType;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASElementDeclaration;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASEntityDeclaration;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASModel;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASNamedObjectMap;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASNotationDeclaration;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASObject;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ASObjectList;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class CharacterDataEditAS;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class DOMASBuilder;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class DOMASException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class DOMASWriter;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class DOMImplementationAS;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class DocumentAS;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class DocumentEditAS;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class ElementEditAS;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						class NodeEditAS;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class ASDOMImplementationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class ASModelImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class AttributeMap;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMConfigurationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMErrorImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMImplementationListImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMInputImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMLocatorImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMMessageFormatter;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMNormalizer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMOutputImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMStringListImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DOMXSImplementationSourceImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredAttrImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredAttrNSImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredCDATASectionImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredCommentImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredDOMImplementationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredDocumentImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredDocumentTypeImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredElementDefinitionImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredElementNSImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredEntityImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredEntityReferenceImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredNode;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredNotationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredProcessingInstructionImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DeferredTextImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class DocumentFragmentImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLNSDTDValidator;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class ExtendedSchemaDVFactoryImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace validation{
						class ConfigurableValidationState;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class CaseInsensitiveMap;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSAttributeDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSAttributeUseImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSComplexTypeDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSDDescription;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSDeclarationPool;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSElementDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSGroupDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSMessageFormatter;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XSModelImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class XSCMRepeatingLeaf;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDAttributeGroupTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDAttributeTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDGroupTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDKeyrefTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDNotationTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDUniqueOrKeyTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDWildcardTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDocumentInfo;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class ShortListImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class SimpleLocator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class XInt;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class XSGrammarPool;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class XSNamedMap4Types;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class DefaultValidationErrorHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class DocumentBuilderFactoryImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class JAXPConstants;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class JAXPValidatorComponent;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class SAXParserImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class UnparsedEntityHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						class SerializedDuration;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						class XMLGregorianCalendarImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class EmptyXMLSchema;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class ReadOnlyGrammarPool;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class ErrorHandlerProxy;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class ErrorHandlerWrapper;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class JAXPNamespaceContextWrapper;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					class XIncludeNamespaceSupport;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSComplexTypeDefinition;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSModel;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSObject;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						class ByteList;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class DOMSerializer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class SecuritySupport;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace javax{
		namespace xml{
			namespace namespace{
				class QName;
			} // end namespace javax
		} // end namespace xml
	} // end namespace namespace
	namespace javax{
		namespace xml{
			namespace stream{
				class FactoryConfigurationError;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLReporter;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class Characters;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class Comment;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class ProcessingInstruction;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace transform{
				class ErrorListener;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					class TransformerHandler;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax
	namespace javax{
		namespace xml{
			namespace transform{
				namespace stax{
					class StAXResult;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stax
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPath;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace org{
		namespace w3c{
			namespace dom{
				class DOMException;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class Element;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class Notation;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				namespace bootstrap{
					class DOMImplementationRegistry;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace bootstrap
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class Counter;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					class Event;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLAppletElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLDListElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLFrameElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLInputElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLMetaElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLPreElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLTableElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSInput;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSSerializerFilter;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					class StyleSheetList;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets
	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					class XPathException;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath
	namespace org{
		namespace xml{
			namespace sax{
				class Parser;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					class Attributes2Impl;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class XMLReaderAdapter;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace crcl{
		namespace utils{
			class PerfTest;
		} // end namespace crcl
	} // end namespace utils
	namespace rcsdesign{
		class rcsDesignUserAbortException;
	} // end namespace rcsdesign
	namespace rcsdesign{
		class ListElement;
	} // end namespace rcsdesign
	namespace rcsdesign{
		class AlertDialog;
	} // end namespace rcsdesign
	namespace rcsdesign{
		class QueryStringDialog;
	} // end namespace rcsdesign
	namespace rcsdesign{
		class Merger;
	} // end namespace rcsdesign
	namespace rcs{
		namespace posemath{
			class PmLine;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace nml{
			class RCS_CMD_MSG;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLException;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLConnectionInterface;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NML_ERROR;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLConfigInfo;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class perftypeMsgDict;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace utils{
			class SimpleFileFilter;
		} // end namespace rcs
	} // end namespace utils
	namespace rcs{
		namespace utils{
			class rcs_states;
		} // end namespace rcs
	} // end namespace utils
	namespace rcs{
		namespace utils{
			class CorrectedPipedInputStream;
		} // end namespace rcs
	} // end namespace utils
	namespace diagapplet{
		namespace plotter{
			class ColorRenderer;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		namespace plotter{
			class StatsTextJFrame;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		class diagappletJFrame;
	} // end namespace diagapplet
	namespace diagapplet{
		class plotTrackerPreserve;
	} // end namespace diagapplet
	namespace diagapplet{
		class diag_NB_UI;
	} // end namespace diagapplet
	namespace diagapplet{
		namespace CodeGen{
			class info_array_elem_info;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class ModuleInfoInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class C_Generator;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace utils{
			class URLLoadInfoJPanel;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class DiagErrorAppendInterface;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class WatchTableModel;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class FastListContainer;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class WatchJPanel;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class ImageJPanel;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class WatchVar;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class ImagePainter;
		} // end namespace diagapplet
	} // end namespace utils
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class Track;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class TrackPoint;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class CsvParseOptions;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class Scene3DController;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class TrackUtils;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class LeastSquaresProblem;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class LeastSquaresOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class OptimumImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class DenseWeightedEvaluation;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class LeastSquaresAdapter;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class LevenbergMarquardtOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class GaussNewtonOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							class ValueAndJacobianFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class PolynomialFitter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class WeightedObservedPoint;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class WeightedObservedPoints;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class SimpleCurveFitter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						class HarmonicFitter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							class PolynomialSplineFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							class PolynomialFunctionNewtonForm;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							class PolynomialFunctionLagrangeForm;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class DSCompiler;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class UnivariateVectorFunctionDifferentiator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class UnivariateDifferentiableMatrixFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class JacobianFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class GradientFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class FiniteDifferencesDifferentiator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Acos;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Logistic;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Log1p;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Multiply;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Constant;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Cbrt;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Logit;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class HarmonicOscillator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Log10;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Sinh;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Ulp;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Max;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class DifferentiableUnivariateSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class SecantSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class AkimaSplineInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class DifferentiableUnivariateMatrixFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class AdamsMoultonIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class HighamHall54StepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							class StepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							class LevenbergMarquardtOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class SimplexOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class BOBYQAOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							class LinearConstraint;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							class UnboundedSolutionException;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							class WeightedObservedPoint;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class PointValuePair;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class OptimizationData;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class PointVectorValuePair;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class BaseMultivariateSimpleBoundsOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class MultivariateOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class DifferentiableMultivariateMultiStartOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						class ComplexUtils;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						class BracketingNthOrderBrentSolverDFP;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						class DfpDec;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						class Gamma;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace special
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace primes{
						class Primes;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace primes
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace primes{
						class PollardRho;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace primes
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						class DefaultMeasurementModel;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						class ProcessModel;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						class KalmanFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								namespace jacobian{
									class GaussNewtonOptimizer;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace vector
	} // end namespace jacobian
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								class Target;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								class ModelFunctionJacobian;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								class ModelFunction;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									class NelderMeadSimplex;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									class SimplexOptimizer;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class ObjectiveFunctionGradient;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class MultivariateFunctionPenaltyAdapter;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								class LineSearch;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class LinearConstraintSet;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class OptimizationProblem;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class TransformType;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								class Arc;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								class SubLimitAngle;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								class Sphere1D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								class EdgesBuilder;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								class PropertiesComputer;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								class SphericalPolygonsSet;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								class SubCircle;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								class S2Point;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								class Circle;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								class Vertex;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								class Edge;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								class Sphere2D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace enclosing{
							class EnclosingBall;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace enclosing
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace enclosing{
							class SupportBallGenerator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace enclosing
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class SphericalCoordinates;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class Plane;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class Vector3DFormat;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class Euclidean3D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class Rotation;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class FieldRotation;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								class Vector2DFormat;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								class PolygonsSet;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								class SubLine;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								class Vector2D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								class Interval;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								class Vector1D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace utilities{
								class AVLTree;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace utilities
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class BoundaryProjector;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class InsideFinder;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						class Point;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace geometry
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						class Space;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace geometry
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class SingularOperatorException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class EigenDecomposition;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RRQRDecomposition;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							class DummyLocalizable;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class Combinations;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class OpenIntToFieldHashMap;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class IterationListener;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class NumberTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class FastMath;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class Incrementor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace crcl{
		namespace base{
			class SetTransSpeedType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetForceUnitsType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class RotAccelRelativeType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class EmptyFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class FalseFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class FileFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class PrefixFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class FileUtils;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class ReaderInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class ReversedLinesFileReader;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class SwappedDataInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class Tailer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class XmlStreamReader;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class LineIterator;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						class FileAlterationListener;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						class FileAlterationListenerAdaptor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						class FileAlterationMonitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						class FileAlterationObserver;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						class FileEntry;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class BrokenOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class ByteArrayOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class CountingOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class FileWriterWithEncoding;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class ProxyWriter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class EXIHeaderEncoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class StartElement;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class BuiltInElement;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class BuiltInGrammar;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class BuiltInStartTag;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class Document;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class Grammar;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class GrammarType;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class SchemaInformedElement;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class SchemaInformedFirstStartTagGrammar;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class SchemaInformedFragmentContent;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							class SchemaInformedGrammar;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						class Grammars;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace production{
							class Production;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace production
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace production{
							class SchemaInformedProduction;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace production
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						class SchemaInformedGrammars;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace helpers{
						class DefaultErrorHandler;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace helpers
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace helpers{
						class DefaultEXIFactory;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace helpers
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace helpers{
						class DefaultSchemaIdResolver;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace helpers
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						class BitInputStream;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace io
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						class BitOutputStream;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace io
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							class BitDecoderChannel;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							class BitEncoderChannel;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							class ByteEncoderChannel;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class TypedTypeDecoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						class SkipRootElementXMLEventReader;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class BinaryBase64Value;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class BooleanValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class DecimalValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class FloatValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class IntegerValueType;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class ListValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class QNameValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class StringValue;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						class Value;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class EXIRegularExpression;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLAnchorElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLButtonElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLCollectionImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLHtmlElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLTitleElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class ObjectFactory;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class SecuritySupport;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				class WMLAnchorElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLFieldsetElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLOneventElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLSetvarElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLUElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLElementDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLNotationDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class CMAny;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class CMLeaf;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class ContentModelValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class MixedContentModel;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class DVFactoryException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class DatatypeValidator;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class InvalidDatatypeValueException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class SecuritySupport;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class XML11DTDDVFactoryImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class FloatDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class FullDVFactory;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class IntegerDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class MonthDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class QNameDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class YearMonthDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace validation{
						class EntityState;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace validation{
						class ValidationManager;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class Op;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class ParserForXMLSchema;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class REUtil;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class RangeToken;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class ElementPSVImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class SchemaSymbols;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XMLSchemaLoader;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class XSEmptyCM;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class AttrImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class NamedNodeMapImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class SchemaDOM;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class SchemaParsingConfig;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class SmallContainer;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class StAXSchemaParser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDElementTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDHandler;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						class DurationImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class DOMResultBuilder;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class DraconianErrorHandler;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class JAXPValidationMessageFormatter;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class SimpleXMLSchema;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class StAXDocumentHandler;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class StAXEventResultBuilder;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class StreamValidatorHelper;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class WeakReferenceXMLSchema;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class CachingParserPool;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class DOMParser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class DTDParser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class IntegratedParserConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class ObjectFactory;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class SecurityConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class SoftReferenceSymbolTableConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XIncludeParserConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XML11DTDConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XML11NonValidatingConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					class DefaultNamespaceContext;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace stax
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					class XMLEventFactoryImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace stax
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class EntityDeclarationImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class NotationDeclarationImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class AugmentationsImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class DOMErrorHandlerWrapper;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class DOMUtil;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class IntStack;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class LocatorProxy;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					class XIncludeMessageFormatter;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class Augmentations;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class NamespaceContext;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class QName;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class XMLAttributes;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class XMLDTDHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class XMLDocumentHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						class Grammar;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						class XMLDTDDescription;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						class XMLGrammarPool;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						class XSGrammar;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLComponentManager;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLDTDContentModelFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLDTDFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLDocumentFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLDocumentScanner;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLPullParserConfiguration;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					class ShortHandPointer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					class XPointerMessageFormatter;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					class XPointerProcessor;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class ElementPSVI;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class LSInputList;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class PSVIProvider;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSAnnotation;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSIDCDefinition;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSNamespaceItem;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSTypeDefinition;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						class XSFloat;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class OutputFormat;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace javax{
		namespace xml{
			namespace stream{
				class FactoryFinder;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLEventReader;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLStreamReader;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class EntityDeclaration;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace util{
					class EventReaderDelegate;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace util
	namespace javax{
		namespace xml{
			namespace transform{
				class Result;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				class Source;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				class URIResolver;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace validation{
				class SecuritySupport;
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathFunction;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace org{
		namespace w3c{
			namespace dom{
				class DOMImplementation;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class DocumentType;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class NodeList;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSImportRule;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSStyleRule;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class ElementCSSInlineStyle;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					class EventTarget;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLBaseElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLDocument;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLHeadElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLLabelElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLObjectElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLOptGroupElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLStyleElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLTitleElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace traversal{
					class NodeIterator;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace traversal
	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					class XPathNamespace;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath
	namespace org{
		namespace xml{
			namespace sax{
				class ErrorHandler;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				class SAXParseException;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					class LexicalHandler;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class NamespaceSupport;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace crcl{
		namespace utils{
			class SimServerOuterStub;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class SimServerOuter;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class SimServerInner;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class MultiLineStringJPanel;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class ObjTableJPanel;
		} // end namespace crcl
	} // end namespace utils
	namespace pvjscript{
		class ProcessView;
	} // end namespace pvjscript
	namespace rcsdesign{
		class rcsDesign;
	} // end namespace rcsdesign
	namespace rcs{
		namespace posemath{
			class PM_POSE;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_CYLINDRICAL;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_CARTESIAN;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace nml{
			class MsgToTimeStamp;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NonBlockingDatagramSocket;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLMessageDictionary;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class XDRFormatConverter;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class debugInfo;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class PackedFileWriter;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NML_TEXT;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NML_DISPLAY;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NMLSingleVarLog;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace utils{
			class CorrectedPipedOutputStream;
		} // end namespace rcs
	} // end namespace utils
	namespace rcs{
		namespace utils{
			class CorrectedPipedOutputStreamInterface;
		} // end namespace rcs
	} // end namespace utils
	namespace rcs{
		namespace utils{
			class CorrectedPipeData;
		} // end namespace rcs
	} // end namespace utils
	namespace rcs{
		namespace utils{
			class StackTracePrinter;
		} // end namespace rcs
	} // end namespace utils
	namespace diagapplet{
		class diag_NB_UI_ConnectToAll_Status;
	} // end namespace diagapplet
	namespace diagapplet{
		namespace plotter{
			class PlotGraphJPanel;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		class diagPreserve;
	} // end namespace diagapplet
	namespace diagapplet{
		namespace CodeGen{
			class StructureTypeInfo;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenFrame;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class ServerInfo;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace utils{
			class ImageJFrame;
		} // end namespace diagapplet
	} // end namespace utils
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class View3DPlotJPanel;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					class CsvParseOptionsJPanel;
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class BrentSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class NewtonSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class LinearInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class TricubicFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class TricubicInterpolatingFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class MultivariateInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class BicubicSplineFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class SmoothingPolynomialBicubicSplineInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class TricubicSplineInterpolatingFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class UnivariateMatrixFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class ParametricUnivariateFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class EulerStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							class StepNormalizerBounds;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							class ConjugateGradientFormula;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class MultivariateDifferentiableVectorMultiStartOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								class NeighbourhoodSizeFunction;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								class KohonenTrainingTask;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							class Clusterable;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							class CentroidCluster;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							class MultiKMeansPlusPlusClusterer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							class DoublePoint;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							class FuzzyKMeansClusterer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class RandomData;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class RandomDataGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class SobolSequenceGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class JDKRandomGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class RandomGeneratorFactory;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class Well1024a;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class ValueServer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class UncorrelatedRandomVectorGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class Well44497a;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class UniformRandomGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class SynchronizedRandomGenerator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class MersenneTwister;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						class Well512a;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							class ModelSpecificationException;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							class UpdatingMultipleLinearRegression;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							class RegressionResults;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							class MillerUpdatingRegression;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class TTest;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class ChiSquareTest;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class GTest;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class AlternativeHypothesis;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class BinomialTest;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace summary{
								class SumOfLogs;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace summary
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace summary{
								class SumOfSquares;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace summary
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								class Min;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								class Median;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class SynchronizedSummaryStatistics;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class StatisticalSummary;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						class Quaternion;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									class CMAESOptimizer;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							class UnivariateObjectiveFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class UnboundedSolutionException;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class SimplexSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class Relationship;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class SimpleBounds;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class InitialGuess;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class MaxIter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class MaxEval;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class SimplePointChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class SimpleVectorValueChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class PointVectorValuePair;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class ProperFractionFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace hull{
							class ConvexHullGenerator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace hull
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace hull{
							class ConvexHull;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace hull
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								class ArcsSet;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								class S1Point;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								class LimitAngle;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							class Localizable;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							class ExceptionContextProvider;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class Decimal64;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class MathUtils;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class BigReal;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class MathArrays;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace crcl{
		namespace base{
			class CRCLProgramType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class VectorType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetEndEffectorType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetTorqueUnitsType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class ConfigureJointReportType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetRotAccelType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetAngleUnitsType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class CommandStatusType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class RotSpeedRelativeType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class RotAccelAbsoluteType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetMotionCoordinationType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class ActuateJointType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class CompositeFileComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class CopyUtils;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class FileDeleteStrategy;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class DelegateFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class MagicNumberFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class SuffixFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class CloseShieldOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class DeferredFileOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class TaggedOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace dom{
							class SaxToDomHandler;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace dom
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							class SAXEncoderExtendedHandler;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							class SAXHandler;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace stream{
							class StAXDecoder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace stream
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						class AttributeListSchemaInformed;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace cmd{
						class SchemaOption;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace cmd
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class CodingMode;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class Constants;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						class GrammarContext;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						class GrammarUriContext;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						class UriContext;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							class DocType;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							class NamespaceDeclaration;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							class PreReadValue;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							class ProcessingInstruction;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							class ValueAndDatatype;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class EXIBodyEncoderInOrderSC;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class EXIHeaderDecoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class BooleanDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class CodePointCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class RestrictedCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class XSDDateTimeCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class StringTypeDecoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class StringTypeEncoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						class MethodsBag;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLAreaElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLDListElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLHeadingElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLLegendElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLLinkElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLMapElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLMenuElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLMetaElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLModElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLOptGroupElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLOptionElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLParagraphElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLParamElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLPreElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLQuoteElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLScriptElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLSelectElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLStyleElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLTableCaptionElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLTableCellElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLTableColElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLTableElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLTableRowElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLTableSectionElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLTextAreaElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLUListElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class NameNodeListImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				class WMLAElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLAccessElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLBElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLBrElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLGoElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLOptgroupElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLSmallElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLWmlElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLDOMImplementationImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class NodeIteratorImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class NodeListCache;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class PSVIAttrNSImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class PSVIElementNSImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					class RangeImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class RevalidationHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XML11NSDocumentScannerImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLEntityDescription;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLErrorReporter;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLNSDocumentScannerImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLVersionDetector;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class BalancedDTDGrammar;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XML11DTDProcessor;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XML11NSDTDValidator;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLDTDDescription;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class CMStateSet;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class InvalidDatatypeFacetException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class ObjectFactory;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class XSSimpleType;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class StringDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class XML11NMTOKENDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace util{
							class HexBin;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class Base64BinaryDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class DayDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class ListDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class SchemaDateTimeException;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class UnionDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class XSSimpleTypeDelegate;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						class ASCIIReader;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						class UCSReader;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace msg{
						class XMLMessageFormatter;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace msg
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						class XPath;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xpath
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class Match;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class ParseException;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSElementDeclaration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSException;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSMultiValueFacet;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSSimpleTypeDefinition;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class ElementState;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class Serializer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace javax{
		namespace xml{
			namespace datatype{
				class SecuritySupport;
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype
	namespace javax{
		namespace xml{
			namespace stream{
				class Location;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				class StreamFilter;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLStreamConstants;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class EndDocument;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class StartElement;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace transform{
				class FactoryFinder;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				class SourceLocator;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				namespace dom{
					class DOMLocator;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace dom
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathFactory;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace org{
		namespace apache{
			namespace xmlcommons{
				class Version;
			} // end namespace org
		} // end namespace apache
	} // end namespace xmlcommons
	namespace org{
		namespace w3c{
			namespace dom{
				class Attr;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class CDATASection;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class DOMImplementationSource;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class Entity;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class Text;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class TypeInfo;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSCharsetRule;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSRule;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSRuleList;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class DOMImplementationCSS;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					class EventException;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLAreaElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLDirectoryElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLFrameSetElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLIsIndexElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLModElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLQuoteElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLTableRowElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLTableSectionElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSOutput;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ranges{
					class Range;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ranges
	namespace org{
		namespace w3c{
			namespace dom{
				namespace traversal{
					class NodeFilter;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace traversal
	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					class XPathNSResolver;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath
	namespace org{
		namespace xml{
			namespace sax{
				class EntityResolver;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				class SAXNotSupportedException;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class XMLReaderFactory;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace rcsdesign{
		class rcsdesignFrame;
	} // end namespace rcsdesign
	namespace rcs{
		namespace posemath{
			class testpm;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace posemath{
			class PM_RPY;
		} // end namespace rcs
	} // end namespace posemath
	namespace diagapplet{
		class PainterInterface;
	} // end namespace diagapplet
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenCommonInterface2;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class STI_TokenizerInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		class diag_update_interface;
	} // end namespace diagapplet
	namespace diagapplet{
		namespace utils{
			class FastListPanel;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class CountButton;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class URLLoadInfoPanelInterface;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class JListFastListPanel;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class URLLoadInfoPanel;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		namespace utils{
			class fullScreenJPanelClass;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		class modulePreserve;
	} // end namespace diagapplet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Atanh;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Log;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Tanh;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Pow;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Asin;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Exp;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Signum;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class LaguerreSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class FieldHermiteInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class TricubicInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class BicubicFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class BicubicInterpolatingFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class BicubicInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class UnivariatePeriodicInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class MicrosphereInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class BicubicSplineInterpolatingFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class TricubicSplineFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class TrivariateGridInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class TricubicSplineInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class DividedDifferenceInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class HermiteInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class UnivariateInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class BivariateGridInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class TrivariateFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class FunctionUtils;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class DifferentiableMultivariateFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class LutherStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class ThreeEighthesIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class GillStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class LutherIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class DormandPrince853StepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class GillIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class MidpointStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class GraggBulirschStoerIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class ThreeEighthesStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class ODEIntegrator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class FirstOrderDifferentialEquations;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class SecondaryEquations;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class Parameterizable;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class ParameterizedODE;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class MainStateJacobianProvider;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class SecondOrderDifferentialEquations;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class ParameterJacobianProvider;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class ParameterizedWrapper;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							class StepHandler;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							class Preconditioner;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								class LearningFactorFunction;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								class KohonenUpdateAction;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							class SimpleRegression;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							class GLSMultipleLinearRegression;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class KolmogorovSmirnovTest;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class TestUtils;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class OneWayAnova;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class WilcoxonSignedRankTest;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							class MannWhitneyUTest;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace summary{
								class Sum;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace summary
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace summary{
								class Product;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace summary
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								class Max;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class Kurtosis;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class Skewness;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class StatisticalSummaryValues;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class StatisticalMultivariateSummary;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							class DBSCANClusterer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							class EuclideanIntegerPoint;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							class Clusterable;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							class Cluster;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							class KendallsCorrelation;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							class StorelessBivariateCovariance;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							class SpearmansCorrelation;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace ranking{
							class NaNStrategy;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace ranking
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							class IntervalUtils;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							class AgrestiCoullInterval;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							class WilsonScoreInterval;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							class ConfidenceInterval;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						class StatUtils;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace stat
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						class Frequency;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace stat
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class InvalidRepresentationException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class UniformCrossover;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class OnePointCrossover;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class BinaryChromosome;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class FixedElapsedTime;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class OrderedCrossover;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class CycleCrossover;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class RandomKey;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class PermutationChromosome;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class BinaryMutation;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class ElitisticListPopulation;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class SelectionPolicy;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class TournamentSelection;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class GeneticAlgorithm;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class ChromosomePair;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class CrossoverPolicy;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class NPointCrossover;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class RandomKeyMutation;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class MutationPolicy;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class Fitness;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class Population;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class StoppingCondition;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						class FixedGenerationCount;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						class ComplexField;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						class Complex;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace gradient{
									class Preconditioner;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace gradient
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class PivotSelectionRule;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class SolutionCallback;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class ConvergenceChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class EnumeratedRealDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class EnumeratedIntegerDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class ConstantRealDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class GammaDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class TDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class LogisticDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class LaplaceDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class UniformIntegerDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class HypergeometricDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class MultivariateNormalDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class MixtureMultivariateNormalDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class MultivariateRealDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class NakagamiDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class IntegerDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class FastHadamardTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class TransformUtils;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class DftNormalization;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class FastFourierTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class RealTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class FastSineTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class DstNormalization;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								class Line;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								class Segment;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								class Euclidean2D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								class NestedLoops;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								class OrientedPoint;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								class Vector1DFormat;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								class IntervalsSet;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								class Euclidean1D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								class SubOrientedPoint;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace utilities{
								class OrderedTuple;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace utilities
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class BoundaryAttribute;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class Characterization;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class NodesSet;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class Embedding;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class BoundaryBuilder;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class Region;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class Side;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class SubHyperplane;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class DefaultRealMatrixChangingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class SchurTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class ArrayFieldVector;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class RealMatrixFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							class ArgUtils;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							class LocalizedFormats;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MathInternalError;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NotFiniteNumberException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class ZeroException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NoBracketingException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NotANumberException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NonMonotonicSequenceException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MathUnsupportedOperationException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class OutOfRangeException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NotPositiveException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NotStrictlyPositiveException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MathArithmeticException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NumberIsTooLargeException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class TooManyIterationsException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class TooManyEvaluationsException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NoDataException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class NullArgumentException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class ContinuedFraction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class CombinatoricsUtils;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class RandomPivotingStrategy;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class BigRealField;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class ArithmeticUtils;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class ResizableDoubleArray;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class OpenIntToDoubleHashMap;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class DefaultTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						class IterationManager;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util
	namespace crcl{
		namespace base{
			class TransSpeedAbsoluteType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class PoseToleranceType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class StopMotionType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class ConfigureJointReportsType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class CRCLCommandInstanceType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetRotSpeedType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class ParallelGripperStatusType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class LengthUnitEnumType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class SetEndEffectorParametersType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class ThreeFingerGripperStatusType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class ExtensionFileComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class DirectoryWalker;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class FileExistsException;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class DirectoryFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class NameFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class ClosedOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class DemuxOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class LockableFileWriter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class TaggedIOException;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace dom{
							class DOMWriter;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace dom
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							class EXIResult;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							class EXISource;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							class SAXDecoder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace stream{
							class EmptyLocation;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace stream
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace stream{
							class StAXEncoder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace stream
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						class AttributeFactory;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						class AttributeList;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						class AttributeListSchemaLess;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace cmd{
						class CmdOption;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace cmd
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace cmd{
						class EXIficientCMD;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace cmd
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						class QNameContext;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class EXIBodyDecoderInOrderSC;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						class EXIBodyDecoderReordered;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class BinaryBase64Datatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class BooleanFacetDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class XSDBase64CharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class XSDDecimalCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class XSDHexBinaryCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							class XSDStringCharacterSet;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class DatatypeID;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class DatetimeDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class EnumerationDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class ListDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						class RestrictedCharacterSetDatatype;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							class BoundedStringDecoderImpl;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							class StringCoder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class DecodingOptions;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace exceptions{
						class ErrorHandler;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace exceptions
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace exceptions{
						class UnsupportedOption;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace exceptions
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace exceptions{
						class XMLParsingException;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace exceptions
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class EXIBodyEncoder;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class EXIStreamDecoder;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					class FidelityOptions;
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class Attribute;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class Characters;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class CharactersGeneric;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class DatatypeEvent;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class EndDocument;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							class EntityReference;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						class FragmentUtilities;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						namespace xml{
							class QNameUtilities;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace util
	} // end namespace xml
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLBaseElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLDirectoryElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLFrameElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLInputElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				class WMLDOMImplementation;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLIElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLPElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLTableElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLAccessElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLDocumentImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLIElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class DFAContentModel;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class ValidationContext;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class XSFacets;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class ENTITYDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class ListDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class XML11IDDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace util{
							class Base64;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class AnyAtomicDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class AnySimpleDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class AnyURIDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class BooleanDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class IDDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class PrecisionDecimalDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class StringDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class YearDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class YearMonthDurationDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						class MalformedByteSequenceException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						class UTF16Reader;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class XSDFACM;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class ElementImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class SchemaDOMImplementation;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class SchemaDOMParser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							class TextImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class LargeContainer;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class OneAttr;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class SchemaContentHandler;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSAnnotationInfo;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSAttributeChecker;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDComplexTypeTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							class XSDSimpleTypeTraverser;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class LSInputListImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class ObjectListImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class StringListImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class XIntPool;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class XSInputSource;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							class XSObjectListImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class DocumentBuilderImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class SAXParserFactoryImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					class SchemaValidatorConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						class DatatypeFactoryImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						class SerializedXMLGregorianCalendar;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class DOMDocumentHandler;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class DOMResultAugmentor;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class DOMValidatorHelper;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class StAXValidatorHelper;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class ValidatorHandlerImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class XMLSchemaFactory;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class SAXInputSource;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSAttributeUse;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSLoader;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSNotationDeclaration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSWildcard;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class HTMLdtd;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace javax{
		namespace xml{
			class XMLConstants;
		} // end namespace javax
	} // end namespace xml
	namespace javax{
		namespace xml{
			namespace datatype{
				class FactoryFinder;
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype
	namespace javax{
		namespace xml{
			namespace parsers{
				class FilePathToURI;
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLEventWriter;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLStreamWriter;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class EntityReference;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace util{
					class StreamReaderDelegate;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace util
	namespace javax{
		namespace xml{
			namespace transform{
				class Transformer;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				namespace dom{
					class DOMSource;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace dom
	namespace javax{
		namespace xml{
			namespace transform{
				namespace stream{
					class FilePathToURI;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace validation{
				class SchemaFactoryFinder;
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathFactoryConfigurationException;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathFunctionResolver;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace org{
		namespace w3c{
			namespace dom{
				class DOMConfiguration;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class DOMStringList;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class NameList;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class UserDataHandler;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSFontFaceRule;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSStyleDeclaration;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class DocumentCSS;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					class EventListener;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLBRElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLDivElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLHRElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLLIElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLOListElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLScriptElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSLoadEvent;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ranges{
					class DocumentRange;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ranges
	namespace org{
		namespace w3c{
			namespace dom{
				namespace traversal{
					class DocumentTraversal;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace traversal
	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					class XPathExpression;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath
	namespace org{
		namespace xml{
			namespace sax{
				class DocumentHandler;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					class DeclHandler;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class ParserFactory;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace crcl{
		namespace utils{
			class PendantClientOuter;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class SideViewJPanel;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class SimulatedKinematicsSimple;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class XpathQueryJFrame;
		} // end namespace crcl
	} // end namespace utils
	namespace rcsdesign{
		class InnerAppletRepainter;
	} // end namespace rcsdesign
	namespace rcs{
		namespace nml{
			class CMS_DATE;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class XMLFileReader;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class NML_ENUM_INFO;
		} // end namespace rcs
	} // end namespace nml
	namespace rcs{
		namespace nml{
			class PackedFormatConverter;
		} // end namespace rcs
	} // end namespace nml
	namespace diagapplet{
		namespace plotter{
			class PlotPoint;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		namespace plotter{
			class PlotterCommon;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		namespace plotter{
			class PlotLoader;
		} // end namespace diagapplet
	} // end namespace plotter
	namespace diagapplet{
		namespace CodeGen{
			class ChannelInfo;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenTextFieldWrapper;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenCommonInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class Ada_Generator;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenCodeTextAreaInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenTextAreaInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class CodeGenCmdLine;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class SplitInfoToken;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class DiagNMLMsgDict;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class DiagNMLMsgDictCreatorInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class ByteArrayObject;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class ModuleInfo;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace utils{
			class FastListPanelItem;
		} // end namespace diagapplet
	} // end namespace utils
	namespace diagapplet{
		class HierarchyDraw;
	} // end namespace diagapplet
	namespace diagapplet{
		class CodeFileInfo;
	} // end namespace diagapplet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Min;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Divide;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Identity;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Minus;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								class LegendreHighPrecisionRuleFactory;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							class RombergIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							class TrapezoidIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							class SimpsonIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class MullerSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class BracketingNthOrderBrentSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class BisectionSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class IllinoisSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class BracketedUnivariateSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class RegulaFalsiSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class UnivariateSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class PolynomialSolver;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class PiecewiseBicubicSplineInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class MicrosphereInterpolatingFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class UnivariateVectorFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class DifferentiableUnivariateFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class GraggBulirschStoerStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							class EventHandler;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							class FixedStepHandler;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								class LearningFactorFunctionFactory;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								class PSquarePercentile;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class SemiVariance;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class Mean;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class AggregateSummaryStatistics;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							class SynchronizedMultivariateSummaryStatistics;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							class EuclideanDoublePoint;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							class KMeansPlusPlusClusterer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							class StorelessCovariance;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							class PearsonsCorrelation;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace ranking{
							class TiesStrategy;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace ranking
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace ranking{
							class RankingAlgorithm;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace ranking
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							class NormalApproximationInterval;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							class ClopperPearsonInterval;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class LinearConstraint;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						class PointValuePair;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class Fraction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class ParetoDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class ExponentialDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class GeometricDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class BetaDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class PascalDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class NormalDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class SaddlePointExpansion;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class ZipfDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class EnumeratedDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class WeibullDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class KolmogorovSmirnovDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class FDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class BinomialDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						class RealDistribution;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class FastCosineTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						class DctNormalization;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							class BoundarySizeVisitor;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						class Vector;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace geometry
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class TriDiagonalTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class DefaultIterativeLinearSolverEvent;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class HessenbergTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class SparseFieldVector;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class BiDiagonalTransformer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class SingularValueDecomposition;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class MatrixUtils;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class NonPositiveDefiniteMatrixException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class FieldVectorChangingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class FieldVectorPreservingVisitor;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class SparseFieldMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class OpenMapRealVector;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class SparseRealMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class OpenMapRealMatrix;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						class ArrayRealVector;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							class ExceptionContext;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util
	namespace crcl{
		namespace base{
			class InitCanonType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class JointStatusesType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class JointStatusType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class MoveThroughToType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class StopConditionEnumType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class DirectoryFileComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class CanReadFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class OrFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class FilenameUtils;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class AutoCloseInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class BOMInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class BrokenInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class CharSequenceInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class ClosedInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class CountingInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class DemuxInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class NullInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class NullReader;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class ProxyReader;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class TaggedInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class TailerListener;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class TailerListenerAdapter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class TeeInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class XmlStreamReaderException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class IOCase;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class IOUtils;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class NullOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class NullWriter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class StringBuilderWriter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class TeeOutputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace dom{
							class DocumentFragmentBuilder;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace dom
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							class ByteDecoderChannel;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							class EncoderChannel;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class BuiltIn;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class IntegerType;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class TypeCoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						class NoEntityResolver;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLHeadElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLLabelElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				class WMLDoElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLImgElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLPostfieldElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLTdElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLAnchorElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLBElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLBigElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLDTDValidatorFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLEntityDecl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						class XMLSimpleType;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class CMBinOp;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class CMUniOp;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							class SimpleContentModel;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						class ValidatedInfo;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class NOTATIONDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							class XML11IDREFDatatypeValidator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace util{
							class ByteListImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class DateDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class DayTimeDurationDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class DoubleDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class HexBinaryDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class IDREFDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class MonthDayDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class SchemaDVFactoryImpl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class TimeDV;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							class XSSimpleTypeDecl;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class XSGrammarPoolContainer;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class DOMASBuilderImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class NonValidatingConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class SAXParser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class SecuritySupport;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XML11Configurable;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XMLDocumentParser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XMLGrammarCachingConfiguration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					class XMLGrammarPreparser;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					class EmptyLocation;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace stax
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class CommentImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class EndDocumentImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class EntityReferenceImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class ProcessingInstructionImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						class StartElementImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class DOMEntityResolverWrapper;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class DOMInputSource;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class DatatypeMessageFormatter;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class EncodingMap;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class StAXInputSource;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSFacet;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSNamedMap;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSTerm;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						class XSDecimal;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						class XSDouble;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class EncodingInfo;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class Encodings;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class SerializerFactoryImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					class TextSerializer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize
	namespace javax{
		namespace xml{
			namespace datatype{
				class DatatypeConfigurationException;
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype
	namespace javax{
		namespace xml{
			namespace stream{
				class SecuritySupport;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLResolver;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class DTD;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class StartDocument;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace transform{
				namespace stream{
					class StreamSource;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathConstants;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathExpression;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace org{
		namespace w3c{
			namespace dom{
				class Comment;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class DOMLocator;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class EntityReference;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSS2Properties;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class RGBColor;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					class MouseEvent;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLBaseFontElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLHeadingElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLLegendElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLSelectElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLTextAreaElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSParser;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSParserFilter;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					class DocumentStyle;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets
	namespace org{
		namespace w3c{
			namespace dom{
				namespace traversal{
					class TreeWalker;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace traversal
	namespace org{
		namespace w3c{
			namespace dom{
				namespace views{
					class AbstractView;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace views
	namespace org{
		namespace xml{
			namespace sax{
				class AttributeList;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				class InputSource;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				class XMLReader;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					class Attributes2;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class AttributeListImpl;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class ParserAdapter;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace crcl{
		namespace utils{
			class TestInstance;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class SimServer;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class CmdLineSimServer;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class AnnotatedPose;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class CRCLSocket;
		} // end namespace crcl
	} // end namespace utils
	namespace rcsdesign{
		class AlphabetizedList;
	} // end namespace rcsdesign
	namespace rcsdesign{
		class rcsdesignMainLoopInfo;
	} // end namespace rcsdesign
	namespace rcsdesign{
		class rcsDesignWriter;
	} // end namespace rcsdesign
	namespace rcs{
		namespace posemath{
			class Posemath;
		} // end namespace rcs
	} // end namespace posemath
	namespace rcs{
		namespace utils{
			class URL_and_FileLoader;
		} // end namespace rcs
	} // end namespace utils
	namespace diagapplet{
		class diag_common;
	} // end namespace diagapplet
	namespace diagapplet{
		namespace CodeGen{
			class DiagNMLMsgDictInterface;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		namespace CodeGen{
			class EnumTypeInfo;
		} // end namespace diagapplet
	} // end namespace CodeGen
	namespace diagapplet{
		class JPaintablePanel;
	} // end namespace diagapplet
	namespace diagapplet{
		class CodeDisplayPanel;
	} // end namespace diagapplet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class UnivariateDifferentiableVectorFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							class UnivariateFunctionDifferentiator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Sigmoid;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Atan2;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Sqrt;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class StepFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Power;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Gaussian;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Tan;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Floor;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Acosh;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Cos;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Add;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Atan;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							class Asinh;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								class GaussIntegratorFactory;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								class SymmetricGaussIntegrator;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							class MullerSolver2;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							class LoessInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class MultivariateMatrixFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						class MultivariateFunction;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class ClassicalRungeKuttaStepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class DormandPrince54StepInterpolator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class AdamsBashforthIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class HighamHall54Integrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class DormandPrince853Integrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class DormandPrince54Integrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							class MidpointIntegrator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class ContinuousOutputModel;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class FirstOrderIntegrator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class EquationsMapper;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class ExpandableStatefulODE;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class UnknownParameterException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class AbstractParameterizable;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class ParameterConfiguration;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class SecondOrderIntegrator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class ParameterJacobianWrapper;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						class FirstOrderConverter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							class Transformer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							class FilterType;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class PowellOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class NelderMeadSimplex;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class MultivariateFunctionMappingAdapter;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							class MultiDirectionalSimplex;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							class SimpleUnivariateValueChecker;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							class BaseUnivariateOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							class BrentOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							class UnivariateOptimizer;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class SimpleValueChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class MultivariateMultiStartOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class LeastSquaresConverter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class Weight;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class SimpleVectorValueChecker;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class InitialGuess;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class MultivariateDifferentiableMultiStartOptimizer;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						class SimpleBounds;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								namespace util{
									class ExponentialDecayFunction;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace ml
			} // end namespace neuralnet
		} // end namespace sofm
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								class NeighbourhoodSizeFunctionFactory;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class VectorialMean;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								class GeometricMean;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						class ComplexFormat;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						class DfpField;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						class BesselJ;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace special
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						class Erf;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace special
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace primes{
						class SmallPrimes;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace primes
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								class Weight;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								class MultiStartMultivariateVectorOptimizer;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class NonNegativeConstraint;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class NoFeasibleSolutionException;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							class LinearObjectiveFunction;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						class FractionField;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace enclosing{
							class Encloser;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace enclosing
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class OutlineExtractor;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class SubPlane;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class SphereGenerator;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class Segment;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class Line;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class CardanEulerSingularityException;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class RotationOrder;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class NotARotationMatrixException;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								class FieldVector3D;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									class MonotoneChain;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									class AklToussaintHeuristic;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									class ConvexHullGenerator2D;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									class ConvexHull2D;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								class DiskGenerator;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MathRuntimeException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class InsufficientDataException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						class MathParseException;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception
	namespace crcl{
		namespace base{
			class VacuumGripperStatusType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class GetStatusType;
		} // end namespace crcl
	} // end namespace base
	namespace crcl{
		namespace base{
			class RotSpeedAbsoluteType;
		} // end namespace crcl
	} // end namespace base
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						class DefaultFileComparator;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					class FileCleaningTracker;
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class ConditionalFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class IOFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						class SizeFileFilter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class CharSequenceReader;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class ClassLoaderObjectInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						class CloseShieldInputStream;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input
	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						class XmlStreamWriter;
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class LexicalTypeDecoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class LexicalTypeEncoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						class TypeEncoder;
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						namespace sort{
							class LexicographicSort;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace util
	} // end namespace sort
	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						namespace xml{
							class XMLWhitespace;
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace util
	} // end namespace xml
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLBaseFontElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLDivElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLFrameSetElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLHRElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLLIElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					class HTMLObjectElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace wml{
				class WMLMetaElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLRefreshElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				class WMLTimerElement;
			} // end namespace org
		} // end namespace apache
	} // end namespace wml
	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					class WMLGoElementImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					class XMLEntityManager;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						class XPathException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xpath
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							class BMPattern;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class PSVIErrorList;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class SchemaNamespaceSupport;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class SubstitutionGroupHandler;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XMLSchemaException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						class XMLSchemaValidator;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							class FieldActivator;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							class KeyRef;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							class Selector;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							class UniqueOrKey;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class CMNodeFactory;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class XSCMBinOp;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							class XSCMUniOp;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class SoftReferenceGrammarPool;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class StAXStreamResultBuilder;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class Util;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class ValidatorHelper;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class ValidatorImpl;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						class XMLSchema;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class SAXLocatorWrapper;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class SAXMessageFormatter;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class SecurityManager;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class ShadowedSymbolTable;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class SoftReferenceSymbolTable;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class StAXLocationWrapper;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class SymbolHash;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class SynchronizedSymbolTable;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class URI;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XML11Char;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XMLAttributesImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XMLChar;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XMLEntityDescriptionImpl;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XMLErrorCode;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XMLLocatorWrapper;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XMLStringBuffer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					class XMLSymbols;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					class ObjectFactory;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					class SecuritySupport;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					class XInclude11TextReader;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					class XMLResourceIdentifier;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						class XMLGrammarDescription;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						class XMLSchemaDescription;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLConfigurationException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLDTDScanner;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLEntityResolver;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						class XMLParseException;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					class ElementSchemePointer;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					class XPointerHandler;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class ShortList;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSAttributeDeclaration;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSImplementation;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSNamespaceItemList;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					class XSValue;
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs
	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						class XSQName;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes
	namespace javax{
		namespace xml{
			namespace datatype{
				class DatatypeConstants;
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype
	namespace javax{
		namespace xml{
			namespace parsers{
				class FactoryConfigurationError;
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers
	namespace javax{
		namespace xml{
			namespace stream{
				class EventFilter;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				class XMLInputFactory;
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class Attribute;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					class Namespace;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events
	namespace javax{
		namespace xml{
			namespace stream{
				namespace util{
					class XMLEventAllocator;
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace util
	namespace javax{
		namespace xml{
			namespace transform{
				class Templates;
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform
	namespace javax{
		namespace xml{
			namespace transform{
				namespace dom{
					class DOMResult;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace dom
	namespace javax{
		namespace xml{
			namespace transform{
				namespace stax{
					class StAXSource;
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stax
	namespace javax{
		namespace xml{
			namespace xpath{
				class SecuritySupport;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace javax{
		namespace xml{
			namespace xpath{
				class XPathVariableResolver;
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath
	namespace org{
		namespace w3c{
			namespace dom{
				class DOMError;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class Document;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				class NamedNodeMap;
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSMediaRule;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSStyleSheet;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class CSSUnknownRule;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					class Rect;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css
	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					class MutationEvent;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLBodyElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLFieldSetElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLHtmlElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLLinkElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLOptionElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLTableCaptionElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					class HTMLUListElement;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html
	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					class LSProgressEvent;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls
	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					class LinkStyle;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets
	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					class XPathResult;
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath
	namespace org{
		namespace xml{
			namespace sax{
				class HandlerBase;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				class XMLFilter;
			} // end namespace org
		} // end namespace xml
	} // end namespace sax
	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					class Locator2;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class NewInstance;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					class SecuritySupport;
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers
	namespace crcl{
		namespace utils{
			class PendantClient;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class CmdLineClient;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class CRCLSocketExample;
		} // end namespace crcl
	} // end namespace utils
	namespace crcl{
		namespace utils{
			class PendantClientInner;
		} // end namespace crcl
	} // end namespace utils
	namespace java{
		namespace util{
			class LinkedList;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace io{
			class File;
		} // end namespace java
	} // end namespace io
	namespace javax{
		namespace swing{
			namespace text{
				class Style;
			} // end namespace javax
		} // end namespace swing
	} // end namespace text
	namespace javax{
		namespace swing{
			class TransferHandler;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			class JMenuBar;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			class JRootPane;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			class JLayeredPane;
		} // end namespace javax
	} // end namespace swing
	namespace java{
		namespace awt{
			class Graphics;
		} // end namespace java
	} // end namespace awt
	namespace javax{
		namespace accessibility{
			class AccessibleContext;
		} // end namespace javax
	} // end namespace accessibility
	namespace java{
		namespace awt{
			class LayoutManager;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class Color;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class MenuBar;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class Rectangle;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class Shape;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace util{
			class Set;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace util{
			class ResourceBundle;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace awt{
			class BufferCapabilities;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			namespace image{
				class BufferStrategy;
			} // end namespace java
		} // end namespace awt
	} // end namespace image
	namespace java{
		namespace awt{
			class Cursor;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class Toolkit;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class Event;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace util{
			class List;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace awt{
			class Dimension;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class Point;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace util{
			class Locale;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace awt{
			namespace im{
				class InputContext;
			} // end namespace java
		} // end namespace awt
	} // end namespace im
	namespace java{
		namespace awt{
			namespace Dialog{
				class ModalExclusionType;
			} // end namespace java
		} // end namespace awt
	} // end namespace Dialog
	namespace java{
		namespace awt{
			namespace event{
				class WindowStateListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class WindowFocusListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class WindowListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace Window{
				class Type;
			} // end namespace java
		} // end namespace awt
	} // end namespace Window
	namespace java{
		namespace beans{
			class PropertyChangeListener;
		} // end namespace java
	} // end namespace beans
	namespace java{
		namespace awt{
			class FocusTraversalPolicy;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class ComponentOrientation;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class Insets;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			class Font;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			namespace event{
				class ContainerListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace io{
			class PrintStream;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace io{
			class PrintWriter;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace awt{
			class GraphicsConfiguration;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			namespace peer{
				class ComponentPeer;
			} // end namespace java
		} // end namespace awt
	} // end namespace peer
	namespace java{
		namespace awt{
			namespace dnd{
				class DropTarget;
			} // end namespace java
		} // end namespace awt
	} // end namespace dnd
	namespace java{
		namespace awt{
			namespace image{
				class ColorModel;
			} // end namespace java
		} // end namespace awt
	} // end namespace image
	namespace java{
		namespace awt{
			namespace Component{
				class BaselineResizeBehavior;
			} // end namespace java
		} // end namespace awt
	} // end namespace Component
	namespace java{
		namespace awt{
			class FontMetrics;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			namespace image{
				class ImageProducer;
			} // end namespace java
		} // end namespace awt
	} // end namespace image
	namespace java{
		namespace awt{
			namespace image{
				class VolatileImage;
			} // end namespace java
		} // end namespace awt
	} // end namespace image
	namespace java{
		namespace awt{
			class ImageCapabilities;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			namespace image{
				class ImageObserver;
			} // end namespace java
		} // end namespace awt
	} // end namespace image
	namespace java{
		namespace awt{
			namespace event{
				class ComponentListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class FocusListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class HierarchyListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class HierarchyBoundsListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class KeyListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class MouseListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class MouseMotionListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class MouseWheelListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class InputMethodListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace im{
				class InputMethodRequests;
			} // end namespace java
		} // end namespace awt
	} // end namespace im
	namespace java{
		namespace awt{
			class PopupMenu;
		} // end namespace java
	} // end namespace awt
	namespace java{
		namespace awt{
			namespace event{
				class ActionEvent;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace Dialog{
				class ModalityType;
			} // end namespace java
		} // end namespace awt
	} // end namespace Dialog
	namespace javax{
		namespace swing{
			namespace plaf{
				class PanelUI;
			} // end namespace javax
		} // end namespace swing
	} // end namespace plaf
	namespace javax{
		namespace swing{
			namespace border{
				class Border;
			} // end namespace javax
		} // end namespace swing
	} // end namespace border
	namespace javax{
		namespace swing{
			class JPopupMenu;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			class InputVerifier;
		} // end namespace javax
	} // end namespace swing
	namespace java{
		namespace awt{
			namespace event{
				class ActionListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace javax{
		namespace swing{
			class KeyStroke;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			class InputMap;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			class ActionMap;
		} // end namespace javax
	} // end namespace swing
	namespace java{
		namespace awt{
			namespace event{
				class MouseEvent;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace javax{
		namespace swing{
			class JToolTip;
		} // end namespace javax
	} // end namespace swing
	namespace java{
		namespace beans{
			class VetoableChangeListener;
		} // end namespace java
	} // end namespace beans
	namespace javax{
		namespace swing{
			namespace event{
				class AncestorListener;
			} // end namespace javax
		} // end namespace swing
	} // end namespace event
	namespace java{
		namespace awt{
			namespace image{
				class BufferedImage;
			} // end namespace java
		} // end namespace awt
	} // end namespace image
	namespace java{
		namespace awt{
			class Scrollbar;
		} // end namespace java
	} // end namespace awt
	namespace javax{
		namespace swing{
			class JScrollBar;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			class SwingWorker;
		} // end namespace javax
	} // end namespace swing
	namespace java{
		namespace lang{
			class Runnable;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace util{
			class Hashtable;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace net{
			class URL;
		} // end namespace java
	} // end namespace net
	namespace java{
		namespace applet{
			class AppletStub;
		} // end namespace java
	} // end namespace applet
	namespace java{
		namespace applet{
			class AppletContext;
		} // end namespace java
	} // end namespace applet
	namespace java{
		namespace applet{
			class AudioClip;
		} // end namespace java
	} // end namespace applet
	namespace java{
		namespace awt{
			namespace event{
				class TextListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace lang{
			class Long;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace util{
			class Vector;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace util{
			class Collection;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace io{
			class ObjectInput;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace io{
			class ObjectOutput;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace util{
			class Comparator;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace lang{
			class Iterable;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace util{
			class Iterator;
		} // end namespace java
	} // end namespace util
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							namespace KMeansPlusPlusClusterer{
								class EmptyClusterStrategy;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace clustering
	} // end namespace KMeansPlusPlusClusterer
	namespace java{
		namespace util{
			namespace stream{
				class IntStream;
			} // end namespace java
		} // end namespace util
	} // end namespace stream
	namespace java{
		namespace util{
			namespace stream{
				class LongStream;
			} // end namespace java
		} // end namespace util
	} // end namespace stream
	namespace java{
		namespace util{
			namespace stream{
				class DoubleStream;
			} // end namespace java
		} // end namespace util
	} // end namespace stream
	namespace java{
		namespace lang{
			class StringBuffer;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace text{
			class FieldPosition;
		} // end namespace java
	} // end namespace text
	namespace java{
		namespace text{
			class ParsePosition;
		} // end namespace java
	} // end namespace text
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace MultidimensionalCounter{
							class Iterator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace MultidimensionalCounter
	namespace java{
		namespace math{
			class BigDecimal;
		} // end namespace java
	} // end namespace math
	namespace java{
		namespace math{
			class BigInteger;
		} // end namespace java
	} // end namespace math
	namespace java{
		namespace util{
			class Enumeration;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace lang{
			class Boolean;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace lang{
			class ClassLoader;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace awt{
			namespace event{
				class ItemEvent;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class ItemListener;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace diagapplet{
		namespace utils{
			namespace SaveImage{
				class BAYER_PATTERN;
			} // end namespace diagapplet
		} // end namespace utils
	} // end namespace SaveImage
	namespace java{
		namespace awt{
			namespace event{
				class WindowEvent;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							namespace EventHandler{
								class Action;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ode
		} // end namespace events
	} // end namespace EventHandler
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace Region{
								class Location;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace Region
	namespace javax{
		namespace xml{
			namespace bind{
				class JAXBElement;
			} // end namespace javax
		} // end namespace xml
	} // end namespace bind
	namespace java{
		namespace io{
			class FilenameFilter;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace io{
			class FileFilter;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace util{
			class Date;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace lang{
			class Thread;
		} // end namespace java
	} // end namespace lang
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace XMLEntityManager{
						class ScannedEntity;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace XMLEntityManager
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace XMLDocumentFragmentScannerImpl{
						class Dispatcher;
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace XMLDocumentFragmentScannerImpl
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace XMLContentSpec{
							class Provider;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace XMLContentSpec
	namespace java{
		namespace nio{
			class CharBuffer;
		} // end namespace java
	} // end namespace nio
	namespace javax{
		namespace swing{
			class JTable;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			namespace event{
				class CellEditorListener;
			} // end namespace javax
		} // end namespace swing
	} // end namespace event
	namespace java{
		namespace io{
			class FileOutputStream;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace awt{
			namespace event{
				class KeyEvent;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace javafx{
		namespace stage{
			class Stage;
		} // end namespace javafx
	} // end namespace stage
	namespace javafx{
		namespace application{
			class HostServices;
		} // end namespace javafx
	} // end namespace application
	namespace javafx{
		namespace application{
			namespace Preloader{
				class PreloaderNotification;
			} // end namespace javafx
		} // end namespace application
	} // end namespace Preloader
	namespace javafx{
		namespace application{
			namespace Application{
				class Parameters;
			} // end namespace javafx
		} // end namespace application
	} // end namespace Application
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							namespace LeastSquaresProblem{
								class Evaluation;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace fitting
		} // end namespace leastsquares
	} // end namespace LeastSquaresProblem
	namespace java{
		namespace util{
			class Currency;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace math{
			class RoundingMode;
		} // end namespace java
	} // end namespace math
	namespace java{
		namespace text{
			class AttributedCharacterIterator;
		} // end namespace java
	} // end namespace text
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace BSPTree{
								class VanishingCutHandler;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace BSPTree
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace BSPTree{
								class LeafMerger;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace BSPTree
	namespace java{
		namespace nio{
			namespace charset{
				class Charset;
			} // end namespace java
		} // end namespace nio
	} // end namespace charset
	namespace java{
		namespace util{
			class ListIterator;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace util{
			class Map;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace util{
			class TimeZone;
		} // end namespace java
	} // end namespace util
	namespace java{
		namespace util{
			class GregorianCalendar;
		} // end namespace java
	} // end namespace util
	namespace javax{
		namespace swing{
			class Icon;
		} // end namespace javax
	} // end namespace swing
	namespace javax{
		namespace swing{
			namespace plaf{
				class LabelUI;
			} // end namespace javax
		} // end namespace swing
	} // end namespace plaf
	namespace javax{
		namespace swing{
			namespace event{
				class TableModelEvent;
			} // end namespace javax
		} // end namespace swing
	} // end namespace event
	namespace javax{
		namespace swing{
			namespace event{
				class TableModelListener;
			} // end namespace javax
		} // end namespace swing
	} // end namespace event
	namespace java{
		namespace awt{
			namespace event{
				class AdjustmentEvent;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace javax{
		namespace swing{
			namespace event{
				class ListSelectionListener;
			} // end namespace javax
		} // end namespace swing
	} // end namespace event
	namespace javax{
		namespace swing{
			namespace table{
				class TableCellEditor;
			} // end namespace javax
		} // end namespace swing
	} // end namespace table
	namespace javafx{
		namespace scene{
			namespace transform{
				class Scale;
			} // end namespace javafx
		} // end namespace scene
	} // end namespace transform
	namespace javafx{
		namespace scene{
			namespace transform{
				class Translate;
			} // end namespace javafx
		} // end namespace scene
	} // end namespace transform
	namespace javafx{
		namespace scene{
			class SubScene;
		} // end namespace javafx
	} // end namespace scene
	namespace javafx{
		namespace scene{
			class Scene;
		} // end namespace javafx
	} // end namespace scene
	namespace javafx{
		namespace scene{
			class Parent;
		} // end namespace javafx
	} // end namespace scene
	namespace javafx{
		namespace scene{
			namespace transform{
				class Rotate;
			} // end namespace javafx
		} // end namespace scene
	} // end namespace transform
	namespace java{
		namespace util{
			class HashMap;
		} // end namespace java
	} // end namespace util
	namespace javafx{
		namespace scene{
			namespace input{
				class MouseEvent;
			} // end namespace javafx
		} // end namespace scene
	} // end namespace input
	namespace java{
		namespace util{
			namespace stream{
				class Stream;
			} // end namespace java
		} // end namespace util
	} // end namespace stream
	namespace java{
		namespace util{
			namespace function{
				class ToDoubleFunction;
			} // end namespace java
		} // end namespace util
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							namespace LeastSquaresOptimizer{
								class Optimum;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace fitting
		} // end namespace leastsquares
	} // end namespace LeastSquaresOptimizer
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							namespace GaussNewtonOptimizer{
								class Decomposition;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace fitting
		} // end namespace leastsquares
	} // end namespace GaussNewtonOptimizer
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace SubHyperplane{
								class SplitSubHyperplane;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace SubHyperplane
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace BSPTreeVisitor{
								class Order;
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace BSPTreeVisitor
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace utilities{
								namespace AVLTree{
									class Node;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace partitioning
		} // end namespace utilities
	} // end namespace AVLTree
	namespace java{
		namespace lang{
			class Comparable;
		} // end namespace java
	} // end namespace lang
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace OpenIntToFieldHashMap{
							class Iterator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace OpenIntToFieldHashMap
	namespace java{
		namespace io{
			class FileInputStream;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace util{
			namespace zip{
				class Checksum;
			} // end namespace java
		} // end namespace util
	} // end namespace zip
	namespace java{
		namespace lang{
			class CharSequence;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace util{
			namespace concurrent{
				class ThreadFactory;
			} // end namespace java
		} // end namespace util
	} // end namespace concurrent
	namespace java{
		namespace lang{
			class Double;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace lang{
			class Float;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace text{
			class CharacterIterator;
		} // end namespace java
	} // end namespace text
	namespace javax{
		namespace xml{
			namespace datatype{
				namespace DatatypeConstants{
					class Field;
				} // end namespace javax
			} // end namespace xml
		} // end namespace datatype
	} // end namespace DatatypeConstants
	namespace java{
		namespace util{
			namespace function{
				class Predicate;
			} // end namespace java
		} // end namespace util
	} // end namespace function
	namespace javax{
		namespace swing{
			namespace text{
				class DefaultStyledDocument;
			} // end namespace javax
		} // end namespace swing
	} // end namespace text
	namespace java{
		namespace awt{
			namespace event{
				class TextEvent;
			} // end namespace java
		} // end namespace awt
	} // end namespace event
	namespace java{
		namespace net{
			class DatagramPacket;
		} // end namespace java
	} // end namespace net
	namespace java{
		namespace net{
			class SocketAddress;
		} // end namespace java
	} // end namespace net
	namespace java{
		namespace net{
			class InetAddress;
		} // end namespace java
	} // end namespace net
	namespace java{
		namespace net{
			class DatagramSocketImplFactory;
		} // end namespace java
	} // end namespace net
	namespace java{
		namespace nio{
			namespace channels{
				class DatagramChannel;
			} // end namespace java
		} // end namespace nio
	} // end namespace channels
	namespace javax{
		namespace swing{
			class DefaultComboBoxModel;
		} // end namespace javax
	} // end namespace swing
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								namespace Percentile{
									class EstimationType;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace stat
			} // end namespace descriptive
		} // end namespace rank
	} // end namespace Percentile
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								namespace ArcsSet{
									class Split;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace spherical
		} // end namespace oned
	} // end namespace ArcsSet
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace MathArrays{
							class OrderDirection;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace MathArrays
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace MathArrays{
							class Position;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace MathArrays
	namespace java{
		namespace util{
			class ArrayList;
		} // end namespace java
	} // end namespace util
	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace XPath{
							class LocationPath;
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace XPath
	namespace java{
		namespace awt{
			namespace geom{
				class AffineTransform;
			} // end namespace java
		} // end namespace awt
	} // end namespace geom
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace ResizableDoubleArray{
							class ExpansionMode;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace ResizableDoubleArray
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace MathArrays{
							class Function;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace MathArrays
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace OpenIntToDoubleHashMap{
							class Iterator;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace OpenIntToDoubleHashMap
	namespace java{
		namespace io{
			class Serializable;
		} // end namespace java
	} // end namespace io
	namespace javax{
		namespace swing{
			class ProgressMonitor;
		} // end namespace javax
	} // end namespace swing
	namespace java{
		namespace awt{
			namespace print{
				class PageFormat;
			} // end namespace java
		} // end namespace awt
	} // end namespace print
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								namespace PSquarePercentile{
									class PSquareMarkers;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace stat
			} // end namespace descriptive
		} // end namespace rank
	} // end namespace PSquarePercentile
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								namespace SemiVariance{
									class Direction;
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace stat
			} // end namespace descriptive
		} // end namespace moment
	} // end namespace SemiVariance
	namespace java{
		namespace io{
			class ObjectOutputStream;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace io{
			class BufferedReader;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace io{
			class Closeable;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace net{
			class Socket;
		} // end namespace java
	} // end namespace net
	namespace java{
		namespace nio{
			namespace channels{
				class Selector;
			} // end namespace java
		} // end namespace nio
	} // end namespace channels
	namespace java{
		namespace net{
			class ServerSocket;
		} // end namespace java
	} // end namespace net
	namespace java{
		namespace net{
			class URI;
		} // end namespace java
	} // end namespace net
	namespace java{
		namespace net{
			class URLConnection;
		} // end namespace java
	} // end namespace net
	namespace java{
		namespace lang{
			class StringBuilder;
		} // end namespace java
	} // end namespace lang
	namespace java{
		namespace util{
			namespace function{
				class UnaryOperator;
			} // end namespace java
		} // end namespace util
	} // end namespace function
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						namespace DfpField{
							class RoundingMode;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace dfp
	} // end namespace DfpField
	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						namespace BesselJ{
							class BesselJResult;
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace special
	} // end namespace BesselJ
	namespace java{
		namespace io{
			class ObjectInputValidation;
		} // end namespace java
	} // end namespace io
	namespace java{
		namespace io{
			namespace ObjectInputStream{
				class GetField;
			} // end namespace java
		} // end namespace io
	} // end namespace ObjectInputStream
	namespace java{
		namespace util{
			class Optional;
		} // end namespace java
	} // end namespace util
	namespace crcl{
		namespace utils{
			namespace PendantClientInner{
				class TrySupplier;
			} // end namespace crcl
		} // end namespace utils
	} // end namespace PendantClientInner
	namespace java{
		namespace util{
			namespace function{
				class Function;
			} // end namespace java
		} // end namespace util
	} // end namespace function
	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class NodeImpl : public java::lang::Object {
						public:
					            NodeImpl(jobject _jthis, bool copy);
					            NodeImpl(const NodeImpl &);
					        
						NodeImpl();
						virtual ~NodeImpl();
						w3c::dom::Node item(jint int_0);
						jstring getNodeValue();
						void setNodeValue(jstring string_0);
						w3c::dom::Node getParentNode();
						w3c::dom::NodeList getChildNodes();
						w3c::dom::Node getFirstChild();
						w3c::dom::Node getLastChild();
						w3c::dom::Node getPreviousSibling();
						w3c::dom::Node getNextSibling();
						w3c::dom::Document getOwnerDocument();
						w3c::dom::Node insertBefore(w3c::dom::Node node_0,w3c::dom::Node node_1);
						w3c::dom::Node replaceChild(w3c::dom::Node node_0,w3c::dom::Node node_1);
						w3c::dom::Node removeChild(w3c::dom::Node node_0);
						w3c::dom::Node appendChild(w3c::dom::Node node_0);
						jboolean hasChildNodes();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						void setPrefix(jstring string_0);
						jboolean hasAttributes();
						jstring getBaseURI();
						jshort compareDocumentPosition(w3c::dom::Node node_0);
						jstring getTextContent();
						void setTextContent(jstring string_0);
						jboolean isSameNode(w3c::dom::Node node_0);
						jstring lookupPrefix(jstring string_0);
						jboolean isDefaultNamespace(jstring string_0);
						jstring lookupNamespaceURI(jstring string_0);
						jboolean isEqualNode(w3c::dom::Node node_0);
						jboolean dispatchEvent(w3c::dom::events::Event event_0);
						jstring getPrefix();
						jstring getNamespaceURI();
						jstring getLocalName();
						virtual void needsSyncChildren(jboolean boolean_0);
						void addEventListener(jstring string_0,w3c::dom::events::EventListener eventListener_1,jboolean boolean_2);
						void removeEventListener(jstring string_0,w3c::dom::events::EventListener eventListener_1,jboolean boolean_2);
						jshort compareTreePosition(w3c::dom::Node node_0);
						jboolean getReadOnly();
						jstring toString();
						jint getLength();
						void setReadOnly(jboolean boolean_0,jboolean boolean_1);
						void normalize();
						w3c::dom::NamedNodeMap getAttributes();
						jboolean isSupported(jstring string_0,jstring string_1);
					}; // end class NodeImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class ChildNode : public NodeImpl {
						public:
					            ChildNode(jobject _jthis, bool copy);
					            ChildNode(const ChildNode &);
					        
						ChildNode();
						virtual ~ChildNode();
						w3c::dom::Node getParentNode();
						w3c::dom::Node getPreviousSibling();
						w3c::dom::Node getNextSibling();
						w3c::dom::Node cloneNode(jboolean boolean_0);
					}; // end class ChildNode
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class ParentNode : public ChildNode {
						public:
					            ParentNode(jobject _jthis, bool copy);
					            ParentNode(const ParentNode &);
					        
						ParentNode();
						virtual ~ParentNode();
						w3c::dom::Node item(jint int_0);
						w3c::dom::NodeList getChildNodes();
						w3c::dom::Node getFirstChild();
						w3c::dom::Node getLastChild();
						w3c::dom::Document getOwnerDocument();
						w3c::dom::Node insertBefore(w3c::dom::Node node_0,w3c::dom::Node node_1);
						w3c::dom::Node replaceChild(w3c::dom::Node node_0,w3c::dom::Node node_1);
						w3c::dom::Node removeChild(w3c::dom::Node node_0);
						jboolean hasChildNodes();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getTextContent();
						void setTextContent(jstring string_0);
						jboolean isEqualNode(w3c::dom::Node node_0);
						jint getLength();
						void setReadOnly(jboolean boolean_0,jboolean boolean_1);
						void normalize();
					}; // end class ParentNode
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace java{
		namespace lang{
			
			class Throwable : public Object {
				public:
			            Throwable(jobject _jthis, bool copy);
			            Throwable(const Throwable &);
			        
				Throwable(Throwable throwable_0);
				Throwable(jstring string_0,Throwable throwable_1);
				Throwable(jstring string_0);
				Throwable();
				virtual ~Throwable();
				void printStackTrace();
				void printStackTrace(io::PrintWriter printWriter_0);
				void printStackTrace(io::PrintStream printStream_0);
				Throwable fillInStackTrace();
				Throwable getCause();
				Throwable initCause(Throwable throwable_0);
				jstring toString();
				jstring getMessage();
				jstring getLocalizedMessage();
				virtual void addSuppressed(Throwable throwable_0);
				virtual jobjectArray getSuppressed();
			}; // end class Throwable
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace lang{
			
			class Exception : public Throwable {
				public:
			            Exception(jobject _jthis, bool copy);
			            Exception(const Exception &);
			        
				Exception(Throwable throwable_0);
				Exception(jstring string_0,Throwable throwable_1);
				Exception(jstring string_0);
				Exception();
				virtual ~Exception();
			}; // end class Exception
		} // end namespace java
	} // end namespace lang

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class ElementImpl : public ParentNode {
						public:
					            ElementImpl(jobject _jthis, bool copy);
					            ElementImpl(const ElementImpl &);
					        
						ElementImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						virtual ~ElementImpl();
						void removeAttribute(jstring string_0);
						jstring getTagName();
						w3c::dom::Attr getAttributeNode(jstring string_0);
						w3c::dom::Attr setAttributeNode(w3c::dom::Attr attr_0);
						w3c::dom::Attr removeAttributeNode(w3c::dom::Attr attr_0);
						w3c::dom::NodeList getElementsByTagName(jstring string_0);
						jstring getAttributeNS(jstring string_0,jstring string_1);
						void setAttributeNS(jstring string_0,jstring string_1,jstring string_2);
						void removeAttributeNS(jstring string_0,jstring string_1);
						w3c::dom::Attr getAttributeNodeNS(jstring string_0,jstring string_1);
						w3c::dom::Attr setAttributeNodeNS(w3c::dom::Attr attr_0);
						w3c::dom::NodeList getElementsByTagNameNS(jstring string_0,jstring string_1);
						jboolean hasAttribute(jstring string_0);
						jboolean hasAttributeNS(jstring string_0,jstring string_1);
						w3c::dom::TypeInfo getSchemaTypeInfo();
						void setIdAttribute(jstring string_0,jboolean boolean_1);
						void setIdAttributeNS(jstring string_0,jstring string_1,jboolean boolean_2);
						void setIdAttributeNode(w3c::dom::Attr attr_0,jboolean boolean_1);
						jstring getNodeName();
						jshort getNodeType();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jboolean hasAttributes();
						jstring getBaseURI();
						jboolean isEqualNode(w3c::dom::Node node_0);
						void setAttribute(jstring string_0,jstring string_1);
						jstring getAttribute(jstring string_0);
						jstring getTypeNamespace();
						jboolean isDerivedFrom(jstring string_0,jstring string_1,jint int_2);
						virtual jint getChildElementCount();
						virtual w3c::dom::Element getFirstElementChild();
						virtual w3c::dom::Element getLastElementChild();
						virtual w3c::dom::Element getNextElementSibling();
						virtual w3c::dom::Element getPreviousElementSibling();
						jstring getTypeName();
						void setReadOnly(jboolean boolean_0,jboolean boolean_1);
						void normalize();
						w3c::dom::NamedNodeMap getAttributes();
					}; // end class ElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace java{
		namespace awt{
			
			class Component : public lang::Object {
				public:
			            Component(jobject _jthis, bool copy);
			            Component(const Component &);
			        
				virtual ~Component();
				void setLocale(util::Locale locale_0);
				jboolean isValid();
				void validate();
				util::Set getFocusTraversalKeys(jint int_0);
				jboolean isFocusCycleRoot(Container container_0);
				Container getFocusCycleRootAncestor();
				jboolean isShowing();
				void setBounds(jint int_0,jint int_1,jint int_2,jint int_3);
				void setBounds(Rectangle rectangle_0);
				Rectangle getBounds(Rectangle rectangle_0);
				Rectangle getBounds();
				jint getX();
				jint getY();
				GraphicsConfiguration getGraphicsConfiguration();
				peer::ComponentPeer getPeer();
				Dimension getPreferredSize();
				jboolean isMinimumSizeSet();
				Dimension getMinimumSize();
				jboolean isVisible();
				void requestFocus();
				jboolean handleEvent(Event event_0);
				void applyComponentOrientation(ComponentOrientation componentOrientation_0);
				Point getLocationOnScreen();
				jint getWidth();
				jint getHeight();
				void doLayout();
				void setFont(Font font_0);
				Dimension preferredSize();
				Dimension minimumSize();
				Dimension getMaximumSize();
				jfloat getAlignmentX();
				jfloat getAlignmentY();
				void deliverEvent(Event event_0);
				Component getComponentAt(jint int_0,jint int_1);
				Component getComponentAt(Point point_0);
				Component locate(jint int_0,jint int_1);
				Point getMousePosition();
				void setFocusTraversalKeys(jint int_0,util::Set set_1);
				jboolean areFocusTraversalKeysSet(jint int_0);
				virtual void dispatchEvent(AWTEvent aWTEvent_0);
				jboolean isEnabled();
				jboolean isFocusable();
				jboolean isLightweight();
				jboolean isFocusOwner();
				void transferFocus();
				jboolean isPreferredSizeSet();
				jboolean isMaximumSizeSet();
				void transferFocusBackward();
				void setDropTarget(dnd::DropTarget dropTarget_0);
				dnd::DropTarget getDropTarget();
				void setEnabled(jboolean boolean_0);
				jboolean isDoubleBuffered();
				void enableInputMethods(jboolean boolean_0);
				Color getForeground();
				jboolean isForegroundSet();
				jboolean isBackgroundSet();
				jboolean isFontSet();
				image::ColorModel getColorModel();
				Rectangle bounds();
				void setPreferredSize(Dimension dimension_0);
				void setMaximumSize(Dimension dimension_0);
				jint getBaseline(jint int_0,jint int_1);
				Component::BaselineResizeBehavior getBaselineResizeBehavior();
				void revalidate();
				FontMetrics getFontMetrics(Font font_0);
				jboolean isCursorSet();
				void paintAll(Graphics graphics_0);
				void printAll(Graphics graphics_0);
				jboolean imageUpdate(Image image_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
				Image createImage(jint int_0,jint int_1);
				Image createImage(image::ImageProducer imageProducer_0);
				image::VolatileImage createVolatileImage(jint int_0,jint int_1,ImageCapabilities imageCapabilities_2);
				image::VolatileImage createVolatileImage(jint int_0,jint int_1);
				jboolean prepareImage(Image image_0,jint int_1,jint int_2,image::ImageObserver imageObserver_3);
				jboolean prepareImage(Image image_0,image::ImageObserver imageObserver_1);
				jint checkImage(Image image_0,jint int_1,jint int_2,image::ImageObserver imageObserver_3);
				jint checkImage(Image image_0,image::ImageObserver imageObserver_1);
				void setIgnoreRepaint(jboolean boolean_0);
				jboolean getIgnoreRepaint();
				jboolean inside(jint int_0,jint int_1);
				void addComponentListener(event::ComponentListener componentListener_0);
				void removeComponentListener(event::ComponentListener componentListener_0);
				jobjectArray getComponentListeners();
				void addFocusListener(event::FocusListener focusListener_0);
				void removeFocusListener(event::FocusListener focusListener_0);
				jobjectArray getFocusListeners();
				void addHierarchyListener(event::HierarchyListener hierarchyListener_0);
				void removeHierarchyListener(event::HierarchyListener hierarchyListener_0);
				jobjectArray getHierarchyListeners();
				void addHierarchyBoundsListener(event::HierarchyBoundsListener hierarchyBoundsListener_0);
				void removeHierarchyBoundsListener(event::HierarchyBoundsListener hierarchyBoundsListener_0);
				jobjectArray getHierarchyBoundsListeners();
				void addKeyListener(event::KeyListener keyListener_0);
				void removeKeyListener(event::KeyListener keyListener_0);
				jobjectArray getKeyListeners();
				void addMouseListener(event::MouseListener mouseListener_0);
				void removeMouseListener(event::MouseListener mouseListener_0);
				jobjectArray getMouseListeners();
				void addMouseMotionListener(event::MouseMotionListener mouseMotionListener_0);
				void removeMouseMotionListener(event::MouseMotionListener mouseMotionListener_0);
				jobjectArray getMouseMotionListeners();
				void addMouseWheelListener(event::MouseWheelListener mouseWheelListener_0);
				void removeMouseWheelListener(event::MouseWheelListener mouseWheelListener_0);
				jobjectArray getMouseWheelListeners();
				void addInputMethodListener(event::InputMethodListener inputMethodListener_0);
				void removeInputMethodListener(event::InputMethodListener inputMethodListener_0);
				jobjectArray getInputMethodListeners();
				im::InputMethodRequests getInputMethodRequests();
				jboolean mouseDown(Event event_0,jint int_1,jint int_2);
				jboolean mouseDrag(Event event_0,jint int_1,jint int_2);
				jboolean mouseUp(Event event_0,jint int_1,jint int_2);
				jboolean mouseMove(Event event_0,jint int_1,jint int_2);
				jboolean mouseEnter(Event event_0,jint int_1,jint int_2);
				jboolean mouseExit(Event event_0,jint int_1,jint int_2);
				jboolean keyDown(Event event_0,jint int_1);
				jboolean keyUp(Event event_0,jint int_1);
				jboolean isFocusTraversable();
				void setFocusable(jboolean boolean_0);
				void setFocusTraversalKeysEnabled(jboolean boolean_0);
				jboolean getFocusTraversalKeysEnabled();
				jboolean requestFocusInWindow();
				void nextFocus();
				void transferFocusUpCycle();
				jboolean hasFocus();
				void removePropertyChangeListener(jstring string_0,beans::PropertyChangeListener propertyChangeListener_1);
				void removePropertyChangeListener(beans::PropertyChangeListener propertyChangeListener_0);
				jobjectArray getPropertyChangeListeners(jstring string_0);
				jobjectArray getPropertyChangeListeners();
				void setComponentOrientation(ComponentOrientation componentOrientation_0);
				ComponentOrientation getComponentOrientation();
				void move(jint int_0,jint int_1);
				void invalidate();
				Graphics getGraphics();
				void repaint(jlong long_0,jint int_1,jint int_2,jint int_3,jint int_4);
				void repaint(jint int_0,jint int_1,jint int_2,jint int_3);
				void repaint(jlong long_0);
				void repaint();
				javax::accessibility::AccessibleContext getAccessibleContext();
				void setBackground(Color color_0);
				void firePropertyChange(jstring string_0,jchar char_1,jchar char_2);
				void firePropertyChange(jstring string_0,jbyte byte_1,jbyte byte_2);
				void firePropertyChange(jstring string_0,jshort short_1,jshort short_2);
				void firePropertyChange(jstring string_0,jdouble double_1,jdouble double_2);
				void firePropertyChange(jstring string_0,jfloat float_1,jfloat float_2);
				void firePropertyChange(jstring string_0,jlong long_1,jlong long_2);
				void paint(Graphics graphics_0);
				void addNotify();
				void removeNotify();
				void setCursor(Cursor cursor_0);
				Toolkit getToolkit();
				jboolean isDisplayable();
				Color getBackground();
				Cursor getCursor();
				Font getFont();
				jboolean postEvent(Event event_0);
				void setMinimumSize(Dimension dimension_0);
				void setLocation(Point point_0);
				void setLocation(jint int_0,jint int_1);
				void reshape(jint int_0,jint int_1,jint int_2,jint int_3);
				void show();
				void show(jboolean boolean_0);
				void hide();
				util::Locale getLocale();
				im::InputContext getInputContext();
				void layout();
				void setForeground(Color color_0);
				void setVisible(jboolean boolean_0);
				void addPropertyChangeListener(jstring string_0,beans::PropertyChangeListener propertyChangeListener_1);
				void addPropertyChangeListener(beans::PropertyChangeListener propertyChangeListener_0);
				void add(PopupMenu popupMenu_0);
				void remove(MenuComponent menuComponent_0);
				jstring toString();
				void update(Graphics graphics_0);
				jstring getName();
				jboolean contains(Point point_0);
				jboolean contains(jint int_0,jint int_1);
				Dimension size();
				Container getParent();
				Point getLocation(Point point_0);
				Point getLocation();
				void setName(jstring string_0);
				void list();
				void list(io::PrintStream printStream_0);
				void list(io::PrintStream printStream_0,jint int_1);
				void list(io::PrintWriter printWriter_0);
				void list(io::PrintWriter printWriter_0,jint int_1);
				void print(Graphics graphics_0);
				Dimension getSize(Dimension dimension_0);
				Dimension getSize();
				jboolean isOpaque();
				Point location();
				void setSize(Dimension dimension_0);
				void setSize(jint int_0,jint int_1);
				void resize(jint int_0,jint int_1);
				void resize(Dimension dimension_0);
				void enable(jboolean boolean_0);
				void enable();
				void disable();
			}; // end class Component
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace lang{
			
			class RuntimeException : public Exception {
				public:
			            RuntimeException(jobject _jthis, bool copy);
			            RuntimeException(const RuntimeException &);
			        
				RuntimeException(Throwable throwable_0);
				RuntimeException(jstring string_0,Throwable throwable_1);
				RuntimeException(jstring string_0);
				RuntimeException();
				virtual ~RuntimeException();
			}; // end class RuntimeException
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace awt{
			
			class Container : public Component {
				public:
			            Container(jobject _jthis, bool copy);
			            Container(const Container &);
			        
				Container();
				virtual ~Container();
				void validate();
				util::Set getFocusTraversalKeys(jint int_0);
				void setFocusCycleRoot(jboolean boolean_0);
				jboolean isFocusCycleRoot();
				jboolean isFocusCycleRoot(Container container_0);
				jboolean isValidateRoot();
				Dimension getPreferredSize();
				Dimension getMinimumSize();
				FocusTraversalPolicy getFocusTraversalPolicy();
				void applyComponentOrientation(ComponentOrientation componentOrientation_0);
				jint getComponentCount();
				Component getComponent(jint int_0);
				jint countComponents();
				jobjectArray getComponents();
				Insets getInsets();
				Insets insets();
				void setComponentZOrder(Component component_0,jint int_1);
				jint getComponentZOrder(Component component_0);
				LayoutManager getLayout();
				void doLayout();
				void setFont(Font font_0);
				Dimension preferredSize();
				Dimension minimumSize();
				Dimension getMaximumSize();
				jfloat getAlignmentX();
				jfloat getAlignmentY();
				void paintComponents(Graphics graphics_0);
				void printComponents(Graphics graphics_0);
				void addContainerListener(event::ContainerListener containerListener_0);
				void removeContainerListener(event::ContainerListener containerListener_0);
				jobjectArray getContainerListeners();
				void deliverEvent(Event event_0);
				Component getComponentAt(jint int_0,jint int_1);
				Component getComponentAt(Point point_0);
				Component locate(jint int_0,jint int_1);
				Point getMousePosition(jboolean boolean_0);
				Component findComponentAt(Point point_0);
				Component findComponentAt(jint int_0,jint int_1);
				jboolean isAncestorOf(Component component_0);
				void setFocusTraversalKeys(jint int_0,util::Set set_1);
				jboolean areFocusTraversalKeysSet(jint int_0);
				void setFocusTraversalPolicy(FocusTraversalPolicy focusTraversalPolicy_0);
				jboolean isFocusTraversalPolicySet();
				virtual void setFocusTraversalPolicyProvider(jboolean boolean_0);
				virtual jboolean isFocusTraversalPolicyProvider();
				void transferFocusDownCycle();
				void invalidate();
				void paint(Graphics graphics_0);
				void addNotify();
				void removeNotify();
				void layout();
				void setLayout(LayoutManager layoutManager_0);
				void addPropertyChangeListener(beans::PropertyChangeListener propertyChangeListener_0);
				void addPropertyChangeListener(jstring string_0,beans::PropertyChangeListener propertyChangeListener_1);
				Component add(Component component_0);
				Component add(jstring string_0,Component component_1);
				Component add(Component component_0,jint int_1);
				void remove(Component component_0);
				void remove(jint int_0);
				void update(Graphics graphics_0);
				void list(io::PrintStream printStream_0,jint int_1);
				void list(io::PrintWriter printWriter_0,jint int_1);
				void print(Graphics graphics_0);
				void removeAll();
			}; // end class Container
		} // end namespace java
	} // end namespace awt

	namespace crcl{
		namespace base{
			
			class DataThingType : public java::lang::Object {
				public:
			            DataThingType(jobject _jthis, bool copy);
			            DataThingType(const DataThingType &);
			        
				DataThingType();
				virtual ~DataThingType();
				jstring getName();
				void setName(jstring string_0);
			}; // end class DataThingType
		} // end namespace crcl
	} // end namespace base

	namespace java{
		namespace lang{
			
			class Enum : public Object {
				public:
			            Enum(jobject _jthis, bool copy);
			            Enum(const Enum &);
			        
				virtual ~Enum();
				virtual jstring name();
				jstring toString();
				virtual jint hashCode();
				virtual jint compareTo(Enum enum_0);
				virtual jint ordinal();
			}; // end class Enum
		} // end namespace java
	} // end namespace lang

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLElementImpl : public xerces::dom::ElementImpl {
						public:
					            HTMLElementImpl(jobject _jthis, bool copy);
					            HTMLElementImpl(const HTMLElementImpl &);
					        
						HTMLElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLElementImpl();
						void setId(jstring string_0);
						jstring getLang();
						void setLang(jstring string_0);
						void setClassName(jstring string_0);
						w3c::dom::Attr getAttributeNode(jstring string_0);
						virtual w3c::dom::NodeList getElementsByTagName(jstring string_0);
						jstring getAttributeNS(jstring string_0,jstring string_1);
						w3c::dom::Attr getAttributeNodeNS(jstring string_0,jstring string_1);
						virtual w3c::dom::NodeList getElementsByTagNameNS(jstring string_0,jstring string_1);
						jstring getAttribute(jstring string_0);
						jstring getTitle();
						jstring getDir();
						void setDir(jstring string_0);
						void setTitle(jstring string_0);
						w3c::dom::html::HTMLFormElement getForm();
						jstring getId();
						jstring getClassName();
					}; // end class HTMLElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLElementImpl : public xerces::dom::ElementImpl {
						public:
					            WMLElementImpl(jobject _jthis, bool copy);
					            WMLElementImpl(const WMLElementImpl &);
					        
						WMLElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace java{
		namespace lang{
			
			class IllegalArgumentException : public RuntimeException {
				public:
			            IllegalArgumentException(jobject _jthis, bool copy);
			            IllegalArgumentException(const IllegalArgumentException &);
			        
				IllegalArgumentException(Throwable throwable_0);
				IllegalArgumentException(jstring string_0,Throwable throwable_1);
				IllegalArgumentException(jstring string_0);
				IllegalArgumentException();
				virtual ~IllegalArgumentException();
			}; // end class IllegalArgumentException
		} // end namespace java
	} // end namespace lang

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MathIllegalArgumentException : public java::lang::IllegalArgumentException {
							public:
						            MathIllegalArgumentException(jobject _jthis, bool copy);
						            MathIllegalArgumentException(const MathIllegalArgumentException &);
						        
							virtual ~MathIllegalArgumentException();
							jstring getMessage();
							jstring getLocalizedMessage();
							util::ExceptionContext getContext();
						}; // end class MathIllegalArgumentException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class TypeValidator : public java::lang::Object {
								public:
							            TypeValidator(jobject _jthis, bool copy);
							            TypeValidator(const TypeValidator &);
							        
								TypeValidator();
								virtual ~TypeValidator();
								static jint getDigit(jchar char_0);
								static jboolean isDigit(jchar char_0);
							}; // end class TypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace crcl{
		namespace base{
			
			class CRCLCommandType : public DataThingType {
				public:
			            CRCLCommandType(jobject _jthis, bool copy);
			            CRCLCommandType(const CRCLCommandType &);
			        
				CRCLCommandType();
				virtual ~CRCLCommandType();
				java::math::BigInteger getCommandID();
				void setCommandID(java::math::BigInteger bigInteger_0);
			}; // end class CRCLCommandType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class MiddleCommandType : public CRCLCommandType {
				public:
			            MiddleCommandType(jobject _jthis, bool copy);
			            MiddleCommandType(const MiddleCommandType &);
			        
				MiddleCommandType();
				virtual ~MiddleCommandType();
			}; // end class MiddleCommandType
		} // end namespace crcl
	} // end namespace base

	namespace java{
		namespace awt{
			
			class Window : public Container {
				public:
			            Window(jobject _jthis, bool copy);
			            Window(const Window &);
			        
				Window(Window window_0,GraphicsConfiguration graphicsConfiguration_1);
				Window(Frame frame_0);
				Window(Window window_0);
				virtual ~Window();
				jobjectArray getWindowFocusListeners();
				jobjectArray getWindowStateListeners();
				virtual void setAlwaysOnTop(jboolean boolean_0);
				jboolean isAlwaysOnTopSupported();
				virtual jboolean isAlwaysOnTop();
				Component getFocusOwner();
				Component getMostRecentFocusOwner();
				jboolean isActive();
				jboolean isFocused();
				util::Set getFocusTraversalKeys(jint int_0);
				virtual void setFocusCycleRoot(jboolean boolean_0);
				virtual jboolean isFocusCycleRoot();
				virtual Container getFocusCycleRootAncestor();
				virtual jboolean isFocusableWindow();
				jboolean getFocusableWindowState();
				void setFocusableWindowState(jboolean boolean_0);
				void setAutoRequestFocus(jboolean boolean_0);
				jboolean isAutoRequestFocus();
				jboolean isValidateRoot();
				jboolean isShowing();
				void applyResourceBundle(util::ResourceBundle resourceBundle_0);
				void applyResourceBundle(jstring string_0);
				void setLocationRelativeTo(Component component_0);
				void createBufferStrategy(jint int_0,BufferCapabilities bufferCapabilities_1);
				void createBufferStrategy(jint int_0);
				image::BufferStrategy getBufferStrategy();
				void setLocationByPlatform(jboolean boolean_0);
				jboolean isLocationByPlatform();
				void setBounds(jint int_0,jint int_1,jint int_2,jint int_3);
				void setBounds(Rectangle rectangle_0);
				void setIconImage(Image image_0);
				javax::accessibility::AccessibleContext getAccessibleContext();
				void setBackground(Color color_0);
				void dispose();
				void paint(Graphics graphics_0);
				void addNotify();
				void setOpacity(jfloat float_0);
				void setShape(Shape shape_0);
				void removeNotify();
				void setCursor(Cursor cursor_0);
				Toolkit getToolkit();
				jfloat getOpacity();
				Shape getShape();
				Color getBackground();
				static jobjectArray getWindows();
				jboolean postEvent(Event event_0);
				util::List getIconImages();
				void setIconImages(util::List list_0);
				void setMinimumSize(Dimension dimension_0);
				void setLocation(Point point_0);
				void setLocation(jint int_0,jint int_1);
				void reshape(jint int_0,jint int_1,jint int_2,jint int_3);
				void show();
				void hide();
				void toFront();
				void toBack();
				virtual jstring getWarningString();
				util::Locale getLocale();
				im::InputContext getInputContext();
				jobjectArray getOwnedWindows();
				static jobjectArray getOwnerlessWindows();
				void setModalExclusionType(Dialog::ModalExclusionType modalExclusionType_0);
				Dialog::ModalExclusionType getModalExclusionType();
				void addWindowStateListener(event::WindowStateListener windowStateListener_0);
				void addWindowFocusListener(event::WindowFocusListener windowFocusListener_0);
				void removeWindowListener(event::WindowListener windowListener_0);
				void removeWindowStateListener(event::WindowStateListener windowStateListener_0);
				void removeWindowFocusListener(event::WindowFocusListener windowFocusListener_0);
				jobjectArray getWindowListeners();
				void setType(Window::Type type_0);
				void addWindowListener(event::WindowListener windowListener_0);
				void pack();
				void setVisible(jboolean boolean_0);
				void addPropertyChangeListener(jstring string_0,beans::PropertyChangeListener propertyChangeListener_1);
				void addPropertyChangeListener(beans::PropertyChangeListener propertyChangeListener_0);
				Window::Type getType();
				jboolean isOpaque();
				void setSize(jint int_0,jint int_1);
				void setSize(Dimension dimension_0);
				Window getOwner();
			}; // end class Window
		} // end namespace java
	} // end namespace awt

	namespace javax{
		namespace swing{
			
			class JComponent : public java::awt::Container {
				public:
			            JComponent(jobject _jthis, bool copy);
			            JComponent(const JComponent &);
			        
				JComponent();
				virtual ~JComponent();
				border::Border getBorder();
				void setBorder(border::Border border_0);
				jboolean getAutoscrolls();
				void scrollRectToVisible(java::awt::Rectangle rectangle_0);
				void setAutoscrolls(jboolean boolean_0);
				virtual jboolean isPaintingForPrint();
				java::awt::Component getNextFocusableComponent();
				void setNextFocusableComponent(java::awt::Component component_0);
				void setInheritsPopupMenu(jboolean boolean_0);
				jboolean getInheritsPopupMenu();
				void setComponentPopupMenu(JPopupMenu jPopupMenu_0);
				JPopupMenu getComponentPopupMenu();
				jboolean isPaintingTile();
				jboolean isManagingFocus();
				void setRequestFocusEnabled(jboolean boolean_0);
				jboolean isRequestFocusEnabled();
				void grabFocus();
				void setVerifyInputWhenFocusTarget(jboolean boolean_0);
				jboolean getVerifyInputWhenFocusTarget();
				void setAlignmentY(jfloat float_0);
				void setAlignmentX(jfloat float_0);
				void setInputVerifier(InputVerifier inputVerifier_0);
				InputVerifier getInputVerifier();
				void setDebugGraphicsOptions(jint int_0);
				jint getDebugGraphicsOptions();
				void registerKeyboardAction(java::awt::event::ActionListener actionListener_0,KeyStroke keyStroke_1,jint int_2);
				void registerKeyboardAction(java::awt::event::ActionListener actionListener_0,jstring string_1,KeyStroke keyStroke_2,jint int_3);
				void unregisterKeyboardAction(KeyStroke keyStroke_0);
				jobjectArray getRegisteredKeyStrokes();
				jint getConditionForKeyStroke(KeyStroke keyStroke_0);
				java::awt::event::ActionListener getActionForKeyStroke(KeyStroke keyStroke_0);
				void resetKeyboardActions();
				virtual void setInputMap(jint int_0,InputMap inputMap_1);
				virtual InputMap getInputMap(jint int_0);
				virtual InputMap getInputMap();
				virtual void setActionMap(ActionMap actionMap_0);
				virtual ActionMap getActionMap();
				jboolean requestDefaultFocus();
				static void setDefaultLocale(java::util::Locale locale_0);
				void setToolTipText(jstring string_0);
				java::awt::Point getToolTipLocation(java::awt::event::MouseEvent mouseEvent_0);
				java::awt::Point getPopupLocation(java::awt::event::MouseEvent mouseEvent_0);
				JToolTip createToolTip();
				static jboolean isLightweightComponent(java::awt::Component component_0);
				void computeVisibleRect(java::awt::Rectangle rectangle_0);
				java::awt::Rectangle getVisibleRect();
				void addVetoableChangeListener(java::beans::VetoableChangeListener vetoableChangeListener_0);
				void removeVetoableChangeListener(java::beans::VetoableChangeListener vetoableChangeListener_0);
				jobjectArray getVetoableChangeListeners();
				java::awt::Container getTopLevelAncestor();
				void addAncestorListener(event::AncestorListener ancestorListener_0);
				void removeAncestorListener(event::AncestorListener ancestorListener_0);
				jobjectArray getAncestorListeners();
				jboolean isOptimizedDrawingEnabled();
				void paintImmediately(java::awt::Rectangle rectangle_0);
				void paintImmediately(jint int_0,jint int_1,jint int_2,jint int_3);
				void setDoubleBuffered(jboolean boolean_0);
				jboolean isValidateRoot();
				java::awt::Rectangle getBounds(java::awt::Rectangle rectangle_0);
				jint getX();
				jint getY();
				java::awt::Dimension getPreferredSize();
				java::awt::Dimension getMinimumSize();
				void requestFocus();
				jboolean requestFocus(jboolean boolean_0);
				jint getWidth();
				jint getHeight();
				java::awt::Insets getInsets(java::awt::Insets insets_0);
				java::awt::Insets getInsets();
				void setFont(java::awt::Font font_0);
				java::awt::Dimension getMaximumSize();
				jfloat getAlignmentX();
				jfloat getAlignmentY();
				void setFocusTraversalKeys(jint int_0,java::util::Set set_1);
				void setEnabled(jboolean boolean_0);
				jboolean isDoubleBuffered();
				void setPreferredSize(java::awt::Dimension dimension_0);
				void setMaximumSize(java::awt::Dimension dimension_0);
				jint getBaseline(jint int_0,jint int_1);
				java::awt::Component::BaselineResizeBehavior getBaselineResizeBehavior();
				void revalidate();
				java::awt::FontMetrics getFontMetrics(java::awt::Font font_0);
				void printAll(java::awt::Graphics graphics_0);
				jboolean requestFocusInWindow();
				jstring getToolTipText();
				jstring getToolTipText(java::awt::event::MouseEvent mouseEvent_0);
				void updateUI();
				jstring getUIClassID();
				void setTransferHandler(TransferHandler transferHandler_0);
				TransferHandler getTransferHandler();
				JRootPane getRootPane();
				java::awt::Graphics getGraphics();
				void repaint(jlong long_0,jint int_1,jint int_2,jint int_3,jint int_4);
				void repaint(java::awt::Rectangle rectangle_0);
				static java::util::Locale getDefaultLocale();
				void setBackground(java::awt::Color color_0);
				void setOpaque(jboolean boolean_0);
				void firePropertyChange(jstring string_0,jchar char_1,jchar char_2);
				void firePropertyChange(jstring string_0,jboolean boolean_1,jboolean boolean_2);
				void firePropertyChange(jstring string_0,jint int_1,jint int_2);
				void paint(java::awt::Graphics graphics_0);
				void addNotify();
				void removeNotify();
				void setMinimumSize(java::awt::Dimension dimension_0);
				void reshape(jint int_0,jint int_1,jint int_2,jint int_3);
				void hide();
				void setForeground(java::awt::Color color_0);
				void setVisible(jboolean boolean_0);
				void update(java::awt::Graphics graphics_0);
				jboolean contains(jint int_0,jint int_1);
				java::awt::Point getLocation(java::awt::Point point_0);
				void print(java::awt::Graphics graphics_0);
				java::awt::Dimension getSize(java::awt::Dimension dimension_0);
				jboolean isOpaque();
				void enable();
				void disable();
			}; // end class JComponent
		} // end namespace javax
	} // end namespace swing

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class AbstractRealDistribution : public java::lang::Object {
							public:
						            AbstractRealDistribution(jobject _jthis, bool copy);
						            AbstractRealDistribution(const AbstractRealDistribution &);
						        
							virtual ~AbstractRealDistribution();
							jdouble probability(jdouble double_0,jdouble double_1);
							jdouble probability(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0,jdouble double_1);
							jdouble inverseCumulativeProbability(jdouble double_0);
							void reseedRandomGenerator(jlong long_0);
							jdoubleArray sample(jint int_0);
							jdouble sample();
							jdouble logDensity(jdouble double_0);
						}; // end class AbstractRealDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class AbstractUnivariateStatistic : public java::lang::Object {
								public:
							            AbstractUnivariateStatistic(jobject _jthis, bool copy);
							            AbstractUnivariateStatistic(const AbstractUnivariateStatistic &);
							        
								AbstractUnivariateStatistic();
								virtual ~AbstractUnivariateStatistic();
								jdoubleArray getData();
								void setData(jdoubleArray doubleArray_0,jint int_1,jint int_2);
								void setData(jdoubleArray doubleArray_0);
								jdouble evaluate();
								jdouble evaluate(jdoubleArray doubleArray_0);
							}; // end class AbstractUnivariateStatistic
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class BaseOptimizer : public java::lang::Object {
							public:
						            BaseOptimizer(jobject _jthis, bool copy);
						            BaseOptimizer(const BaseOptimizer &);
						        
							virtual ~BaseOptimizer();
							jint getEvaluations();
							jint getMaxEvaluations();
							ConvergenceChecker getConvergenceChecker();
							jint getIterations();
							jint getMaxIterations();
						}; // end class BaseOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace java{
		namespace io{
			
			class InputStream : public lang::Object {
				public:
			            InputStream(jobject _jthis, bool copy);
			            InputStream(const InputStream &);
			        
				InputStream();
				virtual ~InputStream();
				jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
				jint read(jbyteArray byteArray_0);
				void close();
				void mark(jint int_0);
				jlong skip(jlong long_0);
				jint available();
				jboolean markSupported();
				void reset();
			}; // end class InputStream
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace awt{
			
			class Frame : public Window {
				public:
			            Frame(jobject _jthis, bool copy);
			            Frame(const Frame &);
			        
				Frame(jstring string_0);
				Frame(GraphicsConfiguration graphicsConfiguration_0);
				Frame();
				Frame(jstring string_0,GraphicsConfiguration graphicsConfiguration_1);
				virtual ~Frame();
				void setIconImage(Image image_0);
				javax::accessibility::AccessibleContext getAccessibleContext();
				void setBackground(Color color_0);
				void setUndecorated(jboolean boolean_0);
				void setMenuBar(MenuBar menuBar_0);
				MenuBar getMenuBar();
				void addNotify();
				jstring getTitle();
				Image getIconImage();
				jboolean isResizable();
				void setResizable(jboolean boolean_0);
				void setState(jint int_0);
				void setExtendedState(jint int_0);
				jint getExtendedState();
				void setMaximizedBounds(Rectangle rectangle_0);
				Rectangle getMaximizedBounds();
				jboolean isUndecorated();
				void setOpacity(jfloat float_0);
				void setShape(Shape shape_0);
				void removeNotify();
				void setCursor(jint int_0);
				jint getCursorType();
				static jobjectArray getFrames();
				void setTitle(jstring string_0);
				void remove(MenuComponent menuComponent_0);
				jint getState();
			}; // end class Frame
		} // end namespace java
	} // end namespace awt

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class AbstractFileFilter : public java::lang::Object {
							public:
						            AbstractFileFilter(jobject _jthis, bool copy);
						            AbstractFileFilter(const AbstractFileFilter &);
						        
							AbstractFileFilter();
							virtual ~AbstractFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0);
							jboolean accept(java::io::File file_0,jstring string_1);
						}; // end class AbstractFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace java{
		namespace io{
			
			class OutputStream : public lang::Object {
				public:
			            OutputStream(jobject _jthis, bool copy);
			            OutputStream(const OutputStream &);
			        
				OutputStream();
				virtual ~OutputStream();
				void write(jbyteArray byteArray_0,jint int_1,jint int_2);
				void write(jbyteArray byteArray_0);
				void flush();
				void close();
			}; // end class OutputStream
		} // end namespace java
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class BaseAbstractUnivariateSolver : public java::lang::Object {
								public:
							            BaseAbstractUnivariateSolver(jobject _jthis, bool copy);
							            BaseAbstractUnivariateSolver(const BaseAbstractUnivariateSolver &);
							        
								virtual ~BaseAbstractUnivariateSolver();
								jint getEvaluations();
								jdouble getMax();
								jdouble getStartValue();
								jint getMaxEvaluations();
								jdouble getAbsoluteAccuracy();
								jdouble getRelativeAccuracy();
								jdouble getFunctionValueAccuracy();
								jdouble solve(jint int_0,UnivariateFunction univariateFunction_1,jdouble double_2,jdouble double_3,jdouble double_4);
								jdouble solve(jint int_0,UnivariateFunction univariateFunction_1,jdouble double_2);
								jdouble solve(jint int_0,UnivariateFunction univariateFunction_1,jdouble double_2,jdouble double_3);
								jdouble getMin();
							}; // end class BaseAbstractUnivariateSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class AbstractEvent : public java::lang::Object {
								public:
							            AbstractEvent(jobject _jthis, bool copy);
							            AbstractEvent(const AbstractEvent &);
							        
								AbstractEvent(EventType eventType_0);
								virtual ~AbstractEvent();
								virtual EventType getEventType();
								jboolean isEventType(EventType eventType_0);
								jstring toString();
								jint hashCode();
							}; // end class AbstractEvent
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class AbstractIntegrator : public java::lang::Object {
							public:
						            AbstractIntegrator(jobject _jthis, bool copy);
						            AbstractIntegrator(const AbstractIntegrator &);
						        
							AbstractIntegrator(jstring string_0);
							virtual ~AbstractIntegrator();
							jint getEvaluations();
							jint getMaxEvaluations();
							void computeDerivatives(jdouble double_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
							void addStepHandler(sampling::StepHandler stepHandler_0);
							java::util::Collection getStepHandlers();
							void clearStepHandlers();
							void addEventHandler(events::EventHandler eventHandler_0,jdouble double_1,jdouble double_2,jint int_3);
							void addEventHandler(events::EventHandler eventHandler_0,jdouble double_1,jdouble double_2,jint int_3,analysis::solvers::UnivariateSolver univariateSolver_4);
							java::util::Collection getEventHandlers();
							void clearEventHandlers();
							jdouble getCurrentStepStart();
							jdouble getCurrentSignedStepsize();
							void setMaxEvaluations(jint int_0);
							jdouble integrate(FirstOrderDifferentialEquations firstOrderDifferentialEquations_0,jdouble double_1,jdoubleArray doubleArray_2,jdouble double_3,jdoubleArray doubleArray_4);
							jstring getName();
						}; // end class AbstractIntegrator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class AbstractStorelessUnivariateStatistic : public AbstractUnivariateStatistic {
								public:
							            AbstractStorelessUnivariateStatistic(jobject _jthis, bool copy);
							            AbstractStorelessUnivariateStatistic(const AbstractStorelessUnivariateStatistic &);
							        
								AbstractStorelessUnivariateStatistic();
								virtual ~AbstractStorelessUnivariateStatistic();
								jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
								jdouble evaluate(jdoubleArray doubleArray_0);
								void incrementAll(jdoubleArray doubleArray_0,jint int_1,jint int_2);
								void incrementAll(jdoubleArray doubleArray_0);
								jint hashCode();
							}; // end class AbstractStorelessUnivariateStatistic
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class BaseMultivariateOptimizer : public BaseOptimizer {
							public:
						            BaseMultivariateOptimizer(jobject _jthis, bool copy);
						            BaseMultivariateOptimizer(const BaseMultivariateOptimizer &);
						        
							virtual ~BaseMultivariateOptimizer();
							jdoubleArray getStartPoint();
							jdoubleArray getLowerBound();
							jdoubleArray getUpperBound();
						}; // end class BaseMultivariateOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class ParserConfigurationSettings : public java::lang::Object {
						public:
					            ParserConfigurationSettings(jobject _jthis, bool copy);
					            ParserConfigurationSettings(const ParserConfigurationSettings &);
					        
						ParserConfigurationSettings(xni::parser::XMLComponentManager xMLComponentManager_0);
						ParserConfigurationSettings();
						virtual ~ParserConfigurationSettings();
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void addRecognizedFeatures(jobjectArray stringArray_0);
						void addRecognizedFeatures(int argc,const char **argv);
						void addRecognizedProperties(jobjectArray stringArray_0);
						void addRecognizedProperties(int argc,const char **argv);
					}; // end class ParserConfigurationSettings
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace java{
		namespace util{
			
			class EventObject : public lang::Object {
				public:
			            EventObject(jobject _jthis, bool copy);
			            EventObject(const EventObject &);
			        
				virtual ~EventObject();
				jstring toString();
			}; // end class EventObject
		} // end namespace java
	} // end namespace util

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class AbstractGrammar : public java::lang::Object {
								public:
							            AbstractGrammar(jobject _jthis, bool copy);
							            AbstractGrammar(const AbstractGrammar &);
							        
								AbstractGrammar();
								AbstractGrammar(jstring string_0);
								virtual ~AbstractGrammar();
								jstring getLabel();
								void setLabel(jstring string_0);
								void addTerminalProduction(event::Event event_0);
								jint get3rdLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								void learnEndElement();
								event::EventType get3rdLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get3rdLevelCharacteristics(FidelityOptions fidelityOptions_0);
								void learnStartElement(event::StartElement startElement_0);
								void learnAttribute(event::Attribute attribute_0);
								void learnCharacters();
								void stopLearning();
								jint learningStopped();
								Grammar getElementContentGrammar();
								jint hashCode();
							}; // end class AbstractGrammar
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace javax{
		namespace swing{
			
			class JFrame : public java::awt::Frame {
				public:
			            JFrame(jobject _jthis, bool copy);
			            JFrame(const JFrame &);
			        
				JFrame(java::awt::GraphicsConfiguration graphicsConfiguration_0);
				JFrame();
				JFrame(jstring string_0);
				JFrame(jstring string_0,java::awt::GraphicsConfiguration graphicsConfiguration_1);
				virtual ~JFrame();
				jint getDefaultCloseOperation();
				void setTransferHandler(TransferHandler transferHandler_0);
				TransferHandler getTransferHandler();
				JMenuBar getJMenuBar();
				JRootPane getRootPane();
				void setIconImage(java::awt::Image image_0);
				void setContentPane(java::awt::Container container_0);
				JLayeredPane getLayeredPane();
				void setLayeredPane(JLayeredPane jLayeredPane_0);
				java::awt::Component getGlassPane();
				void setGlassPane(java::awt::Component component_0);
				java::awt::Graphics getGraphics();
				void repaint(jlong long_0,jint int_1,jint int_2,jint int_3,jint int_4);
				static void setDefaultLookAndFeelDecorated(jboolean boolean_0);
				static jboolean isDefaultLookAndFeelDecorated();
				accessibility::AccessibleContext getAccessibleContext();
				java::awt::Container getContentPane();
				void setLayout(java::awt::LayoutManager layoutManager_0);
				void setDefaultCloseOperation(jint int_0);
				void setJMenuBar(JMenuBar jMenuBar_0);
				void remove(java::awt::Component component_0);
				void update(java::awt::Graphics graphics_0);
			}; // end class JFrame
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			
			class JPanel : public JComponent {
				public:
			            JPanel(jobject _jthis, bool copy);
			            JPanel(const JPanel &);
			        
				JPanel(java::awt::LayoutManager layoutManager_0,jboolean boolean_1);
				JPanel(java::awt::LayoutManager layoutManager_0);
				JPanel(jboolean boolean_0);
				JPanel();
				virtual ~JPanel();
				plaf::PanelUI getUI();
				void setUI(plaf::PanelUI panelUI_0);
				void updateUI();
				jstring getUIClassID();
				accessibility::AccessibleContext getAccessibleContext();
			}; // end class JPanel
		} // end namespace javax
	} // end namespace swing

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class AbstractDatatype : public java::lang::Object {
							public:
						            AbstractDatatype(jobject _jthis, bool copy);
						            AbstractDatatype(const AbstractDatatype &);
						        
							AbstractDatatype();
							AbstractDatatype(types::BuiltInType builtInType_0,context::QNameContext qNameContext_1);
							virtual ~AbstractDatatype();
							types::BuiltInType getBuiltInType();
							context::QNameContext getSchemaType();
							Datatype getBaseDatatype();
							void setBaseDatatype(Datatype datatype_0);
							jstring toString();
							jint hashCode();
						}; // end class AbstractDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class XMLEventImpl : public java::lang::Object {
							public:
						            XMLEventImpl(jobject _jthis, bool copy);
						            XMLEventImpl(const XMLEventImpl &);
						        
							virtual ~XMLEventImpl();
							virtual jboolean isStartElement();
							virtual jboolean isAttribute();
							virtual jboolean isNamespace();
							virtual jboolean isEndElement();
							virtual jboolean isEntityReference();
							virtual jboolean isProcessingInstruction();
							virtual jboolean isCharacters();
							virtual jboolean isStartDocument();
							virtual jboolean isEndDocument();
							virtual javax::xml::stream::events::StartElement asStartElement();
							virtual javax::xml::stream::events::EndElement asEndElement();
							virtual javax::xml::stream::events::Characters asCharacters();
							virtual javax::xml::namespace::QName getSchemaType();
							virtual jint getEventType();
							virtual jstring toString();
							virtual javax::xml::stream::Location getLocation();
						}; // end class XMLEventImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace java{
		namespace lang{
			
			class IllegalStateException : public RuntimeException {
				public:
			            IllegalStateException(jobject _jthis, bool copy);
			            IllegalStateException(const IllegalStateException &);
			        
				IllegalStateException(Throwable throwable_0);
				IllegalStateException(jstring string_0,Throwable throwable_1);
				IllegalStateException(jstring string_0);
				IllegalStateException();
				virtual ~IllegalStateException();
			}; // end class IllegalStateException
		} // end namespace java
	} // end namespace lang

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MathIllegalNumberException : public MathIllegalArgumentException {
							public:
						            MathIllegalNumberException(jobject _jthis, bool copy);
						            MathIllegalNumberException(const MathIllegalNumberException &);
						        
							virtual ~MathIllegalNumberException();
							java::lang::Number getArgument();
						}; // end class MathIllegalNumberException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace java{
		namespace util{
			
			class AbstractCollection : public lang::Object {
				public:
			            AbstractCollection(jobject _jthis, bool copy);
			            AbstractCollection(const AbstractCollection &);
			        
				virtual ~AbstractCollection();
				jstring toString();
				void clear();
				jboolean isEmpty();
				jboolean addAll(Collection collection_0);
				jboolean containsAll(Collection collection_0);
				jboolean removeAll(Collection collection_0);
				jboolean retainAll(Collection collection_0);
			}; // end class AbstractCollection
		} // end namespace java
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							
							class AbstractStepInterpolator : public java::lang::Object {
								public:
							            AbstractStepInterpolator(jobject _jthis, bool copy);
							            AbstractStepInterpolator(const AbstractStepInterpolator &);
							        
								virtual ~AbstractStepInterpolator();
								void storeTime(jdouble double_0);
								jdouble getInterpolatedTime();
								virtual void finalizeStep();
								jdouble getPreviousTime();
								jdouble getCurrentTime();
								jdouble getGlobalPreviousTime();
								jdouble getGlobalCurrentTime();
								jboolean isForward();
								void setSoftPreviousTime(jdouble double_0);
								void setSoftCurrentTime(jdouble double_0);
								void setInterpolatedTime(jdouble double_0);
								jdoubleArray getInterpolatedState();
								jdoubleArray getInterpolatedSecondaryState(jint int_0);
								jdoubleArray getInterpolatedDerivatives();
								jdoubleArray getInterpolatedSecondaryDerivatives(jint int_0);
								StepInterpolator copy();
								void shift();
							}; // end class AbstractStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MathIllegalStateException : public java::lang::IllegalStateException {
							public:
						            MathIllegalStateException(jobject _jthis, bool copy);
						            MathIllegalStateException(const MathIllegalStateException &);
						        
							MathIllegalStateException();
							virtual ~MathIllegalStateException();
							jstring getMessage();
							jstring getLocalizedMessage();
							util::ExceptionContext getContext();
						}; // end class MathIllegalStateException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace java{
		namespace util{
			
			class AbstractList : public AbstractCollection {
				public:
			            AbstractList(jobject _jthis, bool copy);
			            AbstractList(const AbstractList &);
			        
				virtual ~AbstractList();
				jint hashCode();
				void clear();
				List subList(jint int_0,jint int_1);
				Iterator iterator();
				jboolean addAll(jint int_0,Collection collection_1);
				ListIterator listIterator(jint int_0);
				ListIterator listIterator();
			}; // end class AbstractList
		} // end namespace java
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDAbstractTraverser : public java::lang::Object {
								public:
							            XSDAbstractTraverser(jobject _jthis, bool copy);
							            XSDAbstractTraverser(const XSDAbstractTraverser &);
							        
								virtual ~XSDAbstractTraverser();
							}; // end class XSDAbstractTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class AbstractUnivariateSolver : public BaseAbstractUnivariateSolver {
								public:
							            AbstractUnivariateSolver(jobject _jthis, bool copy);
							            AbstractUnivariateSolver(const AbstractUnivariateSolver &);
							        
								virtual ~AbstractUnivariateSolver();
							}; // end class AbstractUnivariateSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class AbstractValue : public java::lang::Object {
							public:
						            AbstractValue(jobject _jthis, bool copy);
						            AbstractValue(const AbstractValue &);
						        
							AbstractValue(ValueType valueType_0);
							virtual ~AbstractValue();
							virtual ValueType getValueType();
							jcharArray getCharacters();
							jstring toString();
							jstring toString(jcharArray charArray_0,jint int_1);
						}; // end class AbstractValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace java{
		namespace io{
			
			class Reader : public lang::Object {
				public:
			            Reader(jobject _jthis, bool copy);
			            Reader(const Reader &);
			        
				virtual ~Reader();
				jint read(jcharArray charArray_0);
				jint read();
				jint read(nio::CharBuffer charBuffer_0);
				void mark(jint int_0);
				jlong skip(jlong long_0);
				jboolean markSupported();
				void reset();
				jboolean ready();
			}; // end class Reader
		} // end namespace java
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class AbstractDateTimeDV : public TypeValidator {
								public:
							            AbstractDateTimeDV(jobject _jthis, bool copy);
							            AbstractDateTimeDV(const AbstractDateTimeDV &);
							        
								AbstractDateTimeDV();
								virtual ~AbstractDateTimeDV();
								jshort getAllowedFacets();
							}; // end class AbstractDateTimeDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace java{
		namespace awt{
			
			class Panel : public Container {
				public:
			            Panel(jobject _jthis, bool copy);
			            Panel(const Panel &);
			        
				Panel();
				Panel(LayoutManager layoutManager_0);
				virtual ~Panel();
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
			}; // end class Panel
		} // end namespace java
	} // end namespace awt

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XMLParser : public java::lang::Object {
						public:
					            XMLParser(jobject _jthis, bool copy);
					            XMLParser(const XMLParser &);
					        
						virtual ~XMLParser();
						void parse(xni::parser::XMLInputSource xMLInputSource_0);
					}; // end class XMLParser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class BitsStreamGenerator : public java::lang::Object {
							public:
						            BitsStreamGenerator(jobject _jthis, bool copy);
						            BitsStreamGenerator(const BitsStreamGenerator &);
						        
							BitsStreamGenerator();
							virtual ~BitsStreamGenerator();
							void nextBytes(jbyteArray byteArray_0);
							jlong nextLong();
							jlong nextLong(jlong long_0);
							jboolean nextBoolean();
							jfloat nextFloat();
							jdouble nextGaussian();
							void clear();
							jdouble nextDouble();
							jint nextInt(jint int_0);
							jint nextInt();
						}; // end class BitsStreamGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class AbstractFileComparator : public java::lang::Object {
							public:
						            AbstractFileComparator(jobject _jthis, bool copy);
						            AbstractFileComparator(const AbstractFileComparator &);
						        
							virtual ~AbstractFileComparator();
							jstring toString();
							jobjectArray sort(jobjectArray fileArray_0);
							java::util::List sort(java::util::List list_0);
						}; // end class AbstractFileComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class AbstractRestrictedCharacterSet : public java::lang::Object {
								public:
							            AbstractRestrictedCharacterSet(jobject _jthis, bool copy);
							            AbstractRestrictedCharacterSet(const AbstractRestrictedCharacterSet &);
							        
								virtual ~AbstractRestrictedCharacterSet();
								jint getCodePoint(jint int_0);
								jint getCode(jint int_0);
								jint getCodingLength();
								jstring toString();
								jint hashCode();
								jint size();
							}; // end class AbstractRestrictedCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class AbstractSchemaInformedGrammar : public AbstractGrammar {
								public:
							            AbstractSchemaInformedGrammar(jobject _jthis, bool copy);
							            AbstractSchemaInformedGrammar(const AbstractSchemaInformedGrammar &);
							        
								AbstractSchemaInformedGrammar(jstring string_0);
								AbstractSchemaInformedGrammar();
								virtual ~AbstractSchemaInformedGrammar();
								virtual jboolean isSchemaInformed();
								void joinGrammars(Grammar grammar_0);
								virtual jint getNumberOfEvents();
								void addProduction(event::Event event_0,Grammar grammar_1);
								jint get1stLevelEventCodeLength(FidelityOptions fidelityOptions_0);
								jint getNumberOfDeclaredAttributes();
								jint getLeastAttributeEventCode();
								production::Production getProduction(event::EventType eventType_0);
								virtual production::Production getProduction(jint int_0);
								production::Production getStartElementProduction(jstring string_0,jstring string_1);
								production::Production getStartElementNSProduction(jstring string_0);
								production::Production getAttributeProduction(jstring string_0,jstring string_1);
								production::Production getAttributeNSProduction(jstring string_0);
								jstring toString();
								SchemaInformedGrammar clone();
								SchemaInformedGrammar duplicate();
							}; // end class AbstractSchemaInformedGrammar
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class AdaptiveStepsizeIntegrator : public AbstractIntegrator {
								public:
							            AdaptiveStepsizeIntegrator(jobject _jthis, bool copy);
							            AdaptiveStepsizeIntegrator(const AdaptiveStepsizeIntegrator &);
							        
								AdaptiveStepsizeIntegrator(jstring string_0,jdouble double_1,jdouble double_2,jdoubleArray doubleArray_3,jdoubleArray doubleArray_4);
								AdaptiveStepsizeIntegrator(jstring string_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
								virtual ~AdaptiveStepsizeIntegrator();
								jdouble getCurrentStepStart();
								void setStepSizeControl(jdouble double_0,jdouble double_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3);
								void setStepSizeControl(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
								void setInitialStepSize(jdouble double_0);
								jdouble initializeStep(jboolean boolean_0,jint int_1,jdoubleArray doubleArray_2,jdouble double_3,jdoubleArray doubleArray_4,jdoubleArray doubleArray_5,jdoubleArray doubleArray_6,jdoubleArray doubleArray_7);
								jdouble getMinStep();
								jdouble getMaxStep();
							}; // end class AdaptiveStepsizeIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class RungeKuttaStepInterpolator : public sampling::AbstractStepInterpolator {
								public:
							            RungeKuttaStepInterpolator(jobject _jthis, bool copy);
							            RungeKuttaStepInterpolator(const RungeKuttaStepInterpolator &);
							        
								RungeKuttaStepInterpolator(RungeKuttaStepInterpolator rungeKuttaStepInterpolator_0);
								virtual ~RungeKuttaStepInterpolator();
								void readExternal(java::io::ObjectInput objectInput_0);
								void writeExternal(java::io::ObjectOutput objectOutput_0);
								void shift();
							}; // end class RungeKuttaStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace java{
		namespace awt{
			
			class AWTEvent : public util::EventObject {
				public:
			            AWTEvent(jobject _jthis, bool copy);
			            AWTEvent(const AWTEvent &);
			        
				AWTEvent(Event event_0);
				virtual ~AWTEvent();
				jstring toString();
				jstring paramString();
				jint getID();
			}; // end class AWTEvent
		} // end namespace java
	} // end namespace awt

	namespace rcs{
		namespace nml{
			
			class NMLmsg : public java::lang::Object {
				public:
			            NMLmsg(jobject _jthis, bool copy);
			            NMLmsg(const NMLmsg &);
			        
				NMLmsg(jint int_0);
				virtual ~NMLmsg();
				NMLmsg clone();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class NMLmsg
		} // end namespace rcs
	} // end namespace nml

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class BaseAbstractMultivariateOptimizer : public java::lang::Object {
								public:
							            BaseAbstractMultivariateOptimizer(jobject _jthis, bool copy);
							            BaseAbstractMultivariateOptimizer(const BaseAbstractMultivariateOptimizer &);
							        
								virtual ~BaseAbstractMultivariateOptimizer();
								jint getEvaluations();
								jint getMaxEvaluations();
								GoalType getGoalType();
								jdoubleArray getStartPoint();
								jdoubleArray getLowerBound();
								jdoubleArray getUpperBound();
								ConvergenceChecker getConvergenceChecker();
								PointValuePair optimize(jint int_0,analysis::MultivariateFunction multivariateFunction_1,GoalType goalType_2,jobjectArray optimizationDataArray_3);
								PointValuePair optimize(jint int_0,analysis::MultivariateFunction multivariateFunction_1,GoalType goalType_2,jdoubleArray doubleArray_3);
							}; // end class BaseAbstractMultivariateOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class MultivariateOptimizer : public BaseMultivariateOptimizer {
									public:
								            MultivariateOptimizer(jobject _jthis, bool copy);
								            MultivariateOptimizer(const MultivariateOptimizer &);
								        
									virtual ~MultivariateOptimizer();
									jdouble computeObjectiveValue(jdoubleArray doubleArray_0);
									GoalType getGoalType();
									PointValuePair optimize(jobjectArray optimizationDataArray_0);
								}; // end class MultivariateOptimizer
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class AbstractIntegerDistribution : public java::lang::Object {
							public:
						            AbstractIntegerDistribution(jobject _jthis, bool copy);
						            AbstractIntegerDistribution(const AbstractIntegerDistribution &);
						        
							virtual ~AbstractIntegerDistribution();
							jdouble cumulativeProbability(jint int_0,jint int_1);
							jint inverseCumulativeProbability(jdouble double_0);
							void reseedRandomGenerator(jlong long_0);
							jint sample();
							jintArray sample(jint int_0);
							jdouble logProbability(jint int_0);
						}; // end class AbstractIntegerDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class CharacterDataImpl : public ChildNode {
						public:
					            CharacterDataImpl(jobject _jthis, bool copy);
					            CharacterDataImpl(const CharacterDataImpl &);
					        
						CharacterDataImpl();
						virtual ~CharacterDataImpl();
						jstring getNodeValue();
						void setNodeValue(jstring string_0);
						w3c::dom::NodeList getChildNodes();
						jstring substringData(jint int_0,jint int_1);
						void insertData(jint int_0,jstring string_1);
						void deleteData(jint int_0,jint int_1);
						jstring getData();
						void setData(jstring string_0);
						void appendData(jstring string_0);
						void replaceData(jint int_0,jint int_1,jstring string_2);
						jint getLength();
					}; // end class CharacterDataImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class AbstractEXIBodyCoder : public java::lang::Object {
							public:
						            AbstractEXIBodyCoder(jobject _jthis, bool copy);
						            AbstractEXIBodyCoder(const AbstractEXIBodyCoder &);
						        
							AbstractEXIBodyCoder(EXIFactory eXIFactory_0);
							virtual ~AbstractEXIBodyCoder();
							void setErrorHandler(exceptions::ErrorHandler errorHandler_0);
						}; // end class AbstractEXIBodyCoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class AbstractTypeCoder : public java::lang::Object {
							public:
						            AbstractTypeCoder(jobject _jthis, bool copy);
						            AbstractTypeCoder(const AbstractTypeCoder &);
						        
							AbstractTypeCoder();
							AbstractTypeCoder(jobjectArray qNameArray_0,jobjectArray qNameArray_1);
							virtual ~AbstractTypeCoder();
						}; // end class AbstractTypeCoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class CMNode : public java::lang::Object {
								public:
							            CMNode(jobject _jthis, bool copy);
							            CMNode(const CMNode &);
							        
								CMNode(jint int_0);
								virtual ~CMNode();
								void setIsCompactUPAModel(jboolean boolean_0);
								jboolean isCompactedForUPA();
								virtual CMStateSet firstPos();
								virtual CMStateSet lastPos();
								virtual void setMaxStates(jint int_0);
								virtual jint type();
							}; // end class CMNode
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace java{
		namespace lang{
			
			class Number : public Object {
				public:
			            Number(jobject _jthis, bool copy);
			            Number(const Number &);
			        
				Number();
				virtual ~Number();
				jbyte byteValue();
				jshort shortValue();
			}; // end class Number
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace io{
			
			class FilterInputStream : public InputStream {
				public:
			            FilterInputStream(jobject _jthis, bool copy);
			            FilterInputStream(const FilterInputStream &);
			        
				virtual ~FilterInputStream();
				jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
				jint read(jbyteArray byteArray_0);
				jint read();
				void close();
				void mark(jint int_0);
				jlong skip(jlong long_0);
				jint available();
				jboolean markSupported();
				void reset();
			}; // end class FilterInputStream
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace io{
			
			class Writer : public lang::Object {
				public:
			            Writer(jobject _jthis, bool copy);
			            Writer(const Writer &);
			        
				virtual ~Writer();
				Writer append(lang::CharSequence charSequence_0,jint int_1,jint int_2);
				Writer append(jchar char_0);
				Writer append(lang::CharSequence charSequence_0);
				void write(jcharArray charArray_0);
				void write(jint int_0);
				void write(jstring string_0,jint int_1,jint int_2);
				void write(jstring string_0);
			}; // end class Writer
		} // end namespace java
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class DefaultNode : public java::lang::Object {
								public:
							            DefaultNode(jobject _jthis, bool copy);
							            DefaultNode(const DefaultNode &);
							        
								DefaultNode();
								virtual ~DefaultNode();
								jstring getNodeName();
								jstring getNodeValue();
								void setNodeValue(jstring string_0);
								jshort getNodeType();
								w3c::dom::Node getParentNode();
								w3c::dom::NodeList getChildNodes();
								w3c::dom::Node getFirstChild();
								w3c::dom::Node getLastChild();
								w3c::dom::Node getPreviousSibling();
								w3c::dom::Node getNextSibling();
								w3c::dom::Document getOwnerDocument();
								w3c::dom::Node insertBefore(w3c::dom::Node node_0,w3c::dom::Node node_1);
								w3c::dom::Node replaceChild(w3c::dom::Node node_0,w3c::dom::Node node_1);
								w3c::dom::Node removeChild(w3c::dom::Node node_0);
								w3c::dom::Node appendChild(w3c::dom::Node node_0);
								jboolean hasChildNodes();
								w3c::dom::Node cloneNode(jboolean boolean_0);
								void setPrefix(jstring string_0);
								jboolean hasAttributes();
								jstring getBaseURI();
								jshort compareDocumentPosition(w3c::dom::Node node_0);
								jstring getTextContent();
								void setTextContent(jstring string_0);
								jboolean isSameNode(w3c::dom::Node node_0);
								jstring lookupPrefix(jstring string_0);
								jboolean isDefaultNamespace(jstring string_0);
								jstring lookupNamespaceURI(jstring string_0);
								jboolean isEqualNode(w3c::dom::Node node_0);
								jstring getPrefix();
								jstring getNamespaceURI();
								jstring getLocalName();
								void normalize();
								w3c::dom::NamedNodeMap getAttributes();
								jboolean isSupported(jstring string_0,jstring string_1);
							}; // end class DefaultNode
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLScanner : public java::lang::Object {
						public:
					            XMLScanner(jobject _jthis, bool copy);
					            XMLScanner(const XMLScanner &);
					        
						XMLScanner();
						virtual ~XMLScanner();
						void startEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void endEntity(jstring string_0,xni::Augmentations augmentations_1);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						jstring scanPseudoAttribute(jboolean boolean_0,xni::XMLString xMLString_1);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XMLScanner
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class CoreDOMImplementationImpl : public java::lang::Object {
						public:
					            CoreDOMImplementationImpl(jobject _jthis, bool copy);
					            CoreDOMImplementationImpl(const CoreDOMImplementationImpl &);
					        
						CoreDOMImplementationImpl();
						virtual ~CoreDOMImplementationImpl();
						jboolean hasFeature(jstring string_0,jstring string_1);
						w3c::dom::DocumentType createDocumentType(jstring string_0,jstring string_1,jstring string_2);
						static w3c::dom::DOMImplementation getDOMImplementation();
						w3c::dom::ls::LSSerializer createLSSerializer();
						w3c::dom::Document createDocument(jstring string_0,jstring string_1,w3c::dom::DocumentType documentType_2);
						w3c::dom::ls::LSParser createLSParser(jshort short_0,jstring string_1);
						w3c::dom::ls::LSInput createLSInput();
						w3c::dom::ls::LSOutput createLSOutput();
					}; // end class CoreDOMImplementationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class AbstractXMLDocumentParser : public XMLParser {
						public:
					            AbstractXMLDocumentParser(jobject _jthis, bool copy);
					            AbstractXMLDocumentParser(const AbstractXMLDocumentParser &);
					        
						virtual ~AbstractXMLDocumentParser();
						void startCDATA(xni::Augmentations augmentations_0);
						void endCDATA(xni::Augmentations augmentations_0);
						void startDTD(xni::XMLLocator xMLLocator_0,xni::Augmentations augmentations_1);
						void endDTD(xni::Augmentations augmentations_0);
						void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jobjectArray stringArray_3,jstring string_4,xni::XMLString xMLString_5,xni::XMLString xMLString_6,xni::Augmentations augmentations_7);
						void elementDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void externalEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void internalEntityDecl(jstring string_0,xni::XMLString xMLString_1,xni::XMLString xMLString_2,xni::Augmentations augmentations_3);
						void notationDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void unparsedEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void element(jstring string_0,xni::Augmentations augmentations_1);
						void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
						void endDocument(xni::Augmentations augmentations_0);
						void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
						void startContentModel(jstring string_0,xni::Augmentations augmentations_1);
						void endContentModel(xni::Augmentations augmentations_0);
						void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
						xni::parser::XMLDocumentSource getDocumentSource();
						void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						void startExternalSubset(xni::XMLResourceIdentifier xMLResourceIdentifier_0,xni::Augmentations augmentations_1);
						void startParameterEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void endParameterEntity(jstring string_0,xni::Augmentations augmentations_1);
						void endExternalSubset(xni::Augmentations augmentations_0);
						void any(xni::Augmentations augmentations_0);
						void startGroup(xni::Augmentations augmentations_0);
						void pcdata(xni::Augmentations augmentations_0);
						void endGroup(xni::Augmentations augmentations_0);
						void occurrence(jshort short_0,xni::Augmentations augmentations_1);
						void startAttlist(jstring string_0,xni::Augmentations augmentations_1);
						void endAttlist(xni::Augmentations augmentations_0);
						void setDTDSource(xni::parser::XMLDTDSource xMLDTDSource_0);
						xni::parser::XMLDTDSource getDTDSource();
						void setDTDContentModelSource(xni::parser::XMLDTDContentModelSource xMLDTDContentModelSource_0);
						xni::parser::XMLDTDContentModelSource getDTDContentModelSource();
						void startConditional(jshort short_0,xni::Augmentations augmentations_1);
						void ignoredCharacters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void endConditional(xni::Augmentations augmentations_0);
						void separator(jshort short_0,xni::Augmentations augmentations_1);
						void empty(xni::Augmentations augmentations_0);
					}; // end class AbstractXMLDocumentParser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class ProxyInputStream : public java::io::FilterInputStream {
							public:
						            ProxyInputStream(jobject _jthis, bool copy);
						            ProxyInputStream(const ProxyInputStream &);
						        
							ProxyInputStream(java::io::InputStream inputStream_0);
							virtual ~ProxyInputStream();
							jint read(jbyteArray byteArray_0);
							jint read();
							jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jint available();
							jboolean markSupported();
							void reset();
						}; // end class ProxyInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class NodeImpl : public DefaultNode {
								public:
							            NodeImpl(jobject _jthis, bool copy);
							            NodeImpl(const NodeImpl &);
							        
								NodeImpl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jshort short_4);
								NodeImpl();
								virtual ~NodeImpl();
								jstring getNodeName();
								jshort getNodeType();
								jstring getPrefix();
								jstring getNamespaceURI();
								jstring getLocalName();
								jboolean getReadOnly();
								jstring toString();
								void setReadOnly(jboolean boolean_0,jboolean boolean_1);
							}; // end class NodeImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class RungeKuttaIntegrator : public AbstractIntegrator {
								public:
							            RungeKuttaIntegrator(jobject _jthis, bool copy);
							            RungeKuttaIntegrator(const RungeKuttaIntegrator &);
							        
								virtual ~RungeKuttaIntegrator();
								jdoubleArray singleStep(FirstOrderDifferentialEquations firstOrderDifferentialEquations_0,jdouble double_1,jdoubleArray doubleArray_2,jdouble double_3);
								void integrate(ExpandableStatefulODE expandableStatefulODE_0,jdouble double_1);
							}; // end class RungeKuttaIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class AbstractWell : public BitsStreamGenerator {
							public:
						            AbstractWell(jobject _jthis, bool copy);
						            AbstractWell(const AbstractWell &);
						        
							virtual ~AbstractWell();
							void setSeed(jintArray intArray_0);
							void setSeed(jlong long_0);
							void setSeed(jint int_0);
						}; // end class AbstractWell
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMImplementationImpl : public CoreDOMImplementationImpl {
						public:
					            DOMImplementationImpl(jobject _jthis, bool copy);
					            DOMImplementationImpl(const DOMImplementationImpl &);
					        
						DOMImplementationImpl();
						virtual ~DOMImplementationImpl();
						jboolean hasFeature(jstring string_0,jstring string_1);
						static w3c::dom::DOMImplementation getDOMImplementation();
					}; // end class DOMImplementationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XML11Configuration : public util::ParserConfigurationSettings {
						public:
					            XML11Configuration(jobject _jthis, bool copy);
					            XML11Configuration(const XML11Configuration &);
					        
						XML11Configuration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						XML11Configuration(util::SymbolTable symbolTable_0);
						XML11Configuration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						XML11Configuration();
						virtual ~XML11Configuration();
						void setLocale(java::util::Locale locale_0);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(xni::parser::XMLEntityResolver xMLEntityResolver_0);
						xni::parser::XMLEntityResolver getEntityResolver();
						void setDTDHandler(xni::XMLDTDHandler xMLDTDHandler_0);
						xni::XMLDTDHandler getDTDHandler();
						xni::parser::XMLErrorHandler getErrorHandler();
						java::util::Locale getLocale();
						void setErrorHandler(xni::parser::XMLErrorHandler xMLErrorHandler_0);
						void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
						void setDTDContentModelHandler(xni::XMLDTDContentModelHandler xMLDTDContentModelHandler_0);
						xni::XMLDTDContentModelHandler getDTDContentModelHandler();
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getDocumentHandler();
						jboolean parse(jboolean boolean_0);
						void parse(xni::parser::XMLInputSource xMLInputSource_0);
						void cleanup();
					}; // end class XML11Configuration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class DefaultHandler : public java::lang::Object {
						public:
					            DefaultHandler(jobject _jthis, bool copy);
					            DefaultHandler(const DefaultHandler &);
					        
						DefaultHandler();
						virtual ~DefaultHandler();
						InputSource resolveEntity(jstring string_0,jstring string_1);
						void notationDecl(jstring string_0,jstring string_1,jstring string_2);
						void unparsedEntityDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						void setDocumentLocator(Locator locator_0);
						void endPrefixMapping(jstring string_0);
						void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
						void processingInstruction(jstring string_0,jstring string_1);
						void skippedEntity(jstring string_0);
						void fatalError(SAXParseException sAXParseException_0);
						void warning(SAXParseException sAXParseException_0);
						void characters(jcharArray charArray_0,jint int_1,jint int_2);
						void startPrefixMapping(jstring string_0,jstring string_1);
						void startElement(jstring string_0,jstring string_1,jstring string_2,Attributes attributes_3);
						void startDocument();
						void endDocument();
						void endElement(jstring string_0,jstring string_1,jstring string_2);
						void error(SAXParseException sAXParseException_0);
					}; // end class DefaultHandler
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RealLinearOperator : public java::lang::Object {
							public:
						            RealLinearOperator(jobject _jthis, bool copy);
						            RealLinearOperator(const RealLinearOperator &);
						        
							RealLinearOperator();
							virtual ~RealLinearOperator();
							RealVector operateTranspose(RealVector realVector_0);
							jboolean isTransposable();
						}; // end class RealLinearOperator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							
							class BaseAbstractUnivariateIntegrator : public java::lang::Object {
								public:
							            BaseAbstractUnivariateIntegrator(jobject _jthis, bool copy);
							            BaseAbstractUnivariateIntegrator(const BaseAbstractUnivariateIntegrator &);
							        
								virtual ~BaseAbstractUnivariateIntegrator();
								jint getEvaluations();
								jdouble getAbsoluteAccuracy();
								jdouble getRelativeAccuracy();
								jdouble integrate(jint int_0,UnivariateFunction univariateFunction_1,jdouble double_2,jdouble double_3);
								jint getIterations();
								jint getMinimalIterationCount();
								jint getMaximalIterationCount();
							}; // end class BaseAbstractUnivariateIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration

	namespace java{
		namespace text{
			
			class Format : public lang::Object {
				public:
			            Format(jobject _jthis, bool copy);
			            Format(const Format &);
			        
				virtual ~Format();
			}; // end class Format
		} // end namespace java
	} // end namespace text

	namespace java{
		namespace io{
			
			class FilterOutputStream : public OutputStream {
				public:
			            FilterOutputStream(jobject _jthis, bool copy);
			            FilterOutputStream(const FilterOutputStream &);
			        
				FilterOutputStream(OutputStream outputStream_0);
				virtual ~FilterOutputStream();
				void write(jbyteArray byteArray_0,jint int_1,jint int_2);
				void write(jbyteArray byteArray_0);
				void write(jint int_0);
				void flush();
				void close();
			}; // end class FilterOutputStream
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace io{
			
			class IOException : public lang::Exception {
				public:
			            IOException(jobject _jthis, bool copy);
			            IOException(const IOException &);
			        
				IOException(lang::Throwable throwable_0);
				IOException(jstring string_0,lang::Throwable throwable_1);
				IOException(jstring string_0);
				IOException();
				virtual ~IOException();
			}; // end class IOException
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace awt{
			namespace geom{
				
				class Point2D : public lang::Object {
					public:
				            Point2D(jobject _jthis, bool copy);
				            Point2D(const Point2D &);
				        
					virtual ~Point2D();
					jdouble distanceSq(Point2D point2D_0);
					static jdouble distanceSq(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					jdouble distanceSq(jdouble double_0,jdouble double_1);
					jdouble distance(Point2D point2D_0);
					jdouble distance(jdouble double_0,jdouble double_1);
					static jdouble distance(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					void setLocation(Point2D point2D_0);
					jint hashCode();
				}; // end class Point2D
			} // end namespace java
		} // end namespace awt
	} // end namespace geom

	namespace java{
		namespace awt{
			
			class TextComponent : public Component {
				public:
			            TextComponent(jobject _jthis, bool copy);
			            TextComponent(const TextComponent &);
			        
				virtual ~TextComponent();
				jboolean isEditable();
				jint getCaretPosition();
				jint getSelectionStart();
				jint getSelectionEnd();
				void setCaretPosition(jint int_0);
				jstring getSelectedText();
				void setSelectionStart(jint int_0);
				void setSelectionEnd(jint int_0);
				void select(jint int_0,jint int_1);
				void enableInputMethods(jboolean boolean_0);
				im::InputMethodRequests getInputMethodRequests();
				void selectAll();
				void addTextListener(event::TextListener textListener_0);
				void removeTextListener(event::TextListener textListener_0);
				jobjectArray getTextListeners();
				javax::accessibility::AccessibleContext getAccessibleContext();
				void setBackground(Color color_0);
				void addNotify();
				void removeNotify();
				Color getBackground();
				void setEditable(jboolean boolean_0);
				void setText(jstring string_0);
				jstring getText();
			}; // end class TextComponent
		} // end namespace java
	} // end namespace awt

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class AbstractBuiltInGrammar : public AbstractGrammar {
								public:
							            AbstractBuiltInGrammar(jobject _jthis, bool copy);
							            AbstractBuiltInGrammar(const AbstractBuiltInGrammar &);
							        
								AbstractBuiltInGrammar();
								virtual ~AbstractBuiltInGrammar();
								virtual jboolean isSchemaInformed();
								jint getNumberOfEvents();
								virtual void addProduction(event::Event event_0,Grammar grammar_1);
								jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								jint get1stLevelEventCodeLength(FidelityOptions fidelityOptions_0);
								void stopLearning();
								jint getNumberOfDeclaredAttributes();
								jint getLeastAttributeEventCode();
								production::Production getProduction(event::EventType eventType_0);
								production::Production getProduction(jint int_0);
								production::Production getStartElementProduction(jstring string_0,jstring string_1);
								production::Production getStartElementNSProduction(jstring string_0);
								production::Production getAttributeProduction(jstring string_0,jstring string_1);
								production::Production getAttributeNSProduction(jstring string_0);
								Grammar getTypeEmpty();
								jstring toString();
							}; // end class AbstractBuiltInGrammar
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLInputSource : public java::lang::Object {
							public:
						            XMLInputSource(jobject _jthis, bool copy);
						            XMLInputSource(const XMLInputSource &);
						        
							XMLInputSource(XMLResourceIdentifier xMLResourceIdentifier_0);
							XMLInputSource(jstring string_0,jstring string_1,jstring string_2,java::io::InputStream inputStream_3,jstring string_4);
							XMLInputSource(jstring string_0,jstring string_1,jstring string_2,java::io::Reader reader_3,jstring string_4);
							XMLInputSource(jstring string_0,jstring string_1,jstring string_2);
							virtual ~XMLInputSource();
							jstring getSystemId();
							void setCharacterStream(java::io::Reader reader_0);
							java::io::Reader getCharacterStream();
							void setEncoding(jstring string_0);
							void setPublicId(jstring string_0);
							jstring getPublicId();
							void setBaseSystemId(jstring string_0);
							jstring getBaseSystemId();
							void setSystemId(jstring string_0);
							void setByteStream(java::io::InputStream inputStream_0);
							java::io::InputStream getByteStream();
							jstring getEncoding();
						}; // end class XMLInputSource
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace rcs{
		namespace nml{
			
			class NMLFormatConverter : public java::lang::Object {
				public:
			            NMLFormatConverter(jobject _jthis, bool copy);
			            NMLFormatConverter(const NMLFormatConverter &);
			        
				NMLFormatConverter();
				virtual ~NMLFormatConverter();
				void set_array_val(jint int_0);
				void set_classVarArrayIndex(jint int_0);
				jstring toString();
			}; // end class NMLFormatConverter
		} // end namespace rcs
	} // end namespace nml

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class AbstractRegion : public java::lang::Object {
								public:
							            AbstractRegion(jobject _jthis, bool copy);
							            AbstractRegion(const AbstractRegion &);
							        
								AbstractRegion(jobjectArray hyperplaneArray_0,jdouble double_1);
								virtual ~AbstractRegion();
								SubHyperplane intersection(SubHyperplane subHyperplane_0);
								AbstractRegion applyTransform(Transform transform_0);
								AbstractRegion copySelf();
								Side side(Hyperplane hyperplane_0);
								jdouble getTolerance();
								Point getBarycenter();
								Region::Location checkPoint(Point point_0);
								Region::Location checkPoint(Vector vector_0);
								jboolean isFull();
								jboolean isFull(BSPTree bSPTree_0);
								BoundaryProjection projectToBoundary(Point point_0);
								jdouble getBoundarySize();
								jboolean isEmpty(BSPTree bSPTree_0);
								jboolean isEmpty();
								jboolean contains(Region region_0);
								jdouble getSize();
								BSPTree getTree(jboolean boolean_0);
							}; // end class AbstractRegion
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class CoreDocumentImpl : public ParentNode {
						public:
					            CoreDocumentImpl(jobject _jthis, bool copy);
					            CoreDocumentImpl(const CoreDocumentImpl &);
					        
						CoreDocumentImpl(w3c::dom::DocumentType documentType_0,jboolean boolean_1);
						CoreDocumentImpl(jboolean boolean_0);
						CoreDocumentImpl();
						CoreDocumentImpl(w3c::dom::DocumentType documentType_0);
						virtual ~CoreDocumentImpl();
						w3c::dom::NodeList getElementsByTagName(jstring string_0);
						w3c::dom::NodeList getElementsByTagNameNS(jstring string_0,jstring string_1);
						jstring getNodeName();
						jshort getNodeType();
						virtual w3c::dom::Document getOwnerDocument();
						w3c::dom::Node insertBefore(w3c::dom::Node node_0,w3c::dom::Node node_1);
						w3c::dom::Node replaceChild(w3c::dom::Node node_0,w3c::dom::Node node_1);
						w3c::dom::Node removeChild(w3c::dom::Node node_0);
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getBaseURI();
						jstring getTextContent();
						void setTextContent(jstring string_0);
						jstring getVersion();
						void abort();
						w3c::dom::Element getIdentifier(jstring string_0);
						void setEncoding(jstring string_0);
						w3c::dom::Attr createAttribute(jstring string_0);
						w3c::dom::Attr createAttributeNS(jstring string_0,jstring string_1);
						w3c::dom::Attr createAttributeNS(jstring string_0,jstring string_1,jstring string_2);
						static jboolean isXMLName(jstring string_0,jboolean boolean_1);
						void removeIdentifier(jstring string_0);
						void putIdentifier(jstring string_0,w3c::dom::Element element_1);
						w3c::dom::DocumentType getDoctype();
						w3c::dom::Text createTextNode(jstring string_0);
						w3c::dom::DOMImplementation getImplementation();
						w3c::dom::Element getDocumentElement();
						w3c::dom::CDATASection createCDATASection(jstring string_0);
						w3c::dom::Comment createComment(jstring string_0);
						w3c::dom::DocumentFragment createDocumentFragment();
						w3c::dom::Element createElement(jstring string_0);
						w3c::dom::EntityReference createEntityReference(jstring string_0);
						w3c::dom::ProcessingInstruction createProcessingInstruction(jstring string_0,jstring string_1);
						void setErrorChecking(jboolean boolean_0);
						void setStrictErrorChecking(jboolean boolean_0);
						jboolean getErrorChecking();
						jboolean getStrictErrorChecking();
						jstring getInputEncoding();
						void setInputEncoding(jstring string_0);
						void setXmlEncoding(jstring string_0);
						jstring getXmlEncoding();
						void setXmlVersion(jstring string_0);
						void setVersion(jstring string_0);
						jstring getXmlVersion();
						void setXmlStandalone(jboolean boolean_0);
						void setStandalone(jboolean boolean_0);
						jboolean getXmlStandalone();
						jboolean getStandalone();
						jstring getDocumentURI();
						w3c::dom::Node renameNode(w3c::dom::Node node_0,jstring string_1,jstring string_2);
						void normalizeDocument();
						w3c::dom::DOMConfiguration getDomConfig();
						void setDocumentURI(jstring string_0);
						jboolean getAsync();
						void setAsync(jboolean boolean_0);
						jboolean loadXML(jstring string_0);
						jstring saveXML(w3c::dom::Node node_0);
						w3c::dom::Entity createEntity(jstring string_0);
						w3c::dom::DocumentType createDocumentType(jstring string_0,jstring string_1,jstring string_2);
						w3c::dom::Notation createNotation(jstring string_0);
						ElementDefinitionImpl createElementDefinition(jstring string_0);
						w3c::dom::Node importNode(w3c::dom::Node node_0,jboolean boolean_1);
						w3c::dom::Node adoptNode(w3c::dom::Node node_0);
						w3c::dom::Element getElementById(jstring string_0);
						java::util::Enumeration getIdentifiers();
						w3c::dom::Element createElementNS(jstring string_0,jstring string_1);
						w3c::dom::Element createElementNS(jstring string_0,jstring string_1,jstring string_2);
						static jboolean isValidQName(jstring string_0,jstring string_1,jboolean boolean_2);
						jboolean load(jstring string_0);
						jstring getEncoding();
					}; // end class CoreDocumentImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class BaseMarkupSerializer : public java::lang::Object {
						public:
					            BaseMarkupSerializer(jobject _jthis, bool copy);
					            BaseMarkupSerializer(const BaseMarkupSerializer &);
					        
						virtual ~BaseMarkupSerializer();
						void startCDATA();
						void endCDATA();
						virtual void startDTD(jstring string_0,jstring string_1,jstring string_2);
						void endDTD();
						void startEntity(jstring string_0);
						void endEntity(jstring string_0);
						void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						void elementDecl(jstring string_0,jstring string_1);
						void externalEntityDecl(jstring string_0,jstring string_1,jstring string_2);
						void internalEntityDecl(jstring string_0,jstring string_1);
						void notationDecl(jstring string_0,jstring string_1,jstring string_2);
						void unparsedEntityDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						void setDocumentLocator(xml::sax::Locator locator_0);
						void endPrefixMapping(jstring string_0);
						void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
						virtual void processingInstruction(jstring string_0,jstring string_1);
						void skippedEntity(jstring string_0);
						void comment(jstring string_0);
						void comment(jcharArray charArray_0,jint int_1,jint int_2);
						void characters(jcharArray charArray_0,jint int_1,jint int_2);
						void startPrefixMapping(jstring string_0,jstring string_1);
						void startDocument();
						void endDocument();
						void setOutputCharStream(java::io::Writer writer_0);
						void setOutputByteStream(java::io::OutputStream outputStream_0);
						void serialize(w3c::dom::DocumentFragment documentFragment_0);
						void serialize(w3c::dom::Document document_0);
						void serialize(w3c::dom::Element element_0);
						void setOutputFormat(OutputFormat outputFormat_0);
						xml::sax::DocumentHandler asDocumentHandler();
						xml::sax::ContentHandler asContentHandler();
						DOMSerializer asDOMSerializer();
						void processingInstructionIO(jstring string_0,jstring string_1);
						void startNonEscaping();
						void endNonEscaping();
						void startPreserving();
						void endPreserving();
						jboolean reset();
					}; // end class BaseMarkupSerializer
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace java{
		namespace text{
			
			class NumberFormat : public Format {
				public:
			            NumberFormat(jobject _jthis, bool copy);
			            NumberFormat(const NumberFormat &);
			        
				virtual ~NumberFormat();
				jboolean isParseIntegerOnly();
				void setParseIntegerOnly(jboolean boolean_0);
				static NumberFormat getNumberInstance();
				static NumberFormat getNumberInstance(util::Locale locale_0);
				static NumberFormat getIntegerInstance(util::Locale locale_0);
				static NumberFormat getIntegerInstance();
				static NumberFormat getCurrencyInstance();
				static NumberFormat getCurrencyInstance(util::Locale locale_0);
				jboolean isGroupingUsed();
				void setGroupingUsed(jboolean boolean_0);
				jint getMaximumIntegerDigits();
				void setMaximumIntegerDigits(jint int_0);
				jint getMinimumIntegerDigits();
				void setMinimumIntegerDigits(jint int_0);
				jint getMaximumFractionDigits();
				void setMaximumFractionDigits(jint int_0);
				jint getMinimumFractionDigits();
				util::Currency getCurrency();
				void setCurrency(util::Currency currency_0);
				static NumberFormat getPercentInstance();
				static NumberFormat getPercentInstance(util::Locale locale_0);
				void setMinimumFractionDigits(jint int_0);
				math::RoundingMode getRoundingMode();
				void setRoundingMode(math::RoundingMode roundingMode_0);
				jint hashCode();
				virtual jstring format(jlong long_0);
				virtual jstring format(jdouble double_0);
				static NumberFormat getInstance();
				static NumberFormat getInstance(util::Locale locale_0);
				lang::Number parse(jstring string_0);
				static jobjectArray getAvailableLocales();
			}; // end class NumberFormat
		} // end namespace java
	} // end namespace text

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class SchemaDVFactory : public java::lang::Object {
							public:
						            SchemaDVFactory(jobject _jthis, bool copy);
						            SchemaDVFactory(const SchemaDVFactory &);
						        
							virtual ~SchemaDVFactory();
							static SchemaDVFactory getInstance();
							static SchemaDVFactory getInstance(jstring string_0);
						}; // end class SchemaDVFactory
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace javax{
		namespace xml{
			namespace validation{
				
				class Schema : public java::lang::Object {
					public:
				            Schema(jobject _jthis, bool copy);
				            Schema(const Schema &);
				        
					virtual ~Schema();
				}; // end class Schema
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class AbstractSubHyperplane : public java::lang::Object {
								public:
							            AbstractSubHyperplane(jobject _jthis, bool copy);
							            AbstractSubHyperplane(const AbstractSubHyperplane &);
							        
								virtual ~AbstractSubHyperplane();
								AbstractSubHyperplane applyTransform(Transform transform_0);
								AbstractSubHyperplane copySelf();
								Hyperplane getHyperplane();
								Region getRemainingRegion();
								AbstractSubHyperplane reunite(SubHyperplane subHyperplane_0);
								jboolean isEmpty();
								jdouble getSize();
							}; // end class AbstractSubHyperplane
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class BasicParserConfiguration : public util::ParserConfigurationSettings {
						public:
					            BasicParserConfiguration(jobject _jthis, bool copy);
					            BasicParserConfiguration(const BasicParserConfiguration &);
					        
						virtual ~BasicParserConfiguration();
						void setLocale(java::util::Locale locale_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(xni::parser::XMLEntityResolver xMLEntityResolver_0);
						xni::parser::XMLEntityResolver getEntityResolver();
						void setDTDHandler(xni::XMLDTDHandler xMLDTDHandler_0);
						xni::XMLDTDHandler getDTDHandler();
						xni::parser::XMLErrorHandler getErrorHandler();
						java::util::Locale getLocale();
						void setErrorHandler(xni::parser::XMLErrorHandler xMLErrorHandler_0);
						void setDTDContentModelHandler(xni::XMLDTDContentModelHandler xMLDTDContentModelHandler_0);
						xni::XMLDTDContentModelHandler getDTDContentModelHandler();
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getDocumentHandler();
					}; // end class BasicParserConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace java{
		namespace awt{
			
			class Dialog : public Window {
				public:
			            Dialog(jobject _jthis, bool copy);
			            Dialog(const Dialog &);
			        
				Dialog(Dialog dialog_0);
				Dialog(Dialog dialog_0,jstring string_1);
				Dialog(Dialog dialog_0,jstring string_1,jboolean boolean_2);
				Dialog(Dialog dialog_0,jstring string_1,jboolean boolean_2,GraphicsConfiguration graphicsConfiguration_3);
				Dialog(Frame frame_0,jboolean boolean_1);
				Dialog(Frame frame_0,jstring string_1);
				Dialog(Frame frame_0,jstring string_1,jboolean boolean_2);
				Dialog(Frame frame_0,jstring string_1,jboolean boolean_2,GraphicsConfiguration graphicsConfiguration_3);
				Dialog(Window window_0,Dialog::ModalityType modalityType_1);
				Dialog(Window window_0,jstring string_1,Dialog::ModalityType modalityType_2);
				Dialog(Window window_0,jstring string_1,Dialog::ModalityType modalityType_2,GraphicsConfiguration graphicsConfiguration_3);
				Dialog(Frame frame_0);
				Dialog(Window window_0,jstring string_1);
				Dialog(Window window_0);
				virtual ~Dialog();
				jboolean isModal();
				void setModal(jboolean boolean_0);
				Dialog::ModalityType getModalityType();
				void setModalityType(Dialog::ModalityType modalityType_0);
				javax::accessibility::AccessibleContext getAccessibleContext();
				void setBackground(Color color_0);
				void setUndecorated(jboolean boolean_0);
				void addNotify();
				jstring getTitle();
				jboolean isResizable();
				void setResizable(jboolean boolean_0);
				jboolean isUndecorated();
				void setOpacity(jfloat float_0);
				void setShape(Shape shape_0);
				void show();
				void hide();
				void toBack();
				void setVisible(jboolean boolean_0);
				void setTitle(jstring string_0);
			}; // end class Dialog
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace applet{
			
			class Applet : public awt::Panel {
				public:
			            Applet(jobject _jthis, bool copy);
			            Applet(const Applet &);
			        
				Applet();
				virtual ~Applet();
				awt::Image getImage(net::URL uRL_0);
				awt::Image getImage(net::URL uRL_0,jstring string_1);
				jboolean isActive();
				jboolean isValidateRoot();
				javax::accessibility::AccessibleContext getAccessibleContext();
				util::Locale getLocale();
				virtual void setStub(AppletStub appletStub_0);
				net::URL getDocumentBase();
				jstring getParameter(jstring string_0);
				AppletContext getAppletContext();
				void showStatus(jstring string_0);
				static AudioClip newAudioClip(net::URL uRL_0);
				AudioClip getAudioClip(net::URL uRL_0);
				AudioClip getAudioClip(net::URL uRL_0,jstring string_1);
				void play(net::URL uRL_0);
				void play(net::URL uRL_0,jstring string_1);
				jstring getAppletInfo();
				void init();
				void start();
				void stop();
				void destroy();
				net::URL getCodeBase();
				void resize(jint int_0,jint int_1);
				void resize(awt::Dimension dimension_0);
			}; // end class Applet
		} // end namespace java
	} // end namespace applet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class AbstractConvergenceChecker : public java::lang::Object {
							public:
						            AbstractConvergenceChecker(jobject _jthis, bool copy);
						            AbstractConvergenceChecker(const AbstractConvergenceChecker &);
						        
							AbstractConvergenceChecker();
							AbstractConvergenceChecker(jdouble double_0,jdouble double_1);
							virtual ~AbstractConvergenceChecker();
							jdouble getRelativeThreshold();
							jdouble getAbsoluteThreshold();
						}; // end class AbstractConvergenceChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							
							class Clusterer : public java::lang::Object {
								public:
							            Clusterer(jobject _jthis, bool copy);
							            Clusterer(const Clusterer &);
							        
								virtual ~Clusterer();
								distance::DistanceMeasure getDistanceMeasure();
							}; // end class Clusterer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								
								class MultivariateVectorOptimizer : public BaseMultivariateOptimizer {
									public:
								            MultivariateVectorOptimizer(jobject _jthis, bool copy);
								            MultivariateVectorOptimizer(const MultivariateVectorOptimizer &);
								        
									virtual ~MultivariateVectorOptimizer();
									linear::RealMatrix getWeight();
									jint getTargetSize();
									PointVectorValuePair optimize(jobjectArray optimizationDataArray_0);
									jdoubleArray getTarget();
								}; // end class MultivariateVectorOptimizer
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							
							class AbstractStringCoder : public java::lang::Object {
								public:
							            AbstractStringCoder(jobject _jthis, bool copy);
							            AbstractStringCoder(const AbstractStringCoder &);
							        
								AbstractStringCoder(jboolean boolean_0,jint int_1);
								virtual ~AbstractStringCoder();
								jint getNumberOfStringValues(context::QNameContext qNameContext_0);
								void clear();
							}; // end class AbstractStringCoder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings

	namespace rcs{
		namespace nml{
			
			class NMLFormatConverterBase : public NMLFormatConverter {
				public:
			            NMLFormatConverterBase(jobject _jthis, bool copy);
			            NMLFormatConverterBase(const NMLFormatConverterBase &);
			        
				NMLFormatConverterBase();
				virtual ~NMLFormatConverterBase();
				void beginClass(jstring string_0,jstring string_1);
				void beginClassVar(jstring string_0);
				void endClassVar(jstring string_0);
				void update_with_name(jstring string_0,jlongArray longArray_1,jint int_2);
				jlong update_with_name(jstring string_0,jlong long_1);
				void update_with_name(jstring string_0,jcharArray charArray_1,jint int_2);
				void update_with_name(jstring string_0,jdoubleArray doubleArray_1,jint int_2);
				jdouble update_with_name(jstring string_0,jdouble double_1);
				void update_with_name(jstring string_0,jfloatArray floatArray_1,jint int_2);
				jfloat update_with_name(jstring string_0,jfloat float_1);
				jboolean update_with_name(jstring string_0,jboolean boolean_1);
				void update_with_name(jstring string_0,jbooleanArray booleanArray_1,jint int_2);
				jbyte update_with_name(jstring string_0,jbyte byte_1);
				void update_with_name(jstring string_0,jbyteArray byteArray_1,jint int_2);
				jchar update_with_name(jstring string_0,jchar char_1);
				void update_with_name(jstring string_0,jintArray intArray_1,jint int_2);
				jint update_with_name(jstring string_0,jint int_1);
				void update_with_name(jstring string_0,jshortArray shortArray_1,jint int_2);
				jshort update_with_name(jstring string_0,jshort short_1);
				void endClass(jstring string_0,jstring string_1);
				jstring getVersionString();
				void SetErrorInUpdate(jstring string_0);
				void SetBufName(jstring string_0);
				void add_to_output_string(jstring string_0);
				void throw_away_token();
				jboolean get_decoding();
				jboolean get_use_string();
				jlong update_ll(jlong long_0);
				void update_ll(jlongArray longArray_0,jint int_1);
				void update_ll_with_name(jstring string_0,jlongArray longArray_1,jint int_2);
				jlong update_ll_with_name(jstring string_0,jlong long_1);
				void update_unsigned(jintArray intArray_0,jint int_1);
				jint update_unsigned(jint int_0);
				jchar update_unsigned(jchar char_0);
				void update_unsigned(jbyteArray byteArray_0,jint int_1);
				jbyte update_unsigned(jbyte byte_0);
				void update_unsigned(jlongArray longArray_0,jint int_1);
				void update_unsigned(jcharArray charArray_0,jint int_1);
				jshort update_unsigned(jshort short_0);
				void update_unsigned(jshortArray shortArray_0,jint int_1);
				jlong update_unsigned(jlong long_0);
				jlong update_unsigned_ll(jlong long_0);
				void update_unsigned_ll(jlongArray longArray_0,jint int_1);
				void update_unsigned_with_name(jstring string_0,jshortArray shortArray_1,jint int_2);
				jlong update_unsigned_with_name(jstring string_0,jlong long_1);
				void update_unsigned_with_name(jstring string_0,jlongArray longArray_1,jint int_2);
				jshort update_unsigned_with_name(jstring string_0,jshort short_1);
				void update_unsigned_with_name(jstring string_0,jintArray intArray_1,jint int_2);
				jint update_unsigned_with_name(jstring string_0,jint int_1);
				void update_unsigned_with_name(jstring string_0,jbyteArray byteArray_1,jint int_2);
				jchar update_unsigned_with_name(jstring string_0,jchar char_1);
				void update_unsigned_with_name(jstring string_0,jcharArray charArray_1,jint int_2);
				jbyte update_unsigned_with_name(jstring string_0,jbyte byte_1);
				void update_unsigned_ll_with_name(jstring string_0,jlongArray longArray_1,jint int_2);
				jlong update_unsigned_ll_with_name(jstring string_0,jlong long_1);
				void beginBaseClass(jstring string_0);
				void endBaseClass(jstring string_0);
				void beginClassArrayElem(jstring string_0,jint int_1);
				void endClassArrayElem(jstring string_0,jint int_1);
				jint update_enumeration_with_name(jstring string_0,jint int_1,NML_ENUM_INFO nML_ENUM_INFO_2);
				void update_enumeration_array_with_name(jstring string_0,jintArray intArray_1,jint int_2,NML_ENUM_INFO nML_ENUM_INFO_3);
				jint update_attribute_enumeration_with_name(jstring string_0,jint int_1,NML_ENUM_INFO nML_ENUM_INFO_2);
				jchar update_attribute_with_name(jstring string_0,jchar char_1);
				jshort update_attribute_with_name(jstring string_0,jshort short_1);
				jint update_attribute_with_name(jstring string_0,jint int_1);
				jbyte update_attribute_with_name(jstring string_0,jbyte byte_1);
				void update_attribute_with_name(jstring string_0,jbyteArray byteArray_1,jint int_2);
				void update_attribute_with_name(jstring string_0,jcharArray charArray_1,jint int_2);
				jdouble update_attribute_with_name(jstring string_0,jdouble double_1);
				jfloat update_attribute_with_name(jstring string_0,jfloat float_1);
				jlong update_attribute_with_name(jstring string_0,jlong long_1);
				void update_attribute_with_name(jstring string_0,jlongArray longArray_1,jint int_2);
				void update_attribute_with_name(jstring string_0,jintArray intArray_1,jint int_2);
				void update_attribute_with_name(jstring string_0,jdoubleArray doubleArray_1,jint int_2);
				void update_attribute_with_name(jstring string_0,jfloatArray floatArray_1,jint int_2);
				jboolean update_attribute_with_name(jstring string_0,jboolean boolean_1);
				void update_attribute_with_name(jstring string_0,jshortArray shortArray_1,jint int_2);
				jint check_type_info(NML_ENUM_INFO nML_ENUM_INFO_0);
				jbyteArray update_unbounded_attribute_with_name(jstring string_0,jbyteArray byteArray_1);
				jdoubleArray update_unbounded_with_name(jstring string_0,jdoubleArray doubleArray_1);
				jlongArray update_unbounded_with_name(jstring string_0,jlongArray longArray_1);
				jfloatArray update_unbounded_with_name(jstring string_0,jfloatArray floatArray_1);
				jintArray update_unbounded_with_name(jstring string_0,jintArray intArray_1);
				jshortArray update_unbounded_with_name(jstring string_0,jshortArray shortArray_1);
				jbyteArray update_unbounded_with_name(jstring string_0,jbyteArray byteArray_1);
				jlongArray update_unbounded_unsigned_with_name(jstring string_0,jlongArray longArray_1);
				jintArray update_unbounded_unsigned_with_name(jstring string_0,jintArray intArray_1);
				jshortArray update_unbounded_unsigned_with_name(jstring string_0,jshortArray shortArray_1);
				jbyteArray update_unbounded_unsigned_with_name(jstring string_0,jbyteArray byteArray_1);
				jint update_dla_length_with_name(jstring string_0,jint int_1);
				void next_update_default(jstring string_0);
				void update_CMS_TIME(CMS_TIME cMS_TIME_0);
				void update_CMS_DATE(CMS_DATE cMS_DATE_0);
				jint get_token_count();
				void set_diagnostics_mode(jboolean boolean_0);
				jboolean get_diagnostics_mode();
				void set_diagnostics_mode_string_max(jint int_0);
				jint get_diagnostics_mode_string_max();
				jlong getPos();
				void start_updates();
				void set_do_not_print_diag_overflow_err(jboolean boolean_0);
				jint get_raw_data_size();
				void update_pre_check(jstring string_0);
				void SetMessageDictionary(NMLMessageDictionary nMLMessageDictionary_0);
				void SetFormatConvertErrCallback(NMLFormatConvertErrCallbackInterface nMLFormatConvertErrCallbackInterface_0);
				NMLMessageDictionary GetMessageDictionary();
				jboolean update(jboolean boolean_0);
				void update(jbooleanArray booleanArray_0,jint int_1);
				void rewind();
			}; // end class NMLFormatConverterBase
		} // end namespace rcs
	} // end namespace nml

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class AbstractConvergenceChecker : public java::lang::Object {
							public:
						            AbstractConvergenceChecker(jobject _jthis, bool copy);
						            AbstractConvergenceChecker(const AbstractConvergenceChecker &);
						        
							AbstractConvergenceChecker(jdouble double_0,jdouble double_1);
							virtual ~AbstractConvergenceChecker();
							jdouble getRelativeThreshold();
							jdouble getAbsoluteThreshold();
						}; // end class AbstractConvergenceChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class AbstractRealMatrix : public RealLinearOperator {
							public:
						            AbstractRealMatrix(jobject _jthis, bool copy);
						            AbstractRealMatrix(const AbstractRealMatrix &);
						        
							virtual ~AbstractRealMatrix();
							jdoubleArray getRow(jint int_0);
							jdoubleArray getColumn(jint int_0);
							RealMatrix multiply(RealMatrix realMatrix_0);
							RealMatrix subtract(RealMatrix realMatrix_0);
							RealMatrix power(jint int_0);
							void addToEntry(jint int_0,jint int_1,jdouble double_2);
							void multiplyEntry(jint int_0,jint int_1,jdouble double_2);
							RealMatrix scalarAdd(jdouble double_0);
							RealMatrix scalarMultiply(jdouble double_0);
							jdouble getNorm();
							jdouble getFrobeniusNorm();
							RealMatrix getSubMatrix(jint int_0,jint int_1,jint int_2,jint int_3);
							RealMatrix getSubMatrix(jintArray intArray_0,jintArray intArray_1);
							RealMatrix getRowMatrix(jint int_0);
							void setRowMatrix(jint int_0,RealMatrix realMatrix_1);
							RealMatrix getColumnMatrix(jint int_0);
							void setColumnMatrix(jint int_0,RealMatrix realMatrix_1);
							RealVector getRowVector(jint int_0);
							void setRowVector(jint int_0,RealVector realVector_1);
							RealVector getColumnVector(jint int_0);
							void setColumnVector(jint int_0,RealVector realVector_1);
							void setRow(jint int_0,jdoubleArray doubleArray_1);
							void setColumn(jint int_0,jdoubleArray doubleArray_1);
							RealMatrix transpose();
							jboolean isSquare();
							jdouble getTrace();
							jdouble walkInOptimizedOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInOptimizedOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0);
							jdouble walkInOptimizedOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0);
							jdouble walkInOptimizedOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdoubleArray operate(jdoubleArray doubleArray_0);
							RealVector operate(RealVector realVector_0);
							RealMatrix preMultiply(RealMatrix realMatrix_0);
							jdoubleArray preMultiply(jdoubleArray doubleArray_0);
							RealVector preMultiply(RealVector realVector_0);
							jdouble walkInRowOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0);
							jdouble walkInRowOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInRowOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0);
							jdouble walkInRowOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInColumnOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0);
							jdouble walkInColumnOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInColumnOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInColumnOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0);
							RealMatrix add(RealMatrix realMatrix_0);
							jstring toString();
							jint hashCode();
						}; // end class AbstractRealMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DocumentImpl : public CoreDocumentImpl {
						public:
					            DocumentImpl(jobject _jthis, bool copy);
					            DocumentImpl(const DocumentImpl &);
					        
						DocumentImpl(jboolean boolean_0);
						DocumentImpl(w3c::dom::DocumentType documentType_0);
						DocumentImpl(w3c::dom::DocumentType documentType_0,jboolean boolean_1);
						DocumentImpl();
						virtual ~DocumentImpl();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						w3c::dom::DOMImplementation getImplementation();
						w3c::dom::traversal::NodeIterator createNodeIterator(w3c::dom::Node node_0,jshort short_1,w3c::dom::traversal::NodeFilter nodeFilter_2);
						w3c::dom::traversal::NodeIterator createNodeIterator(w3c::dom::Node node_0,jint int_1,w3c::dom::traversal::NodeFilter nodeFilter_2,jboolean boolean_3);
						w3c::dom::traversal::TreeWalker createTreeWalker(w3c::dom::Node node_0,jint int_1,w3c::dom::traversal::NodeFilter nodeFilter_2,jboolean boolean_3);
						w3c::dom::traversal::TreeWalker createTreeWalker(w3c::dom::Node node_0,jshort short_1,w3c::dom::traversal::NodeFilter nodeFilter_2);
						w3c::dom::ranges::Range createRange();
						w3c::dom::events::Event createEvent(jstring string_0);
					}; // end class DocumentImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLDocumentFragmentScannerImpl : public XMLScanner {
						public:
					            XMLDocumentFragmentScannerImpl(jobject _jthis, bool copy);
					            XMLDocumentFragmentScannerImpl(const XMLDocumentFragmentScannerImpl &);
					        
						XMLDocumentFragmentScannerImpl();
						virtual ~XMLDocumentFragmentScannerImpl();
						void startEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void endEntity(jstring string_0,xni::Augmentations augmentations_1);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
						jobjectArray getRecognizedFeatures();
						jobjectArray getRecognizedProperties();
						java::lang::Boolean getFeatureDefault(jstring string_0);
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getDocumentHandler();
						jboolean scanDocument(jboolean boolean_0);
						jstring getDispatcherName(XMLDocumentFragmentScannerImpl::Dispatcher dispatcher_0);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XMLDocumentFragmentScannerImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class AbstractCurveFitter : public java::lang::Object {
							public:
						            AbstractCurveFitter(jobject _jthis, bool copy);
						            AbstractCurveFitter(const AbstractCurveFitter &);
						        
							AbstractCurveFitter();
							virtual ~AbstractCurveFitter();
							jdoubleArray fit(java::util::Collection collection_0);
						}; // end class AbstractCurveFitter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class AbstractFormat : public java::text::NumberFormat {
							public:
						            AbstractFormat(jobject _jthis, bool copy);
						            AbstractFormat(const AbstractFormat &);
						        
							virtual ~AbstractFormat();
							java::text::NumberFormat getNumeratorFormat();
							java::text::NumberFormat getDenominatorFormat();
							void setDenominatorFormat(java::text::NumberFormat numberFormat_0);
							void setNumeratorFormat(java::text::NumberFormat numberFormat_0);
							java::lang::StringBuffer format(jdouble double_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
							java::lang::StringBuffer format(jlong long_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
						}; // end class AbstractFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class AttrImpl : public NodeImpl {
						public:
					            AttrImpl(jobject _jthis, bool copy);
					            AttrImpl(const AttrImpl &);
					        
						virtual ~AttrImpl();
						w3c::dom::Node item(jint int_0);
						w3c::dom::TypeInfo getSchemaTypeInfo();
						void setIdAttribute(jboolean boolean_0);
						jstring getNodeName();
						jstring getNodeValue();
						void setNodeValue(jstring string_0);
						jshort getNodeType();
						w3c::dom::NodeList getChildNodes();
						w3c::dom::Node getFirstChild();
						w3c::dom::Node getLastChild();
						w3c::dom::Node insertBefore(w3c::dom::Node node_0,w3c::dom::Node node_1);
						w3c::dom::Node replaceChild(w3c::dom::Node node_0,w3c::dom::Node node_1);
						w3c::dom::Node removeChild(w3c::dom::Node node_0);
						jboolean hasChildNodes();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jboolean isEqualNode(w3c::dom::Node node_0);
						jboolean isId();
						w3c::dom::Element getElement();
						jstring getTypeNamespace();
						jboolean isDerivedFrom(jstring string_0,jstring string_1,jint int_2);
						w3c::dom::Element getOwnerElement();
						jboolean getSpecified();
						void setSpecified(jboolean boolean_0);
						jstring toString();
						jint getLength();
						jstring getName();
						jstring getValue();
						jstring getTypeName();
						void setReadOnly(jboolean boolean_0,jboolean boolean_1);
						void setValue(jstring string_0);
						void normalize();
					}; // end class AttrImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class AbstractXMLSchema : public javax::xml::validation::Schema {
							public:
						            AbstractXMLSchema(jobject _jthis, bool copy);
						            AbstractXMLSchema(const AbstractXMLSchema &);
						        
							AbstractXMLSchema();
							virtual ~AbstractXMLSchema();
							virtual javax::xml::validation::Validator newValidator();
							virtual javax::xml::validation::ValidatorHandler newValidatorHandler();
							virtual java::lang::Boolean getFeature(jstring string_0);
						}; // end class AbstractXMLSchema
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class Pair : public java::lang::Object {
							public:
						            Pair(jobject _jthis, bool copy);
						            Pair(const Pair &);
						        
							Pair(Pair pair_0);
							virtual ~Pair();
							jstring toString();
							jint hashCode();
						}; // end class Pair
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class ProxyOutputStream : public java::io::FilterOutputStream {
							public:
						            ProxyOutputStream(jobject _jthis, bool copy);
						            ProxyOutputStream(const ProxyOutputStream &);
						        
							ProxyOutputStream(java::io::OutputStream outputStream_0);
							virtual ~ProxyOutputStream();
							void write(jint int_0);
							void write(jbyteArray byteArray_0);
							void write(jbyteArray byteArray_0,jint int_1,jint int_2);
							void flush();
							void close();
						}; // end class ProxyOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace java{
		namespace awt{
			
			class MenuComponent : public lang::Object {
				public:
			            MenuComponent(jobject _jthis, bool copy);
			            MenuComponent(const MenuComponent &);
			        
				MenuComponent();
				virtual ~MenuComponent();
				void setFont(Font font_0);
				virtual void dispatchEvent(AWTEvent aWTEvent_0);
				javax::accessibility::AccessibleContext getAccessibleContext();
				void removeNotify();
				Font getFont();
				jboolean postEvent(Event event_0);
				jstring toString();
				jstring getName();
				void setName(jstring string_0);
			}; // end class MenuComponent
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			namespace event{
				
				class ComponentEvent : public AWTEvent {
					public:
				            ComponentEvent(jobject _jthis, bool copy);
				            ComponentEvent(const ComponentEvent &);
				        
					ComponentEvent(Component component_0,jint int_1);
					virtual ~ComponentEvent();
					Component getComponent();
					jstring paramString();
				}; // end class ComponentEvent
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace geom{
				namespace Point2D{
					
					class Double : public Point2D {
						public:
					            Double(jobject _jthis, bool copy);
					            Double(const Double &);
					        
						Double();
						Double(jdouble double_0,jdouble double_1);
						virtual ~Double();
						jdouble getX();
						jdouble getY();
						void setLocation(jdouble double_0,jdouble double_1);
						jstring toString();
					}; // end class Double
				} // end namespace java
			} // end namespace awt
		} // end namespace geom
	} // end namespace Point2D

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								
								class BaseRuleFactory : public java::lang::Object {
									public:
								            BaseRuleFactory(jobject _jthis, bool copy);
								            BaseRuleFactory(const BaseRuleFactory &);
								        
									BaseRuleFactory();
									virtual ~BaseRuleFactory();
									util::Pair getRule(jint int_0);
								}; // end class BaseRuleFactory
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class BaseSecantSolver : public AbstractUnivariateSolver {
								public:
							            BaseSecantSolver(jobject _jthis, bool copy);
							            BaseSecantSolver(const BaseSecantSolver &);
							        
								virtual ~BaseSecantSolver();
								jdouble solve(jint int_0,UnivariateFunction univariateFunction_1,jdouble double_2,jdouble double_3,AllowedSolution allowedSolution_4);
								jdouble solve(jint int_0,UnivariateFunction univariateFunction_1,jdouble double_2,jdouble double_3,jdouble double_4,AllowedSolution allowedSolution_5);
								jdouble solve(jint int_0,UnivariateFunction univariateFunction_1,jdouble double_2,jdouble double_3,jdouble double_4);
							}; // end class BaseSecantSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class BaseAbstractMultivariateVectorOptimizer : public java::lang::Object {
								public:
							            BaseAbstractMultivariateVectorOptimizer(jobject _jthis, bool copy);
							            BaseAbstractMultivariateVectorOptimizer(const BaseAbstractMultivariateVectorOptimizer &);
							        
								virtual ~BaseAbstractMultivariateVectorOptimizer();
								linear::RealMatrix getWeight();
								jint getEvaluations();
								jint getMaxEvaluations();
								jdoubleArray getStartPoint();
								ConvergenceChecker getConvergenceChecker();
								PointVectorValuePair optimize(jint int_0,analysis::MultivariateVectorFunction multivariateVectorFunction_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3,jdoubleArray doubleArray_4);
								jdoubleArray getTarget();
							}; // end class BaseAbstractMultivariateVectorOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							
							class CurveFitter : public java::lang::Object {
								public:
							            CurveFitter(jobject _jthis, bool copy);
							            CurveFitter(const CurveFitter &);
							        
								CurveFitter(DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer_0);
								CurveFitter(MultivariateDifferentiableVectorOptimizer multivariateDifferentiableVectorOptimizer_0);
								virtual ~CurveFitter();
								jobjectArray getObservations();
								void addObservedPoint(WeightedObservedPoint weightedObservedPoint_0);
								void addObservedPoint(jdouble double_0,jdouble double_1,jdouble double_2);
								void addObservedPoint(jdouble double_0,jdouble double_1);
								void clearObservations();
								jdoubleArray fit(jint int_0,analysis::ParametricUnivariateFunction parametricUnivariateFunction_1,jdoubleArray doubleArray_2);
								jdoubleArray fit(analysis::ParametricUnivariateFunction parametricUnivariateFunction_0,jdoubleArray doubleArray_1);
							}; // end class CurveFitter
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class FirstMoment : public AbstractStorelessUnivariateStatistic {
									public:
								            FirstMoment(jobject _jthis, bool copy);
								            FirstMoment(const FirstMoment &);
								        
									FirstMoment();
									FirstMoment(FirstMoment firstMoment_0);
									virtual ~FirstMoment();
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									static void copy(FirstMoment firstMoment_0,FirstMoment firstMoment_1);
									FirstMoment copy();
									jdouble getResult();
								}; // end class FirstMoment
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								
								class JacobianMultivariateVectorOptimizer : public MultivariateVectorOptimizer {
									public:
								            JacobianMultivariateVectorOptimizer(jobject _jthis, bool copy);
								            JacobianMultivariateVectorOptimizer(const JacobianMultivariateVectorOptimizer &);
								        
									virtual ~JacobianMultivariateVectorOptimizer();
									PointVectorValuePair optimize(jobjectArray optimizationDataArray_0);
								}; // end class JacobianMultivariateVectorOptimizer
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						
						class VectorFormat : public java::lang::Object {
							public:
						            VectorFormat(jobject _jthis, bool copy);
						            VectorFormat(const VectorFormat &);
						        
							virtual ~VectorFormat();
							java::text::NumberFormat getFormat();
							jstring getPrefix();
							jstring getSuffix();
							jstring format(Vector vector_0);
							jstring getSeparator();
							static jobjectArray getAvailableLocales();
						}; // end class VectorFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace geometry

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class IterativeLinearSolver : public java::lang::Object {
							public:
						            IterativeLinearSolver(jobject _jthis, bool copy);
						            IterativeLinearSolver(const IterativeLinearSolver &);
						        
							IterativeLinearSolver(util::IterationManager iterationManager_0);
							IterativeLinearSolver(jint int_0);
							virtual ~IterativeLinearSolver();
							RealVector solve(RealLinearOperator realLinearOperator_0,RealVector realVector_1);
							RealVector solve(RealLinearOperator realLinearOperator_0,RealVector realVector_1,RealVector realVector_2);
							util::IterationManager getIterationManager();
						}; // end class IterativeLinearSolver
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class AbstractSchemaInformedContent : public AbstractSchemaInformedGrammar {
								public:
							            AbstractSchemaInformedContent(jobject _jthis, bool copy);
							            AbstractSchemaInformedContent(const AbstractSchemaInformedContent &);
							        
								AbstractSchemaInformedContent();
								virtual ~AbstractSchemaInformedContent();
							}; // end class AbstractSchemaInformedContent
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class TextImpl : public CharacterDataImpl {
						public:
					            TextImpl(jobject _jthis, bool copy);
					            TextImpl(const TextImpl &);
					        
						TextImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						TextImpl();
						virtual ~TextImpl();
						jstring getNodeName();
						jshort getNodeType();
						void setValues(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						jboolean isIgnorableWhitespace();
						w3c::dom::Text splitText(jint int_0);
						jboolean isElementContentWhitespace();
						void replaceData(jstring string_0);
						jstring removeData();
						w3c::dom::Text replaceWholeText(jstring string_0);
						void setIgnorableWhitespace(jboolean boolean_0);
						jstring getWholeText();
					}; // end class TextImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					namespace events{
						
						class EventImpl : public java::lang::Object {
							public:
						            EventImpl(jobject _jthis, bool copy);
						            EventImpl(const EventImpl &);
						        
							EventImpl();
							virtual ~EventImpl();
							w3c::dom::events::EventTarget getCurrentTarget();
							jshort getEventPhase();
							jboolean getBubbles();
							jboolean getCancelable();
							jlong getTimeStamp();
							void initEvent(jstring string_0,jboolean boolean_1,jboolean boolean_2);
							void preventDefault();
							void stopPropagation();
							jstring getType();
							w3c::dom::events::EventTarget getTarget();
						}; // end class EventImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom
	} // end namespace events

	namespace java{
		namespace lang{
			
			class Error : public Throwable {
				public:
			            Error(jobject _jthis, bool copy);
			            Error(const Error &);
			        
				Error(Throwable throwable_0);
				Error(jstring string_0,Throwable throwable_1);
				Error(jstring string_0);
				Error();
				virtual ~Error();
			}; // end class Error
		} // end namespace java
	} // end namespace lang

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathException : public java::lang::Exception {
					public:
				            XPathException(jobject _jthis, bool copy);
				            XPathException(const XPathException &);
				        
					XPathException(jstring string_0);
					XPathException(java::lang::Throwable throwable_0);
					virtual ~XPathException();
					void printStackTrace(java::io::PrintWriter printWriter_0);
					void printStackTrace(java::io::PrintStream printStream_0);
					void printStackTrace();
					java::lang::Throwable getCause();
				}; // end class XPathException
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace org{
		namespace xml{
			namespace sax{
				
				class SAXException : public java::lang::Exception {
					public:
				            SAXException(jobject _jthis, bool copy);
				            SAXException(const SAXException &);
				        
					SAXException(jstring string_0,java::lang::Exception exception_1);
					SAXException(java::lang::Exception exception_0);
					SAXException(jstring string_0);
					SAXException();
					virtual ~SAXException();
					java::lang::Throwable getCause();
					jstring toString();
					jstring getMessage();
					java::lang::Exception getException();
				}; // end class SAXException
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					
					class DefaultHandler2 : public helpers::DefaultHandler {
						public:
					            DefaultHandler2(jobject _jthis, bool copy);
					            DefaultHandler2(const DefaultHandler2 &);
					        
						DefaultHandler2();
						virtual ~DefaultHandler2();
						void startCDATA();
						void endCDATA();
						void startDTD(jstring string_0,jstring string_1,jstring string_2);
						void endDTD();
						void startEntity(jstring string_0);
						void endEntity(jstring string_0);
						void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						void elementDecl(jstring string_0,jstring string_1);
						void externalEntityDecl(jstring string_0,jstring string_1,jstring string_2);
						void internalEntityDecl(jstring string_0,jstring string_1);
						InputSource getExternalSubset(jstring string_0,jstring string_1);
						InputSource resolveEntity(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						InputSource resolveEntity(jstring string_0,jstring string_1);
						void comment(jcharArray charArray_0,jint int_1,jint int_2);
					}; // end class DefaultHandler2
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class AbstractFieldMatrix : public java::lang::Object {
							public:
						            AbstractFieldMatrix(jobject _jthis, bool copy);
						            AbstractFieldMatrix(const AbstractFieldMatrix &);
						        
							virtual ~AbstractFieldMatrix();
							jobjectArray getRow(jint int_0);
							jobjectArray getColumn(jint int_0);
							FieldMatrix multiply(FieldMatrix fieldMatrix_0);
							FieldMatrix subtract(FieldMatrix fieldMatrix_0);
							FieldMatrix power(jint int_0);
							FieldMatrix scalarAdd(FieldElement fieldElement_0);
							FieldMatrix scalarMultiply(FieldElement fieldElement_0);
							FieldMatrix getSubMatrix(jintArray intArray_0,jintArray intArray_1);
							FieldMatrix getSubMatrix(jint int_0,jint int_1,jint int_2,jint int_3);
							FieldMatrix getRowMatrix(jint int_0);
							void setRowMatrix(jint int_0,FieldMatrix fieldMatrix_1);
							FieldMatrix getColumnMatrix(jint int_0);
							void setColumnMatrix(jint int_0,FieldMatrix fieldMatrix_1);
							FieldVector getRowVector(jint int_0);
							void setRowVector(jint int_0,FieldVector fieldVector_1);
							FieldVector getColumnVector(jint int_0);
							void setColumnVector(jint int_0,FieldVector fieldVector_1);
							void setRow(jint int_0,jobjectArray fieldElementArray_1);
							void setColumn(jint int_0,jobjectArray fieldElementArray_1);
							FieldMatrix transpose();
							jboolean isSquare();
							FieldElement getTrace();
							FieldElement walkInOptimizedOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0);
							FieldElement walkInOptimizedOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInOptimizedOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0);
							FieldElement walkInOptimizedOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jobjectArray operate(jobjectArray fieldElementArray_0);
							FieldVector operate(FieldVector fieldVector_0);
							jobjectArray preMultiply(jobjectArray fieldElementArray_0);
							FieldVector preMultiply(FieldVector fieldVector_0);
							FieldMatrix preMultiply(FieldMatrix fieldMatrix_0);
							FieldElement walkInRowOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInRowOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0);
							FieldElement walkInRowOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0);
							FieldElement walkInRowOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInColumnOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0);
							FieldElement walkInColumnOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0);
							FieldElement walkInColumnOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInColumnOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldMatrix add(FieldMatrix fieldMatrix_0);
							jstring toString();
							jint hashCode();
							Field getField();
						}; // end class AbstractFieldMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RealVector : public java::lang::Object {
							public:
						            RealVector(jobject _jthis, bool copy);
						            RealVector(const RealVector &);
						        
							RealVector();
							virtual ~RealVector();
							RealVector subtract(RealVector realVector_0);
							void addToEntry(jint int_0,jdouble double_1);
							jdouble getNorm();
							jdouble walkInOptimizedOrder(RealVectorPreservingVisitor realVectorPreservingVisitor_0);
							jdouble walkInOptimizedOrder(RealVectorPreservingVisitor realVectorPreservingVisitor_0,jint int_1,jint int_2);
							jdouble walkInOptimizedOrder(RealVectorChangingVisitor realVectorChangingVisitor_0);
							jdouble walkInOptimizedOrder(RealVectorChangingVisitor realVectorChangingVisitor_0,jint int_1,jint int_2);
							jdouble dotProduct(RealVector realVector_0);
							RealVector mapAdd(jdouble double_0);
							RealVector mapAddToSelf(jdouble double_0);
							jdouble cosine(RealVector realVector_0);
							jdouble getDistance(RealVector realVector_0);
							jdouble getL1Norm();
							jdouble getLInfNorm();
							jdouble getL1Distance(RealVector realVector_0);
							jdouble getLInfDistance(RealVector realVector_0);
							jint getMinIndex();
							jdouble getMinValue();
							jint getMaxIndex();
							jdouble getMaxValue();
							RealVector mapMultiply(jdouble double_0);
							RealVector mapMultiplyToSelf(jdouble double_0);
							RealVector mapSubtract(jdouble double_0);
							RealVector mapSubtractToSelf(jdouble double_0);
							RealVector mapDivide(jdouble double_0);
							RealVector mapDivideToSelf(jdouble double_0);
							RealMatrix outerProduct(RealVector realVector_0);
							RealVector projection(RealVector realVector_0);
							RealVector unitVector();
							void unitize();
							java::util::Iterator sparseIterator();
							RealVector mapToSelf(analysis::UnivariateFunction univariateFunction_0);
							RealVector combineToSelf(jdouble double_0,jdouble double_1,RealVector realVector_2);
							jdouble walkInDefaultOrder(RealVectorPreservingVisitor realVectorPreservingVisitor_0);
							jdouble walkInDefaultOrder(RealVectorChangingVisitor realVectorChangingVisitor_0,jint int_1,jint int_2);
							jdouble walkInDefaultOrder(RealVectorPreservingVisitor realVectorPreservingVisitor_0,jint int_1,jint int_2);
							jdouble walkInDefaultOrder(RealVectorChangingVisitor realVectorChangingVisitor_0);
							static RealVector unmodifiableRealVector(RealVector realVector_0);
							RealVector add(RealVector realVector_0);
							jint hashCode();
							jdoubleArray toArray();
							java::util::Iterator iterator();
							RealVector combine(jdouble double_0,jdouble double_1,RealVector realVector_2);
							void set(jdouble double_0);
							RealVector map(analysis::UnivariateFunction univariateFunction_0);
						}; // end class RealVector
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class AbstractEXIBodyEncoder : public AbstractEXIBodyCoder {
							public:
						            AbstractEXIBodyEncoder(jobject _jthis, bool copy);
						            AbstractEXIBodyEncoder(const AbstractEXIBodyEncoder &);
						        
							AbstractEXIBodyEncoder(EXIFactory eXIFactory_0);
							virtual ~AbstractEXIBodyEncoder();
							void encodeEndDocument();
							void encodeStartElement(javax::xml::namespace::QName qName_0);
							void encodeStartElement(jstring string_0,jstring string_1,jstring string_2);
							void encodeEndElement();
							void encodeAttributeList(attributes::AttributeList attributeList_0);
							void encodeAttribute(javax::xml::namespace::QName qName_0,values::Value value_1);
							void encodeAttribute(jstring string_0,jstring string_1,jstring string_2,values::Value value_3);
							void encodeNamespaceDeclaration(jstring string_0,jstring string_1);
							void encodeAttributeXsiNil(values::Value value_0,jstring string_1);
							void encodeStartDocument();
							void encodeAttributeXsiType(values::Value value_0,jstring string_1);
							void encodeCharacters(values::Value value_0);
							void encodeDocType(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
							void encodeEntityReference(jstring string_0);
							void encodeComment(jcharArray charArray_0,jint int_1,jint int_2);
							void encodeProcessingInstruction(jstring string_0,jstring string_1);
							static java::util::List getTokens(jstring string_0,jstring string_1);
							void encodeCharactersForce(values::Value value_0);
							void flush();
						}; // end class AbstractEXIBodyEncoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class AbstractTypeEncoder : public AbstractTypeCoder {
							public:
						            AbstractTypeEncoder(jobject _jthis, bool copy);
						            AbstractTypeEncoder(const AbstractTypeEncoder &);
						        
							AbstractTypeEncoder();
							AbstractTypeEncoder(jobjectArray qNameArray_0,jobjectArray qNameArray_1);
							virtual ~AbstractTypeEncoder();
						}; // end class AbstractTypeEncoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLDocumentScannerImpl : public XMLDocumentFragmentScannerImpl {
						public:
					            XMLDocumentScannerImpl(jobject _jthis, bool copy);
					            XMLDocumentScannerImpl(const XMLDocumentScannerImpl &);
					        
						XMLDocumentScannerImpl();
						virtual ~XMLDocumentScannerImpl();
						void startEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void endEntity(jstring string_0,xni::Augmentations augmentations_1);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
						jobjectArray getRecognizedFeatures();
						jobjectArray getRecognizedProperties();
						java::lang::Boolean getFeatureDefault(jstring string_0);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XMLDocumentScannerImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLDTDValidator : public java::lang::Object {
							public:
						            XMLDTDValidator(jobject _jthis, bool copy);
						            XMLDTDValidator(const XMLDTDValidator &);
						        
							XMLDTDValidator();
							virtual ~XMLDTDValidator();
							void startCDATA(xni::Augmentations augmentations_0);
							void endCDATA(xni::Augmentations augmentations_0);
							void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
							void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							virtual jboolean validate();
							void setFeature(jstring string_0,jboolean boolean_1);
							void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
							void endDocument(xni::Augmentations augmentations_0);
							void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
							jobjectArray getRecognizedFeatures();
							jobjectArray getRecognizedProperties();
							java::lang::Boolean getFeatureDefault(jstring string_0);
							void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
							xni::XMLDocumentHandler getDocumentHandler();
							void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
							xni::parser::XMLDocumentSource getDocumentSource();
							void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
							jboolean characterData(jstring string_0,xni::Augmentations augmentations_1);
							virtual jboolean hasGrammar();
							void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
						}; // end class XMLDTDValidator
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class CurveFitter : public java::lang::Object {
							public:
						            CurveFitter(jobject _jthis, bool copy);
						            CurveFitter(const CurveFitter &);
						        
							CurveFitter(optim::nonlinear::vector::MultivariateVectorOptimizer multivariateVectorOptimizer_0);
							virtual ~CurveFitter();
							jobjectArray getObservations();
							void addObservedPoint(WeightedObservedPoint weightedObservedPoint_0);
							void addObservedPoint(jdouble double_0,jdouble double_1,jdouble double_2);
							void addObservedPoint(jdouble double_0,jdouble double_1);
							void clearObservations();
							jdoubleArray fit(jint int_0,analysis::ParametricUnivariateFunction parametricUnivariateFunction_1,jdoubleArray doubleArray_2);
							jdoubleArray fit(analysis::ParametricUnivariateFunction parametricUnivariateFunction_0,jdoubleArray doubleArray_1);
						}; // end class CurveFitter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XMLResourceIdentifierImpl : public java::lang::Object {
						public:
					            XMLResourceIdentifierImpl(jobject _jthis, bool copy);
					            XMLResourceIdentifierImpl(const XMLResourceIdentifierImpl &);
					        
						XMLResourceIdentifierImpl(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						XMLResourceIdentifierImpl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						XMLResourceIdentifierImpl();
						virtual ~XMLResourceIdentifierImpl();
						void setValues(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						void setValues(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						void setLiteralSystemId(jstring string_0);
						jstring getNamespace();
						void setPublicId(jstring string_0);
						jstring getPublicId();
						void setExpandedSystemId(jstring string_0);
						jstring getExpandedSystemId();
						jstring getLiteralSystemId();
						void setBaseSystemId(jstring string_0);
						jstring getBaseSystemId();
						void setNamespace(jstring string_0);
						jstring toString();
						jint hashCode();
						void clear();
					}; // end class XMLResourceIdentifierImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace java{
		namespace util{
			
			class AbstractMap : public lang::Object {
				public:
			            AbstractMap(jobject _jthis, bool copy);
			            AbstractMap(const AbstractMap &);
			        
				virtual ~AbstractMap();
				jstring toString();
				Collection values();
				jint hashCode();
				void clear();
				jboolean isEmpty();
				jint size();
				void putAll(Map map_0);
				Set keySet();
			}; // end class AbstractMap
		} // end namespace java
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class AbstractDOMParser : public AbstractXMLDocumentParser {
						public:
					            AbstractDOMParser(jobject _jthis, bool copy);
					            AbstractDOMParser(const AbstractDOMParser &);
					        
						virtual ~AbstractDOMParser();
						w3c::dom::Document getDocument();
						void startCDATA(xni::Augmentations augmentations_0);
						void endCDATA(xni::Augmentations augmentations_0);
						void startDTD(xni::XMLLocator xMLLocator_0,xni::Augmentations augmentations_1);
						void endDTD(xni::Augmentations augmentations_0);
						void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jobjectArray stringArray_3,jstring string_4,xni::XMLString xMLString_5,xni::XMLString xMLString_6,xni::Augmentations augmentations_7);
						void elementDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void externalEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void internalEntityDecl(jstring string_0,xni::XMLString xMLString_1,xni::XMLString xMLString_2,xni::Augmentations augmentations_3);
						void notationDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void unparsedEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						void setLocale(java::util::Locale locale_0);
						void abort();
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
						void endDocument(xni::Augmentations augmentations_0);
						void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
						void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						void startExternalSubset(xni::XMLResourceIdentifier xMLResourceIdentifier_0,xni::Augmentations augmentations_1);
						void startParameterEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void endParameterEntity(jstring string_0,xni::Augmentations augmentations_1);
						void endExternalSubset(xni::Augmentations augmentations_0);
						void startAttlist(jstring string_0,xni::Augmentations augmentations_1);
						void endAttlist(xni::Augmentations augmentations_0);
						void startConditional(jshort short_0,xni::Augmentations augmentations_1);
						void ignoredCharacters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void endConditional(xni::Augmentations augmentations_0);
						virtual void dropDocumentReferences();
						void reset();
					}; // end class AbstractDOMParser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class NamespaceSupport : public java::lang::Object {
						public:
					            NamespaceSupport(jobject _jthis, bool copy);
					            NamespaceSupport(const NamespaceSupport &);
					        
						NamespaceSupport();
						NamespaceSupport(xni::NamespaceContext namespaceContext_0);
						virtual ~NamespaceSupport();
						jstring getPrefix(jstring string_0);
						jstring getURI(jstring string_0);
						jstring getDeclaredPrefixAt(jint int_0);
						java::util::Enumeration getAllPrefixes();
						void pushContext();
						jboolean declarePrefix(jstring string_0,jstring string_1);
						void popContext();
						jint getDeclaredPrefixCount();
						jboolean containsPrefix(jstring string_0);
						void reset();
					}; // end class NamespaceSupport
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class MultistepIntegrator : public nonstiff::AdaptiveStepsizeIntegrator {
							public:
						            MultistepIntegrator(jobject _jthis, bool copy);
						            MultistepIntegrator(const MultistepIntegrator &);
						        
							virtual ~MultistepIntegrator();
							void setStarterIntegrator(FirstOrderIntegrator firstOrderIntegrator_0);
							jdouble getMinReduction();
							void setMinReduction(jdouble double_0);
							jdouble getMaxGrowth();
							void setMaxGrowth(jdouble double_0);
							jdouble getSafety();
							void setSafety(jdouble double_0);
							ODEIntegrator getStarterIntegrator();
						}; // end class MultistepIntegrator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class BaseMultivariateMultiStartOptimizer : public java::lang::Object {
							public:
						            BaseMultivariateMultiStartOptimizer(jobject _jthis, bool copy);
						            BaseMultivariateMultiStartOptimizer(const BaseMultivariateMultiStartOptimizer &);
						        
							virtual ~BaseMultivariateMultiStartOptimizer();
							jint getEvaluations();
							jint getMaxEvaluations();
							ConvergenceChecker getConvergenceChecker();
							jobjectArray getOptima();
							PointValuePair optimize(jint int_0,analysis::MultivariateFunction multivariateFunction_1,GoalType goalType_2,jdoubleArray doubleArray_3);
						}; // end class BaseMultivariateMultiStartOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace crcl{
		namespace base{
			
			class GripperStatusType : public DataThingType {
				public:
			            GripperStatusType(jobject _jthis, bool copy);
			            GripperStatusType(const GripperStatusType &);
			        
				GripperStatusType();
				virtual ~GripperStatusType();
				jstring getGripperName();
				void setGripperName(jstring string_0);
			}; // end class GripperStatusType
		} // end namespace crcl
	} // end namespace base

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class AbstractTypeDecoder : public AbstractTypeCoder {
							public:
						            AbstractTypeDecoder(jobject _jthis, bool copy);
						            AbstractTypeDecoder(const AbstractTypeDecoder &);
						        
							AbstractTypeDecoder();
							AbstractTypeDecoder(jobjectArray qNameArray_0,jobjectArray qNameArray_1);
							virtual ~AbstractTypeDecoder();
						}; // end class AbstractTypeDecoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XIncludeAwareParserConfiguration : public XML11Configuration {
						public:
					            XIncludeAwareParserConfiguration(jobject _jthis, bool copy);
					            XIncludeAwareParserConfiguration(const XIncludeAwareParserConfiguration &);
					        
						XIncludeAwareParserConfiguration();
						XIncludeAwareParserConfiguration(util::SymbolTable symbolTable_0);
						XIncludeAwareParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						XIncludeAwareParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						virtual ~XIncludeAwareParserConfiguration();
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
					}; // end class XIncludeAwareParserConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class AbstractEXIBodyDecoder : public AbstractEXIBodyCoder {
							public:
						            AbstractEXIBodyDecoder(jobject _jthis, bool copy);
						            AbstractEXIBodyDecoder(const AbstractEXIBodyDecoder &);
						        
							AbstractEXIBodyDecoder(EXIFactory eXIFactory_0);
							virtual ~AbstractEXIBodyDecoder();
							void decodeStartSelfContainedFragment();
							jstring getAttributePrefix();
							jstring getAttributeQNameAsString();
							values::Value getAttributeValue();
						}; // end class AbstractEXIBodyDecoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class Chromosome : public java::lang::Object {
							public:
						            Chromosome(jobject _jthis, bool copy);
						            Chromosome(const Chromosome &);
						        
							Chromosome();
							virtual ~Chromosome();
							void searchForFitnessUpdate(Population population_0);
							jdouble getFitness();
							jint compareTo(Chromosome chromosome_0);
						}; // end class Chromosome
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class AbstractMultivariateRealDistribution : public java::lang::Object {
							public:
						            AbstractMultivariateRealDistribution(jobject _jthis, bool copy);
						            AbstractMultivariateRealDistribution(const AbstractMultivariateRealDistribution &);
						        
							virtual ~AbstractMultivariateRealDistribution();
							jint getDimension();
							void reseedRandomGenerator(jlong long_0);
						}; // end class AbstractMultivariateRealDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NumberIsTooSmallException : public MathIllegalNumberException {
							public:
						            NumberIsTooSmallException(jobject _jthis, bool copy);
						            NumberIsTooSmallException(const NumberIsTooSmallException &);
						        
							NumberIsTooSmallException(util::Localizable localizable_0,java::lang::Number number_1,java::lang::Number number_2,jboolean boolean_3);
							NumberIsTooSmallException(java::lang::Number number_0,java::lang::Number number_1,jboolean boolean_2);
							virtual ~NumberIsTooSmallException();
							jboolean getBoundIsAllowed();
							java::lang::Number getMin();
						}; // end class NumberIsTooSmallException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class AbstractDatatypeEvent : public AbstractEvent {
								public:
							            AbstractDatatypeEvent(jobject _jthis, bool copy);
							            AbstractDatatypeEvent(const AbstractDatatypeEvent &);
							        
								AbstractDatatypeEvent(EventType eventType_0,datatype::Datatype datatype_1);
								virtual ~AbstractDatatypeEvent();
								datatype::Datatype getDatatype();
								jstring toString();
							}; // end class AbstractDatatypeEvent
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class EmbeddedRungeKuttaIntegrator : public AdaptiveStepsizeIntegrator {
								public:
							            EmbeddedRungeKuttaIntegrator(jobject _jthis, bool copy);
							            EmbeddedRungeKuttaIntegrator(const EmbeddedRungeKuttaIntegrator &);
							        
								virtual ~EmbeddedRungeKuttaIntegrator();
								void integrate(ExpandableStatefulODE expandableStatefulODE_0,jdouble double_1);
								jdouble getMinReduction();
								void setMinReduction(jdouble double_0);
								jdouble getMaxGrowth();
								void setMaxGrowth(jdouble double_0);
								jdouble getSafety();
								void setSafety(jdouble double_0);
							}; // end class EmbeddedRungeKuttaIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class SymbolTable : public java::lang::Object {
						public:
					            SymbolTable(jobject _jthis, bool copy);
					            SymbolTable(const SymbolTable &);
					        
						SymbolTable(jint int_0,jfloat float_1);
						SymbolTable();
						SymbolTable(jint int_0);
						virtual ~SymbolTable();
						jstring addSymbol(jcharArray charArray_0,jint int_1,jint int_2);
						jstring addSymbol(jstring string_0);
						jboolean containsSymbol(jcharArray charArray_0,jint int_1,jint int_2);
						jboolean containsSymbol(jstring string_0);
						jint hash(jstring string_0);
						jint hash(jcharArray charArray_0,jint int_1,jint int_2);
					}; // end class SymbolTable
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace javafx{
		namespace scene{
			namespace transform{
				
				class Transform : public java::lang::Object {
					public:
				            Transform(jobject _jthis, bool copy);
				            Transform(const Transform &);
				        
					Transform();
					virtual ~Transform();
					static Translate translate(jdouble double_0,jdouble double_1);
					jdouble determinant();
					jdouble getMxx();
					jdouble getMxy();
					jdouble getMxz();
					jdouble getMyx();
					jdouble getMyy();
					jdouble getMyz();
					jdouble getMzx();
					jdouble getMzy();
					jdouble getMzz();
					jdouble getTx();
					jdouble getTy();
					jdouble getTz();
					Transform createConcatenation(Transform transform_0);
					Transform createInverse();
					virtual jboolean isType2D();
					void transform2DPoints(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jint int_4);
					void transform3DPoints(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jint int_4);
					void inverseTransform2DPoints(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jint int_4);
					void inverseTransform3DPoints(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jint int_4);
					void impl_add(Node node_0);
					void impl_remove(Node node_0);
					Transform clone();
					virtual jboolean isIdentity();
					static Rotate rotate(jdouble double_0,jdouble double_1,jdouble double_2);
					static Scale scale(jdouble double_0,jdouble double_1);
					static Scale scale(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				}; // end class Transform
			} // end namespace javafx
		} // end namespace scene
	} // end namespace transform

	namespace java{
		namespace nio{
			namespace channels{
				namespace spi{
					
					class AbstractInterruptibleChannel : public lang::Object {
						public:
					            AbstractInterruptibleChannel(jobject _jthis, bool copy);
					            AbstractInterruptibleChannel(const AbstractInterruptibleChannel &);
					        
						virtual ~AbstractInterruptibleChannel();
						virtual void close();
						virtual jboolean isOpen();
					}; // end class AbstractInterruptibleChannel
				} // end namespace java
			} // end namespace nio
		} // end namespace channels
	} // end namespace spi

	namespace rcs{
		namespace posemath{
			
			class PmCartesian : public java::awt::geom::Point2D::Double {
				public:
			            PmCartesian(jobject _jthis, bool copy);
			            PmCartesian(const PmCartesian &);
			        
				PmCartesian(jdouble double_0,jdouble double_1,jdouble double_2);
				PmCartesian();
				virtual ~PmCartesian();
				jdouble getX();
				jdouble getY();
				PmCartesian multiply(jdouble double_0);
				jdouble distFrom(PmCartesian pmCartesian_0);
				jdouble mag();
				PmCartesian subtract(PmCartesian pmCartesian_0);
				void setX(jdouble double_0);
				void setY(jdouble double_0);
				jdouble getZ();
				void setZ(jdouble double_0);
				PmCartesian add(PmCartesian pmCartesian_0);
				jboolean equals(PmSpherical pmSpherical_0);
				jboolean equals(PmCartesian pmCartesian_0);
				jboolean equals(PmCylindrical pmCylindrical_0);
				jstring toString();
				PmCartesian clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
				static PmCartesian valueOf(jstring string_0);
			}; // end class PmCartesian
		} // end namespace rcs
	} // end namespace posemath

	namespace java{
		namespace awt{
			
			class TextArea : public TextComponent {
				public:
			            TextArea(jobject _jthis, bool copy);
			            TextArea(const TextArea &);
			        
				TextArea(jstring string_0,jint int_1,jint int_2,jint int_3);
				TextArea();
				TextArea(jstring string_0);
				TextArea(jint int_0,jint int_1);
				TextArea(jstring string_0,jint int_1,jint int_2);
				virtual ~TextArea();
				jint getColumns();
				void setColumns(jint int_0);
				Dimension getPreferredSize();
				Dimension getPreferredSize(jint int_0,jint int_1);
				Dimension getMinimumSize();
				Dimension getMinimumSize(jint int_0,jint int_1);
				Dimension preferredSize(jint int_0,jint int_1);
				Dimension preferredSize();
				Dimension minimumSize();
				Dimension minimumSize(jint int_0,jint int_1);
				void insertText(jstring string_0,jint int_1);
				void appendText(jstring string_0);
				void replaceRange(jstring string_0,jint int_1,jint int_2);
				void replaceText(jstring string_0,jint int_1,jint int_2);
				jint getRows();
				void setRows(jint int_0);
				jint getScrollbarVisibility();
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void append(jstring string_0);
				void insert(jstring string_0,jint int_1);
			}; // end class TextArea
		} // end namespace java
	} // end namespace awt

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							
							class AbstractLeastSquaresOptimizer : public direct::BaseAbstractMultivariateVectorOptimizer {
								public:
							            AbstractLeastSquaresOptimizer(jobject _jthis, bool copy);
							            AbstractLeastSquaresOptimizer(const AbstractLeastSquaresOptimizer &);
							        
								virtual ~AbstractLeastSquaresOptimizer();
								jint getJacobianEvaluations();
								linear::RealMatrix getWeightSquareRoot();
								jdouble getRMS();
								jdouble getChiSquare();
								jdoubleArray guessParametersErrors();
								jdoubleArray computeSigma(jdoubleArray doubleArray_0,jdouble double_1);
								PointVectorValuePair optimize(jint int_0,analysis::differentiation::MultivariateDifferentiableVectorFunction multivariateDifferentiableVectorFunction_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3,jdoubleArray doubleArray_4);
								PointVectorValuePair optimize(jint int_0,analysis::DifferentiableMultivariateVectorFunction differentiableMultivariateVectorFunction_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3,jdoubleArray doubleArray_4);
							}; // end class AbstractLeastSquaresOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class BaseAbstractMultivariateSimpleBoundsOptimizer : public BaseAbstractMultivariateOptimizer {
								public:
							            BaseAbstractMultivariateSimpleBoundsOptimizer(jobject _jthis, bool copy);
							            BaseAbstractMultivariateSimpleBoundsOptimizer(const BaseAbstractMultivariateSimpleBoundsOptimizer &);
							        
								virtual ~BaseAbstractMultivariateSimpleBoundsOptimizer();
								PointValuePair optimize(jint int_0,analysis::MultivariateFunction multivariateFunction_1,GoalType goalType_2,jdoubleArray doubleArray_3,jdoubleArray doubleArray_4,jdoubleArray doubleArray_5);
								PointValuePair optimize(jint int_0,analysis::MultivariateFunction multivariateFunction_1,GoalType goalType_2,jdoubleArray doubleArray_3);
							}; // end class BaseAbstractMultivariateSimpleBoundsOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class BaseMultivariateVectorMultiStartOptimizer : public java::lang::Object {
							public:
						            BaseMultivariateVectorMultiStartOptimizer(jobject _jthis, bool copy);
						            BaseMultivariateVectorMultiStartOptimizer(const BaseMultivariateVectorMultiStartOptimizer &);
						        
							virtual ~BaseMultivariateVectorMultiStartOptimizer();
							jint getEvaluations();
							jint getMaxEvaluations();
							ConvergenceChecker getConvergenceChecker();
							jobjectArray getOptima();
							PointVectorValuePair optimize(jint int_0,analysis::MultivariateVectorFunction multivariateVectorFunction_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3,jdoubleArray doubleArray_4);
						}; // end class BaseMultivariateVectorMultiStartOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace java{
		namespace util{
			
			class Random : public lang::Object {
				public:
			            Random(jobject _jthis, bool copy);
			            Random(const Random &);
			        
				Random();
				Random(jlong long_0);
				virtual ~Random();
				void setSeed(jlong long_0);
				void nextBytes(jbyteArray byteArray_0);
				jlong nextLong();
				jboolean nextBoolean();
				jfloat nextFloat();
				jdouble nextGaussian();
				stream::IntStream ints();
				stream::IntStream ints(jlong long_0,jint int_1,jint int_2);
				stream::IntStream ints(jint int_0,jint int_1);
				stream::IntStream ints(jlong long_0);
				stream::LongStream longs(jlong long_0,jlong long_1,jlong long_2);
				stream::LongStream longs(jlong long_0);
				stream::LongStream longs();
				stream::LongStream longs(jlong long_0,jlong long_1);
				stream::DoubleStream doubles(jdouble double_0,jdouble double_1);
				stream::DoubleStream doubles(jlong long_0,jdouble double_1,jdouble double_2);
				stream::DoubleStream doubles();
				stream::DoubleStream doubles(jlong long_0);
				jdouble nextDouble();
				jint nextInt(jint int_0);
				jint nextInt();
			}; // end class Random
		} // end namespace java
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							
							class AbstractMultipleLinearRegression : public java::lang::Object {
								public:
							            AbstractMultipleLinearRegression(jobject _jthis, bool copy);
							            AbstractMultipleLinearRegression(const AbstractMultipleLinearRegression &);
							        
								AbstractMultipleLinearRegression();
								virtual ~AbstractMultipleLinearRegression();
								void newSampleData(jdoubleArray doubleArray_0,jint int_1,jint int_2);
								jdouble estimateRegressandVariance();
								jdouble estimateErrorVariance();
								jdouble estimateRegressionStandardError();
								jboolean isNoIntercept();
								jdoubleArray estimateRegressionParametersStandardErrors();
								void setNoIntercept(jboolean boolean_0);
								jdoubleArray estimateRegressionParameters();
								jdoubleArray estimateResiduals();
							}; // end class AbstractMultipleLinearRegression
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class SecondMoment : public FirstMoment {
									public:
								            SecondMoment(jobject _jthis, bool copy);
								            SecondMoment(const SecondMoment &);
								        
									SecondMoment();
									SecondMoment(SecondMoment secondMoment_0);
									virtual ~SecondMoment();
									void clear();
									void increment(jdouble double_0);
									static void copy(SecondMoment secondMoment_0,SecondMoment secondMoment_1);
									SecondMoment copy();
									jdouble getResult();
								}; // end class SecondMoment
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							
							class UnivariateOptimizer : public BaseOptimizer {
								public:
							            UnivariateOptimizer(jobject _jthis, bool copy);
							            UnivariateOptimizer(const UnivariateOptimizer &);
							        
								virtual ~UnivariateOptimizer();
								jdouble getMax();
								jdouble getStartValue();
								jdouble getMin();
								nonlinear::scalar::GoalType getGoalType();
								UnivariatePointValuePair optimize(jobjectArray optimizationDataArray_0);
							}; // end class UnivariateOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class BaseMultiStartMultivariateOptimizer : public BaseMultivariateOptimizer {
							public:
						            BaseMultiStartMultivariateOptimizer(jobject _jthis, bool copy);
						            BaseMultiStartMultivariateOptimizer(const BaseMultiStartMultivariateOptimizer &);
						        
							BaseMultiStartMultivariateOptimizer(BaseMultivariateOptimizer baseMultivariateOptimizer_0,jint int_1,random::RandomVectorGenerator randomVectorGenerator_2);
							virtual ~BaseMultiStartMultivariateOptimizer();
							jint getEvaluations();
						}; // end class BaseMultiStartMultivariateOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class PreconditionedIterativeLinearSolver : public IterativeLinearSolver {
							public:
						            PreconditionedIterativeLinearSolver(jobject _jthis, bool copy);
						            PreconditionedIterativeLinearSolver(const PreconditionedIterativeLinearSolver &);
						        
							PreconditionedIterativeLinearSolver(util::IterationManager iterationManager_0);
							PreconditionedIterativeLinearSolver(jint int_0);
							virtual ~PreconditionedIterativeLinearSolver();
							RealVector solve(RealLinearOperator realLinearOperator_0,RealVector realVector_1);
							RealVector solve(RealLinearOperator realLinearOperator_0,RealLinearOperator realLinearOperator_1,RealVector realVector_2);
							RealVector solve(RealLinearOperator realLinearOperator_0,RealVector realVector_1,RealVector realVector_2);
							RealVector solve(RealLinearOperator realLinearOperator_0,RealLinearOperator realLinearOperator_1,RealVector realVector_2,RealVector realVector_3);
							RealVector solveInPlace(RealLinearOperator realLinearOperator_0,RealVector realVector_1,RealVector realVector_2);
						}; // end class PreconditionedIterativeLinearSolver
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class DimensionMismatchException : public MathIllegalNumberException {
							public:
						            DimensionMismatchException(jobject _jthis, bool copy);
						            DimensionMismatchException(const DimensionMismatchException &);
						        
							DimensionMismatchException(jint int_0,jint int_1);
							DimensionMismatchException(util::Localizable localizable_0,jint int_1,jint int_2);
							virtual ~DimensionMismatchException();
							jint getDimension();
						}; // end class DimensionMismatchException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace crcl{
		namespace base{
			
			class JointDetailsType : public DataThingType {
				public:
			            JointDetailsType(jobject _jthis, bool copy);
			            JointDetailsType(const JointDetailsType &);
			        
				JointDetailsType();
				virtual ~JointDetailsType();
			}; // end class JointDetailsType
		} // end namespace crcl
	} // end namespace base

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class AbstractBinaryDatatype : public AbstractDatatype {
							public:
						            AbstractBinaryDatatype(jobject _jthis, bool copy);
						            AbstractBinaryDatatype(const AbstractBinaryDatatype &);
						        
							AbstractBinaryDatatype(types::BuiltInType builtInType_0,context::QNameContext qNameContext_1);
							virtual ~AbstractBinaryDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
						}; // end class AbstractBinaryDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace exceptions{
						
						class EXIException : public java::lang::Exception {
							public:
						            EXIException(jobject _jthis, bool copy);
						            EXIException(const EXIException &);
						        
							EXIException(java::lang::Throwable throwable_0);
							EXIException(jstring string_0,java::lang::Throwable throwable_1);
							EXIException(jstring string_0);
							EXIException();
							virtual ~EXIException();
						}; // end class EXIException
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace exceptions

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class CMBuilder : public java::lang::Object {
								public:
							            CMBuilder(jobject _jthis, bool copy);
							            CMBuilder(const CMBuilder &);
							        
								CMBuilder(CMNodeFactory cMNodeFactory_0);
								virtual ~CMBuilder();
								XSCMValidator getContentModel(XSComplexTypeDecl xSComplexTypeDecl_0,jboolean boolean_1);
								void setDeclPool(XSDeclarationPool xSDeclarationPool_0);
							}; // end class CMBuilder
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace production{
							
							class AbstractProduction : public java::lang::Object {
								public:
							            AbstractProduction(jobject _jthis, bool copy);
							            AbstractProduction(const AbstractProduction &);
							        
								AbstractProduction(grammar::Grammar grammar_0,event::Event event_1,jint int_2);
								virtual ~AbstractProduction();
								event::Event getEvent();
								grammar::Grammar getNextGrammar();
								jstring toString();
							}; // end class AbstractProduction
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace production

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						
						class AbstractGrammars : public java::lang::Object {
							public:
						            AbstractGrammars(jobject _jthis, bool copy);
						            AbstractGrammars(const AbstractGrammars &);
						        
							AbstractGrammars(jboolean boolean_0,context::GrammarContext grammarContext_1);
							virtual ~AbstractGrammars();
							grammar::Grammar getDocumentGrammar();
							context::GrammarContext getGrammarContext();
							jboolean isSchemaInformed();
						}; // end class AbstractGrammars
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class AbstractBinaryValue : public AbstractValue {
							public:
						            AbstractBinaryValue(jobject _jthis, bool copy);
						            AbstractBinaryValue(const AbstractBinaryValue &);
						        
							AbstractBinaryValue(ValueType valueType_0,jbyteArray byteArray_1);
							virtual ~AbstractBinaryValue();
							jbyteArray toBytes();
						}; // end class AbstractBinaryValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class ElementNSImpl : public ElementImpl {
						public:
					            ElementNSImpl(jobject _jthis, bool copy);
					            ElementNSImpl(const ElementNSImpl &);
					        
						virtual ~ElementNSImpl();
						void setPrefix(jstring string_0);
						void setType(xs::XSTypeDefinition xSTypeDefinition_0);
						jstring getPrefix();
						jstring getNamespaceURI();
						jstring getLocalName();
						jstring getTypeNamespace();
						jboolean isDerivedFrom(jstring string_0,jstring string_1,jint int_2);
						jstring getTypeName();
					}; // end class ElementNSImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class ElementImpl : public XMLEventImpl {
							public:
						            ElementImpl(jobject _jthis, bool copy);
						            ElementImpl(const ElementImpl &);
						        
							virtual ~ElementImpl();
							virtual java::util::Iterator getNamespaces();
							virtual javax::xml::namespace::QName getName();
						}; // end class ElementImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace java{
		namespace awt{
			
			class List : public Component {
				public:
			            List(jobject _jthis, bool copy);
			            List(const List &);
			        
				List(jint int_0,jboolean boolean_1);
				List(jint int_0);
				List();
				virtual ~List();
				jstring getItem(jint int_0);
				jint getItemCount();
				void select(jint int_0);
				void removeActionListener(event::ActionListener actionListener_0);
				jobjectArray getActionListeners();
				void addItemListener(event::ItemListener itemListener_0);
				void removeItemListener(event::ItemListener itemListener_0);
				jobjectArray getItemListeners();
				jobjectArray getItems();
				jboolean isIndexSelected(jint int_0);
				jboolean isMultipleMode();
				jboolean allowsMultipleSelections();
				void setMultipleMode(jboolean boolean_0);
				void setMultipleSelections(jboolean boolean_0);
				jint getVisibleIndex();
				Dimension getPreferredSize();
				Dimension getPreferredSize(jint int_0);
				Dimension getMinimumSize(jint int_0);
				Dimension getMinimumSize();
				Dimension preferredSize();
				Dimension preferredSize(jint int_0);
				Dimension minimumSize();
				Dimension minimumSize(jint int_0);
				jint countItems();
				void addItem(jstring string_0);
				void addItem(jstring string_0,jint int_1);
				void delItem(jint int_0);
				jint getRows();
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void removeNotify();
				void addActionListener(event::ActionListener actionListener_0);
				jboolean isSelected(jint int_0);
				jintArray getSelectedIndexes();
				void makeVisible(jint int_0);
				void delItems(jint int_0,jint int_1);
				jint getSelectedIndex();
				void replaceItem(jstring string_0,jint int_1);
				void deselect(jint int_0);
				jstring getSelectedItem();
				jobjectArray getSelectedItems();
				void add(jstring string_0);
				void add(jstring string_0,jint int_1);
				void remove(jstring string_0);
				void remove(jint int_0);
				void clear();
				void removeAll();
			}; // end class List
		} // end namespace java
	} // end namespace awt

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								namespace jacobian{
									
									class AbstractLeastSquaresOptimizer : public JacobianMultivariateVectorOptimizer {
										public:
									            AbstractLeastSquaresOptimizer(jobject _jthis, bool copy);
									            AbstractLeastSquaresOptimizer(const AbstractLeastSquaresOptimizer &);
									        
										virtual ~AbstractLeastSquaresOptimizer();
										linear::RealMatrix getWeightSquareRoot();
										jdouble getRMS();
										jdouble getChiSquare();
										jdoubleArray computeSigma(jdoubleArray doubleArray_0,jdouble double_1);
										PointVectorValuePair optimize(jobjectArray optimizationDataArray_0);
									}; // end class AbstractLeastSquaresOptimizer
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace vector
	} // end namespace jacobian

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									
									class AbstractSimplex : public java::lang::Object {
										public:
									            AbstractSimplex(jobject _jthis, bool copy);
									            AbstractSimplex(const AbstractSimplex &);
									        
										virtual ~AbstractSimplex();
										PointValuePair getPoint(jint int_0);
										void build(jdoubleArray doubleArray_0);
										jint getDimension();
										void evaluate(analysis::MultivariateFunction multivariateFunction_0,java::util::Comparator comparator_1);
										jobjectArray getPoints();
										jint getSize();
									}; // end class AbstractSimplex
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv

	namespace crcl{
		namespace base{
			
			class TransAccelType : public DataThingType {
				public:
			            TransAccelType(jobject _jthis, bool copy);
			            TransAccelType(const TransAccelType &);
			        
				TransAccelType();
				virtual ~TransAccelType();
			}; // end class TransAccelType
		} // end namespace crcl
	} // end namespace base

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							
							class AbstractEncoderChannel : public java::lang::Object {
								public:
							            AbstractEncoderChannel(jobject _jthis, bool copy);
							            AbstractEncoderChannel(const AbstractEncoderChannel &);
							        
								AbstractEncoderChannel();
								virtual ~AbstractEncoderChannel();
								void encodeBinary(jbyteArray byteArray_0);
								void encodeString(jstring string_0);
								void encodeStringOnly(jstring string_0);
								void encodeUnsignedInteger(jint int_0);
								void encodeUnsignedIntegerValue(values::IntegerValue integerValue_0);
								void encodeInteger(jint int_0);
								void encodeIntegerValue(values::IntegerValue integerValue_0);
								void encodeDecimal(jboolean boolean_0,values::IntegerValue integerValue_1,values::IntegerValue integerValue_2);
								void encodeFloat(values::FloatValue floatValue_0);
								void encodeDateTime(values::DateTimeValue dateTimeValue_0);
							}; // end class AbstractEncoderChannel
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLDTDProcessor : public java::lang::Object {
							public:
						            XMLDTDProcessor(jobject _jthis, bool copy);
						            XMLDTDProcessor(const XMLDTDProcessor &);
						        
							XMLDTDProcessor();
							virtual ~XMLDTDProcessor();
							void startDTD(xni::XMLLocator xMLLocator_0,xni::Augmentations augmentations_1);
							void endDTD(xni::Augmentations augmentations_0);
							void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jobjectArray stringArray_3,jstring string_4,xni::XMLString xMLString_5,xni::XMLString xMLString_6,xni::Augmentations augmentations_7);
							void elementDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void externalEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
							void internalEntityDecl(jstring string_0,xni::XMLString xMLString_1,xni::XMLString xMLString_2,xni::Augmentations augmentations_3);
							void notationDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
							void unparsedEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
							void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void element(jstring string_0,xni::Augmentations augmentations_1);
							void setFeature(jstring string_0,jboolean boolean_1);
							void setDTDHandler(xni::XMLDTDHandler xMLDTDHandler_0);
							xni::XMLDTDHandler getDTDHandler();
							void startContentModel(jstring string_0,xni::Augmentations augmentations_1);
							void endContentModel(xni::Augmentations augmentations_0);
							void setDTDContentModelHandler(xni::XMLDTDContentModelHandler xMLDTDContentModelHandler_0);
							xni::XMLDTDContentModelHandler getDTDContentModelHandler();
							jobjectArray getRecognizedFeatures();
							jobjectArray getRecognizedProperties();
							java::lang::Boolean getFeatureDefault(jstring string_0);
							void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void startExternalSubset(xni::XMLResourceIdentifier xMLResourceIdentifier_0,xni::Augmentations augmentations_1);
							void startParameterEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void endParameterEntity(jstring string_0,xni::Augmentations augmentations_1);
							void endExternalSubset(xni::Augmentations augmentations_0);
							void any(xni::Augmentations augmentations_0);
							void startGroup(xni::Augmentations augmentations_0);
							void pcdata(xni::Augmentations augmentations_0);
							void endGroup(xni::Augmentations augmentations_0);
							void occurrence(jshort short_0,xni::Augmentations augmentations_1);
							void startAttlist(jstring string_0,xni::Augmentations augmentations_1);
							void endAttlist(xni::Augmentations augmentations_0);
							void setDTDSource(xni::parser::XMLDTDSource xMLDTDSource_0);
							xni::parser::XMLDTDSource getDTDSource();
							void setDTDContentModelSource(xni::parser::XMLDTDContentModelSource xMLDTDContentModelSource_0);
							xni::parser::XMLDTDContentModelSource getDTDContentModelSource();
							void startConditional(jshort short_0,xni::Augmentations augmentations_1);
							void ignoredCharacters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void endConditional(xni::Augmentations augmentations_0);
							void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
							void separator(jshort short_0,xni::Augmentations augmentations_1);
							void empty(xni::Augmentations augmentations_0);
						}; // end class XMLDTDProcessor
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace diagapplet{
		namespace utils{
			
			class StandAloneApplet : public java::applet::Applet {
				public:
			            StandAloneApplet(jobject _jthis, bool copy);
			            StandAloneApplet(const StandAloneApplet &);
			        
				StandAloneApplet();
				virtual ~StandAloneApplet();
				void componentResized(java::awt::event::ComponentEvent componentEvent_0);
				void componentMoved(java::awt::event::ComponentEvent componentEvent_0);
				void componentShown(java::awt::event::ComponentEvent componentEvent_0);
				void componentHidden(java::awt::event::ComponentEvent componentEvent_0);
				void startShutdown();
				jboolean canShutdown();
				void manual_resize(jint int_0,jint int_1);
				void cleanup();
			}; // end class StandAloneApplet
		} // end namespace diagapplet
	} // end namespace utils

	namespace javax{
		namespace swing{
			
			class AbstractCellEditor : public java::lang::Object {
				public:
			            AbstractCellEditor(jobject _jthis, bool copy);
			            AbstractCellEditor(const AbstractCellEditor &);
			        
				AbstractCellEditor();
				virtual ~AbstractCellEditor();
				jboolean stopCellEditing();
				void addCellEditorListener(event::CellEditorListener cellEditorListener_0);
				void cancelCellEditing();
				void removeCellEditorListener(event::CellEditorListener cellEditorListener_0);
				jboolean isCellEditable(java::util::EventObject eventObject_0);
				jboolean shouldSelectCell(java::util::EventObject eventObject_0);
				jobjectArray getCellEditorListeners();
			}; // end class AbstractCellEditor
		} // end namespace javax
	} // end namespace swing

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class IterationEvent : public java::util::EventObject {
							public:
						            IterationEvent(jobject _jthis, bool copy);
						            IterationEvent(const IterationEvent &);
						        
							virtual ~IterationEvent();
							jint getIterations();
						}; // end class IterationEvent
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace crcl{
		namespace base{
			
			class RotAccelType : public DataThingType {
				public:
			            RotAccelType(jobject _jthis, bool copy);
			            RotAccelType(const RotAccelType &);
			        
				RotAccelType();
				virtual ~RotAccelType();
			}; // end class RotAccelType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class TransSpeedType : public DataThingType {
				public:
			            TransSpeedType(jobject _jthis, bool copy);
			            TransSpeedType(const TransSpeedType &);
			        
				TransSpeedType();
				virtual ~TransSpeedType();
			}; // end class TransSpeedType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class AttrNSImpl : public AttrImpl {
						public:
					            AttrNSImpl(jobject _jthis, bool copy);
					            AttrNSImpl(const AttrNSImpl &);
					        
						AttrNSImpl();
						AttrNSImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1,jstring string_2,jstring string_3);
						virtual ~AttrNSImpl();
						void setPrefix(jstring string_0);
						jstring getPrefix();
						jstring getNamespaceURI();
						jstring getLocalName();
						jstring getTypeNamespace();
						jboolean isDerivedFrom(jstring string_0,jstring string_1,jint int_2);
						jstring getTypeName();
					}; // end class AttrNSImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class BaseSchemaDVFactory : public SchemaDVFactory {
								public:
							            BaseSchemaDVFactory(jobject _jthis, bool copy);
							            BaseSchemaDVFactory(const BaseSchemaDVFactory &);
							        
								BaseSchemaDVFactory();
								virtual ~BaseSchemaDVFactory();
								void setDeclPool(xs::XSDeclarationPool xSDeclarationPool_0);
								XSSimpleTypeDecl newXSSimpleTypeDecl();
								XSSimpleType createTypeList(jstring string_0,jstring string_1,jshort short_2,XSSimpleType xSSimpleType_3,xs::XSObjectList xSObjectList_4);
								XSSimpleType createTypeUnion(jstring string_0,jstring string_1,jshort short_2,jobjectArray xSSimpleTypeArray_3,xs::XSObjectList xSObjectList_4);
								XSSimpleType createTypeRestriction(jstring string_0,jstring string_1,jshort short_2,XSSimpleType xSSimpleType_3,xs::XSObjectList xSObjectList_4);
							}; // end class BaseSchemaDVFactory
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							
							class IdentityConstraint : public java::lang::Object {
								public:
							            IdentityConstraint(jobject _jthis, bool copy);
							            IdentityConstraint(const IdentityConstraint &);
							        
								virtual ~IdentityConstraint();
								xs::XSNamespaceItem getNamespaceItem();
								jstring getNamespace();
								void addAnnotation(XSAnnotationImpl xSAnnotationImpl_0);
								jstring getIdentityConstraintName();
								jstring getElementName();
								jshort getCategory();
								jstring getSelectorStr();
								void setSelector(Selector selector_0);
								Selector getSelector();
								void addField(Field field_0);
								jint getFieldCount();
								xs::StringList getFieldStrs();
								xs::XSIDCDefinition getRefKey();
								jboolean equals(IdentityConstraint identityConstraint_0);
								jstring toString();
								jstring getName();
								xs::XSObjectList getAnnotations();
								jshort getType();
								Field getFieldAt(jint int_0);
							}; // end class IdentityConstraint
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDAbstractParticleTraverser : public XSDAbstractTraverser {
								public:
							            XSDAbstractParticleTraverser(jobject _jthis, bool copy);
							            XSDAbstractParticleTraverser(const XSDAbstractParticleTraverser &);
							        
								virtual ~XSDAbstractParticleTraverser();
							}; // end class XSDAbstractParticleTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDAbstractIDConstraintTraverser : public XSDAbstractTraverser {
								public:
							            XSDAbstractIDConstraintTraverser(jobject _jthis, bool copy);
							            XSDAbstractIDConstraintTraverser(const XSDAbstractIDConstraintTraverser &);
							        
								XSDAbstractIDConstraintTraverser(XSDHandler xSDHandler_0,XSAttributeChecker xSAttributeChecker_1);
								virtual ~XSDAbstractIDConstraintTraverser();
							}; // end class XSDAbstractIDConstraintTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class AdamsIntegrator : public MultistepIntegrator {
								public:
							            AdamsIntegrator(jobject _jthis, bool copy);
							            AdamsIntegrator(const AdamsIntegrator &);
							        
								AdamsIntegrator(jstring string_0,jint int_1,jint int_2,jdouble double_3,jdouble double_4,jdoubleArray doubleArray_5,jdoubleArray doubleArray_6);
								AdamsIntegrator(jstring string_0,jint int_1,jint int_2,jdouble double_3,jdouble double_4,jdouble double_5,jdouble double_6);
								virtual ~AdamsIntegrator();
								linear::Array2DRowRealMatrix updateHighOrderDerivativesPhase1(linear::Array2DRowRealMatrix array2DRowRealMatrix_0);
								void updateHighOrderDerivativesPhase2(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,linear::Array2DRowRealMatrix array2DRowRealMatrix_2);
							}; // end class AdamsIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace crcl{
		namespace base{
			
			class RotSpeedType : public DataThingType {
				public:
			            RotSpeedType(jobject _jthis, bool copy);
			            RotSpeedType(const RotSpeedType &);
			        
				RotSpeedType();
				virtual ~RotSpeedType();
			}; // end class RotSpeedType
		} // end namespace crcl
	} // end namespace base

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class AbstractEXIHeader : public java::lang::Object {
							public:
						            AbstractEXIHeader(jobject _jthis, bool copy);
						            AbstractEXIHeader(const AbstractEXIHeader &);
						        
							AbstractEXIHeader();
							virtual ~AbstractEXIHeader();
						}; // end class AbstractEXIHeader
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class AbstractBuiltInContent : public AbstractBuiltInGrammar {
								public:
							            AbstractBuiltInContent(jobject _jthis, bool copy);
							            AbstractBuiltInContent(const AbstractBuiltInContent &);
							        
								AbstractBuiltInContent();
								virtual ~AbstractBuiltInContent();
								void learnCharacters();
							}; // end class AbstractBuiltInContent
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							
							class AbstractDecoderChannel : public java::lang::Object {
								public:
							            AbstractDecoderChannel(jobject _jthis, bool copy);
							            AbstractDecoderChannel(const AbstractDecoderChannel &);
							        
								AbstractDecoderChannel();
								virtual ~AbstractDecoderChannel();
								values::IntegerValue decodeNBitUnsignedIntegerValue(jint int_0);
								values::BooleanValue decodeBooleanValue();
								jcharArray decodeString();
								jcharArray decodeStringOnly(jint int_0);
								virtual jint decodeUnsignedInteger();
								values::IntegerValue decodeUnsignedIntegerValue();
								values::IntegerValue decodeIntegerValue();
								values::DecimalValue decodeDecimalValue();
								values::FloatValue decodeFloatValue();
								values::DateTimeValue decodeDateTimeValue(types::DateTimeType dateTimeType_0);
							}; // end class AbstractDecoderChannel
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class DatatypeException : public java::lang::Exception {
							public:
						            DatatypeException(jobject _jthis, bool copy);
						            DatatypeException(const DatatypeException &);
						        
							virtual ~DatatypeException();
							jstring getKey();
							jstring getMessage();
						}; // end class DatatypeException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class DTDDVFactory : public java::lang::Object {
							public:
						            DTDDVFactory(jobject _jthis, bool copy);
						            DTDDVFactory(const DTDDVFactory &);
						        
							virtual ~DTDDVFactory();
							static DTDDVFactory getInstance(jstring string_0);
							static DTDDVFactory getInstance();
						}; // end class DTDDVFactory
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class Container : public java::lang::Object {
								public:
							            Container(jobject _jthis, bool copy);
							            Container(const Container &);
							        
								virtual ~Container();
							}; // end class Container
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class DTDConfiguration : public BasicParserConfiguration {
						public:
					            DTDConfiguration(jobject _jthis, bool copy);
					            DTDConfiguration(const DTDConfiguration &);
					        
						DTDConfiguration();
						DTDConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						DTDConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						DTDConfiguration(util::SymbolTable symbolTable_0);
						virtual ~DTDConfiguration();
						void setLocale(java::util::Locale locale_0);
						void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
						jboolean parse(jboolean boolean_0);
						void parse(xni::parser::XMLInputSource xMLInputSource_0);
						void cleanup();
					}; // end class DTDConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace rcs{
		namespace posemath{
			
			class PmPose : public java::lang::Object {
				public:
			            PmPose(jobject _jthis, bool copy);
			            PmPose(const PmPose &);
			        
				PmPose(PmHomogeneous pmHomogeneous_0);
				PmPose(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5,jdouble double_6);
				PmPose();
				PmPose(PmCartesian pmCartesian_0,PmQuaternion pmQuaternion_1);
				PmPose(PmCartesian pmCartesian_0,PmRpy pmRpy_1);
				virtual ~PmPose();
				jfloatArray toMatFloatArrayTranspose();
				jboolean equals(PmHomogeneous pmHomogeneous_0);
				jboolean equals(PmPose pmPose_0);
				jstring toString();
				PmPose clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmPose
		} // end namespace rcs
	} // end namespace posemath

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						
						class AbstractAttributeList : public java::lang::Object {
							public:
						            AbstractAttributeList(jobject _jthis, bool copy);
						            AbstractAttributeList(const AbstractAttributeList &);
						        
							AbstractAttributeList(EXIFactory eXIFactory_0);
							virtual ~AbstractAttributeList();
							void addAttribute(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
							jstring getAttributePrefix(jint int_0);
							jstring getAttributeValue(jint int_0);
							void addNamespaceDeclaration(jstring string_0,jstring string_1);
							jint getNumberOfNamespaceDeclarations();
							core::container::NamespaceDeclaration getNamespaceDeclaration(jint int_0);
							jboolean hasXsiType();
							jstring getXsiTypeRaw();
							jstring getXsiTypePrefix();
							jboolean hasXsiNil();
							jstring getXsiNil();
							jstring getXsiNilPrefix();
							jint getNumberOfAttributes();
							jstring getAttributeURI(jint int_0);
							jstring getAttributeLocalName(jint int_0);
							void clear();
						}; // end class AbstractAttributeList
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class DurationDV : public AbstractDateTimeDV {
								public:
							            DurationDV(jobject _jthis, bool copy);
							            DurationDV(const DurationDV &);
							        
								DurationDV();
								virtual ~DurationDV();
							}; // end class DurationDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class AbstractListChromosome : public Chromosome {
							public:
						            AbstractListChromosome(jobject _jthis, bool copy);
						            AbstractListChromosome(const AbstractListChromosome &);
						        
							AbstractListChromosome(java::util::List list_0);
							AbstractListChromosome(java::util::List list_0,jboolean boolean_1);
							virtual ~AbstractListChromosome();
							jstring toString();
							jint getLength();
						}; // end class AbstractListChromosome
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MaxCountExceededException : public MathIllegalStateException {
							public:
						            MaxCountExceededException(jobject _jthis, bool copy);
						            MaxCountExceededException(const MaxCountExceededException &);
						        
							MaxCountExceededException(java::lang::Number number_0);
							virtual ~MaxCountExceededException();
							java::lang::Number getMax();
						}; // end class MaxCountExceededException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class AbstractSimplex : public java::lang::Object {
								public:
							            AbstractSimplex(jobject _jthis, bool copy);
							            AbstractSimplex(const AbstractSimplex &);
							        
								virtual ~AbstractSimplex();
								PointValuePair getPoint(jint int_0);
								void build(jdoubleArray doubleArray_0);
								jint getDimension();
								void evaluate(analysis::MultivariateFunction multivariateFunction_0,java::util::Comparator comparator_1);
								jobjectArray getPoints();
								jint getSize();
							}; // end class AbstractSimplex
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class XNIException : public java::lang::RuntimeException {
						public:
					            XNIException(jobject _jthis, bool copy);
					            XNIException(const XNIException &);
					        
						XNIException(jstring string_0,java::lang::Exception exception_1);
						XNIException(java::lang::Exception exception_0);
						XNIException(jstring string_0);
						virtual ~XNIException();
						java::lang::Throwable getCause();
						java::lang::Throwable initCause(java::lang::Throwable throwable_0);
						java::lang::Exception getException();
					}; // end class XNIException
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace java{
		namespace awt{
			
			class Image : public lang::Object {
				public:
			            Image(jobject _jthis, bool copy);
			            Image(const Image &);
			        
				Image();
				virtual ~Image();
				Image getScaledInstance(jint int_0,jint int_1,jint int_2);
				ImageCapabilities getCapabilities(GraphicsConfiguration graphicsConfiguration_0);
				void setAccelerationPriority(jfloat float_0);
				jfloat getAccelerationPriority();
				void flush();
			}; // end class Image
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			namespace geom{
				
				class RectangularShape : public lang::Object {
					public:
				            RectangularShape(jobject _jthis, bool copy);
				            RectangularShape(const RectangularShape &);
				        
					virtual ~RectangularShape();
					void setFrame(Rectangle2D rectangle2D_0);
					void setFrame(Point2D point2D_0,Dimension2D dimension2D_1);
					jdouble getMinX();
					jdouble getMinY();
					jdouble getMaxX();
					jdouble getMaxY();
					void setFrameFromDiagonal(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					void setFrameFromDiagonal(Point2D point2D_0,Point2D point2D_1);
					jdouble getCenterX();
					jdouble getCenterY();
					Rectangle2D getFrame();
					void setFrameFromCenter(Point2D point2D_0,Point2D point2D_1);
					void setFrameFromCenter(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					Rectangle getBounds();
					jboolean contains(Point2D point2D_0);
					jboolean contains(Rectangle2D rectangle2D_0);
					jboolean intersects(Rectangle2D rectangle2D_0);
				}; // end class RectangularShape
			} // end namespace java
		} // end namespace awt
	} // end namespace geom

	namespace java{
		namespace awt{
			
			class MenuItem : public MenuComponent {
				public:
			            MenuItem(jobject _jthis, bool copy);
			            MenuItem(const MenuItem &);
			        
				MenuItem(jstring string_0);
				MenuItem();
				virtual ~MenuItem();
				void deleteShortcut();
				void setActionCommand(jstring string_0);
				jstring getActionCommand();
				void removeActionListener(event::ActionListener actionListener_0);
				jobjectArray getActionListeners();
				jstring getLabel();
				void setLabel(jstring string_0);
				jboolean isEnabled();
				void setEnabled(jboolean boolean_0);
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void addActionListener(event::ActionListener actionListener_0);
				jstring paramString();
				void enable();
				void enable(jboolean boolean_0);
				void disable();
			}; // end class MenuItem
		} // end namespace java
	} // end namespace awt

	namespace javax{
		namespace swing{
			namespace plaf{
				
				class ComponentUI : public java::lang::Object {
					public:
				            ComponentUI(jobject _jthis, bool copy);
				            ComponentUI(const ComponentUI &);
				        
					ComponentUI();
					virtual ~ComponentUI();
					void installUI(JComponent jComponent_0);
					void uninstallUI(JComponent jComponent_0);
					java::awt::Dimension getPreferredSize(JComponent jComponent_0);
					java::awt::Dimension getMinimumSize(JComponent jComponent_0);
					java::awt::Dimension getMaximumSize(JComponent jComponent_0);
					jint getAccessibleChildrenCount(JComponent jComponent_0);
					jint getBaseline(JComponent jComponent_0,jint int_1,jint int_2);
					java::awt::Component::BaselineResizeBehavior getBaselineResizeBehavior(JComponent jComponent_0);
					void paint(java::awt::Graphics graphics_0,JComponent jComponent_1);
					static ComponentUI createUI(JComponent jComponent_0);
					void update(java::awt::Graphics graphics_0,JComponent jComponent_1);
					jboolean contains(JComponent jComponent_0,jint int_1,jint int_2);
				}; // end class ComponentUI
			} // end namespace javax
		} // end namespace swing
	} // end namespace plaf

	namespace java{
		namespace awt{
			namespace event{
				
				class InputEvent : public ComponentEvent {
					public:
				            InputEvent(jobject _jthis, bool copy);
				            InputEvent(const InputEvent &);
				        
					virtual ~InputEvent();
					jint getModifiersEx();
					static jstring getModifiersExText(jint int_0);
					static jint getMaskForButton(jint int_0);
					jboolean isMetaDown();
					jboolean isAltDown();
					jboolean isAltGraphDown();
					jboolean isControlDown();
					jboolean isShiftDown();
					jboolean isConsumed();
					jlong getWhen();
					void consume();
					jint getModifiers();
				}; // end class InputEvent
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace lang{
			
			class AbstractStringBuilder : public Object {
				public:
			            AbstractStringBuilder(jobject _jthis, bool copy);
			            AbstractStringBuilder(const AbstractStringBuilder &);
			        
				virtual ~AbstractStringBuilder();
				AbstractStringBuilder append(jcharArray charArray_0);
				AbstractStringBuilder append(jcharArray charArray_0,jint int_1,jint int_2);
				AbstractStringBuilder append(jboolean boolean_0);
				AbstractStringBuilder append(jchar char_0);
				AbstractStringBuilder append(CharSequence charSequence_0);
				AbstractStringBuilder append(StringBuffer stringBuffer_0);
				AbstractStringBuilder append(CharSequence charSequence_0,jint int_1,jint int_2);
				AbstractStringBuilder append(jdouble double_0);
				AbstractStringBuilder append(jfloat float_0);
				AbstractStringBuilder append(jlong long_0);
				AbstractStringBuilder append(jint int_0);
				AbstractStringBuilder append(jstring string_0);
				jint indexOf(jstring string_0);
				jint indexOf(jstring string_0,jint int_1);
				jint length();
				jchar charAt(jint int_0);
				jint codePointAt(jint int_0);
				jint codePointBefore(jint int_0);
				jint codePointCount(jint int_0,jint int_1);
				jint offsetByCodePoints(jint int_0,jint int_1);
				void getChars(jint int_0,jint int_1,jcharArray charArray_2,jint int_3);
				jint lastIndexOf(jstring string_0);
				jint lastIndexOf(jstring string_0,jint int_1);
				jstring substring(jint int_0,jint int_1);
				jstring substring(jint int_0);
				CharSequence subSequence(jint int_0,jint int_1);
				AbstractStringBuilder replace(jint int_0,jint int_1,jstring string_2);
				AbstractStringBuilder delete(jint int_0,jint int_1);
				AbstractStringBuilder insert(jint int_0,jlong long_1);
				AbstractStringBuilder insert(jint int_0,jboolean boolean_1);
				AbstractStringBuilder insert(jint int_0,jint int_1);
				AbstractStringBuilder insert(jint int_0,jchar char_1);
				AbstractStringBuilder insert(jint int_0,jfloat float_1);
				AbstractStringBuilder insert(jint int_0,jdouble double_1);
				AbstractStringBuilder insert(jint int_0,jcharArray charArray_1,jint int_2,jint int_3);
				AbstractStringBuilder insert(jint int_0,jstring string_1);
				AbstractStringBuilder insert(jint int_0,jcharArray charArray_1);
				AbstractStringBuilder insert(jint int_0,CharSequence charSequence_1);
				AbstractStringBuilder insert(jint int_0,CharSequence charSequence_1,jint int_2,jint int_3);
				jint capacity();
				void ensureCapacity(jint int_0);
				void trimToSize();
				void setLength(jint int_0);
				void setCharAt(jint int_0,jchar char_1);
				AbstractStringBuilder appendCodePoint(jint int_0);
				AbstractStringBuilder deleteCharAt(jint int_0);
				AbstractStringBuilder reverse();
			}; // end class AbstractStringBuilder
		} // end namespace java
	} // end namespace lang

	namespace javafx{
		namespace scene{
			
			class Node : public java::lang::Object {
				public:
			            Node(jobject _jthis, bool copy);
			            Node(const Node &);
			        
				virtual ~Node();
				virtual jstring getAccessibleText();
				virtual jstring getStyle();
				virtual jboolean isPressed();
				virtual void setId(jstring string_0);
				virtual void setCache(jboolean boolean_0);
				virtual jboolean isFocused();
				virtual jboolean isVisible();
				void requestFocus();
				virtual jboolean isFocusTraversable();
				virtual void setClip(Node node_0);
				virtual Node getClip();
				virtual jdouble getTranslateY();
				jboolean isResizable();
				virtual void setOpacity(jdouble double_0);
				virtual jdouble getOpacity();
				void toFront();
				void toBack();
				virtual void setVisible(jboolean boolean_0);
				virtual Scene getScene();
				jboolean hasProperties();
				virtual void fireEvent(event::Event event_0);
				virtual void impl_reapplyCSS();
				jdouble minWidth(jdouble double_0);
				jdouble minHeight(jdouble double_0);
				jdouble maxWidth(jdouble double_0);
				jdouble maxHeight(jdouble double_0);
				virtual jboolean isDisabled();
				void startFullDrag();
				void impl_updatePeer();
				virtual jdouble getLayoutX();
				virtual jdouble getTranslateX();
				virtual jdouble getLayoutY();
				jdouble prefWidth(jdouble double_0);
				jdouble prefHeight(jdouble double_0);
				static java::util::List getClassCssMetaData();
				jdouble getBaselineOffset();
				java::util::List getCssMetaData();
				virtual void impl_processCSS(jboolean boolean_0);
				void resizeRelocate(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				virtual jstring getAccessibleHelp();
				virtual void setPickOnBounds(jboolean boolean_0);
				void relocate(jdouble double_0,jdouble double_1);
				virtual void impl_syncPeer();
				java::util::Set lookupAll(jstring string_0);
				virtual jboolean isManaged();
				virtual jboolean isPickOnBounds();
				virtual void autosize();
				virtual void setStyle(jstring string_0);
				virtual jboolean isCache();
				virtual void setDisable(jboolean boolean_0);
				virtual jboolean isDisable();
				virtual void setManaged(jboolean boolean_0);
				virtual void setLayoutX(jdouble double_0);
				virtual void setLayoutY(jdouble double_0);
				jdouble computeAreaInScreen();
				virtual transform::Transform getLocalToParentTransform();
				void impl_transformsChanged();
				virtual jdouble impl_getPivotX();
				virtual jdouble impl_getPivotY();
				virtual jdouble impl_getPivotZ();
				virtual void setTranslateX(jdouble double_0);
				virtual void setTranslateY(jdouble double_0);
				virtual void setTranslateZ(jdouble double_0);
				virtual jdouble getTranslateZ();
				virtual void setScaleX(jdouble double_0);
				virtual jdouble getScaleX();
				virtual void setScaleY(jdouble double_0);
				virtual jdouble getScaleY();
				virtual void setScaleZ(jdouble double_0);
				virtual jdouble getScaleZ();
				virtual void setRotate(jdouble double_0);
				virtual jdouble getRotate();
				virtual transform::Transform getLocalToSceneTransform();
				jboolean impl_hasTransforms();
				jboolean usesMirroring();
				virtual void setMouseTransparent(jboolean boolean_0);
				virtual jboolean isMouseTransparent();
				virtual jboolean isHover();
				virtual void setFocusTraversable(jboolean boolean_0);
				virtual jboolean impl_isTreeVisible();
				virtual void impl_setShowMnemonics(jboolean boolean_0);
				virtual jboolean impl_isShowMnemonics();
				jstring getTypeSelector();
				java::util::Map impl_findStyles(java::util::Map map_0);
				virtual void applyCss();
				virtual void setAccessibleRoleDescription(jstring string_0);
				virtual jstring getAccessibleRoleDescription();
				virtual void setAccessibleText(jstring string_0);
				virtual void setAccessibleHelp(jstring string_0);
				jstring toString();
				jboolean contains(jdouble double_0,jdouble double_1);
				virtual Parent getParent();
				virtual jstring getId();
				Node lookup(jstring string_0);
				void resize(jdouble double_0,jdouble double_1);
				jboolean intersects(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
			}; // end class Node
		} // end namespace javafx
	} // end namespace scene

	namespace javafx{
		namespace event{
			
			class Event : public java::util::EventObject {
				public:
			            Event(jobject _jthis, bool copy);
			            Event(const Event &);
			        
				virtual ~Event();
				jboolean isConsumed();
				void consume();
			}; // end class Event
		} // end namespace javafx
	} // end namespace event

	namespace java{
		namespace nio{
			namespace channels{
				
				class SelectableChannel : public spi::AbstractInterruptibleChannel {
					public:
				            SelectableChannel(jobject _jthis, bool copy);
				            SelectableChannel(const SelectableChannel &);
				        
					virtual ~SelectableChannel();
				}; // end class SelectableChannel
			} // end namespace java
		} // end namespace nio
	} // end namespace channels

	namespace rcs{
		namespace posemath{
			
			class PmQuaternion : public java::lang::Object {
				public:
			            PmQuaternion(jobject _jthis, bool copy);
			            PmQuaternion(const PmQuaternion &);
			        
				PmQuaternion(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				PmQuaternion(PmRotationMatrix pmRotationMatrix_0);
				PmQuaternion(PmRotationVector pmRotationVector_0);
				PmQuaternion(PmRpy pmRpy_0);
				PmQuaternion();
				virtual ~PmQuaternion();
				jdouble getX();
				jdouble getY();
				PmQuaternion multipy(PmQuaternion pmQuaternion_0);
				void setX(jdouble double_0);
				void setY(jdouble double_0);
				jdouble getZ();
				void setZ(jdouble double_0);
				jdouble getS();
				void setS(jdouble double_0);
				jboolean equals(PmRotationVector pmRotationVector_0);
				jboolean equals(PmRotationMatrix pmRotationMatrix_0);
				jboolean equals(PmQuaternion pmQuaternion_0);
				jstring toString();
				PmQuaternion clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmQuaternion
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PmRotationMatrix : public java::lang::Object {
				public:
			            PmRotationMatrix(jobject _jthis, bool copy);
			            PmRotationMatrix(const PmRotationMatrix &);
			        
				PmRotationMatrix();
				PmRotationMatrix(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				PmRotationMatrix(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5,jdouble double_6,jdouble double_7,jdouble double_8);
				virtual ~PmRotationMatrix();
				PmCartesian multiply(PmCartesian pmCartesian_0);
				PmRotationMatrix multiply(PmRotationMatrix pmRotationMatrix_0);
				PmRotationMatrix inv();
				jstring toString();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmRotationMatrix
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PmEulerZyz : public java::lang::Object {
				public:
			            PmEulerZyz(jobject _jthis, bool copy);
			            PmEulerZyz(const PmEulerZyz &);
			        
				PmEulerZyz(jdouble double_0,jdouble double_1,jdouble double_2);
				PmEulerZyz();
				virtual ~PmEulerZyz();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmEulerZyz
		} // end namespace rcs
	} // end namespace posemath

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class AbstractUnivariateDifferentiableSolver : public BaseAbstractUnivariateSolver {
								public:
							            AbstractUnivariateDifferentiableSolver(jobject _jthis, bool copy);
							            AbstractUnivariateDifferentiableSolver(const AbstractUnivariateDifferentiableSolver &);
							        
								virtual ~AbstractUnivariateDifferentiableSolver();
							}; // end class AbstractUnivariateDifferentiableSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							
							class BaseAbstractUnivariateOptimizer : public java::lang::Object {
								public:
							            BaseAbstractUnivariateOptimizer(jobject _jthis, bool copy);
							            BaseAbstractUnivariateOptimizer(const BaseAbstractUnivariateOptimizer &);
							        
								virtual ~BaseAbstractUnivariateOptimizer();
								jint getEvaluations();
								jdouble getMax();
								jdouble getStartValue();
								jint getMaxEvaluations();
								jdouble getMin();
								GoalType getGoalType();
								ConvergenceChecker getConvergenceChecker();
								UnivariatePointValuePair optimize(jint int_0,analysis::UnivariateFunction univariateFunction_1,GoalType goalType_2,jdouble double_3,jdouble double_4,jdouble double_5);
								UnivariatePointValuePair optimize(jint int_0,analysis::UnivariateFunction univariateFunction_1,GoalType goalType_2,jdouble double_3,jdouble double_4);
							}; // end class BaseAbstractUnivariateOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							
							class AbstractLinearOptimizer : public java::lang::Object {
								public:
							            AbstractLinearOptimizer(jobject _jthis, bool copy);
							            AbstractLinearOptimizer(const AbstractLinearOptimizer &);
							        
								virtual ~AbstractLinearOptimizer();
								jint getIterations();
								jint getMaxIterations();
								void setMaxIterations(jint int_0);
								PointValuePair optimize(LinearObjectiveFunction linearObjectiveFunction_0,java::util::Collection collection_1,GoalType goalType_2,jboolean boolean_3);
							}; // end class AbstractLinearOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							namespace evaluation{
								
								class ClusterEvaluator : public java::lang::Object {
									public:
								            ClusterEvaluator(jobject _jthis, bool copy);
								            ClusterEvaluator(const ClusterEvaluator &);
								        
									ClusterEvaluator(distance::DistanceMeasure distanceMeasure_0);
									ClusterEvaluator();
									virtual ~ClusterEvaluator();
									jboolean isBetterScore(jdouble double_0,jdouble double_1);
								}; // end class ClusterEvaluator
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace clustering
	} // end namespace evaluation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class ThirdMoment : public SecondMoment {
									public:
								            ThirdMoment(jobject _jthis, bool copy);
								            ThirdMoment(const ThirdMoment &);
								        
									ThirdMoment();
									ThirdMoment(ThirdMoment thirdMoment_0);
									virtual ~ThirdMoment();
									void clear();
									void increment(jdouble double_0);
									static void copy(ThirdMoment thirdMoment_0,ThirdMoment thirdMoment_1);
									ThirdMoment copy();
									jdouble getResult();
								}; // end class ThirdMoment
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class DescriptiveStatistics : public java::lang::Object {
								public:
							            DescriptiveStatistics(jobject _jthis, bool copy);
							            DescriptiveStatistics(const DescriptiveStatistics &);
							        
								DescriptiveStatistics(jint int_0);
								DescriptiveStatistics(jdoubleArray doubleArray_0);
								DescriptiveStatistics();
								DescriptiveStatistics(DescriptiveStatistics descriptiveStatistics_0);
								virtual ~DescriptiveStatistics();
								jdoubleArray getValues();
								void addValue(jdouble double_0);
								jdouble getMax();
								jdouble getMin();
								jlong getN();
								jdouble getMean();
								jdouble getVariance();
								jdouble getStandardDeviation();
								void removeMostRecentValue();
								jdouble replaceMostRecentValue(jdouble double_0);
								jdouble getSkewness();
								jdouble getKurtosis();
								jint getWindowSize();
								void setWindowSize(jint int_0);
								jdoubleArray getSortedValues();
								jdouble getElement(jint int_0);
								jdouble getPercentile(jdouble double_0);
								jdouble getSumsq();
								jdouble getQuadraticMean();
								jdouble getPopulationVariance();
								jdouble getGeometricMean();
								UnivariateStatistic getSumImpl();
								void setSumImpl(UnivariateStatistic univariateStatistic_0);
								UnivariateStatistic getSumsqImpl();
								void setSumsqImpl(UnivariateStatistic univariateStatistic_0);
								UnivariateStatistic getMinImpl();
								void setMinImpl(UnivariateStatistic univariateStatistic_0);
								UnivariateStatistic getMaxImpl();
								void setMaxImpl(UnivariateStatistic univariateStatistic_0);
								UnivariateStatistic getMeanImpl();
								void setMeanImpl(UnivariateStatistic univariateStatistic_0);
								UnivariateStatistic getVarianceImpl();
								void setVarianceImpl(UnivariateStatistic univariateStatistic_0);
								UnivariateStatistic getGeometricMeanImpl();
								void setGeometricMeanImpl(UnivariateStatistic univariateStatistic_0);
								UnivariateStatistic getKurtosisImpl();
								void setKurtosisImpl(UnivariateStatistic univariateStatistic_0);
								UnivariateStatistic getPercentileImpl();
								void setPercentileImpl(UnivariateStatistic univariateStatistic_0);
								UnivariateStatistic getSkewnessImpl();
								void setSkewnessImpl(UnivariateStatistic univariateStatistic_0);
								jdouble getSum();
								jstring toString();
								void clear();
								jdouble apply(UnivariateStatistic univariateStatistic_0);
								DescriptiveStatistics copy();
								static void copy(DescriptiveStatistics descriptiveStatistics_0,DescriptiveStatistics descriptiveStatistics_1);
							}; // end class DescriptiveStatistics
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						
						class Dfp : public java::lang::Object {
							public:
						            Dfp(jobject _jthis, bool copy);
						            Dfp(const Dfp &);
						        
							Dfp(Dfp dfp_0);
							virtual ~Dfp();
							Dfp multiply(jint int_0);
							Dfp multiply(jdouble double_0);
							Dfp multiply(Dfp dfp_0);
							Dfp subtract(Dfp dfp_0);
							Dfp subtract(jdouble double_0);
							Dfp reciprocal();
							Dfp rootN(jint int_0);
							Dfp acosh();
							Dfp asinh();
							Dfp atanh();
							Dfp linearCombination(Dfp dfp_0,Dfp dfp_1,Dfp dfp_2,Dfp dfp_3,Dfp dfp_4,Dfp dfp_5,Dfp dfp_6,Dfp dfp_7);
							Dfp linearCombination(Dfp dfp_0,Dfp dfp_1,Dfp dfp_2,Dfp dfp_3,Dfp dfp_4,Dfp dfp_5);
							Dfp linearCombination(jdouble double_0,Dfp dfp_1,jdouble double_2,Dfp dfp_3,jdouble double_4,Dfp dfp_5);
							Dfp linearCombination(jdouble double_0,Dfp dfp_1,jdouble double_2,Dfp dfp_3,jdouble double_4,Dfp dfp_5,jdouble double_6,Dfp dfp_7);
							Dfp linearCombination(jobjectArray dfpArray_0,jobjectArray dfpArray_1);
							Dfp linearCombination(jdoubleArray doubleArray_0,jobjectArray dfpArray_1);
							Dfp linearCombination(Dfp dfp_0,Dfp dfp_1,Dfp dfp_2,Dfp dfp_3);
							Dfp linearCombination(jdouble double_0,Dfp dfp_1,jdouble double_2,Dfp dfp_3);
							jdouble getReal();
							Dfp negate();
							Dfp getZero();
							Dfp getOne();
							Dfp dotrap(jint int_0,jstring string_1,Dfp dfp_2,Dfp dfp_3);
							jint classify();
							static Dfp copysign(Dfp dfp_0,Dfp dfp_1);
							jdouble toDouble();
							jdoubleArray toSplitDouble();
							jint getRadixDigits();
							Dfp getTwo();
							jboolean lessThan(Dfp dfp_0);
							jboolean greaterThan(Dfp dfp_0);
							jboolean negativeOrNull();
							jboolean strictlyNegative();
							jboolean positiveOrNull();
							jboolean strictlyPositive();
							jboolean isZero();
							jboolean unequal(Dfp dfp_0);
							jint log10K();
							Dfp power10K(jint int_0);
							jint intLog10();
							Dfp power10(jint int_0);
							Dfp add(Dfp dfp_0);
							Dfp add(jdouble double_0);
							jstring toString();
							jint hashCode();
							Dfp abs();
							Dfp sin();
							Dfp cos();
							Dfp tan();
							Dfp atan2(Dfp dfp_0);
							Dfp sqrt();
							Dfp log();
							jint log10();
							Dfp pow(jdouble double_0);
							Dfp pow(Dfp dfp_0);
							Dfp pow(jint int_0);
							Dfp exp();
							jint intValue();
							Dfp newInstance(jbyte byte_0,jbyte byte_1);
							Dfp newInstance(Dfp dfp_0);
							Dfp newInstance(jstring string_0);
							Dfp newInstance(jbyte byte_0);
							Dfp newInstance(jint int_0);
							Dfp newInstance(jlong long_0);
							Dfp newInstance(jdouble double_0);
							Dfp newInstance();
							DfpField getField();
							jboolean isNaN();
							jboolean isInfinite();
							Dfp scalb(jint int_0);
							Dfp copySign(jdouble double_0);
							Dfp copySign(Dfp dfp_0);
							Dfp signum();
							Dfp divide(Dfp dfp_0);
							Dfp divide(jint int_0);
							Dfp divide(jdouble double_0);
							Dfp remainder(Dfp dfp_0);
							Dfp remainder(jdouble double_0);
							Dfp asin();
							Dfp acos();
							Dfp atan();
							Dfp cbrt();
							Dfp ceil();
							Dfp floor();
							Dfp rint();
							jlong round();
							Dfp sinh();
							Dfp cosh();
							Dfp tanh();
							Dfp hypot(Dfp dfp_0);
							Dfp expm1();
							Dfp log1p();
							Dfp nextAfter(Dfp dfp_0);
						}; // end class Dfp
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class GradientMultivariateOptimizer : public MultivariateOptimizer {
									public:
								            GradientMultivariateOptimizer(jobject _jthis, bool copy);
								            GradientMultivariateOptimizer(const GradientMultivariateOptimizer &);
								        
									virtual ~GradientMultivariateOptimizer();
									PointValuePair optimize(jobjectArray optimizationDataArray_0);
								}; // end class GradientMultivariateOptimizer
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							
							class StringEncoderImpl : public AbstractStringCoder {
								public:
							            StringEncoderImpl(jobject _jthis, bool copy);
							            StringEncoderImpl(const StringEncoderImpl &);
							        
								StringEncoderImpl(jboolean boolean_0);
								StringEncoderImpl(jboolean boolean_0,jint int_1);
								virtual ~StringEncoderImpl();
								void addValue(context::QNameContext qNameContext_0,jstring string_1);
								void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,jstring string_2);
								jboolean isStringHit(jstring string_0);
								void clear();
							}; // end class StringEncoderImpl
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						
						class EXIContentModelBuilder : public org::apache::xerces::impl::xs::models::CMBuilder {
							public:
						            EXIContentModelBuilder(jobject _jthis, bool copy);
						            EXIContentModelBuilder(const EXIContentModelBuilder &);
						        
							EXIContentModelBuilder();
							virtual ~EXIContentModelBuilder();
							void fatalError(jstring string_0,jstring string_1,org::apache::xerces::xni::parser::XMLParseException xMLParseException_2);
							void warning(jstring string_0,jstring string_1,org::apache::xerces::xni::parser::XMLParseException xMLParseException_2);
							void loadGrammars(org::apache::xerces::xni::parser::XMLInputSource xMLInputSource_0);
							void loadGrammars(org::apache::xerces::xni::parser::XMLInputSource xMLInputSource_0,org::apache::xerces::xni::parser::XMLEntityResolver xMLEntityResolver_1);
							void loadGrammars(jstring string_0,org::apache::xerces::xni::parser::XMLEntityResolver xMLEntityResolver_1);
							void loadGrammars(java::io::InputStream inputStream_0);
							void loadGrammars(java::io::InputStream inputStream_0,org::apache::xerces::xni::parser::XMLEntityResolver xMLEntityResolver_1);
							void loadGrammars(jstring string_0);
							void loadXSDTypesOnlyGrammars();
							org::apache::xerces::xs::XSModel getXSModel();
							void error(jstring string_0,jstring string_1,org::apache::xerces::xni::parser::XMLParseException xMLParseException_2);
						}; // end class EXIContentModelBuilder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class SchemaInformedStartTag : public AbstractSchemaInformedContent {
								public:
							            SchemaInformedStartTag(jobject _jthis, bool copy);
							            SchemaInformedStartTag(const SchemaInformedStartTag &);
							        
								SchemaInformedStartTag();
								SchemaInformedStartTag(SchemaInformedGrammar schemaInformedGrammar_0);
								virtual ~SchemaInformedStartTag();
								GrammarType getGrammarType();
								jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								Grammar getElementContentGrammar();
								void setElementContentGrammar(Grammar grammar_0);
								jstring toString();
								SchemaInformedStartTag clone();
							}; // end class SchemaInformedStartTag
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class ElementDefinitionImpl : public ParentNode {
						public:
					            ElementDefinitionImpl(jobject _jthis, bool copy);
					            ElementDefinitionImpl(const ElementDefinitionImpl &);
					        
						ElementDefinitionImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						virtual ~ElementDefinitionImpl();
						jstring getNodeName();
						jshort getNodeType();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						w3c::dom::NamedNodeMap getAttributes();
					}; // end class ElementDefinitionImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class NamedNodeMapImpl : public java::lang::Object {
						public:
					            NamedNodeMapImpl(jobject _jthis, bool copy);
					            NamedNodeMapImpl(const NamedNodeMapImpl &);
					        
						virtual ~NamedNodeMapImpl();
						w3c::dom::Node item(jint int_0);
						w3c::dom::Node removeNamedItem(jstring string_0);
						w3c::dom::Node removeNamedItemNS(jstring string_0,jstring string_1);
						NamedNodeMapImpl cloneMap(NodeImpl nodeImpl_0);
						w3c::dom::Node getNamedItem(jstring string_0);
						w3c::dom::Node setNamedItem(w3c::dom::Node node_0);
						w3c::dom::Node getNamedItemNS(jstring string_0,jstring string_1);
						w3c::dom::Node setNamedItemNS(w3c::dom::Node node_0);
						jint getLength();
						void removeAll();
					}; // end class NamedNodeMapImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					namespace events{
						
						class UIEventImpl : public EventImpl {
							public:
						            UIEventImpl(jobject _jthis, bool copy);
						            UIEventImpl(const UIEventImpl &);
						        
							UIEventImpl();
							virtual ~UIEventImpl();
							w3c::dom::views::AbstractView getView();
							jint getDetail();
							void initUIEvent(jstring string_0,jboolean boolean_1,jboolean boolean_2,w3c::dom::views::AbstractView abstractView_3,jint int_4);
						}; // end class UIEventImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLNamespaceBinder : public java::lang::Object {
						public:
					            XMLNamespaceBinder(jobject _jthis, bool copy);
					            XMLNamespaceBinder(const XMLNamespaceBinder &);
					        
						XMLNamespaceBinder();
						virtual ~XMLNamespaceBinder();
						void startCDATA(xni::Augmentations augmentations_0);
						void endCDATA(xni::Augmentations augmentations_0);
						void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void setFeature(jstring string_0,jboolean boolean_1);
						void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
						void endDocument(xni::Augmentations augmentations_0);
						void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
						void setOnlyPassPrefixMappingEvents(jboolean boolean_0);
						jboolean getOnlyPassPrefixMappingEvents();
						jobjectArray getRecognizedFeatures();
						jobjectArray getRecognizedProperties();
						java::lang::Boolean getFeatureDefault(jstring string_0);
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getDocumentHandler();
						void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
						xni::parser::XMLDocumentSource getDocumentSource();
						void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XMLNamespaceBinder
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLDTDScannerImpl : public XMLScanner {
						public:
					            XMLDTDScannerImpl(jobject _jthis, bool copy);
					            XMLDTDScannerImpl(const XMLDTDScannerImpl &);
					        
						XMLDTDScannerImpl();
						XMLDTDScannerImpl(util::SymbolTable symbolTable_0,XMLErrorReporter xMLErrorReporter_1,XMLEntityManager xMLEntityManager_2);
						virtual ~XMLDTDScannerImpl();
						void startEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void endEntity(jstring string_0,xni::Augmentations augmentations_1);
						void setDTDHandler(xni::XMLDTDHandler xMLDTDHandler_0);
						xni::XMLDTDHandler getDTDHandler();
						void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
						jboolean scanDTDExternalSubset(jboolean boolean_0);
						jboolean scanDTDInternalSubset(jboolean boolean_0,jboolean boolean_1,jboolean boolean_2);
						void setDTDContentModelHandler(xni::XMLDTDContentModelHandler xMLDTDContentModelHandler_0);
						xni::XMLDTDContentModelHandler getDTDContentModelHandler();
						jobjectArray getRecognizedFeatures();
						jobjectArray getRecognizedProperties();
						java::lang::Boolean getFeatureDefault(jstring string_0);
						void reset();
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XMLDTDScannerImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class PSVIDOMImplementationImpl : public DOMImplementationImpl {
						public:
					            PSVIDOMImplementationImpl(jobject _jthis, bool copy);
					            PSVIDOMImplementationImpl(const PSVIDOMImplementationImpl &);
					        
						PSVIDOMImplementationImpl();
						virtual ~PSVIDOMImplementationImpl();
						jboolean hasFeature(jstring string_0,jstring string_1);
						static w3c::dom::DOMImplementation getDOMImplementation();
					}; // end class PSVIDOMImplementationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class AbstractSAXParser : public AbstractXMLDocumentParser {
						public:
					            AbstractSAXParser(jobject _jthis, bool copy);
					            AbstractSAXParser(const AbstractSAXParser &);
					        
						virtual ~AbstractSAXParser();
						xml::sax::ContentHandler getContentHandler();
						void startCDATA(xni::Augmentations augmentations_0);
						void endCDATA(xni::Augmentations augmentations_0);
						void endDTD(xni::Augmentations augmentations_0);
						void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jobjectArray stringArray_3,jstring string_4,xni::XMLString xMLString_5,xni::XMLString xMLString_6,xni::Augmentations augmentations_7);
						void elementDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void externalEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void internalEntityDecl(jstring string_0,xni::XMLString xMLString_1,xni::XMLString xMLString_2,xni::Augmentations augmentations_3);
						void notationDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void unparsedEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						void setLocale(java::util::Locale locale_0);
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(xml::sax::EntityResolver entityResolver_0);
						xml::sax::EntityResolver getEntityResolver();
						void setDTDHandler(xml::sax::DTDHandler dTDHandler_0);
						xml::sax::DTDHandler getDTDHandler();
						void setContentHandler(xml::sax::ContentHandler contentHandler_0);
						xml::sax::ErrorHandler getErrorHandler();
						void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void setErrorHandler(xml::sax::ErrorHandler errorHandler_0);
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
						void endDocument(xni::Augmentations augmentations_0);
						void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
						void setDocumentHandler(xml::sax::DocumentHandler documentHandler_0);
						void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						void startExternalSubset(xni::XMLResourceIdentifier xMLResourceIdentifier_0,xni::Augmentations augmentations_1);
						void startParameterEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void endParameterEntity(jstring string_0,xni::Augmentations augmentations_1);
						void endExternalSubset(xni::Augmentations augmentations_0);
						xs::ElementPSVI getElementPSVI();
						xs::AttributePSVI getAttributePSVI(jint int_0);
						xs::AttributePSVI getAttributePSVIByName(jstring string_0,jstring string_1);
						void reset();
						void parse(jstring string_0);
						void parse(xml::sax::InputSource inputSource_0);
					}; // end class AbstractSAXParser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class AttributeImpl : public XMLEventImpl {
							public:
						            AttributeImpl(jobject _jthis, bool copy);
						            AttributeImpl(const AttributeImpl &);
						        
							AttributeImpl(javax::xml::namespace::QName qName_0,jstring string_1,jstring string_2,jboolean boolean_3,javax::xml::stream::Location location_4);
							virtual ~AttributeImpl();
							virtual jstring getDTDType();
							virtual jboolean isSpecified();
							virtual void writeAsEncodedUnicode(java::io::Writer writer_0);
							virtual javax::xml::namespace::QName getName();
							virtual jstring getValue();
						}; // end class AttributeImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					
					class XIncludeTextReader : public java::lang::Object {
						public:
					            XIncludeTextReader(jobject _jthis, bool copy);
					            XIncludeTextReader(const XIncludeTextReader &);
					        
						XIncludeTextReader(xni::parser::XMLInputSource xMLInputSource_0,XIncludeHandler xIncludeHandler_1,jint int_2);
						virtual ~XIncludeTextReader();
						void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
						void setErrorReporter(impl::XMLErrorReporter xMLErrorReporter_0);
						void close();
						void parse();
					}; // end class XIncludeTextReader
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class XMLString : public java::lang::Object {
						public:
					            XMLString(jobject _jthis, bool copy);
					            XMLString(const XMLString &);
					        
						XMLString();
						XMLString(XMLString xMLString_0);
						XMLString(jcharArray charArray_0,jint int_1,jint int_2);
						virtual ~XMLString();
						void setValues(XMLString xMLString_0);
						void setValues(jcharArray charArray_0,jint int_1,jint int_2);
						jboolean equals(jcharArray charArray_0,jint int_1,jint int_2);
						jboolean equals(jstring string_0);
						jstring toString();
						void clear();
					}; // end class XMLString
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLEventFactory : public java::lang::Object {
					public:
				            XMLEventFactory(jobject _jthis, bool copy);
				            XMLEventFactory(const XMLEventFactory &);
				        
					virtual ~XMLEventFactory();
					static XMLEventFactory newFactory(jstring string_0,java::lang::ClassLoader classLoader_1);
					static XMLEventFactory newFactory();
					static XMLEventFactory newInstance(jstring string_0,java::lang::ClassLoader classLoader_1);
					static XMLEventFactory newInstance();
				}; // end class XMLEventFactory
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace transform{
				
				class TransformerFactory : public java::lang::Object {
					public:
				            TransformerFactory(jobject _jthis, bool copy);
				            TransformerFactory(const TransformerFactory &);
				        
					virtual ~TransformerFactory();
					static TransformerFactory newInstance();
					static TransformerFactory newInstance(jstring string_0,java::lang::ClassLoader classLoader_1);
				}; // end class TransformerFactory
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace validation{
				
				class SchemaFactory : public java::lang::Object {
					public:
				            SchemaFactory(jobject _jthis, bool copy);
				            SchemaFactory(const SchemaFactory &);
				        
					virtual ~SchemaFactory();
					Schema newSchema(transform::Source source_0);
					Schema newSchema(java::io::File file_0);
					Schema newSchema(java::net::URL uRL_0);
					jboolean getFeature(jstring string_0);
					void setFeature(jstring string_0,jboolean boolean_1);
					static SchemaFactory newInstance(jstring string_0,jstring string_1,java::lang::ClassLoader classLoader_2);
					static SchemaFactory newInstance(jstring string_0);
				}; // end class SchemaFactory
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathExpressionException : public XPathException {
					public:
				            XPathExpressionException(jobject _jthis, bool copy);
				            XPathExpressionException(const XPathExpressionException &);
				        
					XPathExpressionException(jstring string_0);
					XPathExpressionException(java::lang::Throwable throwable_0);
					virtual ~XPathExpressionException();
				}; // end class XPathExpressionException
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace rcs{
		namespace posemath{
			
			class PmSpherical : public java::lang::Object {
				public:
			            PmSpherical(jobject _jthis, bool copy);
			            PmSpherical(const PmSpherical &);
			        
				PmSpherical(jdouble double_0,jdouble double_1,jdouble double_2);
				PmSpherical();
				virtual ~PmSpherical();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmSpherical
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PmHomogeneous : public java::lang::Object {
				public:
			            PmHomogeneous(jobject _jthis, bool copy);
			            PmHomogeneous(const PmHomogeneous &);
			        
				PmHomogeneous(PmCartesian pmCartesian_0,PmRotationMatrix pmRotationMatrix_1);
				PmHomogeneous();
				PmHomogeneous(jfloatArray floatArray_0);
				virtual ~PmHomogeneous();
				jfloatArray toMatf();
				jfloatArray toMatfTranspose();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmHomogeneous
		} // end namespace rcs
	} // end namespace posemath

	namespace diagapplet{
		namespace utils{
			
			class CountList : public java::awt::List {
				public:
			            CountList(jobject _jthis, bool copy);
			            CountList(const CountList &);
			        
				CountList();
				CountList(jint int_0,jboolean boolean_1);
				virtual ~CountList();
				void itemStateChanged(java::awt::event::ItemEvent itemEvent_0);
			}; // end class CountList
		} // end namespace diagapplet
	} // end namespace utils

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class AbstractPolynomialSolver : public BaseAbstractUnivariateSolver {
								public:
							            AbstractPolynomialSolver(jobject _jthis, bool copy);
							            AbstractPolynomialSolver(const AbstractPolynomialSolver &);
							        
								virtual ~AbstractPolynomialSolver();
							}; // end class AbstractPolynomialSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							
							class AbstractScalarDifferentiableOptimizer : public direct::BaseAbstractMultivariateOptimizer {
								public:
							            AbstractScalarDifferentiableOptimizer(jobject _jthis, bool copy);
							            AbstractScalarDifferentiableOptimizer(const AbstractScalarDifferentiableOptimizer &);
							        
								virtual ~AbstractScalarDifferentiableOptimizer();
								PointValuePair optimize(jint int_0,analysis::differentiation::MultivariateDifferentiableFunction multivariateDifferentiableFunction_1,GoalType goalType_2,jdoubleArray doubleArray_3);
							}; // end class AbstractScalarDifferentiableOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general

	namespace crcl{
		namespace base{
			
			class PoseType : public DataThingType {
				public:
			            PoseType(jobject _jthis, bool copy);
			            PoseType(const PoseType &);
			        
				PoseType();
				virtual ~PoseType();
				PointType getPoint();
				VectorType getXAxis();
				VectorType getZAxis();
				void setPoint(PointType pointType_0);
				void setXAxis(VectorType vectorType_0);
				void setZAxis(VectorType vectorType_0);
			}; // end class PoseType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class ProcessingInstructionImpl : public CharacterDataImpl {
						public:
					            ProcessingInstructionImpl(jobject _jthis, bool copy);
					            ProcessingInstructionImpl(const ProcessingInstructionImpl &);
					        
						ProcessingInstructionImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1,jstring string_2);
						virtual ~ProcessingInstructionImpl();
						jstring getNodeName();
						jshort getNodeType();
						jstring getBaseURI();
						jstring getTarget();
					}; // end class ProcessingInstructionImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ranges{
					
					class RangeException : public java::lang::RuntimeException {
						public:
					            RangeException(jobject _jthis, bool copy);
					            RangeException(const RangeException &);
					        
						RangeException(jshort short_0,jstring string_1);
						virtual ~RangeException();
					}; // end class RangeException
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ranges

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLEntityScanner : public java::lang::Object {
						public:
					            XMLEntityScanner(jobject _jthis, bool copy);
					            XMLEntityScanner(const XMLEntityScanner &);
					        
						XMLEntityScanner();
						virtual ~XMLEntityScanner();
						virtual jint getCharacterOffset();
						virtual jint getColumnNumber();
						virtual void setEncoding(jstring string_0);
						virtual jstring getPublicId();
						virtual jstring getExpandedSystemId();
						virtual jstring getLiteralSystemId();
						virtual jstring getBaseSystemId();
						virtual jstring getXMLVersion();
						virtual jboolean isExternal();
						jboolean skipString(jstring string_0);
						jint peekChar();
						jint scanChar();
						virtual void setXMLVersion(jstring string_0);
						jstring scanName();
						jboolean skipChar(jint int_0);
						jstring scanNmtoken();
						jboolean skipSpaces();
						jstring scanNCName();
						jint scanLiteral(jint int_0,xni::XMLString xMLString_1);
						virtual jboolean skipDeclSpaces();
						jboolean scanData(jstring string_0,util::XMLStringBuffer xMLStringBuffer_1);
						virtual void setBufferSize(jint int_0);
						jboolean scanQName(xni::QName qName_0);
						jint scanContent(xni::XMLString xMLString_0);
						virtual void setCurrentEntity(XMLEntityManager::ScannedEntity scannedEntity_0);
						virtual void reset(util::SymbolTable symbolTable_0,XMLEntityManager xMLEntityManager_1,XMLErrorReporter xMLErrorReporter_2);
						virtual jint getLineNumber();
						virtual jstring getEncoding();
					}; // end class XMLEntityScanner
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XML11DTDValidator : public XMLDTDValidator {
							public:
						            XML11DTDValidator(jobject _jthis, bool copy);
						            XML11DTDValidator(const XML11DTDValidator &);
						        
							XML11DTDValidator();
							virtual ~XML11DTDValidator();
							void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
						}; // end class XML11DTDValidator
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLDTDLoader : public XMLDTDProcessor {
							public:
						            XMLDTDLoader(jobject _jthis, bool copy);
						            XMLDTDLoader(const XMLDTDLoader &);
						        
							XMLDTDLoader(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
							XMLDTDLoader(util::SymbolTable symbolTable_0);
							XMLDTDLoader();
							virtual ~XMLDTDLoader();
							void setLocale(java::util::Locale locale_0);
							jboolean getFeature(jstring string_0);
							void setFeature(jstring string_0,jboolean boolean_1);
							void setEntityResolver(xni::parser::XMLEntityResolver xMLEntityResolver_0);
							xni::parser::XMLEntityResolver getEntityResolver();
							xni::parser::XMLErrorHandler getErrorHandler();
							java::util::Locale getLocale();
							void setErrorHandler(xni::parser::XMLErrorHandler xMLErrorHandler_0);
							xni::grammars::Grammar loadGrammar(xni::parser::XMLInputSource xMLInputSource_0);
							jobjectArray getRecognizedFeatures();
							jobjectArray getRecognizedProperties();
							void loadGrammarWithContext(XMLDTDValidator xMLDTDValidator_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jstring string_5);
						}; // end class XMLDTDLoader
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class XSCMLeaf : public dtd::models::CMNode {
								public:
							            XSCMLeaf(jobject _jthis, bool copy);
							            XSCMLeaf(const XSCMLeaf &);
							        
								virtual ~XSCMLeaf();
								jboolean isNullable();
								jstring toString();
							}; // end class XSCMLeaf
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class Printer : public java::lang::Object {
						public:
					            Printer(jobject _jthis, bool copy);
					            Printer(const Printer &);
					        
						Printer(java::io::Writer writer_0,OutputFormat outputFormat_1);
						virtual ~Printer();
						void indent();
						void flushLine(jboolean boolean_0);
						void printText(jcharArray charArray_0,jint int_1,jint int_2);
						void printText(java::lang::StringBuffer stringBuffer_0);
						void printText(jchar char_0);
						void printText(jstring string_0);
						void breakLine(jboolean boolean_0);
						void breakLine();
						void printSpace();
						void unindent();
						jstring leaveDTD();
						jint getNextIndent();
						void setNextIndent(jint int_0);
						void setThisIndent(jint int_0);
						void enterDTD();
						java::io::IOException getException();
						void flush();
					}; // end class Printer
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class HTMLSerializer : public BaseMarkupSerializer {
						public:
					            HTMLSerializer(jobject _jthis, bool copy);
					            HTMLSerializer(const HTMLSerializer &);
					        
						HTMLSerializer();
						HTMLSerializer(java::io::OutputStream outputStream_0,OutputFormat outputFormat_1);
						HTMLSerializer(OutputFormat outputFormat_0);
						HTMLSerializer(java::io::Writer writer_0,OutputFormat outputFormat_1);
						virtual ~HTMLSerializer();
						void characters(jcharArray charArray_0,jint int_1,jint int_2);
						void startElement(jstring string_0,jstring string_1,jstring string_2,xml::sax::Attributes attributes_3);
						void startElement(jstring string_0,xml::sax::AttributeList attributeList_1);
						void endElement(jstring string_0,jstring string_1,jstring string_2);
						void endElement(jstring string_0);
						void setXHTMLNamespace(jstring string_0);
						void setOutputFormat(OutputFormat outputFormat_0);
						void endElementIO(jstring string_0,jstring string_1,jstring string_2);
					}; // end class HTMLSerializer
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class XMLSerializer : public BaseMarkupSerializer {
						public:
					            XMLSerializer(jobject _jthis, bool copy);
					            XMLSerializer(const XMLSerializer &);
					        
						XMLSerializer(OutputFormat outputFormat_0);
						XMLSerializer(java::io::Writer writer_0,OutputFormat outputFormat_1);
						XMLSerializer(java::io::OutputStream outputStream_0,OutputFormat outputFormat_1);
						XMLSerializer();
						virtual ~XMLSerializer();
						void startElement(jstring string_0,xml::sax::AttributeList attributeList_1);
						void startElement(jstring string_0,jstring string_1,jstring string_2,xml::sax::Attributes attributes_3);
						void endElement(jstring string_0);
						void endElement(jstring string_0,jstring string_1,jstring string_2);
						void setNamespaces(jboolean boolean_0);
						void setOutputFormat(OutputFormat outputFormat_0);
						void endElementIO(jstring string_0,jstring string_1,jstring string_2);
						jboolean reset();
					}; // end class XMLSerializer
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace javax{
		namespace xml{
			namespace transform{
				
				class TransformerException : public java::lang::Exception {
					public:
				            TransformerException(jobject _jthis, bool copy);
				            TransformerException(const TransformerException &);
				        
					TransformerException(jstring string_0,java::lang::Throwable throwable_1);
					TransformerException(jstring string_0,SourceLocator sourceLocator_1);
					TransformerException(jstring string_0,SourceLocator sourceLocator_1,java::lang::Throwable throwable_2);
					TransformerException(java::lang::Throwable throwable_0);
					TransformerException(jstring string_0);
					virtual ~TransformerException();
					SourceLocator getLocator();
					void setLocator(SourceLocator sourceLocator_0);
					jstring getMessageAndLocation();
					jstring getLocationAsString();
					void printStackTrace();
					void printStackTrace(java::io::PrintWriter printWriter_0);
					void printStackTrace(java::io::PrintStream printStream_0);
					java::lang::Throwable getCause();
					java::lang::Throwable initCause(java::lang::Throwable throwable_0);
					java::lang::Throwable getException();
				}; // end class TransformerException
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					
					class SAXResult : public java::lang::Object {
						public:
					            SAXResult(jobject _jthis, bool copy);
					            SAXResult(const SAXResult &);
					        
						SAXResult();
						SAXResult(org::xml::sax::ContentHandler contentHandler_0);
						virtual ~SAXResult();
						void setHandler(org::xml::sax::ContentHandler contentHandler_0);
						jstring getSystemId();
						void setSystemId(jstring string_0);
						void setLexicalHandler(org::xml::sax::ext::LexicalHandler lexicalHandler_0);
						org::xml::sax::ext::LexicalHandler getLexicalHandler();
						org::xml::sax::ContentHandler getHandler();
					}; // end class SAXResult
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class LocatorImpl : public java::lang::Object {
						public:
					            LocatorImpl(jobject _jthis, bool copy);
					            LocatorImpl(const LocatorImpl &);
					        
						LocatorImpl();
						LocatorImpl(Locator locator_0);
						virtual ~LocatorImpl();
						jint getColumnNumber();
						jstring getSystemId();
						void setPublicId(jstring string_0);
						jstring getPublicId();
						void setSystemId(jstring string_0);
						void setColumnNumber(jint int_0);
						void setLineNumber(jint int_0);
						jint getLineNumber();
					}; // end class LocatorImpl
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace rcsdesign{
		
		class rcsDesignGui : public diagapplet::utils::StandAloneApplet {
			public:
		            rcsDesignGui(jobject _jthis, bool copy);
		            rcsDesignGui(const rcsDesignGui &);
		        
			rcsDesignGui();
			virtual ~rcsDesignGui();
			QueryDialog Query(jstring string_0);
			void Alert(jstring string_0);
			void CheckOutFile(java::io::File file_0);
			void ReadFileIntoTextArea(jstring string_0,jstring string_1,FileTypeInfo fileTypeInfo_2);
			static void printThreadInfo();
			void CheckInFile(java::io::File file_0);
		}; // end class rcsDesignGui
	} // end namespace rcsdesign

	namespace rcs{
		namespace posemath{
			
			class PmEulerZyx : public java::lang::Object {
				public:
			            PmEulerZyx(jobject _jthis, bool copy);
			            PmEulerZyx(const PmEulerZyx &);
			        
				PmEulerZyx(jdouble double_0,jdouble double_1,jdouble double_2);
				PmEulerZyx();
				virtual ~PmEulerZyx();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmEulerZyx
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PmCylindrical : public java::lang::Object {
				public:
			            PmCylindrical(jobject _jthis, bool copy);
			            PmCylindrical(const PmCylindrical &);
			        
				virtual ~PmCylindrical();
				jboolean equals(PmSpherical pmSpherical_0);
				jboolean equals(PmCartesian pmCartesian_0);
				jboolean equals(PmCylindrical pmCylindrical_0);
				jstring toString();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmCylindrical
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PmRotationVector : public java::lang::Object {
				public:
			            PmRotationVector(jobject _jthis, bool copy);
			            PmRotationVector(const PmRotationVector &);
			        
				PmRotationVector(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				PmRotationVector();
				virtual ~PmRotationVector();
				PmRotationVector multiply(jdouble double_0);
				PmRotationVector multiply(PmRotationVector pmRotationVector_0);
				PmRotationVector inv();
				PmRotationVector clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmRotationVector
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace nml{
			
			class RCS_STAT_MSG : public NMLmsg {
				public:
			            RCS_STAT_MSG(jobject _jthis, bool copy);
			            RCS_STAT_MSG(const RCS_STAT_MSG &);
			        
				RCS_STAT_MSG(jint int_0);
				virtual ~RCS_STAT_MSG();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class RCS_STAT_MSG
		} // end namespace rcs
	} // end namespace nml

	namespace javafx{
		namespace application{
			
			class Application : public java::lang::Object {
				public:
			            Application(jobject _jthis, bool copy);
			            Application(const Application &);
			        
				Application();
				virtual ~Application();
				static jstring getUserAgentStylesheet();
				static void setUserAgentStylesheet(jstring string_0);
				static void launch(jobjectArray stringArray_0);
				static void launch(int argc,const char **argv);
				virtual HostServices getHostServices();
				virtual void notifyPreloader(Preloader::PreloaderNotification preloaderNotification_0);
				void init();
				void stop();
				virtual Application::Parameters getParameters();
			}; // end class Application
		} // end namespace javafx
	} // end namespace application

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class AbstractDifferentiableUnivariateSolver : public BaseAbstractUnivariateSolver {
								public:
							            AbstractDifferentiableUnivariateSolver(jobject _jthis, bool copy);
							            AbstractDifferentiableUnivariateSolver(const AbstractDifferentiableUnivariateSolver &);
							        
								virtual ~AbstractDifferentiableUnivariateSolver();
							}; // end class AbstractDifferentiableUnivariateSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class BigFractionFormat : public AbstractFormat {
							public:
						            BigFractionFormat(jobject _jthis, bool copy);
						            BigFractionFormat(const BigFractionFormat &);
						        
							BigFractionFormat();
							BigFractionFormat(java::text::NumberFormat numberFormat_0);
							BigFractionFormat(java::text::NumberFormat numberFormat_0,java::text::NumberFormat numberFormat_1);
							virtual ~BigFractionFormat();
							static BigFractionFormat getImproperInstance(java::util::Locale locale_0);
							static BigFractionFormat getImproperInstance();
							static jstring formatBigFraction(BigFraction bigFraction_0);
							static BigFractionFormat getProperInstance(java::util::Locale locale_0);
							static BigFractionFormat getProperInstance();
							java::lang::StringBuffer format(BigFraction bigFraction_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
							BigFraction parse(jstring string_0,java::text::ParsePosition parsePosition_1);
							BigFraction parse(jstring string_0);
							static jobjectArray getAvailableLocales();
						}; // end class BigFractionFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class ConvergenceException : public MathIllegalStateException {
							public:
						            ConvergenceException(jobject _jthis, bool copy);
						            ConvergenceException(const ConvergenceException &);
						        
							ConvergenceException();
							virtual ~ConvergenceException();
						}; // end class ConvergenceException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class IterativeLinearSolverEvent : public util::IterationEvent {
							public:
						            IterativeLinearSolverEvent(jobject _jthis, bool copy);
						            IterativeLinearSolverEvent(const IterativeLinearSolverEvent &);
						        
							virtual ~IterativeLinearSolverEvent();
							jboolean providesResidual();
							RealVector getResidual();
						}; // end class IterativeLinearSolverEvent
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class QRDecomposition : public java::lang::Object {
							public:
						            QRDecomposition(jobject _jthis, bool copy);
						            QRDecomposition(const QRDecomposition &);
						        
							QRDecomposition(RealMatrix realMatrix_0,jdouble double_1);
							QRDecomposition(RealMatrix realMatrix_0);
							virtual ~QRDecomposition();
							DecompositionSolver getSolver();
							RealMatrix getQ();
							RealMatrix getR();
							RealMatrix getQT();
							RealMatrix getH();
						}; // end class QRDecomposition
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MultiDimensionMismatchException : public MathIllegalArgumentException {
							public:
						            MultiDimensionMismatchException(jobject _jthis, bool copy);
						            MultiDimensionMismatchException(const MultiDimensionMismatchException &);
						        
							virtual ~MultiDimensionMismatchException();
							jint getWrongDimension(jint int_0);
							jint getExpectedDimension(jint int_0);
						}; // end class MultiDimensionMismatchException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class ThresholdingOutputStream : public java::io::OutputStream {
							public:
						            ThresholdingOutputStream(jobject _jthis, bool copy);
						            ThresholdingOutputStream(const ThresholdingOutputStream &);
						        
							ThresholdingOutputStream(jint int_0);
							virtual ~ThresholdingOutputStream();
							jint getThreshold();
							jlong getByteCount();
							jboolean isThresholdExceeded();
							void write(jint int_0);
							void write(jbyteArray byteArray_0);
							void write(jbyteArray byteArray_0,jint int_1,jint int_2);
							void flush();
							void close();
						}; // end class ThresholdingOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class XMLFilterImpl : public java::lang::Object {
						public:
					            XMLFilterImpl(jobject _jthis, bool copy);
					            XMLFilterImpl(const XMLFilterImpl &);
					        
						XMLFilterImpl();
						XMLFilterImpl(XMLReader xMLReader_0);
						virtual ~XMLFilterImpl();
						ContentHandler getContentHandler();
						InputSource resolveEntity(jstring string_0,jstring string_1);
						void notationDecl(jstring string_0,jstring string_1,jstring string_2);
						void unparsedEntityDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						void setDocumentLocator(Locator locator_0);
						void endPrefixMapping(jstring string_0);
						void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
						void processingInstruction(jstring string_0,jstring string_1);
						void skippedEntity(jstring string_0);
						void fatalError(SAXParseException sAXParseException_0);
						void warning(SAXParseException sAXParseException_0);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(EntityResolver entityResolver_0);
						EntityResolver getEntityResolver();
						void setDTDHandler(DTDHandler dTDHandler_0);
						DTDHandler getDTDHandler();
						void setContentHandler(ContentHandler contentHandler_0);
						ErrorHandler getErrorHandler();
						void characters(jcharArray charArray_0,jint int_1,jint int_2);
						void setErrorHandler(ErrorHandler errorHandler_0);
						void startPrefixMapping(jstring string_0,jstring string_1);
						void startElement(jstring string_0,jstring string_1,jstring string_2,Attributes attributes_3);
						void startDocument();
						void endDocument();
						void endElement(jstring string_0,jstring string_1,jstring string_2);
						XMLReader getParent();
						void setParent(XMLReader xMLReader_0);
						void parse(InputSource inputSource_0);
						void parse(jstring string_0);
						void error(SAXParseException sAXParseException_0);
					}; // end class XMLFilterImpl
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class CDATASectionImpl : public TextImpl {
						public:
					            CDATASectionImpl(jobject _jthis, bool copy);
					            CDATASectionImpl(const CDATASectionImpl &);
					        
						CDATASectionImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						virtual ~CDATASectionImpl();
						jstring getNodeName();
						jshort getNodeType();
					}; // end class CDATASectionImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class CommentImpl : public CharacterDataImpl {
						public:
					            CommentImpl(jobject _jthis, bool copy);
					            CommentImpl(const CommentImpl &);
					        
						CommentImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						virtual ~CommentImpl();
						jstring getNodeName();
						jshort getNodeType();
					}; // end class CommentImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMImplementationSourceImpl : public java::lang::Object {
						public:
					            DOMImplementationSourceImpl(jobject _jthis, bool copy);
					            DOMImplementationSourceImpl(const DOMImplementationSourceImpl &);
					        
						DOMImplementationSourceImpl();
						virtual ~DOMImplementationSourceImpl();
						w3c::dom::DOMImplementation getDOMImplementation(jstring string_0);
						w3c::dom::DOMImplementationList getDOMImplementationList(jstring string_0);
					}; // end class DOMImplementationSourceImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeepNodeListImpl : public java::lang::Object {
						public:
					            DeepNodeListImpl(jobject _jthis, bool copy);
					            DeepNodeListImpl(const DeepNodeListImpl &);
					        
						DeepNodeListImpl(NodeImpl nodeImpl_0,jstring string_1);
						DeepNodeListImpl(NodeImpl nodeImpl_0,jstring string_1,jstring string_2);
						virtual ~DeepNodeListImpl();
						w3c::dom::Node item(jint int_0);
						jint getLength();
					}; // end class DeepNodeListImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DocumentTypeImpl : public ParentNode {
						public:
					            DocumentTypeImpl(jobject _jthis, bool copy);
					            DocumentTypeImpl(const DocumentTypeImpl &);
					        
						DocumentTypeImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1,jstring string_2,jstring string_3);
						DocumentTypeImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						virtual ~DocumentTypeImpl();
						jstring getNodeName();
						jshort getNodeType();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getTextContent();
						void setTextContent(jstring string_0);
						jboolean isEqualNode(w3c::dom::Node node_0);
						w3c::dom::NamedNodeMap getElements();
						jstring getSystemId();
						jstring getPublicId();
						w3c::dom::NamedNodeMap getNotations();
						w3c::dom::NamedNodeMap getEntities();
						jstring getInternalSubset();
						void setInternalSubset(jstring string_0);
						jstring getName();
						void setReadOnly(jboolean boolean_0,jboolean boolean_1);
					}; // end class DocumentTypeImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class EntityImpl : public ParentNode {
						public:
					            EntityImpl(jobject _jthis, bool copy);
					            EntityImpl(const EntityImpl &);
					        
						EntityImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						virtual ~EntityImpl();
						jstring getNodeName();
						jshort getNodeType();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getBaseURI();
						jstring getSystemId();
						void setPublicId(jstring string_0);
						jstring getPublicId();
						void setSystemId(jstring string_0);
						jstring getInputEncoding();
						void setInputEncoding(jstring string_0);
						void setXmlEncoding(jstring string_0);
						jstring getXmlEncoding();
						void setXmlVersion(jstring string_0);
						jstring getXmlVersion();
						jstring getNotationName();
						void setNotationName(jstring string_0);
						void setBaseURI(jstring string_0);
					}; // end class EntityImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class EntityReferenceImpl : public ParentNode {
						public:
					            EntityReferenceImpl(jobject _jthis, bool copy);
					            EntityReferenceImpl(const EntityReferenceImpl &);
					        
						EntityReferenceImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						virtual ~EntityReferenceImpl();
						jstring getNodeName();
						jshort getNodeType();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getBaseURI();
						void setBaseURI(jstring string_0);
						void setReadOnly(jboolean boolean_0,jboolean boolean_1);
					}; // end class EntityReferenceImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class NotationImpl : public NodeImpl {
						public:
					            NotationImpl(jobject _jthis, bool copy);
					            NotationImpl(const NotationImpl &);
					        
						NotationImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1);
						virtual ~NotationImpl();
						jstring getNodeName();
						jshort getNodeType();
						jstring getBaseURI();
						jstring getSystemId();
						void setPublicId(jstring string_0);
						jstring getPublicId();
						void setSystemId(jstring string_0);
						void setBaseURI(jstring string_0);
					}; // end class NotationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace validation{
						
						class ValidationState : public java::lang::Object {
							public:
						            ValidationState(jobject _jthis, bool copy);
						            ValidationState(const ValidationState &);
						        
							ValidationState();
							virtual ~ValidationState();
							void setLocale(java::util::Locale locale_0);
							java::util::Locale getLocale();
							jstring getURI(jstring string_0);
							jboolean needExtraChecking();
							jboolean useNamespaces();
							jboolean isEntityDeclared(jstring string_0);
							jboolean isEntityUnparsed(jstring string_0);
							jboolean isIdDeclared(jstring string_0);
							void addId(jstring string_0);
							void addIdRef(jstring string_0);
							jstring getSymbol(jstring string_0);
							jboolean needToNormalize();
							jboolean needFacetChecking();
							void resetIDTables();
							void setUsingNamespaces(jboolean boolean_0);
							void setEntityState(EntityState entityState_0);
							jstring checkIDRefID();
							void setExtraChecking(jboolean boolean_0);
							void setFacetChecking(jboolean boolean_0);
							void setNormalizationRequired(jboolean boolean_0);
							void setNamespaceSupport(xni::NamespaceContext namespaceContext_0);
							void setSymbolTable(util::SymbolTable symbolTable_0);
							void reset();
						}; // end class ValidationState
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XMLGrammarPoolImpl : public java::lang::Object {
						public:
					            XMLGrammarPoolImpl(jobject _jthis, bool copy);
					            XMLGrammarPoolImpl(const XMLGrammarPoolImpl &);
					        
						XMLGrammarPoolImpl();
						XMLGrammarPoolImpl(jint int_0);
						virtual ~XMLGrammarPoolImpl();
						xni::grammars::Grammar getGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
						void putGrammar(xni::grammars::Grammar grammar_0);
						void cacheGrammars(jstring string_0,jobjectArray grammarArray_1);
						xni::grammars::Grammar retrieveGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
						xni::grammars::Grammar removeGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
						jboolean containsGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
						void lockPool();
						void unlockPool();
						jobjectArray retrieveInitialGrammarSet(jstring string_0);
						jboolean equals(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0,xni::grammars::XMLGrammarDescription xMLGrammarDescription_1);
						jint hashCode(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
						void clear();
					}; // end class XMLGrammarPoolImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class XSNamedMapImpl : public java::util::AbstractMap {
								public:
							            XSNamedMapImpl(jobject _jthis, bool copy);
							            XSNamedMapImpl(const XSNamedMapImpl &);
							        
								XSNamedMapImpl(jstring string_0,util::SymbolHash symbolHash_1);
								XSNamedMapImpl(jobjectArray stringArray_0,jobjectArray symbolHashArray_1,jint int_2);
								XSNamedMapImpl(jobjectArray xSObjectArray_0,jint int_1);
								virtual ~XSNamedMapImpl();
								xs::XSObject item(jint int_0);
								xs::XSObject itemByName(jstring string_0,jstring string_1);
								jint getLength();
								jint size();
								java::util::Set entrySet();
							}; // end class XSNamedMapImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace javax{
		namespace xml{
			namespace parsers{
				
				class DocumentBuilderFactory : public java::lang::Object {
					public:
				            DocumentBuilderFactory(jobject _jthis, bool copy);
				            DocumentBuilderFactory(const DocumentBuilderFactory &);
				        
					virtual ~DocumentBuilderFactory();
					jboolean isNamespaceAware();
					void setSchema(validation::Schema schema_0);
					void setNamespaceAware(jboolean boolean_0);
					validation::Schema getSchema();
					void setXIncludeAware(jboolean boolean_0);
					jboolean isValidating();
					jboolean isIgnoringElementContentWhitespace();
					jboolean isExpandEntityReferences();
					jboolean isIgnoringComments();
					jboolean isCoalescing();
					void setValidating(jboolean boolean_0);
					void setIgnoringElementContentWhitespace(jboolean boolean_0);
					void setExpandEntityReferences(jboolean boolean_0);
					void setIgnoringComments(jboolean boolean_0);
					void setCoalescing(jboolean boolean_0);
					jboolean isXIncludeAware();
					static DocumentBuilderFactory newInstance(jstring string_0,java::lang::ClassLoader classLoader_1);
					static DocumentBuilderFactory newInstance();
				}; // end class DocumentBuilderFactory
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class TeeXMLDocumentFilterImpl : public java::lang::Object {
						public:
					            TeeXMLDocumentFilterImpl(jobject _jthis, bool copy);
					            TeeXMLDocumentFilterImpl(const TeeXMLDocumentFilterImpl &);
					        
						virtual ~TeeXMLDocumentFilterImpl();
						void startCDATA(xni::Augmentations augmentations_0);
						void endCDATA(xni::Augmentations augmentations_0);
						void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
						void endDocument(xni::Augmentations augmentations_0);
						void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getDocumentHandler();
						void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
						xni::parser::XMLDocumentSource getDocumentSource();
						void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						void setSide(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getSide();
					}; // end class TeeXMLDocumentFilterImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace javax{
		namespace xml{
			namespace parsers{
				
				class SAXParser : public java::lang::Object {
					public:
				            SAXParser(jobject _jthis, bool copy);
				            SAXParser(const SAXParser &);
				        
					virtual ~SAXParser();
					validation::Schema getSchema();
					jboolean isXIncludeAware();
					void reset();
					void parse(java::io::InputStream inputStream_0,org::xml::sax::helpers::DefaultHandler defaultHandler_1);
					void parse(java::io::InputStream inputStream_0,org::xml::sax::HandlerBase handlerBase_1,jstring string_2);
					void parse(java::io::InputStream inputStream_0,org::xml::sax::HandlerBase handlerBase_1);
					void parse(org::xml::sax::InputSource inputSource_0,org::xml::sax::HandlerBase handlerBase_1);
					void parse(jstring string_0,org::xml::sax::helpers::DefaultHandler defaultHandler_1);
					void parse(java::io::File file_0,org::xml::sax::HandlerBase handlerBase_1);
					void parse(java::io::File file_0,org::xml::sax::helpers::DefaultHandler defaultHandler_1);
					void parse(jstring string_0,org::xml::sax::HandlerBase handlerBase_1);
					void parse(org::xml::sax::InputSource inputSource_0,org::xml::sax::helpers::DefaultHandler defaultHandler_1);
					void parse(java::io::InputStream inputStream_0,org::xml::sax::helpers::DefaultHandler defaultHandler_1,jstring string_2);
				}; // end class SAXParser
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers

	namespace javax{
		namespace xml{
			namespace datatype{
				
				class XMLGregorianCalendar : public java::lang::Object {
					public:
				            XMLGregorianCalendar(jobject _jthis, bool copy);
				            XMLGregorianCalendar(const XMLGregorianCalendar &);
				        
					XMLGregorianCalendar();
					virtual ~XMLGregorianCalendar();
					void setTime(jint int_0,jint int_1,jint int_2);
					void setTime(jint int_0,jint int_1,jint int_2,java::math::BigDecimal bigDecimal_3);
					void setTime(jint int_0,jint int_1,jint int_2,jint int_3);
					jint getMillisecond();
					jstring toString();
					jint hashCode();
				}; // end class XMLGregorianCalendar
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					
					class MultipleScopeNamespaceSupport : public util::NamespaceSupport {
						public:
					            MultipleScopeNamespaceSupport(jobject _jthis, bool copy);
					            MultipleScopeNamespaceSupport(const MultipleScopeNamespaceSupport &);
					        
						MultipleScopeNamespaceSupport(xni::NamespaceContext namespaceContext_0);
						MultipleScopeNamespaceSupport();
						virtual ~MultipleScopeNamespaceSupport();
						jstring getPrefix(jstring string_0,jint int_1,jint int_2);
						jstring getPrefix(jstring string_0);
						jstring getPrefix(jstring string_0,jint int_1);
						jstring getURI(jstring string_0,jint int_1);
						jstring getURI(jstring string_0);
						jstring getURI(jstring string_0,jint int_1,jint int_2);
						java::util::Enumeration getAllPrefixes();
						void pushScope();
						void popScope();
						jint getScopeForContext(jint int_0);
						void reset();
					}; // end class MultipleScopeNamespaceSupport
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude

	namespace javax{
		namespace xml{
			namespace datatype{
				
				class Duration : public java::lang::Object {
					public:
				            Duration(jobject _jthis, bool copy);
				            Duration(const Duration &);
				        
					Duration();
					virtual ~Duration();
					jint getHours();
					jint getMinutes();
					jint getSeconds();
					jlong getTimeInMillis(java::util::Calendar calendar_0);
					jlong getTimeInMillis(java::util::Date date_0);
					Duration multiply(jint int_0);
					Duration subtract(Duration duration_0);
					namespace::QName getXMLSchemaType();
					void addTo(java::util::Date date_0);
					jboolean isLongerThan(Duration duration_0);
					jboolean isShorterThan(Duration duration_0);
					jint getYears();
					jint getMonths();
					jint getDays();
					jstring toString();
				}; // end class Duration
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype

	namespace javax{
		namespace xml{
			namespace validation{
				
				class ValidatorHandler : public java::lang::Object {
					public:
				            ValidatorHandler(jobject _jthis, bool copy);
				            ValidatorHandler(const ValidatorHandler &);
				        
					virtual ~ValidatorHandler();
					jboolean getFeature(jstring string_0);
					void setFeature(jstring string_0,jboolean boolean_1);
				}; // end class ValidatorHandler
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class AttributesImpl : public java::lang::Object {
						public:
					            AttributesImpl(jobject _jthis, bool copy);
					            AttributesImpl(const AttributesImpl &);
					        
						AttributesImpl(Attributes attributes_0);
						AttributesImpl();
						virtual ~AttributesImpl();
						void removeAttribute(jint int_0);
						void addAttribute(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						jint getIndex(jstring string_0);
						jint getIndex(jstring string_0,jstring string_1);
						void setURI(jint int_0,jstring string_1);
						void setQName(jint int_0,jstring string_1);
						void setAttribute(jint int_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jstring string_5);
						void setType(jint int_0,jstring string_1);
						jstring getQName(jint int_0);
						jstring getLocalName(jint int_0);
						jstring getURI(jint int_0);
						void setAttributes(Attributes attributes_0);
						void setLocalName(jint int_0,jstring string_1);
						jint getLength();
						void clear();
						jstring getValue(jstring string_0);
						jstring getValue(jint int_0);
						jstring getValue(jstring string_0,jstring string_1);
						void setValue(jint int_0,jstring string_1);
						jstring getType(jint int_0);
						jstring getType(jstring string_0,jstring string_1);
						jstring getType(jstring string_0);
					}; // end class AttributesImpl
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace javax{
		namespace swing{
			
			class JLabel : public JComponent {
				public:
			            JLabel(jobject _jthis, bool copy);
			            JLabel(const JLabel &);
			        
				JLabel(Icon icon_0,jint int_1);
				JLabel(jstring string_0);
				JLabel(jstring string_0,jint int_1);
				JLabel(Icon icon_0);
				JLabel();
				JLabel(jstring string_0,Icon icon_1,jint int_2);
				virtual ~JLabel();
				void setIcon(Icon icon_0);
				Icon getIcon();
				Icon getDisabledIcon();
				void setDisabledIcon(Icon icon_0);
				jint getVerticalAlignment();
				void setVerticalAlignment(jint int_0);
				jint getHorizontalAlignment();
				void setHorizontalAlignment(jint int_0);
				jint getVerticalTextPosition();
				void setVerticalTextPosition(jint int_0);
				jint getHorizontalTextPosition();
				void setHorizontalTextPosition(jint int_0);
				jint getIconTextGap();
				void setIconTextGap(jint int_0);
				void setDisplayedMnemonicIndex(jint int_0);
				jint getDisplayedMnemonicIndex();
				jboolean imageUpdate(java::awt::Image image_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
				plaf::LabelUI getUI();
				void setUI(plaf::LabelUI labelUI_0);
				void updateUI();
				jstring getUIClassID();
				accessibility::AccessibleContext getAccessibleContext();
				void setText(jstring string_0);
				jstring getText();
				void setDisplayedMnemonic(jchar char_0);
				void setDisplayedMnemonic(jint int_0);
				jint getDisplayedMnemonic();
				java::awt::Component getLabelFor();
				void setLabelFor(java::awt::Component component_0);
			}; // end class JLabel
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			namespace table{
				
				class AbstractTableModel : public java::lang::Object {
					public:
				            AbstractTableModel(jobject _jthis, bool copy);
				            AbstractTableModel(const AbstractTableModel &);
				        
					AbstractTableModel();
					virtual ~AbstractTableModel();
					void fireTableChanged(event::TableModelEvent tableModelEvent_0);
					void fireTableRowsDeleted(jint int_0,jint int_1);
					void fireTableRowsInserted(jint int_0,jint int_1);
					void fireTableRowsUpdated(jint int_0,jint int_1);
					void fireTableCellUpdated(jint int_0,jint int_1);
					jint findColumn(jstring string_0);
					jobjectArray getTableModelListeners();
					jstring getColumnName(jint int_0);
					jboolean isCellEditable(jint int_0,jint int_1);
					void addTableModelListener(event::TableModelListener tableModelListener_0);
					void removeTableModelListener(event::TableModelListener tableModelListener_0);
					void fireTableDataChanged();
					void fireTableStructureChanged();
				}; // end class AbstractTableModel
			} // end namespace javax
		} // end namespace swing
	} // end namespace table

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class AbstractEvaluation : public java::lang::Object {
								public:
							            AbstractEvaluation(jobject _jthis, bool copy);
							            AbstractEvaluation(const AbstractEvaluation &);
							        
								virtual ~AbstractEvaluation();
								jdouble getRMS();
								linear::RealMatrix getCovariances(jdouble double_0);
								linear::RealVector getSigma(jdouble double_0);
								jdouble getCost();
							}; // end class AbstractEvaluation
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class MultivariateSummaryStatistics : public java::lang::Object {
								public:
							            MultivariateSummaryStatistics(jobject _jthis, bool copy);
							            MultivariateSummaryStatistics(const MultivariateSummaryStatistics &);
							        
								MultivariateSummaryStatistics(jint int_0,jboolean boolean_1);
								virtual ~MultivariateSummaryStatistics();
								void addValue(jdoubleArray doubleArray_0);
								jint getDimension();
								jdoubleArray getMax();
								jdoubleArray getMin();
								jlong getN();
								jdoubleArray getMean();
								jdoubleArray getStandardDeviation();
								jdoubleArray getGeometricMean();
								jobjectArray getSumImpl();
								void setSumImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getSumsqImpl();
								void setSumsqImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getMinImpl();
								void setMinImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getMaxImpl();
								void setMaxImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getSumLogImpl();
								void setSumLogImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getGeoMeanImpl();
								void setGeoMeanImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getMeanImpl();
								void setMeanImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jdoubleArray getSum();
								jdoubleArray getSumSq();
								jdoubleArray getSumLog();
								linear::RealMatrix getCovariance();
								jstring toString();
								jint hashCode();
								void clear();
							}; // end class MultivariateSummaryStatistics
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace java{
		namespace io{
			
			class FilterWriter : public Writer {
				public:
			            FilterWriter(jobject _jthis, bool copy);
			            FilterWriter(const FilterWriter &);
			        
				virtual ~FilterWriter();
				void write(jstring string_0,jint int_1,jint int_2);
				void write(jcharArray charArray_0,jint int_1,jint int_2);
				void write(jint int_0);
				void flush();
				void close();
			}; // end class FilterWriter
		} // end namespace java
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class RegularExpression : public java::lang::Object {
								public:
							            RegularExpression(jobject _jthis, bool copy);
							            RegularExpression(const RegularExpression &);
							        
								RegularExpression(jstring string_0);
								RegularExpression(jstring string_0,jstring string_1);
								RegularExpression(jstring string_0,jstring string_1,java::util::Locale locale_2);
								virtual ~RegularExpression();
								void setPattern(jstring string_0);
								void setPattern(jstring string_0,jstring string_1,java::util::Locale locale_2);
								void setPattern(jstring string_0,jstring string_1);
								void setPattern(jstring string_0,java::util::Locale locale_1);
								jstring getPattern();
								jint getNumberOfGroups();
								jstring getOptions();
								jstring toString();
								jint hashCode();
								jboolean matches(jstring string_0);
								jboolean matches(jcharArray charArray_0,jint int_1,jint int_2);
								jboolean matches(jcharArray charArray_0,jint int_1,jint int_2,Match match_3);
								jboolean matches(jcharArray charArray_0,Match match_1);
								jboolean matches(java::text::CharacterIterator characterIterator_0,Match match_1);
								jboolean matches(java::text::CharacterIterator characterIterator_0);
								jboolean matches(jcharArray charArray_0);
								jboolean matches(jstring string_0,jint int_1,jint int_2);
								jboolean matches(jstring string_0,Match match_1);
								jboolean matches(jstring string_0,jint int_1,jint int_2,Match match_3);
							}; // end class RegularExpression
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class DTDDVFactoryImpl : public DTDDVFactory {
								public:
							            DTDDVFactoryImpl(jobject _jthis, bool copy);
							            DTDDVFactoryImpl(const DTDDVFactoryImpl &);
							        
								DTDDVFactoryImpl();
								virtual ~DTDDVFactoryImpl();
								java::util::Hashtable getBuiltInTypes();
								DatatypeValidator getBuiltInDV(jstring string_0);
							}; // end class DTDDVFactoryImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class NMTOKENDatatypeValidator : public java::lang::Object {
								public:
							            NMTOKENDatatypeValidator(jobject _jthis, bool copy);
							            NMTOKENDatatypeValidator(const NMTOKENDatatypeValidator &);
							        
								NMTOKENDatatypeValidator();
								virtual ~NMTOKENDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class NMTOKENDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class BaseDVFactory : public SchemaDVFactory {
								public:
							            BaseDVFactory(jobject _jthis, bool copy);
							            BaseDVFactory(const BaseDVFactory &);
							        
								BaseDVFactory();
								virtual ~BaseDVFactory();
								XSSimpleType getBuiltInType(jstring string_0);
								util::SymbolHash getBuiltInTypes();
								XSSimpleType createTypeList(jstring string_0,jstring string_1,jshort short_2,XSSimpleType xSSimpleType_3,xs::XSObjectList xSObjectList_4);
								XSSimpleType createTypeUnion(jstring string_0,jstring string_1,jshort short_2,jobjectArray xSSimpleTypeArray_3,xs::XSObjectList xSObjectList_4);
								XSSimpleType createTypeRestriction(jstring string_0,jstring string_1,jshort short_2,XSSimpleType xSSimpleType_3,xs::XSObjectList xSObjectList_4);
							}; // end class BaseDVFactory
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class DecimalDV : public TypeValidator {
								public:
							            DecimalDV(jobject _jthis, bool copy);
							            DecimalDV(const DecimalDV &);
							        
								DecimalDV();
								virtual ~DecimalDV();
								virtual jshort getAllowedFacets();
							}; // end class DecimalDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class RegexParser : public java::lang::Object {
								public:
							            RegexParser(jobject _jthis, bool copy);
							            RegexParser(const RegexParser &);
							        
								RegexParser(java::util::Locale locale_0);
								RegexParser();
								virtual ~RegexParser();
								void setLocale(java::util::Locale locale_0);
							}; // end class RegexParser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class Token : public java::lang::Object {
								public:
							            Token(jobject _jthis, bool copy);
							            Token(const Token &);
							        
								virtual ~Token();
								jstring toString();
								jstring toString(jint int_0);
							}; // end class Token
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class DefaultElement : public NodeImpl {
								public:
							            DefaultElement(jobject _jthis, bool copy);
							            DefaultElement(const DefaultElement &);
							        
								DefaultElement(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jshort short_4);
								DefaultElement();
								virtual ~DefaultElement();
								void removeAttribute(jstring string_0);
								jstring getTagName();
								w3c::dom::Attr getAttributeNode(jstring string_0);
								w3c::dom::Attr setAttributeNode(w3c::dom::Attr attr_0);
								w3c::dom::Attr removeAttributeNode(w3c::dom::Attr attr_0);
								w3c::dom::NodeList getElementsByTagName(jstring string_0);
								jstring getAttributeNS(jstring string_0,jstring string_1);
								void setAttributeNS(jstring string_0,jstring string_1,jstring string_2);
								void removeAttributeNS(jstring string_0,jstring string_1);
								w3c::dom::Attr getAttributeNodeNS(jstring string_0,jstring string_1);
								w3c::dom::Attr setAttributeNodeNS(w3c::dom::Attr attr_0);
								w3c::dom::NodeList getElementsByTagNameNS(jstring string_0,jstring string_1);
								jboolean hasAttribute(jstring string_0);
								jboolean hasAttributeNS(jstring string_0,jstring string_1);
								w3c::dom::TypeInfo getSchemaTypeInfo();
								void setIdAttribute(jstring string_0,jboolean boolean_1);
								void setIdAttributeNS(jstring string_0,jstring string_1,jboolean boolean_2);
								void setIdAttributeNode(w3c::dom::Attr attr_0,jboolean boolean_1);
								void setAttribute(jstring string_0,jstring string_1);
								jstring getAttribute(jstring string_0);
							}; // end class DefaultElement
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class DefaultText : public NodeImpl {
								public:
							            DefaultText(jobject _jthis, bool copy);
							            DefaultText(const DefaultText &);
							        
								DefaultText();
								virtual ~DefaultText();
								jstring substringData(jint int_0,jint int_1);
								void insertData(jint int_0,jstring string_1);
								void deleteData(jint int_0,jint int_1);
								jstring getData();
								void setData(jstring string_0);
								void appendData(jstring string_0);
								w3c::dom::Text splitText(jint int_0);
								jboolean isElementContentWhitespace();
								void replaceData(jint int_0,jint int_1,jstring string_2);
								w3c::dom::Text replaceWholeText(jstring string_0);
								jstring getWholeText();
								jint getLength();
							}; // end class DefaultText
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class DefaultXMLDocumentHandler : public java::lang::Object {
								public:
							            DefaultXMLDocumentHandler(jobject _jthis, bool copy);
							            DefaultXMLDocumentHandler(const DefaultXMLDocumentHandler &);
							        
								DefaultXMLDocumentHandler();
								virtual ~DefaultXMLDocumentHandler();
								void startCDATA(xni::Augmentations augmentations_0);
								void endCDATA(xni::Augmentations augmentations_0);
								void startDTD(xni::XMLLocator xMLLocator_0,xni::Augmentations augmentations_1);
								void endDTD(xni::Augmentations augmentations_0);
								void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jobjectArray stringArray_3,jstring string_4,xni::XMLString xMLString_5,xni::XMLString xMLString_6,xni::Augmentations augmentations_7);
								void elementDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
								void externalEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
								void internalEntityDecl(jstring string_0,xni::XMLString xMLString_1,xni::XMLString xMLString_2,xni::Augmentations augmentations_3);
								void notationDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
								void unparsedEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
								void endPrefixMapping(jstring string_0,xni::Augmentations augmentations_1);
								void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
								void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
								void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
								void element(jstring string_0,xni::Augmentations augmentations_1);
								void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
								void startPrefixMapping(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
								void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
								void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
								void endDocument(xni::Augmentations augmentations_0);
								void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
								void startContentModel(jstring string_0,xni::Augmentations augmentations_1);
								void endContentModel(xni::Augmentations augmentations_0);
								void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
								xni::parser::XMLDocumentSource getDocumentSource();
								void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
								void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
								void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
								void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
								void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
								void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
								void startExternalSubset(xni::XMLResourceIdentifier xMLResourceIdentifier_0,xni::Augmentations augmentations_1);
								void startParameterEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
								void endParameterEntity(jstring string_0,xni::Augmentations augmentations_1);
								void endExternalSubset(xni::Augmentations augmentations_0);
								void any(xni::Augmentations augmentations_0);
								void startGroup(xni::Augmentations augmentations_0);
								void pcdata(xni::Augmentations augmentations_0);
								void endGroup(xni::Augmentations augmentations_0);
								void occurrence(jshort short_0,xni::Augmentations augmentations_1);
								void startAttlist(jstring string_0,xni::Augmentations augmentations_1);
								void endAttlist(xni::Augmentations augmentations_0);
								void setDTDSource(xni::parser::XMLDTDSource xMLDTDSource_0);
								xni::parser::XMLDTDSource getDTDSource();
								void setDTDContentModelSource(xni::parser::XMLDTDContentModelSource xMLDTDContentModelSource_0);
								xni::parser::XMLDTDContentModelSource getDTDContentModelSource();
								void startConditional(jshort short_0,xni::Augmentations augmentations_1);
								void ignoredCharacters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
								void endConditional(xni::Augmentations augmentations_0);
								void separator(jshort short_0,xni::Augmentations augmentations_1);
								void empty(xni::Augmentations augmentations_0);
							}; // end class DefaultXMLDocumentHandler
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class DefaultDocument : public NodeImpl {
								public:
							            DefaultDocument(jobject _jthis, bool copy);
							            DefaultDocument(const DefaultDocument &);
							        
								DefaultDocument();
								virtual ~DefaultDocument();
								w3c::dom::NodeList getElementsByTagName(jstring string_0);
								w3c::dom::NodeList getElementsByTagNameNS(jstring string_0,jstring string_1);
								jstring getNodeName();
								w3c::dom::Attr createAttribute(jstring string_0);
								w3c::dom::Attr createAttributeNS(jstring string_0,jstring string_1);
								w3c::dom::DocumentType getDoctype();
								w3c::dom::Text createTextNode(jstring string_0);
								w3c::dom::DOMImplementation getImplementation();
								w3c::dom::Element getDocumentElement();
								w3c::dom::CDATASection createCDATASection(jstring string_0);
								w3c::dom::Comment createComment(jstring string_0);
								w3c::dom::DocumentFragment createDocumentFragment();
								w3c::dom::Element createElement(jstring string_0);
								w3c::dom::EntityReference createEntityReference(jstring string_0);
								w3c::dom::ProcessingInstruction createProcessingInstruction(jstring string_0,jstring string_1);
								void setStrictErrorChecking(jboolean boolean_0);
								jboolean getStrictErrorChecking();
								jstring getInputEncoding();
								jstring getXmlEncoding();
								void setXmlVersion(jstring string_0);
								jstring getXmlVersion();
								void setXmlStandalone(jboolean boolean_0);
								jboolean getXmlStandalone();
								jstring getDocumentURI();
								w3c::dom::Node renameNode(w3c::dom::Node node_0,jstring string_1,jstring string_2);
								void normalizeDocument();
								w3c::dom::DOMConfiguration getDomConfig();
								void setDocumentURI(jstring string_0);
								w3c::dom::Node importNode(w3c::dom::Node node_0,jboolean boolean_1);
								w3c::dom::Node adoptNode(w3c::dom::Node node_0);
								w3c::dom::Element getElementById(jstring string_0);
								w3c::dom::Element createElementNS(jstring string_0,jstring string_1);
							}; // end class DefaultDocument
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XMLGrammarParser : public XMLParser {
						public:
					            XMLGrammarParser(jobject _jthis, bool copy);
					            XMLGrammarParser(const XMLGrammarParser &);
					        
						virtual ~XMLGrammarParser();
					}; // end class XMLGrammarParser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class StandardParserConfiguration : public DTDConfiguration {
						public:
					            StandardParserConfiguration(jobject _jthis, bool copy);
					            StandardParserConfiguration(const StandardParserConfiguration &);
					        
						StandardParserConfiguration();
						StandardParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						StandardParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						StandardParserConfiguration(util::SymbolTable symbolTable_0);
						virtual ~StandardParserConfiguration();
					}; // end class StandardParserConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class SerializerFactory : public java::lang::Object {
						public:
					            SerializerFactory(jobject _jthis, bool copy);
					            SerializerFactory(const SerializerFactory &);
					        
						SerializerFactory();
						virtual ~SerializerFactory();
						static SerializerFactory getSerializerFactory(jstring string_0);
						static void registerSerializerFactory(SerializerFactory serializerFactory_0);
					}; // end class SerializerFactory
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace rcs{
		namespace posemath{
			
			class PmRpy : public java::lang::Object {
				public:
			            PmRpy(jobject _jthis, bool copy);
			            PmRpy(const PmRpy &);
			        
				PmRpy(jdouble double_0,jdouble double_1,jdouble double_2);
				PmRpy(PmQuaternion pmQuaternion_0);
				PmRpy();
				virtual ~PmRpy();
				jdouble getY();
				void setY(jdouble double_0);
				void norm();
				void setP(jdouble double_0);
				jdouble getR();
				void setR(jdouble double_0);
				jdouble getP();
				jstring toString();
				PmRpy clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmRpy
		} // end namespace rcs
	} // end namespace posemath

	namespace java{
		namespace net{
			
			class DatagramSocket : public lang::Object {
				public:
			            DatagramSocket(jobject _jthis, bool copy);
			            DatagramSocket(const DatagramSocket &);
			        
				DatagramSocket(SocketAddress socketAddress_0);
				DatagramSocket(jint int_0);
				DatagramSocket();
				DatagramSocket(jint int_0,InetAddress inetAddress_1);
				virtual ~DatagramSocket();
				SocketAddress getRemoteSocketAddress();
				InetAddress getLocalAddress();
				void setSendBufferSize(jint int_0);
				jint getSendBufferSize();
				void setBroadcast(jboolean boolean_0);
				jboolean getBroadcast();
				void setTrafficClass(jint int_0);
				jint getTrafficClass();
				static void setDatagramSocketImplFactory(DatagramSocketImplFactory datagramSocketImplFactory_0);
				SocketAddress getLocalSocketAddress();
				jboolean isBound();
				jint getSoTimeout();
				void setReuseAddress(jboolean boolean_0);
				jboolean getReuseAddress();
				void setReceiveBufferSize(jint int_0);
				jint getReceiveBufferSize();
				void disconnect();
				InetAddress getInetAddress();
				void setSoTimeout(jint int_0);
				jboolean isConnected();
				void send(DatagramPacket datagramPacket_0);
				void receive(DatagramPacket datagramPacket_0);
				jint getLocalPort();
				void bind(SocketAddress socketAddress_0);
				jboolean isClosed();
				void connect(SocketAddress socketAddress_0);
				void connect(InetAddress inetAddress_0,jint int_1);
				void close();
				jint getPort();
				nio::channels::DatagramChannel getChannel();
			}; // end class DatagramSocket
		} // end namespace java
	} // end namespace net

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class BicubicSplineInterpolator : public java::lang::Object {
								public:
							            BicubicSplineInterpolator(jobject _jthis, bool copy);
							            BicubicSplineInterpolator(const BicubicSplineInterpolator &);
							        
								BicubicSplineInterpolator();
								BicubicSplineInterpolator(jboolean boolean_0);
								virtual ~BicubicSplineInterpolator();
							}; // end class BicubicSplineInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							
							class Cluster : public java::lang::Object {
								public:
							            Cluster(jobject _jthis, bool copy);
							            Cluster(const Cluster &);
							        
								Cluster();
								virtual ~Cluster();
								java::util::List getPoints();
								void addPoint(Clusterable clusterable_0);
							}; // end class Cluster
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								
								class Percentile : public AbstractUnivariateStatistic {
									public:
								            Percentile(jobject _jthis, bool copy);
								            Percentile(const Percentile &);
								        
									Percentile(jdouble double_0);
									Percentile();
									Percentile(Percentile percentile_0);
									virtual ~Percentile();
									ranking::NaNStrategy getNaNStrategy();
									util::KthSelector getKthSelector();
									Percentile::EstimationType getEstimationType();
									jdouble getQuantile();
									Percentile withNaNStrategy(ranking::NaNStrategy naNStrategy_0);
									Percentile withEstimationType(Percentile::EstimationType estimationType_0);
									Percentile withKthSelector(util::KthSelector kthSelector_0);
									void setData(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									void setData(jdoubleArray doubleArray_0);
									jdouble evaluate(jdouble double_0);
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jdouble evaluate(jdoubleArray doubleArray_0,jdouble double_1);
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2,jdouble double_3);
									void setQuantile(jdouble double_0);
									util::PivotingStrategyInterface getPivotingStrategy();
									static void copy(Percentile percentile_0,Percentile percentile_1);
									Percentile copy();
								}; // end class Percentile
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class SummaryStatistics : public java::lang::Object {
								public:
							            SummaryStatistics(jobject _jthis, bool copy);
							            SummaryStatistics(const SummaryStatistics &);
							        
								SummaryStatistics();
								SummaryStatistics(SummaryStatistics summaryStatistics_0);
								virtual ~SummaryStatistics();
								void addValue(jdouble double_0);
								jdouble getMax();
								jdouble getMin();
								jlong getN();
								jdouble getMean();
								jdouble getVariance();
								jdouble getStandardDeviation();
								StatisticalSummary getSummary();
								jdouble getSumsq();
								jdouble getQuadraticMean();
								jdouble getPopulationVariance();
								jdouble getGeometricMean();
								jdouble getSumOfLogs();
								jdouble getSecondMoment();
								StorelessUnivariateStatistic getSumImpl();
								void setSumImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getSumsqImpl();
								void setSumsqImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getMinImpl();
								void setMinImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getMaxImpl();
								void setMaxImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getSumLogImpl();
								void setSumLogImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getGeoMeanImpl();
								void setGeoMeanImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getMeanImpl();
								void setMeanImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getVarianceImpl();
								void setVarianceImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								jdouble getSum();
								jstring toString();
								jint hashCode();
								void clear();
								static void copy(SummaryStatistics summaryStatistics_0,SummaryStatistics summaryStatistics_1);
								SummaryStatistics copy();
							}; // end class SummaryStatistics
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class LinearOptimizer : public nonlinear::scalar::MultivariateOptimizer {
								public:
							            LinearOptimizer(jobject _jthis, bool copy);
							            LinearOptimizer(const LinearOptimizer &);
							        
								virtual ~LinearOptimizer();
								PointValuePair optimize(jobjectArray optimizationDataArray_0);
							}; // end class LinearOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class FractionFormat : public AbstractFormat {
							public:
						            FractionFormat(jobject _jthis, bool copy);
						            FractionFormat(const FractionFormat &);
						        
							FractionFormat();
							FractionFormat(java::text::NumberFormat numberFormat_0,java::text::NumberFormat numberFormat_1);
							FractionFormat(java::text::NumberFormat numberFormat_0);
							virtual ~FractionFormat();
							static jstring formatFraction(Fraction fraction_0);
							static FractionFormat getImproperInstance();
							static FractionFormat getImproperInstance(java::util::Locale locale_0);
							static FractionFormat getProperInstance(java::util::Locale locale_0);
							static FractionFormat getProperInstance();
							java::lang::StringBuffer format(Fraction fraction_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
							Fraction parse(jstring string_0,java::text::ParsePosition parsePosition_1);
							Fraction parse(jstring string_0);
							static jobjectArray getAvailableLocales();
						}; // end class FractionFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							
							class SAXEncoder : public org::xml::sax::ext::DefaultHandler2 {
								public:
							            SAXEncoder(jobject _jthis, bool copy);
							            SAXEncoder(const SAXEncoder &);
							        
								SAXEncoder(EXIFactory eXIFactory_0);
								virtual ~SAXEncoder();
								void characters(jcharArray charArray_0,jint int_1,jint int_2);
								void setOutputStream(java::io::OutputStream outputStream_0);
								void startPrefixMapping(jstring string_0,jstring string_1);
								void startElement(jstring string_0,jstring string_1,jstring string_2,org::xml::sax::Attributes attributes_3);
								void startDocument();
								void endDocument();
								void endElement(jstring string_0,jstring string_1,jstring string_2);
							}; // end class SAXEncoder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						
						class AbstractUriContext : public java::lang::Object {
							public:
						            AbstractUriContext(jobject _jthis, bool copy);
						            AbstractUriContext(const AbstractUriContext &);
						        
							AbstractUriContext(jint int_0,jstring string_1);
							virtual ~AbstractUriContext();
							virtual jint getNamespaceUriID();
							virtual jstring getNamespaceUri();
							jstring toString();
						}; // end class AbstractUriContext
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class EXIBodyDecoderInOrder : public AbstractEXIBodyDecoder {
							public:
						            EXIBodyDecoderInOrder(jobject _jthis, bool copy);
						            EXIBodyDecoderInOrder(const EXIBodyDecoderInOrder &);
						        
							EXIBodyDecoderInOrder(EXIFactory eXIFactory_0);
							virtual ~EXIBodyDecoderInOrder();
							void decodeEndDocument();
							context::QNameContext decodeStartElement();
							jstring getElementQNameAsString();
							context::QNameContext decodeAttributeXsiNil();
							context::QNameContext decodeAttributeXsiType();
							context::QNameContext decodeAttribute();
							values::Value decodeCharacters();
							void setInputStream(java::io::InputStream inputStream_0);
							void setInputChannel(io::channel::DecoderChannel decoderChannel_0);
							jstring getElementPrefix();
							void updateInputStream(java::io::InputStream inputStream_0);
							void updateInputChannel(io::channel::DecoderChannel decoderChannel_0);
							void decodeStartDocument();
							context::QNameContext decodeEndElement();
							container::NamespaceDeclaration decodeNamespaceDeclaration();
							java::util::List getDeclaredPrefixDeclarations();
							container::DocType decodeDocType();
							jcharArray decodeEntityReference();
							jcharArray decodeComment();
							container::ProcessingInstruction decodeProcessingInstruction();
							grammars::event::EventType next();
							io::channel::DecoderChannel getChannel();
						}; // end class EXIBodyDecoderInOrder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class EXIBodyEncoderInOrder : public AbstractEXIBodyEncoder {
							public:
						            EXIBodyEncoderInOrder(jobject _jthis, bool copy);
						            EXIBodyEncoderInOrder(const EXIBodyEncoderInOrder &);
						        
							EXIBodyEncoderInOrder(EXIFactory eXIFactory_0);
							virtual ~EXIBodyEncoderInOrder();
							void setOutputStream(java::io::OutputStream outputStream_0);
							void setOutputChannel(io::channel::EncoderChannel encoderChannel_0);
						}; // end class EXIBodyEncoderInOrder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XML11DocumentScannerImpl : public XMLDocumentScannerImpl {
						public:
					            XML11DocumentScannerImpl(jobject _jthis, bool copy);
					            XML11DocumentScannerImpl(const XML11DocumentScannerImpl &);
					        
						XML11DocumentScannerImpl();
						virtual ~XML11DocumentScannerImpl();
					}; // end class XML11DocumentScannerImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class DTDGrammar : public java::lang::Object {
							public:
						            DTDGrammar(jobject _jthis, bool copy);
						            DTDGrammar(const DTDGrammar &);
						        
							DTDGrammar(util::SymbolTable symbolTable_0,XMLDTDDescription xMLDTDDescription_1);
							virtual ~DTDGrammar();
							void startDTD(xni::XMLLocator xMLLocator_0,xni::Augmentations augmentations_1);
							void endDTD(xni::Augmentations augmentations_0);
							void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jobjectArray stringArray_3,jstring string_4,xni::XMLString xMLString_5,xni::XMLString xMLString_6,xni::Augmentations augmentations_7);
							void elementDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void externalEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
							void internalEntityDecl(jstring string_0,xni::XMLString xMLString_1,xni::XMLString xMLString_2,xni::Augmentations augmentations_3);
							void notationDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
							void unparsedEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
							void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void element(jstring string_0,xni::Augmentations augmentations_1);
							void startContentModel(jstring string_0,xni::Augmentations augmentations_1);
							void endContentModel(xni::Augmentations augmentations_0);
							jboolean getElementDecl(jint int_0,XMLElementDecl xMLElementDecl_1);
							jboolean getAttributeDecl(jint int_0,XMLAttributeDecl xMLAttributeDecl_1);
							void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void startExternalSubset(xni::XMLResourceIdentifier xMLResourceIdentifier_0,xni::Augmentations augmentations_1);
							void startParameterEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void endParameterEntity(jstring string_0,xni::Augmentations augmentations_1);
							void endExternalSubset(xni::Augmentations augmentations_0);
							void any(xni::Augmentations augmentations_0);
							void startGroup(xni::Augmentations augmentations_0);
							void pcdata(xni::Augmentations augmentations_0);
							void endGroup(xni::Augmentations augmentations_0);
							void occurrence(jshort short_0,xni::Augmentations augmentations_1);
							void startAttlist(jstring string_0,xni::Augmentations augmentations_1);
							void endAttlist(xni::Augmentations augmentations_0);
							xni::grammars::XMLGrammarDescription getGrammarDescription();
							jboolean isNamespaceAware();
							void setDTDSource(xni::parser::XMLDTDSource xMLDTDSource_0);
							xni::parser::XMLDTDSource getDTDSource();
							void setDTDContentModelSource(xni::parser::XMLDTDContentModelSource xMLDTDContentModelSource_0);
							xni::parser::XMLDTDContentModelSource getDTDContentModelSource();
							void startConditional(jshort short_0,xni::Augmentations augmentations_1);
							void ignoredCharacters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void endConditional(xni::Augmentations augmentations_0);
							jint getEntityDeclIndex(jstring string_0);
							jboolean getEntityDecl(jint int_0,XMLEntityDecl xMLEntityDecl_1);
							jint getElementDeclIndex(xni::QName qName_0);
							jint getElementDeclIndex(jstring string_0);
							jint getAttributeDeclIndex(jint int_0,jstring string_1);
							jint getNotationDeclIndex(jstring string_0);
							jshort getContentSpecType(jint int_0);
							jint getFirstElementDeclIndex();
							jint getContentSpecIndex(jint int_0);
							jint getNextElementDeclIndex(jint int_0);
							jboolean getContentSpec(jint int_0,XMLContentSpec xMLContentSpec_1);
							jboolean isEntityDeclared(jstring string_0);
							jboolean isEntityUnparsed(jstring string_0);
							jboolean getElementDeclIsExternal(jint int_0);
							jstring getContentSpecAsString(jint int_0);
							jint getFirstAttributeDeclIndex(jint int_0);
							jboolean getAttributeDeclIsExternal(jint int_0);
							jint getNextAttributeDeclIndex(jint int_0);
							util::SymbolTable getSymbolTable();
							jboolean isCDATAAttribute(xni::QName qName_0,xni::QName qName_1);
							jboolean getNotationDecl(jint int_0,XMLNotationDecl xMLNotationDecl_1);
							void printElements();
							void printAttributes(jint int_0);
							void separator(jshort short_0,xni::Augmentations augmentations_1);
							void empty(xni::Augmentations augmentations_0);
						}; // end class DTDGrammar
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class IDREFDatatypeValidator : public java::lang::Object {
								public:
							            IDREFDatatypeValidator(jobject _jthis, bool copy);
							            IDREFDatatypeValidator(const IDREFDatatypeValidator &);
							        
								IDREFDatatypeValidator();
								virtual ~IDREFDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class IDREFDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace javax{
		namespace xml{
			namespace datatype{
				
				class DatatypeFactory : public java::lang::Object {
					public:
				            DatatypeFactory(jobject _jthis, bool copy);
				            DatatypeFactory(const DatatypeFactory &);
				        
					virtual ~DatatypeFactory();
					XMLGregorianCalendar newXMLGregorianCalendar(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5,jint int_6,jint int_7);
					Duration newDurationDayTime(jlong long_0);
					Duration newDurationDayTime(jstring string_0);
					Duration newDurationDayTime(jboolean boolean_0,java::math::BigInteger bigInteger_1,java::math::BigInteger bigInteger_2,java::math::BigInteger bigInteger_3,java::math::BigInteger bigInteger_4);
					Duration newDurationDayTime(jboolean boolean_0,jint int_1,jint int_2,jint int_3,jint int_4);
					Duration newDurationYearMonth(jstring string_0);
					Duration newDurationYearMonth(jboolean boolean_0,java::math::BigInteger bigInteger_1,java::math::BigInteger bigInteger_2);
					Duration newDurationYearMonth(jboolean boolean_0,jint int_1,jint int_2);
					Duration newDurationYearMonth(jlong long_0);
					XMLGregorianCalendar newXMLGregorianCalendarDate(jint int_0,jint int_1,jint int_2,jint int_3);
					XMLGregorianCalendar newXMLGregorianCalendarTime(jint int_0,jint int_1,jint int_2,java::math::BigDecimal bigDecimal_3,jint int_4);
					XMLGregorianCalendar newXMLGregorianCalendarTime(jint int_0,jint int_1,jint int_2,jint int_3);
					XMLGregorianCalendar newXMLGregorianCalendarTime(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4);
					Duration newDuration(jboolean boolean_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5,jint int_6);
					static DatatypeFactory newInstance(jstring string_0,java::lang::ClassLoader classLoader_1);
					static DatatypeFactory newInstance();
				}; // end class DatatypeFactory
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype

	namespace javax{
		namespace xml{
			namespace validation{
				
				class Validator : public java::lang::Object {
					public:
				            Validator(jobject _jthis, bool copy);
				            Validator(const Validator &);
				        
					virtual ~Validator();
					void validate(transform::Source source_0);
					jboolean getFeature(jstring string_0);
					void setFeature(jstring string_0,jboolean boolean_1);
				}; // end class Validator
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation

	namespace java{
		namespace awt{
			
			class Button : public Component {
				public:
			            Button(jobject _jthis, bool copy);
			            Button(const Button &);
			        
				Button();
				Button(jstring string_0);
				virtual ~Button();
				void setActionCommand(jstring string_0);
				jstring getActionCommand();
				void removeActionListener(event::ActionListener actionListener_0);
				jobjectArray getActionListeners();
				jstring getLabel();
				void setLabel(jstring string_0);
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void addActionListener(event::ActionListener actionListener_0);
			}; // end class Button
		} // end namespace java
	} // end namespace awt

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							
							class Covariance : public java::lang::Object {
								public:
							            Covariance(jobject _jthis, bool copy);
							            Covariance(const Covariance &);
							        
								Covariance();
								Covariance(linear::RealMatrix realMatrix_0,jboolean boolean_1);
								Covariance(linear::RealMatrix realMatrix_0);
								virtual ~Covariance();
								jint getN();
								jdouble covariance(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jboolean boolean_2);
								jdouble covariance(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								linear::RealMatrix getCovarianceMatrix();
							}; // end class Covariance
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class ListPopulation : public java::lang::Object {
							public:
						            ListPopulation(jobject _jthis, bool copy);
						            ListPopulation(const ListPopulation &);
						        
							ListPopulation(jint int_0);
							ListPopulation(java::util::List list_0,jint int_1);
							virtual ~ListPopulation();
							void addChromosome(Chromosome chromosome_0);
							jint getPopulationLimit();
							Chromosome getFittestChromosome();
							jint getPopulationSize();
							java::util::List getChromosomes();
							void addChromosomes(java::util::Collection collection_0);
							void setPopulationLimit(jint int_0);
							void setChromosomes(java::util::List list_0);
							jstring toString();
							java::util::Iterator iterator();
						}; // end class ListPopulation
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class MixtureMultivariateRealDistribution : public AbstractMultivariateRealDistribution {
							public:
						            MixtureMultivariateRealDistribution(jobject _jthis, bool copy);
						            MixtureMultivariateRealDistribution(const MixtureMultivariateRealDistribution &);
						        
							MixtureMultivariateRealDistribution(random::RandomGenerator randomGenerator_0,java::util::List list_1);
							MixtureMultivariateRealDistribution(java::util::List list_0);
							virtual ~MixtureMultivariateRealDistribution();
							java::util::List getComponents();
							jdouble density(jdoubleArray doubleArray_0);
							void reseedRandomGenerator(jlong long_0);
							jdoubleArray sample();
						}; // end class MixtureMultivariateRealDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace java{
		namespace lang{
			
			class UnsupportedOperationException : public RuntimeException {
				public:
			            UnsupportedOperationException(jobject _jthis, bool copy);
			            UnsupportedOperationException(const UnsupportedOperationException &);
			        
				UnsupportedOperationException(Throwable throwable_0);
				UnsupportedOperationException(jstring string_0,Throwable throwable_1);
				UnsupportedOperationException(jstring string_0);
				UnsupportedOperationException();
				virtual ~UnsupportedOperationException();
			}; // end class UnsupportedOperationException
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace lang{
			
			class ArithmeticException : public RuntimeException {
				public:
			            ArithmeticException(jobject _jthis, bool copy);
			            ArithmeticException(const ArithmeticException &);
			        
				ArithmeticException();
				ArithmeticException(jstring string_0);
				virtual ~ArithmeticException();
			}; // end class ArithmeticException
		} // end namespace java
	} // end namespace lang

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class IOExceptionWithCause : public java::io::IOException {
						public:
					            IOExceptionWithCause(jobject _jthis, bool copy);
					            IOExceptionWithCause(const IOExceptionWithCause &);
					        
						IOExceptionWithCause(jstring string_0,java::lang::Throwable throwable_1);
						IOExceptionWithCause(java::lang::Throwable throwable_0);
						virtual ~IOExceptionWithCause();
					}; // end class IOExceptionWithCause
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					
					class SAXSource : public java::lang::Object {
						public:
					            SAXSource(jobject _jthis, bool copy);
					            SAXSource(const SAXSource &);
					        
						SAXSource(org::xml::sax::XMLReader xMLReader_0,org::xml::sax::InputSource inputSource_1);
						SAXSource();
						SAXSource(org::xml::sax::InputSource inputSource_0);
						virtual ~SAXSource();
						void setXMLReader(org::xml::sax::XMLReader xMLReader_0);
						static org::xml::sax::InputSource sourceToInputSource(Source source_0);
						jstring getSystemId();
						void setSystemId(jstring string_0);
						void setInputSource(org::xml::sax::InputSource inputSource_0);
						org::xml::sax::InputSource getInputSource();
						org::xml::sax::XMLReader getXMLReader();
					}; // end class SAXSource
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							
							class StringDecoderImpl : public AbstractStringCoder {
								public:
							            StringDecoderImpl(jobject _jthis, bool copy);
							            StringDecoderImpl(const StringDecoderImpl &);
							        
								StringDecoderImpl(jboolean boolean_0);
								StringDecoderImpl(jboolean boolean_0,jint int_1);
								virtual ~StringDecoderImpl();
								void addValue(context::QNameContext qNameContext_0,values::StringValue stringValue_1);
								values::StringValue readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1);
								values::StringValue readValueLocalHit(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1);
								virtual values::StringValue readValueGlobalHit(io::channel::DecoderChannel decoderChannel_0);
								void clear();
							}; // end class StringDecoderImpl
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class IDDatatypeValidator : public java::lang::Object {
								public:
							            IDDatatypeValidator(jobject _jthis, bool copy);
							            IDDatatypeValidator(const IDDatatypeValidator &);
							        
								IDDatatypeValidator();
								virtual ~IDDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class IDDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class DateTimeDV : public AbstractDateTimeDV {
								public:
							            DateTimeDV(jobject _jthis, bool copy);
							            DateTimeDV(const DateTimeDV &);
							        
								DateTimeDV();
								virtual ~DateTimeDV();
							}; // end class DateTimeDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace java{
		namespace io{
			
			class CharConversionException : public IOException {
				public:
			            CharConversionException(jobject _jthis, bool copy);
			            CharConversionException(const CharConversionException &);
			        
				CharConversionException();
				CharConversionException(jstring string_0);
				virtual ~CharConversionException();
			}; // end class CharConversionException
		} // end namespace java
	} // end namespace io

	namespace javax{
		namespace xml{
			namespace parsers{
				
				class DocumentBuilder : public java::lang::Object {
					public:
				            DocumentBuilder(jobject _jthis, bool copy);
				            DocumentBuilder(const DocumentBuilder &);
				        
					virtual ~DocumentBuilder();
					validation::Schema getSchema();
					jboolean isXIncludeAware();
					void reset();
					org::w3c::dom::Document parse(java::io::InputStream inputStream_0);
					org::w3c::dom::Document parse(java::io::InputStream inputStream_0,jstring string_1);
					org::w3c::dom::Document parse(jstring string_0);
					org::w3c::dom::Document parse(java::io::File file_0);
				}; // end class DocumentBuilder
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers

	namespace javax{
		namespace xml{
			namespace parsers{
				
				class SAXParserFactory : public java::lang::Object {
					public:
				            SAXParserFactory(jobject _jthis, bool copy);
				            SAXParserFactory(const SAXParserFactory &);
				        
					virtual ~SAXParserFactory();
					jboolean isNamespaceAware();
					void setSchema(validation::Schema schema_0);
					void setNamespaceAware(jboolean boolean_0);
					validation::Schema getSchema();
					void setXIncludeAware(jboolean boolean_0);
					jboolean isValidating();
					void setValidating(jboolean boolean_0);
					jboolean isXIncludeAware();
					static SAXParserFactory newInstance(jstring string_0,java::lang::ClassLoader classLoader_1);
					static SAXParserFactory newInstance();
				}; // end class SAXParserFactory
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers

	namespace java{
		namespace awt{
			
			class TextField : public TextComponent {
				public:
			            TextField(jobject _jthis, bool copy);
			            TextField(const TextField &);
			        
				TextField(jstring string_0);
				TextField();
				TextField(jstring string_0,jint int_1);
				TextField(jint int_0);
				virtual ~TextField();
				jint getColumns();
				void setColumns(jint int_0);
				void removeActionListener(event::ActionListener actionListener_0);
				jobjectArray getActionListeners();
				Dimension getPreferredSize();
				Dimension getPreferredSize(jint int_0);
				Dimension getMinimumSize();
				Dimension getMinimumSize(jint int_0);
				Dimension preferredSize(jint int_0);
				Dimension preferredSize();
				Dimension minimumSize();
				Dimension minimumSize(jint int_0);
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void addActionListener(event::ActionListener actionListener_0);
				void setText(jstring string_0);
				jchar getEchoChar();
				void setEchoChar(jchar char_0);
				void setEchoCharacter(jchar char_0);
				jboolean echoCharIsSet();
			}; // end class TextField
		} // end namespace java
	} // end namespace awt

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								
								class GaussIntegrator : public java::lang::Object {
									public:
								            GaussIntegrator(jobject _jthis, bool copy);
								            GaussIntegrator(const GaussIntegrator &);
								        
									GaussIntegrator(util::Pair pair_0);
									GaussIntegrator(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
									virtual ~GaussIntegrator();
									jint getNumberOfPoints();
									jdouble getPoint(jint int_0);
									jdouble getWeight(jint int_0);
									jdouble integrate(UnivariateFunction univariateFunction_0);
								}; // end class GaussIntegrator
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class SparseRealVector : public RealVector {
							public:
						            SparseRealVector(jobject _jthis, bool copy);
						            SparseRealVector(const SparseRealVector &);
						        
							SparseRealVector();
							virtual ~SparseRealVector();
						}; // end class SparseRealVector
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace java{
		namespace io{
			
			class FilterReader : public Reader {
				public:
			            FilterReader(jobject _jthis, bool copy);
			            FilterReader(const FilterReader &);
			        
				virtual ~FilterReader();
				jint read(jcharArray charArray_0,jint int_1,jint int_2);
				jint read();
				void close();
				void mark(jint int_0);
				jlong skip(jlong long_0);
				jboolean markSupported();
				void reset();
				jboolean ready();
			}; // end class FilterReader
		} // end namespace java
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class DOMParserImpl : public AbstractDOMParser {
						public:
					            DOMParserImpl(jobject _jthis, bool copy);
					            DOMParserImpl(const DOMParserImpl &);
					        
						DOMParserImpl(jstring string_0,jstring string_1);
						DOMParserImpl(xni::parser::XMLParserConfiguration xMLParserConfiguration_0);
						DOMParserImpl(util::SymbolTable symbolTable_0);
						DOMParserImpl(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						virtual ~DOMParserImpl();
						w3c::dom::ls::LSParserFilter getFilter();
						void setFilter(w3c::dom::ls::LSParserFilter lSParserFilter_0);
						jboolean getBusy();
						w3c::dom::Document parseURI(jstring string_0);
						w3c::dom::Node parseWithContext(w3c::dom::ls::LSInput lSInput_0,w3c::dom::Node node_1,jshort short_2);
						void abort();
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						w3c::dom::DOMConfiguration getDomConfig();
						jboolean getAsync();
						w3c::dom::DOMStringList getParameterNames();
						void reset();
						w3c::dom::Document parse(w3c::dom::ls::LSInput lSInput_0);
					}; // end class DOMParserImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace rcsdesign{
		
		class rcsDesignWriterInfo : public java::lang::Object {
			public:
		            rcsDesignWriterInfo(jobject _jthis, bool copy);
		            rcsDesignWriterInfo(const rcsDesignWriterInfo &);
		        
			virtual ~rcsDesignWriterInfo();
			void setUserDir(jstring string_0);
			jstring getUserDir();
		}; // end class rcsDesignWriterInfo
	} // end namespace rcsdesign

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									
									class AbstractConvexHullGenerator2D : public java::lang::Object {
										public:
									            AbstractConvexHullGenerator2D(jobject _jthis, bool copy);
									            AbstractConvexHullGenerator2D(const AbstractConvexHullGenerator2D &);
									        
										virtual ~AbstractConvexHullGenerator2D();
										ConvexHull2D generate(java::util::Collection collection_0);
										jdouble getTolerance();
										jboolean isIncludeCollinearPoints();
									}; // end class AbstractConvexHullGenerator2D
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull

	namespace java{
		namespace io{
			
			class ObjectInputStream : public InputStream {
				public:
			            ObjectInputStream(jobject _jthis, bool copy);
			            ObjectInputStream(const ObjectInputStream &);
			        
				ObjectInputStream(InputStream inputStream_0);
				virtual ~ObjectInputStream();
				void registerValidation(ObjectInputValidation objectInputValidation_0,jint int_1);
				jbyte readByte();
				jshort readShort();
				jint skipBytes(jint int_0);
				jboolean readBoolean();
				jint readUnsignedByte();
				jint readUnsignedShort();
				jdouble readDouble();
				jfloat readFloat();
				jlong readLong();
				void defaultReadObject();
				jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
				jint read();
				jstring readLine();
				void close();
				jint readInt();
				ObjectInputStream::GetField readFields();
				jint available();
				jchar readChar();
				jstring readUTF();
				void readFully(jbyteArray byteArray_0,jint int_1,jint int_2);
				void readFully(jbyteArray byteArray_0);
			}; // end class ObjectInputStream
		} // end namespace java
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					
					class XIncludeHandler : public java::lang::Object {
						public:
					            XIncludeHandler(jobject _jthis, bool copy);
					            XIncludeHandler(const XIncludeHandler &);
					        
						XIncludeHandler();
						virtual ~XIncludeHandler();
						void startCDATA(xni::Augmentations augmentations_0);
						void endCDATA(xni::Augmentations augmentations_0);
						void startDTD(xni::XMLLocator xMLLocator_0,xni::Augmentations augmentations_1);
						void endDTD(xni::Augmentations augmentations_0);
						void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jobjectArray stringArray_3,jstring string_4,xni::XMLString xMLString_5,xni::XMLString xMLString_6,xni::Augmentations augmentations_7);
						void elementDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void externalEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void internalEntityDecl(jstring string_0,xni::XMLString xMLString_1,xni::XMLString xMLString_2,xni::Augmentations augmentations_3);
						void notationDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void unparsedEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						jstring getBaseURI(jint int_0);
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setDTDHandler(xni::XMLDTDHandler xMLDTDHandler_0);
						xni::XMLDTDHandler getDTDHandler();
						void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
						void endDocument(xni::Augmentations augmentations_0);
						void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
						jobjectArray getRecognizedFeatures();
						jobjectArray getRecognizedProperties();
						java::lang::Boolean getFeatureDefault(jstring string_0);
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getDocumentHandler();
						void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
						xni::parser::XMLDocumentSource getDocumentSource();
						void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						void startExternalSubset(xni::XMLResourceIdentifier xMLResourceIdentifier_0,xni::Augmentations augmentations_1);
						void startParameterEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void endParameterEntity(jstring string_0,xni::Augmentations augmentations_1);
						void endExternalSubset(xni::Augmentations augmentations_0);
						void startAttlist(jstring string_0,xni::Augmentations augmentations_1);
						void endAttlist(xni::Augmentations augmentations_0);
						void setDTDSource(xni::parser::XMLDTDSource xMLDTDSource_0);
						xni::parser::XMLDTDSource getDTDSource();
						void startConditional(jshort short_0,xni::Augmentations augmentations_1);
						void ignoredCharacters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void endConditional(xni::Augmentations augmentations_0);
						jstring restoreLanguage();
						jstring getRelativeURI(jint int_0);
						jstring getLanguage(jint int_0);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XIncludeHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude

	namespace java{
		namespace util{
			
			class AbstractSequentialList : public AbstractList {
				public:
			            AbstractSequentialList(jobject _jthis, bool copy);
			            AbstractSequentialList(const AbstractSequentialList &);
			        
				virtual ~AbstractSequentialList();
				Iterator iterator();
				jboolean addAll(jint int_0,Collection collection_1);
			}; // end class AbstractSequentialList
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace awt{
			namespace geom{
				
				class Rectangle2D : public RectangularShape {
					public:
				            Rectangle2D(jobject _jthis, bool copy);
				            Rectangle2D(const Rectangle2D &);
				        
					virtual ~Rectangle2D();
					static void union(Rectangle2D rectangle2D_0,Rectangle2D rectangle2D_1,Rectangle2D rectangle2D_2);
					Rectangle2D getBounds2D();
					void setRect(Rectangle2D rectangle2D_0);
					jint outcode(Point2D point2D_0);
					static void intersect(Rectangle2D rectangle2D_0,Rectangle2D rectangle2D_1,Rectangle2D rectangle2D_2);
					jboolean intersectsLine(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					void setFrame(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					void add(Point2D point2D_0);
					void add(jdouble double_0,jdouble double_1);
					void add(Rectangle2D rectangle2D_0);
					jint hashCode();
					jboolean contains(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					jboolean contains(jdouble double_0,jdouble double_1);
					jboolean intersects(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				}; // end class Rectangle2D
			} // end namespace java
		} // end namespace awt
	} // end namespace geom

	namespace java{
		namespace awt{
			namespace geom{
				
				class Dimension2D : public lang::Object {
					public:
				            Dimension2D(jobject _jthis, bool copy);
				            Dimension2D(const Dimension2D &);
				        
					virtual ~Dimension2D();
					void setSize(Dimension2D dimension2D_0);
				}; // end class Dimension2D
			} // end namespace java
		} // end namespace awt
	} // end namespace geom

	namespace java{
		namespace awt{
			
			class Menu : public MenuItem {
				public:
			            Menu(jobject _jthis, bool copy);
			            Menu(const Menu &);
			        
				Menu(jstring string_0,jboolean boolean_1);
				Menu(jstring string_0);
				Menu();
				virtual ~Menu();
				void addSeparator();
				void insertSeparator(jint int_0);
				MenuItem getItem(jint int_0);
				jint getItemCount();
				jboolean isTearOff();
				jint countItems();
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void removeNotify();
				void add(jstring string_0);
				MenuItem add(MenuItem menuItem_0);
				void remove(MenuComponent menuComponent_0);
				void remove(jint int_0);
				void insert(MenuItem menuItem_0,jint int_1);
				void insert(jstring string_0,jint int_1);
				jstring paramString();
				void removeAll();
			}; // end class Menu
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class AWTKeyStroke : public lang::Object {
				public:
			            AWTKeyStroke(jobject _jthis, bool copy);
			            AWTKeyStroke(const AWTKeyStroke &);
			        
				virtual ~AWTKeyStroke();
				virtual jint getKeyCode();
				virtual jchar getKeyChar();
				static AWTKeyStroke getAWTKeyStroke(jint int_0,jint int_1,jboolean boolean_2);
				static AWTKeyStroke getAWTKeyStroke(jchar char_0);
				static AWTKeyStroke getAWTKeyStroke(jint int_0,jint int_1);
				static AWTKeyStroke getAWTKeyStroke(jstring string_0);
				static AWTKeyStroke getAWTKeyStrokeForEvent(event::KeyEvent keyEvent_0);
				virtual jboolean isOnKeyRelease();
				virtual jint getKeyEventType();
				jstring toString();
				jint hashCode();
				virtual jint getModifiers();
			}; // end class AWTKeyStroke
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace util{
			
			class Dictionary : public lang::Object {
				public:
			            Dictionary(jobject _jthis, bool copy);
			            Dictionary(const Dictionary &);
			        
				Dictionary();
				virtual ~Dictionary();
			}; // end class Dictionary
		} // end namespace java
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace XMLEntityManager{
						
						class Entity : public java::lang::Object {
							public:
						            Entity(jobject _jthis, bool copy);
						            Entity(const Entity &);
						        
							Entity();
							Entity(jstring string_0,jboolean boolean_1);
							virtual ~Entity();
							void setValues(Entity entity_0);
							jboolean isEntityDeclInExternalSubset();
							void clear();
						}; // end class Entity
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace XMLEntityManager

	namespace java{
		namespace nio{
			
			class Buffer : public lang::Object {
				public:
			            Buffer(jobject _jthis, bool copy);
			            Buffer(const Buffer &);
			        
				virtual ~Buffer();
				virtual Buffer limit(jint int_0);
				virtual jint limit();
				virtual Buffer clear();
				virtual jint remaining();
				virtual Buffer position(jint int_0);
				virtual jint position();
				virtual jint capacity();
				virtual Buffer mark();
				virtual Buffer reset();
				virtual Buffer flip();
				virtual Buffer rewind();
				virtual jboolean hasRemaining();
			}; // end class Buffer
		} // end namespace java
	} // end namespace nio

	namespace javafx{
		namespace stage{
			
			class Window : public java::lang::Object {
				public:
			            Window(jobject _jthis, bool copy);
			            Window(const Window &);
			        
				virtual ~Window();
				virtual void setHeight(jdouble double_0);
				virtual void setWidth(jdouble double_0);
				virtual jboolean isFocused();
				virtual jboolean isShowing();
				virtual jdouble getX();
				virtual jdouble getY();
				virtual void requestFocus();
				virtual jdouble getWidth();
				virtual jdouble getHeight();
				virtual void setOpacity(jdouble double_0);
				virtual jdouble getOpacity();
				void hide();
				virtual void setX(jdouble double_0);
				virtual void setY(jdouble double_0);
				void sizeToScene();
				virtual scene::Scene getScene();
				static java::util::Iterator impl_getWindows();
				jstring impl_getMXWindowType();
				void centerOnScreen();
				virtual void setFocused(jboolean boolean_0);
				jboolean hasProperties();
				virtual void fireEvent(event::Event event_0);
			}; // end class Window
		} // end namespace javafx
	} // end namespace stage

	namespace java{
		namespace util{
			
			class Calendar : public lang::Object {
				public:
			            Calendar(jobject _jthis, bool copy);
			            Calendar(const Calendar &);
			        
				virtual ~Calendar();
				void setTimeZone(TimeZone timeZone_0);
				virtual void setTime(Date date_0);
				virtual Date getTime();
				TimeZone getTimeZone();
				jlong getTimeInMillis();
				Map getDisplayNames(jint int_0,jint int_1,Locale locale_2);
				void setLenient(jboolean boolean_0);
				void setTimeInMillis(jlong long_0);
				static Set getAvailableCalendarTypes();
				jstring getCalendarType();
				jboolean isLenient();
				void setFirstDayOfWeek(jint int_0);
				jint getFirstDayOfWeek();
				void setMinimalDaysInFirstWeek(jint int_0);
				jint getMinimalDaysInFirstWeek();
				jboolean isWeekDateSupported();
				jint getWeekYear();
				void setWeekDate(jint int_0,jint int_1,jint int_2);
				jint getWeeksInWeekYear();
				jint getActualMinimum(jint int_0);
				jint getActualMaximum(jint int_0);
				void roll(jint int_0,jint int_1);
				jint get(jint int_0);
				jstring toString();
				jint hashCode();
				jint compareTo(Calendar calendar_0);
				virtual void clear();
				virtual void clear(jint int_0);
				static Calendar getInstance(TimeZone timeZone_0);
				static Calendar getInstance(Locale locale_0);
				static Calendar getInstance();
				static Calendar getInstance(TimeZone timeZone_0,Locale locale_1);
				virtual jboolean isSet(jint int_0);
				void set(jint int_0,jint int_1);
				virtual void set(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4);
				virtual void set(jint int_0,jint int_1,jint int_2);
				virtual void set(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
				static jobjectArray getAvailableLocales();
				jstring getDisplayName(jint int_0,jint int_1,Locale locale_2);
			}; // end class Calendar
		} // end namespace java
	} // end namespace util

	namespace javafx{
		namespace scene{
			namespace input{
				
				class InputEvent : public event::Event {
					public:
				            InputEvent(jobject _jthis, bool copy);
				            InputEvent(const InputEvent &);
				        
					virtual ~InputEvent();
				}; // end class InputEvent
			} // end namespace javafx
		} // end namespace scene
	} // end namespace input

	namespace javax{
		namespace swing{
			namespace text{
				
				class AbstractDocument : public java::lang::Object {
					public:
				            AbstractDocument(jobject _jthis, bool copy);
				            AbstractDocument(const AbstractDocument &);
				        
					virtual ~AbstractDocument();
					void render(java::lang::Runnable runnable_0);
					jint getAsynchronousLoadPriority();
					virtual void readLock();
					virtual void readUnlock();
					java::util::Dictionary getDocumentProperties();
					void setDocumentProperties(java::util::Dictionary dictionary_0);
					void setAsynchronousLoadPriority(jint int_0);
					jstring getText(jint int_0,jint int_1);
					void dump(java::io::PrintStream printStream_0);
					void remove(jint int_0,jint int_1);
					jint getLength();
				}; // end class AbstractDocument
			} // end namespace javax
		} // end namespace swing
	} // end namespace text

	namespace java{
		namespace nio{
			namespace channels{
				namespace spi{
					
					class AbstractSelectableChannel : public SelectableChannel {
						public:
					            AbstractSelectableChannel(jobject _jthis, bool copy);
					            AbstractSelectableChannel(const AbstractSelectableChannel &);
					        
						virtual ~AbstractSelectableChannel();
						virtual SelectableChannel configureBlocking(jboolean boolean_0);
						virtual jboolean isBlocking();
						virtual jboolean isRegistered();
					}; // end class AbstractSelectableChannel
				} // end namespace java
			} // end namespace nio
		} // end namespace channels
	} // end namespace spi

	namespace javax{
		namespace swing{
			
			class AbstractListModel : public java::lang::Object {
				public:
			            AbstractListModel(jobject _jthis, bool copy);
			            AbstractListModel(const AbstractListModel &);
			        
				AbstractListModel();
				virtual ~AbstractListModel();
			}; // end class AbstractListModel
		} // end namespace javax
	} // end namespace swing

	namespace pvjscript{
		
		class Main : public javax::swing::JFrame {
			public:
		            Main(jobject _jthis, bool copy);
		            Main(const Main &);
		        
			Main();
			virtual ~Main();
			jstring getLastScriptDir();
			void setLastScriptDir(jstring string_0);
			java::util::LinkedList getJobsList();
			void setJobsList(java::util::LinkedList linkedList_0);
			ProcessView getCurrentPv();
			void setCurrentPv(ProcessView processView_0);
			void updateProcessMenu();
			java::io::File getDir();
			void setDir(java::io::File file_0);
			jobjectArray getEnvp();
			void setEnvp(jobjectArray stringArray_0);
			void setEnvp(int argc,const char **argv);
			jstring RunCmd(jstring string_0);
			jboolean ProcessLine(jstring string_0,jboolean boolean_1);
			void appendErr(jstring string_0);
			void appendDebug(jstring string_0,javax::swing::text::Style style_1);
			void appendDebug(jstring string_0);
			void appendOutPlusErr(jstring string_0,javax::swing::text::Style style_1);
			void RunScriptFile(java::io::File file_0);
			void startMainThread();
			void Run(jobjectArray stringArray_0);
			void Run(int argc,const char **argv);
			static void main(jobjectArray stringArray_0);
			static void main(int argc,const char **argv);
			void close();
		}; // end class Main
	} // end namespace pvjscript

	namespace rcsdesign{
		
		class QueryDialog : public java::awt::Dialog {
			public:
		            QueryDialog(jobject _jthis, bool copy);
		            QueryDialog(const QueryDialog &);
		        
			virtual ~QueryDialog();
			void actionPerformed(java::awt::event::ActionEvent actionEvent_0);
			java::awt::Dimension getPreferredSize();
			java::awt::Dimension getMinimumSize();
		}; // end class QueryDialog
	} // end namespace rcsdesign

	namespace rcs{
		
		class RCS_VERSION : public java::lang::Object {
			public:
		            RCS_VERSION(jobject _jthis, bool copy);
		            RCS_VERSION(const RCS_VERSION &);
		        
			RCS_VERSION();
			virtual ~RCS_VERSION();
			static void main(jobjectArray stringArray_0);
			static void main(int argc,const char **argv);
			jstring toString();
			static jint compare(jstring string_0);
			static void print();
		}; // end class RCS_VERSION
	} // end namespace rcs

	namespace rcs{
		namespace posemath{
			
			class PM_CIRCLE : public java::lang::Object {
				public:
			            PM_CIRCLE(jobject _jthis, bool copy);
			            PM_CIRCLE(const PM_CIRCLE &);
			        
				PM_CIRCLE();
				virtual ~PM_CIRCLE();
				PM_CARTESIAN getCenter();
				void setCenter(PM_CARTESIAN pM_CARTESIAN_0);
				PM_CARTESIAN getNormal();
				void setNormal(PM_CARTESIAN pM_CARTESIAN_0);
				PM_CARTESIAN getrTan();
				void setrTan(PM_CARTESIAN pM_CARTESIAN_0);
				PM_CARTESIAN getrPerp();
				void setrPerp(PM_CARTESIAN pM_CARTESIAN_0);
				PM_CARTESIAN getrHelix();
				void setrHelix(PM_CARTESIAN pM_CARTESIAN_0);
				jdouble getRadius();
				void setRadius(jdouble double_0);
				jdouble getAngle();
				void setAngle(jdouble double_0);
				jdouble getSpiral();
				void setSpiral(jdouble double_0);
				jstring toString();
				PM_CIRCLE clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_CIRCLE
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_QUATERNION : public PmQuaternion {
				public:
			            PM_QUATERNION(jobject _jthis, bool copy);
			            PM_QUATERNION(const PM_QUATERNION &);
			        
				PM_QUATERNION(PM_ROTATION_VECTOR pM_ROTATION_VECTOR_0);
				PM_QUATERNION(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				PM_QUATERNION();
				virtual ~PM_QUATERNION();
				PM_QUATERNION multipy(PM_QUATERNION pM_QUATERNION_0);
				PM_QUATERNION clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_QUATERNION
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PmCircle : public java::lang::Object {
				public:
			            PmCircle(jobject _jthis, bool copy);
			            PmCircle(const PmCircle &);
			        
				PmCircle();
				virtual ~PmCircle();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmCircle
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_EULER_ZYZ : public PmEulerZyz {
				public:
			            PM_EULER_ZYZ(jobject _jthis, bool copy);
			            PM_EULER_ZYZ(const PM_EULER_ZYZ &);
			        
				PM_EULER_ZYZ(jdouble double_0,jdouble double_1,jdouble double_2);
				PM_EULER_ZYZ();
				virtual ~PM_EULER_ZYZ();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_EULER_ZYZ
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace nml{
			
			class NML_PERFORMANCE_TEST_MSG : public NMLmsg {
				public:
			            NML_PERFORMANCE_TEST_MSG(jobject _jthis, bool copy);
			            NML_PERFORMANCE_TEST_MSG(const NML_PERFORMANCE_TEST_MSG &);
			        
				NML_PERFORMANCE_TEST_MSG();
				virtual ~NML_PERFORMANCE_TEST_MSG();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class NML_PERFORMANCE_TEST_MSG
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLConnection : public java::lang::Object {
				public:
			            NMLConnection(jobject _jthis, bool copy);
			            NMLConnection(const NMLConnection &);
			        
				NMLConnection(NMLMessageDictionary nMLMessageDictionary_0,jstring string_1,jstring string_2,jstring string_3);
				NMLConnection(NMLMessageDictionary nMLMessageDictionary_0,jstring string_1,jstring string_2,jstring string_3,jobjectArray stringArray_4);
				NMLConnection();
				virtual ~NMLConnection();
				static jboolean isDefault_poll_state();
				static void setDefault_poll_state(jboolean boolean_0);
				jlong get_connect_time();
				jlong get_disconnect_time();
				jstring get_last_exception_string();
				jint get_last_id_read();
				void set_last_id_read(jint int_0);
				jstring get_returned_buffer_name();
				jint getNoThrowErrorCount();
				static void AddNMLErrorAppender(NMLErrorAppender nMLErrorAppender_0);
				void SetMessageDictionary(NMLMessageDictionary nMLMessageDictionary_0);
				void SetFormatConvertErrCallback(NMLFormatConvertErrCallbackInterface nMLFormatConvertErrCallbackInterface_0);
				NMLMessageDictionary GetMessageDictionary();
				void SetFormatConverter(NMLFormatConverter nMLFormatConverter_0);
				NMLFormatConverter GetFormatConverter();
				void ParseAdditionalOptions(jobjectArray stringArray_0);
				void ParseAdditionalOptions(int argc,const char **argv);
				void ReadNMLConfigurationFile();
				void ReadNMLConfigurationFile(jstring string_0,jstring string_1,jstring string_2);
				static void ClearStaticData();
				static NMLConfigInfo GetConfigInfo(jstring string_0);
				static NMLConfigInfo GetAllConfigInfoFromServer(jstring string_0);
				void disconnect();
				jboolean verify_bufname();
				jint setDiagInfo();
				jint setupSingleVarLog(jstring string_0,jint int_1,jdouble double_2,jint int_3);
				NMLSingleVarLog getSingleVarLog(jint int_0);
				jint closeSingleVarLog(jint int_0);
				jint setSubscriptionPeriod(jdouble double_0);
				jlong getRequest_sent_time_millis();
				jstring readDataString();
				jstring peekDataString();
				jint writeDataString(jstring string_0);
				jint writeDataStringNoThrow(jstring string_0);
				jstring get_host();
				void set_host(jstring string_0);
				jstring get_configuration_file();
				void set_configuration_file(jstring string_0);
				jstring get_buffer_name();
				void set_buffer_name(jstring string_0);
				jstring get_process_name();
				void set_process_name(jstring string_0);
				jstring readDataStringNoThrow();
				jstring peekDataStringNoThrow();
				jint get_port();
				void set_port(jint int_0);
				jint get_buffer_number();
				void set_buffer_number(jint int_0);
				void ReadNMLConfigurationFileNoThrow();
				jint connectNoThrow();
				jboolean is_connected();
				jstring getBufferLine();
				void set_read_debug_on(jboolean boolean_0);
				void set_write_debug_on(jboolean boolean_0);
				static void set_config_debug_on(jboolean boolean_0);
				jstring read_errlog_string();
				jint get_msg_type();
				jint get_msg_count();
				jboolean isRead_only();
				void setRead_only(jboolean boolean_0);
				jboolean isWrite_only();
				void setWrite_only(jboolean boolean_0);
				jint getAllocation_size_max();
				void setAllocation_size_max(jint int_0);
				jboolean isPoll();
				void setPoll(jboolean boolean_0);
				jstring toString();
				jint write(NMLmsg nMLmsg_0);
				NMLmsg read();
				jint connect();
				NMLmsg peek();
			}; // end class NMLConnection
		} // end namespace rcs
	} // end namespace nml

	namespace diagapplet{
		namespace plotter{
			
			class ParseOptionsJPanel : public javax::swing::JPanel {
				public:
			            ParseOptionsJPanel(jobject _jthis, bool copy);
			            ParseOptionsJPanel(const ParseOptionsJPanel &);
			        
				ParseOptionsJPanel();
				virtual ~ParseOptionsJPanel();
				void updateTable();
				void setLines(java::util::List list_0);
				ParseOptions getParseOptions();
				void setParseOptions(ParseOptions parseOptions_0);
				static ParseOptions ask(ParseOptions parseOptions_0,java::awt::Frame frame_1,java::util::List list_2);
			}; // end class ParseOptionsJPanel
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		namespace plotter{
			
			class plotterJFrame : public javax::swing::JFrame {
				public:
			            plotterJFrame(jobject _jthis, bool copy);
			            plotterJFrame(const plotterJFrame &);
			        
				plotterJFrame(jobjectArray stringArray_0);
				plotterJFrame();
				virtual ~plotterJFrame();
				void Clear();
				java::awt::image::BufferedImage plotToImage();
				java::awt::image::BufferedImage plotToImage(jint int_0,jint int_1);
				void SetEqualizeAxis(jboolean boolean_0);
				void set_auto_fit_to_graph(jboolean boolean_0);
				void SetGraphLimits(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				void setGraphFunction(jint int_0);
				void setGraphFunction(jstring string_0);
				void setFuncArg(jint int_0);
				void setSplit(jboolean boolean_0);
				PlotData getPlotByName(jstring string_0);
				void AddPointToPlot(PlotData plotData_0,jdouble double_1,jdouble double_2,jboolean boolean_3);
				void AddPointToArrayPlot(PlotData plotData_0,jint int_1,jdouble double_2);
				void AddPlot(PlotData plotData_0,jstring string_1);
				void AddPlot(PlotData plotData_0);
				void FitY();
				void FitToGraph();
				void ScrollRight();
				jboolean is_paused();
				static plotterJFrame ShowXYObjectsList(jstring string_0,jstring string_1,java::util::List list_2);
				void LoadXYObjectsList(jstring string_0,jstring string_1,java::util::List list_2);
				static plotterJFrame ShowObjectsList(jstring string_0,java::util::List list_1);
				void LoadObjectsList(jstring string_0,java::util::List list_1);
				void LoadXYFloatArrays(jstring string_0,jfloatArray floatArray_1,jfloatArray floatArray_2);
				void LoadXYDoubleArrays(jstring string_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
				void LoadFloatArray(jstring string_0,jfloatArray floatArray_1);
				void LoadDoubleArray(jstring string_0,jdoubleArray doubleArray_1);
				static plotterJFrame ShowFile(jstring string_0);
				static plotterJFrame ShowFloatArray(jstring string_0,jfloatArray floatArray_1);
				static plotterJFrame ShowDoubleArray(jstring string_0,jdoubleArray doubleArray_1);
				static java::util::List getLines(jstring string_0,jint int_1);
				void LoadFile(jstring string_0);
				static void setForcedLineFilterPattern(jstring string_0,jboolean boolean_1);
				static void lock_value_for_plot_versus_line_number(jboolean boolean_0,jboolean boolean_1);
				static void setFieldSeparator(jstring string_0);
				void SaveFile(jstring string_0);
				jdouble getXMin();
				jdouble getXMax();
				jdouble getYMin();
				jdouble getYMax();
				void setUseShortname(jboolean boolean_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class plotterJFrame
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		namespace plotter{
			
			class ParseOptions : public java::lang::Object {
				public:
			            ParseOptions(jobject _jthis, bool copy);
			            ParseOptions(const ParseOptions &);
			        
				ParseOptions();
				virtual ~ParseOptions();
				jintArray getFieldsToShow();
				jboolean isPlotVersusLineNumber();
				jstring getFieldSeperator();
				jdouble getScale();
				jstring getFirstLine();
				void setFirstLine(jstring string_0);
				void setFieldSeperator(jstring string_0);
				void setPlotVersusLineNumber(jboolean boolean_0);
				void setFieldsToShow(jintArray intArray_0);
				void setFilterPattern(jstring string_0);
				void setScale(jdouble double_0);
				jstring getFilterPattern();
				ParseOptions clone();
			}; // end class ParseOptions
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		namespace plotter{
			
			class PlotGraphScreenMap : public java::lang::Object {
				public:
			            PlotGraphScreenMap(jobject _jthis, bool copy);
			            PlotGraphScreenMap(const PlotGraphScreenMap &);
			        
				PlotGraphScreenMap(jint int_0,jint int_1);
				virtual ~PlotGraphScreenMap();
				void SetReverseX(jboolean boolean_0);
				void equalizeAxis();
				jdouble get_x_max();
				jdouble get_x_min();
				void set_x_show_area(jdouble double_0,jdouble double_1);
				jdouble get_y_min();
				jdouble get_y_max();
				void set_y_show_area(jdouble double_0,jdouble double_1);
				jdouble get_x_value(jint int_0);
				jdouble get_y_value(jint int_0);
				jint get_changed_count();
				void update_horz_scrollbar(java::awt::Scrollbar scrollbar_0);
				void update_horz_scrollbar(javax::swing::JScrollBar jScrollBar_0);
				void update_vert_scrollbar(javax::swing::JScrollBar jScrollBar_0);
				void update_vert_scrollbar(java::awt::Scrollbar scrollbar_0);
				jint get_scroll_x();
				void set_scroll_x(jint int_0);
				jint get_scroll_y();
				void set_scroll_y(jint int_0);
				void clear_changed();
				jboolean get_changed();
				void set_x_grid_forced_value(jdouble double_0);
				void set_y_grid_forced_value(jdouble double_0);
				jdouble get_abs_x_min();
				jdouble get_abs_x_max();
				jdouble get_abs_y_min();
				jdouble get_abs_y_max();
				jint get_scroll_width();
				jint get_scroll_height();
				void set_screen_w_x_h(jint int_0,jint int_1);
				void set_abs_x_min(jdouble double_0);
				void set_abs_x_max(jdouble double_0);
				void set_abs_y_min(jdouble double_0);
				void set_abs_y_max(jdouble double_0);
				void zoom_x(jdouble double_0);
				void zoom_y(jdouble double_0);
				void move_to_new_x_show_area_max(jdouble double_0);
				jdouble get_x_scale();
				jdouble get_y_scale();
				void set_y_section_show_area(jint int_0,jdouble double_1,jdouble double_2);
				void set_num_y_sections(jint int_0);
				jint get_screen_x(jdouble double_0);
				jint get_screen_y(jdouble double_0);
				jint get_section_screen_y_line_pose(jint int_0);
				jint get_section_screen_y(jint int_0,jdouble double_1);
				jdouble get_x_grid();
				jdouble get_y_grid();
				jint get_x_grid_spacing();
				jint get_y_grid_spacing();
				java::awt::Dimension get_dimension();
				jint get_screen_height();
				jint get_screen_width();
				jint get_starting_x_grid_screen_pos();
				jint get_starting_y_grid_screen_pos();
				jdouble get_starting_x_grid_value();
				jdouble get_starting_y_grid_value();
				jstring toString();
			}; // end class PlotGraphScreenMap
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		
		class PlotTracker : public java::lang::Object {
			public:
		            PlotTracker(jobject _jthis, bool copy);
		            PlotTracker(const PlotTracker &);
		        
			virtual ~PlotTracker();
			jstring toString();
		}; // end class PlotTracker
	} // end namespace diagapplet

	namespace diagapplet{
		
		class HierarchyLoad_NB_UI : public javax::swing::JFrame {
			public:
		            HierarchyLoad_NB_UI(jobject _jthis, bool copy);
		            HierarchyLoad_NB_UI(const HierarchyLoad_NB_UI &);
		        
			HierarchyLoad_NB_UI();
			virtual ~HierarchyLoad_NB_UI();
			javax::swing::SwingWorker CreateLoadHierarchySwingWorker(CodeGen::CodeGenCommonInterface codeGenCommonInterface_0,jstring string_1,java::lang::Runnable runnable_2);
			static void main(jobjectArray stringArray_0);
			static void main(int argc,const char **argv);
			jstring toString();
		}; // end class HierarchyLoad_NB_UI
	} // end namespace diagapplet

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGen : public java::applet::Applet {
				public:
			            CodeGen(jobject _jthis, bool copy);
			            CodeGen(const CodeGen &);
			        
				CodeGen();
				virtual ~CodeGen();
				void actionPerformed(java::awt::event::ActionEvent actionEvent_0);
				void paint(java::awt::Graphics graphics_0);
				void RunScriptFile(jstring string_0);
				void set_m_hierarchyFile(jstring string_0);
				void LoadHierarchy();
				void set_m_fStandAlone(jboolean boolean_0);
				void RingBell();
				void GetParameters(jobjectArray stringArray_0);
				void GetParameters(int argc,const char **argv);
				void set_ClassList(utils::FastListPanelInterface fastListPanelInterface_0);
				jstring GetParameter(jstring string_0,jobjectArray stringArray_1);
				void InitializeClassList();
				jstring getAppletInfo();
				void set_preserve_modules_hashtable(jboolean boolean_0);
				void set_inside_diagapplet(jboolean boolean_0);
				void set_m_ConfigFile(jstring string_0);
				void set_m_modulesHashTable(java::util::Hashtable hashtable_0);
				void set_serversHashtable(java::util::Hashtable hashtable_0);
				void set_m_loadingPanel(utils::URLLoadInfoPanelInterface uRLLoadInfoPanelInterface_0);
				void set_m_modulesCountList(utils::CountListInterface countListInterface_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
				void run();
				void init();
				void destroy();
			}; // end class CodeGen
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenTextAreaWrapper : public java::awt::TextArea {
				public:
			            CodeGenTextAreaWrapper(jobject _jthis, bool copy);
			            CodeGenTextAreaWrapper(const CodeGenTextAreaWrapper &);
			        
				CodeGenTextAreaWrapper(jint int_0,jint int_1);
				virtual ~CodeGenTextAreaWrapper();
			}; // end class CodeGenTextAreaWrapper
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class LoadHierarchyUpdateInterface : public java::lang::Object {
				public:
			            LoadHierarchyUpdateInterface(jobject _jthis, bool copy);
			            LoadHierarchyUpdateInterface(const LoadHierarchyUpdateInterface &);
			        
				LoadHierarchyUpdateInterface();
				virtual ~LoadHierarchyUpdateInterface();
			}; // end class LoadHierarchyUpdateInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class DiagNMLFormatConvertErrCallback : public java::lang::Object {
				public:
			            DiagNMLFormatConvertErrCallback(jobject _jthis, bool copy);
			            DiagNMLFormatConvertErrCallback(const DiagNMLFormatConvertErrCallback &);
			        
				virtual ~DiagNMLFormatConvertErrCallback();
				void bytesNotUsed(rcs::nml::NMLMessageDictionary nMLMessageDictionary_0,jint int_1,jstring string_2,jboolean boolean_3);
				void tokensNotUsed(rcs::nml::NMLMessageDictionary nMLMessageDictionary_0,jint int_1,jstring string_2,jboolean boolean_3);
				void miscError(rcs::nml::NMLMessageDictionary nMLMessageDictionary_0,java::lang::Exception exception_1);
				void miscError(rcs::nml::NMLMessageDictionary nMLMessageDictionary_0);
			}; // end class DiagNMLFormatConvertErrCallback
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class BufferInfo : public java::lang::Object {
				public:
			            BufferInfo(jobject _jthis, bool copy);
			            BufferInfo(const BufferInfo &);
			        
				BufferInfo();
				virtual ~BufferInfo();
				jint writeDataString(jstring string_0);
				jboolean isConnected();
				jobjectArray getBufferLineHeaders();
				java::util::Hashtable getPreviousMessagesHashtable();
				void setPreviousMessagesHashtable(java::util::Hashtable hashtable_0);
				static rcs::nml::NMLFormatConvertErrCallbackInterface get_nml_format_err_callback();
				void SetPreviousMessage(jstring string_0);
				jstring GetPreviousMessage(java::lang::Long long_0);
				void SetNMLConfigFile(jstring string_0);
				java::util::Vector getMsgsAvailable();
				jstring getMessageData(jint int_0);
				rcs::nml::NMLConnectionInterface createExtraChannel();
				void setConnected(jboolean boolean_0);
				jstring toString();
			}; // end class BufferInfo
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class DefinedValue : public java::lang::Object {
				public:
			            DefinedValue(jobject _jthis, bool copy);
			            DefinedValue(const DefinedValue &);
			        
				virtual ~DefinedValue();
				jstring toString();
			}; // end class DefinedValue
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class DiagNMLMsgDictCreator : public java::lang::Object {
				public:
			            DiagNMLMsgDictCreator(jobject _jthis, bool copy);
			            DiagNMLMsgDictCreator(const DiagNMLMsgDictCreator &);
			        
				DiagNMLMsgDictCreator();
				virtual ~DiagNMLMsgDictCreator();
				DiagNMLMsgDictInterface create(jboolean boolean_0,jboolean boolean_1);
			}; // end class DiagNMLMsgDictCreator
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenTextFieldInterface : public java::lang::Object {
				public:
			            CodeGenTextFieldInterface(jobject _jthis, bool copy);
			            CodeGenTextFieldInterface(const CodeGenTextFieldInterface &);
			        
				CodeGenTextFieldInterface();
				virtual ~CodeGenTextFieldInterface();
			}; // end class CodeGenTextFieldInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenBellRingerInterface : public java::lang::Object {
				public:
			            CodeGenBellRingerInterface(jobject _jthis, bool copy);
			            CodeGenBellRingerInterface(const CodeGenBellRingerInterface &);
			        
				CodeGenBellRingerInterface();
				virtual ~CodeGenBellRingerInterface();
			}; // end class CodeGenBellRingerInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class DiagNMLmsg : public rcs::nml::NMLmsg {
				public:
			            DiagNMLmsg(jobject _jthis, bool copy);
			            DiagNMLmsg(const DiagNMLmsg &);
			        
				virtual ~DiagNMLmsg();
				void bytesNotUsed(jint int_0,jstring string_1,jboolean boolean_2);
				void tokensNotUsed(jint int_0,jstring string_1,jboolean boolean_2);
				void miscError(java::lang::Exception exception_0);
				void miscError();
				static void DebugPrint(jstring string_0);
				static void ErrorPrint(jstring string_0);
				static jboolean get_debug_on();
				static void set_debug_on(jboolean boolean_0);
				void update(rcs::nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class DiagNMLmsg
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class MultivariateDifferentiableVectorFunction : public java::lang::Object {
								public:
							            MultivariateDifferentiableVectorFunction(jobject _jthis, bool copy);
							            MultivariateDifferentiableVectorFunction(const MultivariateDifferentiableVectorFunction &);
							        
								MultivariateDifferentiableVectorFunction();
								virtual ~MultivariateDifferentiableVectorFunction();
							}; // end class MultivariateDifferentiableVectorFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class UnivariateMatrixFunctionDifferentiator : public java::lang::Object {
								public:
							            UnivariateMatrixFunctionDifferentiator(jobject _jthis, bool copy);
							            UnivariateMatrixFunctionDifferentiator(const UnivariateMatrixFunctionDifferentiator &);
							        
								UnivariateMatrixFunctionDifferentiator();
								virtual ~UnivariateMatrixFunctionDifferentiator();
							}; // end class UnivariateMatrixFunctionDifferentiator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class SparseGradient : public java::lang::Object {
								public:
							            SparseGradient(jobject _jthis, bool copy);
							            SparseGradient(const SparseGradient &);
							        
								virtual ~SparseGradient();
								SparseGradient compose(jdouble double_0,jdouble double_1);
								SparseGradient multiply(SparseGradient sparseGradient_0);
								SparseGradient multiply(jdouble double_0);
								SparseGradient multiply(jint int_0);
								SparseGradient subtract(SparseGradient sparseGradient_0);
								SparseGradient subtract(jdouble double_0);
								SparseGradient reciprocal();
								SparseGradient rootN(jint int_0);
								SparseGradient acosh();
								SparseGradient asinh();
								SparseGradient atanh();
								jdouble taylor(jdoubleArray doubleArray_0);
								SparseGradient linearCombination(SparseGradient sparseGradient_0,SparseGradient sparseGradient_1,SparseGradient sparseGradient_2,SparseGradient sparseGradient_3,SparseGradient sparseGradient_4,SparseGradient sparseGradient_5);
								SparseGradient linearCombination(jdouble double_0,SparseGradient sparseGradient_1,jdouble double_2,SparseGradient sparseGradient_3,jdouble double_4,SparseGradient sparseGradient_5);
								SparseGradient linearCombination(SparseGradient sparseGradient_0,SparseGradient sparseGradient_1,SparseGradient sparseGradient_2,SparseGradient sparseGradient_3,SparseGradient sparseGradient_4,SparseGradient sparseGradient_5,SparseGradient sparseGradient_6,SparseGradient sparseGradient_7);
								SparseGradient linearCombination(jdouble double_0,SparseGradient sparseGradient_1,jdouble double_2,SparseGradient sparseGradient_3,jdouble double_4,SparseGradient sparseGradient_5,jdouble double_6,SparseGradient sparseGradient_7);
								SparseGradient linearCombination(jobjectArray sparseGradientArray_0,jobjectArray sparseGradientArray_1);
								SparseGradient linearCombination(jdoubleArray doubleArray_0,jobjectArray sparseGradientArray_1);
								SparseGradient linearCombination(SparseGradient sparseGradient_0,SparseGradient sparseGradient_1,SparseGradient sparseGradient_2,SparseGradient sparseGradient_3);
								SparseGradient linearCombination(jdouble double_0,SparseGradient sparseGradient_1,jdouble double_2,SparseGradient sparseGradient_3);
								jdouble getReal();
								SparseGradient negate();
								static SparseGradient createVariable(jint int_0,jdouble double_1);
								jint numVars();
								jdouble getDerivative(jint int_0);
								void addInPlace(SparseGradient sparseGradient_0);
								void multiplyInPlace(SparseGradient sparseGradient_0);
								SparseGradient add(SparseGradient sparseGradient_0);
								SparseGradient add(jdouble double_0);
								jint hashCode();
								SparseGradient abs();
								SparseGradient sin();
								SparseGradient cos();
								SparseGradient tan();
								SparseGradient atan2(SparseGradient sparseGradient_0);
								static SparseGradient atan2(SparseGradient sparseGradient_0,SparseGradient sparseGradient_1);
								SparseGradient sqrt();
								SparseGradient log();
								SparseGradient log10();
								static SparseGradient pow(jdouble double_0,SparseGradient sparseGradient_1);
								SparseGradient pow(jint int_0);
								SparseGradient pow(jdouble double_0);
								SparseGradient pow(SparseGradient sparseGradient_0);
								SparseGradient exp();
								jdouble getValue();
								Field getField();
								SparseGradient scalb(jint int_0);
								SparseGradient copySign(jdouble double_0);
								SparseGradient copySign(SparseGradient sparseGradient_0);
								SparseGradient signum();
								SparseGradient divide(jdouble double_0);
								SparseGradient divide(SparseGradient sparseGradient_0);
								SparseGradient remainder(jdouble double_0);
								SparseGradient remainder(SparseGradient sparseGradient_0);
								SparseGradient asin();
								SparseGradient acos();
								SparseGradient atan();
								SparseGradient toRadians();
								SparseGradient toDegrees();
								SparseGradient cbrt();
								SparseGradient ceil();
								SparseGradient floor();
								SparseGradient rint();
								jlong round();
								SparseGradient sinh();
								SparseGradient cosh();
								SparseGradient tanh();
								SparseGradient hypot(SparseGradient sparseGradient_0);
								static SparseGradient hypot(SparseGradient sparseGradient_0,SparseGradient sparseGradient_1);
								SparseGradient expm1();
								SparseGradient log1p();
								static SparseGradient createConstant(jdouble double_0);
							}; // end class SparseGradient
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Inverse : public java::lang::Object {
								public:
							            Inverse(jobject _jthis, bool copy);
							            Inverse(const Inverse &);
							        
								Inverse();
								virtual ~Inverse();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Inverse
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Abs : public java::lang::Object {
								public:
							            Abs(jobject _jthis, bool copy);
							            Abs(const Abs &);
							        
								Abs();
								virtual ~Abs();
								jdouble value(jdouble double_0);
							}; // end class Abs
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Rint : public java::lang::Object {
								public:
							            Rint(jobject _jthis, bool copy);
							            Rint(const Rint &);
							        
								Rint();
								virtual ~Rint();
								jdouble value(jdouble double_0);
							}; // end class Rint
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Expm1 : public java::lang::Object {
								public:
							            Expm1(jobject _jthis, bool copy);
							            Expm1(const Expm1 &);
							        
								Expm1();
								virtual ~Expm1();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Expm1
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Cosh : public java::lang::Object {
								public:
							            Cosh(jobject _jthis, bool copy);
							            Cosh(const Cosh &);
							        
								Cosh();
								virtual ~Cosh();
								DifferentiableUnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Cosh
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Subtract : public java::lang::Object {
								public:
							            Subtract(jobject _jthis, bool copy);
							            Subtract(const Subtract &);
							        
								Subtract();
								virtual ~Subtract();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class Subtract
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								
								class LegendreRuleFactory : public BaseRuleFactory {
									public:
								            LegendreRuleFactory(jobject _jthis, bool copy);
								            LegendreRuleFactory(const LegendreRuleFactory &);
								        
									LegendreRuleFactory();
									virtual ~LegendreRuleFactory();
								}; // end class LegendreRuleFactory
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class PegasusSolver : public BaseSecantSolver {
								public:
							            PegasusSolver(jobject _jthis, bool copy);
							            PegasusSolver(const PegasusSolver &);
							        
								PegasusSolver(jdouble double_0,jdouble double_1,jdouble double_2);
								PegasusSolver(jdouble double_0,jdouble double_1);
								PegasusSolver(jdouble double_0);
								PegasusSolver();
								virtual ~PegasusSolver();
							}; // end class PegasusSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class NevilleInterpolator : public java::lang::Object {
								public:
							            NevilleInterpolator(jobject _jthis, bool copy);
							            NevilleInterpolator(const NevilleInterpolator &);
							        
								NevilleInterpolator();
								virtual ~NevilleInterpolator();
								polynomials::PolynomialFunctionLagrangeForm interpolate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class NevilleInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class PiecewiseBicubicSplineInterpolatingFunction : public java::lang::Object {
								public:
							            PiecewiseBicubicSplineInterpolatingFunction(jobject _jthis, bool copy);
							            PiecewiseBicubicSplineInterpolatingFunction(const PiecewiseBicubicSplineInterpolatingFunction &);
							        
								virtual ~PiecewiseBicubicSplineInterpolatingFunction();
								jboolean isValidPoint(jdouble double_0,jdouble double_1);
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class PiecewiseBicubicSplineInterpolatingFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class SplineInterpolator : public java::lang::Object {
								public:
							            SplineInterpolator(jobject _jthis, bool copy);
							            SplineInterpolator(const SplineInterpolator &);
							        
								SplineInterpolator();
								virtual ~SplineInterpolator();
								polynomials::PolynomialSplineFunction interpolate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class SplineInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class DifferentiableUnivariateVectorFunction : public java::lang::Object {
							public:
						            DifferentiableUnivariateVectorFunction(jobject _jthis, bool copy);
						            DifferentiableUnivariateVectorFunction(const DifferentiableUnivariateVectorFunction &);
						        
							DifferentiableUnivariateVectorFunction();
							virtual ~DifferentiableUnivariateVectorFunction();
						}; // end class DifferentiableUnivariateVectorFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class UnivariateFunction : public java::lang::Object {
							public:
						            UnivariateFunction(jobject _jthis, bool copy);
						            UnivariateFunction(const UnivariateFunction &);
						        
							UnivariateFunction();
							virtual ~UnivariateFunction();
						}; // end class UnivariateFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class EulerIntegrator : public RungeKuttaIntegrator {
								public:
							            EulerIntegrator(jobject _jthis, bool copy);
							            EulerIntegrator(const EulerIntegrator &);
							        
								EulerIntegrator(jdouble double_0);
								virtual ~EulerIntegrator();
							}; // end class EulerIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							
							class StepNormalizerMode : public java::lang::Enum {
								public:
							            StepNormalizerMode(jobject _jthis, bool copy);
							            StepNormalizerMode(const StepNormalizerMode &);
							        
								virtual ~StepNormalizerMode();
								static jobjectArray values();
								static StepNormalizerMode valueOf(jstring string_0);
							}; // end class StepNormalizerMode
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							
							class NordsieckStepInterpolator : public AbstractStepInterpolator {
								public:
							            NordsieckStepInterpolator(jobject _jthis, bool copy);
							            NordsieckStepInterpolator(const NordsieckStepInterpolator &);
							        
								NordsieckStepInterpolator(NordsieckStepInterpolator nordsieckStepInterpolator_0);
								NordsieckStepInterpolator();
								virtual ~NordsieckStepInterpolator();
								void readExternal(java::io::ObjectInput objectInput_0);
								void writeExternal(java::io::ObjectOutput objectOutput_0);
								void rescale(jdouble double_0);
								jdoubleArray getInterpolatedStateVariation();
								void reinitialize(jdouble double_0,jdouble double_1,jdoubleArray doubleArray_2,linear::Array2DRowRealMatrix array2DRowRealMatrix_3);
								void reinitialize(jdoubleArray doubleArray_0,jboolean boolean_1,EquationsMapper equationsMapper_2,jobjectArray equationsMapperArray_3);
							}; // end class NordsieckStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							
							class AbstractDifferentiableOptimizer : public direct::BaseAbstractMultivariateOptimizer {
								public:
							            AbstractDifferentiableOptimizer(jobject _jthis, bool copy);
							            AbstractDifferentiableOptimizer(const AbstractDifferentiableOptimizer &);
							        
								virtual ~AbstractDifferentiableOptimizer();
							}; // end class AbstractDifferentiableOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							
							class GaussNewtonOptimizer : public AbstractLeastSquaresOptimizer {
								public:
							            GaussNewtonOptimizer(jobject _jthis, bool copy);
							            GaussNewtonOptimizer(const GaussNewtonOptimizer &);
							        
								GaussNewtonOptimizer();
								GaussNewtonOptimizer(jboolean boolean_0,ConvergenceChecker convergenceChecker_1);
								GaussNewtonOptimizer(jboolean boolean_0);
								GaussNewtonOptimizer(ConvergenceChecker convergenceChecker_0);
								virtual ~GaussNewtonOptimizer();
								PointVectorValuePair doOptimize();
							}; // end class GaussNewtonOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class MultivariateFunctionPenaltyAdapter : public java::lang::Object {
								public:
							            MultivariateFunctionPenaltyAdapter(jobject _jthis, bool copy);
							            MultivariateFunctionPenaltyAdapter(const MultivariateFunctionPenaltyAdapter &);
							        
								MultivariateFunctionPenaltyAdapter(analysis::MultivariateFunction multivariateFunction_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2,jdouble double_3,jdoubleArray doubleArray_4);
								virtual ~MultivariateFunctionPenaltyAdapter();
								jdouble value(jdoubleArray doubleArray_0);
							}; // end class MultivariateFunctionPenaltyAdapter
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class CMAESOptimizer : public BaseAbstractMultivariateSimpleBoundsOptimizer {
								public:
							            CMAESOptimizer(jobject _jthis, bool copy);
							            CMAESOptimizer(const CMAESOptimizer &);
							        
								CMAESOptimizer(jint int_0,jdoubleArray doubleArray_1,jint int_2,jdouble double_3,jboolean boolean_4,jint int_5,jint int_6,random::RandomGenerator randomGenerator_7,jboolean boolean_8,ConvergenceChecker convergenceChecker_9);
								CMAESOptimizer(jint int_0);
								CMAESOptimizer(jint int_0,jdoubleArray doubleArray_1);
								CMAESOptimizer(jint int_0,jdoubleArray doubleArray_1,jint int_2,jdouble double_3,jboolean boolean_4,jint int_5,jint int_6,random::RandomGenerator randomGenerator_7,jboolean boolean_8);
								CMAESOptimizer();
								CMAESOptimizer(jint int_0,jdouble double_1,jboolean boolean_2,jint int_3,jint int_4,random::RandomGenerator randomGenerator_5,jboolean boolean_6,ConvergenceChecker convergenceChecker_7);
								virtual ~CMAESOptimizer();
								java::util::List getStatisticsSigmaHistory();
								java::util::List getStatisticsMeanHistory();
								java::util::List getStatisticsFitnessHistory();
								java::util::List getStatisticsDHistory();
							}; // end class CMAESOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							
							class UnivariatePointValuePair : public java::lang::Object {
								public:
							            UnivariatePointValuePair(jobject _jthis, bool copy);
							            UnivariatePointValuePair(const UnivariatePointValuePair &);
							        
								UnivariatePointValuePair(jdouble double_0,jdouble double_1);
								virtual ~UnivariatePointValuePair();
								jdouble getPoint();
								jdouble getValue();
							}; // end class UnivariatePointValuePair
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							
							class BracketFinder : public java::lang::Object {
								public:
							            BracketFinder(jobject _jthis, bool copy);
							            BracketFinder(const BracketFinder &);
							        
								BracketFinder();
								BracketFinder(jdouble double_0,jint int_1);
								virtual ~BracketFinder();
								jint getEvaluations();
								jint getMaxEvaluations();
								jdouble getLo();
								jdouble getHi();
								jdouble getFLo();
								jdouble getFHi();
								jdouble getMid();
								jdouble getFMid();
								void search(analysis::UnivariateFunction univariateFunction_0,GoalType goalType_1,jdouble double_2,jdouble double_3);
							}; // end class BracketFinder
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							
							class UnivariateMultiStartOptimizer : public java::lang::Object {
								public:
							            UnivariateMultiStartOptimizer(jobject _jthis, bool copy);
							            UnivariateMultiStartOptimizer(const UnivariateMultiStartOptimizer &);
							        
								UnivariateMultiStartOptimizer(BaseUnivariateOptimizer baseUnivariateOptimizer_0,jint int_1,random::RandomGenerator randomGenerator_2);
								virtual ~UnivariateMultiStartOptimizer();
								jint getEvaluations();
								jint getMaxEvaluations();
								ConvergenceChecker getConvergenceChecker();
								jobjectArray getOptima();
								UnivariatePointValuePair optimize(jint int_0,analysis::UnivariateFunction univariateFunction_1,GoalType goalType_2,jdouble double_3,jdouble double_4,jdouble double_5);
								UnivariatePointValuePair optimize(jint int_0,analysis::UnivariateFunction univariateFunction_1,GoalType goalType_2,jdouble double_3,jdouble double_4);
							}; // end class UnivariateMultiStartOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							
							class LinearObjectiveFunction : public java::lang::Object {
								public:
							            LinearObjectiveFunction(jobject _jthis, bool copy);
							            LinearObjectiveFunction(const LinearObjectiveFunction &);
							        
								LinearObjectiveFunction(jdoubleArray doubleArray_0,jdouble double_1);
								LinearObjectiveFunction(linear::RealVector realVector_0,jdouble double_1);
								virtual ~LinearObjectiveFunction();
								linear::RealVector getCoefficients();
								jdouble getConstantTerm();
								jint hashCode();
								jdouble getValue(linear::RealVector realVector_0);
								jdouble getValue(jdoubleArray doubleArray_0);
							}; // end class LinearObjectiveFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							
							class NoFeasibleSolutionException : public exception::MathIllegalStateException {
								public:
							            NoFeasibleSolutionException(jobject _jthis, bool copy);
							            NoFeasibleSolutionException(const NoFeasibleSolutionException &);
							        
								NoFeasibleSolutionException();
								virtual ~NoFeasibleSolutionException();
							}; // end class NoFeasibleSolutionException
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							
							class SimplexTableau : public java::lang::Object {
								public:
							            SimplexTableau(jobject _jthis, bool copy);
							            SimplexTableau(const SimplexTableau &);
							        
								virtual ~SimplexTableau();
								java::util::List normalizeConstraints(java::util::Collection collection_0);
								jint hashCode();
							}; // end class SimplexTableau
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							
							class Relationship : public java::lang::Enum {
								public:
							            Relationship(jobject _jthis, bool copy);
							            Relationship(const Relationship &);
							        
								virtual ~Relationship();
								Relationship oppositeRelationship();
								jstring toString();
								static jobjectArray values();
								static Relationship valueOf(jstring string_0);
							}; // end class Relationship
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							
							class SimplexSolver : public AbstractLinearOptimizer {
								public:
							            SimplexSolver(jobject _jthis, bool copy);
							            SimplexSolver(const SimplexSolver &);
							        
								SimplexSolver(jdouble double_0,jint int_1);
								SimplexSolver();
								virtual ~SimplexSolver();
								PointValuePair doOptimize();
							}; // end class SimplexSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							
							class LinearOptimizer : public java::lang::Object {
								public:
							            LinearOptimizer(jobject _jthis, bool copy);
							            LinearOptimizer(const LinearOptimizer &);
							        
								LinearOptimizer();
								virtual ~LinearOptimizer();
							}; // end class LinearOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							
							class HarmonicFitter : public CurveFitter {
								public:
							            HarmonicFitter(jobject _jthis, bool copy);
							            HarmonicFitter(const HarmonicFitter &);
							        
								HarmonicFitter(DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer_0);
								virtual ~HarmonicFitter();
								jdoubleArray fit(jdoubleArray doubleArray_0);
								jdoubleArray fit();
							}; // end class HarmonicFitter
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							
							class PolynomialFitter : public CurveFitter {
								public:
							            PolynomialFitter(jobject _jthis, bool copy);
							            PolynomialFitter(const PolynomialFitter &);
							        
								PolynomialFitter(DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer_0);
								PolynomialFitter(jint int_0,DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer_1);
								virtual ~PolynomialFitter();
								jdoubleArray fit(jint int_0,jdoubleArray doubleArray_1);
								jdoubleArray fit(jdoubleArray doubleArray_0);
								jdoubleArray fit();
							}; // end class PolynomialFitter
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							
							class GaussianFitter : public CurveFitter {
								public:
							            GaussianFitter(jobject _jthis, bool copy);
							            GaussianFitter(const GaussianFitter &);
							        
								GaussianFitter(DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer_0);
								virtual ~GaussianFitter();
								jdoubleArray fit(jdoubleArray doubleArray_0);
								jdoubleArray fit();
							}; // end class GaussianFitter
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class BaseMultivariateOptimizer : public java::lang::Object {
							public:
						            BaseMultivariateOptimizer(jobject _jthis, bool copy);
						            BaseMultivariateOptimizer(const BaseMultivariateOptimizer &);
						        
							BaseMultivariateOptimizer();
							virtual ~BaseMultivariateOptimizer();
						}; // end class BaseMultivariateOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class BaseOptimizer : public java::lang::Object {
							public:
						            BaseOptimizer(jobject _jthis, bool copy);
						            BaseOptimizer(const BaseOptimizer &);
						        
							BaseOptimizer();
							virtual ~BaseOptimizer();
						}; // end class BaseOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class GoalType : public java::lang::Enum {
							public:
						            GoalType(jobject _jthis, bool copy);
						            GoalType(const GoalType &);
						        
							virtual ~GoalType();
							static jobjectArray values();
							static GoalType valueOf(jstring string_0);
						}; // end class GoalType
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class ConvergenceChecker : public java::lang::Object {
							public:
						            ConvergenceChecker(jobject _jthis, bool copy);
						            ConvergenceChecker(const ConvergenceChecker &);
						        
							ConvergenceChecker();
							virtual ~ConvergenceChecker();
						}; // end class ConvergenceChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class DifferentiableMultivariateOptimizer : public java::lang::Object {
							public:
						            DifferentiableMultivariateOptimizer(jobject _jthis, bool copy);
						            DifferentiableMultivariateOptimizer(const DifferentiableMultivariateOptimizer &);
						        
							DifferentiableMultivariateOptimizer();
							virtual ~DifferentiableMultivariateOptimizer();
						}; // end class DifferentiableMultivariateOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class Target : public java::lang::Object {
							public:
						            Target(jobject _jthis, bool copy);
						            Target(const Target &);
						        
							Target(jdoubleArray doubleArray_0);
							virtual ~Target();
							jdoubleArray getTarget();
						}; // end class Target
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class MultivariateDifferentiableOptimizer : public java::lang::Object {
							public:
						            MultivariateDifferentiableOptimizer(jobject _jthis, bool copy);
						            MultivariateDifferentiableOptimizer(const MultivariateDifferentiableOptimizer &);
						        
							MultivariateDifferentiableOptimizer();
							virtual ~MultivariateDifferentiableOptimizer();
						}; // end class MultivariateDifferentiableOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class BaseMultivariateVectorOptimizer : public java::lang::Object {
							public:
						            BaseMultivariateVectorOptimizer(jobject _jthis, bool copy);
						            BaseMultivariateVectorOptimizer(const BaseMultivariateVectorOptimizer &);
						        
							BaseMultivariateVectorOptimizer();
							virtual ~BaseMultivariateVectorOptimizer();
						}; // end class BaseMultivariateVectorOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class DifferentiableMultivariateVectorOptimizer : public java::lang::Object {
							public:
						            DifferentiableMultivariateVectorOptimizer(jobject _jthis, bool copy);
						            DifferentiableMultivariateVectorOptimizer(const DifferentiableMultivariateVectorOptimizer &);
						        
							DifferentiableMultivariateVectorOptimizer();
							virtual ~DifferentiableMultivariateVectorOptimizer();
						}; // end class DifferentiableMultivariateVectorOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class MultivariateDifferentiableVectorOptimizer : public java::lang::Object {
							public:
						            MultivariateDifferentiableVectorOptimizer(jobject _jthis, bool copy);
						            MultivariateDifferentiableVectorOptimizer(const MultivariateDifferentiableVectorOptimizer &);
						        
							MultivariateDifferentiableVectorOptimizer();
							virtual ~MultivariateDifferentiableVectorOptimizer();
						}; // end class MultivariateDifferentiableVectorOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class SimplePointChecker : public AbstractConvergenceChecker {
							public:
						            SimplePointChecker(jobject _jthis, bool copy);
						            SimplePointChecker(const SimplePointChecker &);
						        
							SimplePointChecker();
							SimplePointChecker(jdouble double_0,jdouble double_1,jint int_2);
							SimplePointChecker(jdouble double_0,jdouble double_1);
							virtual ~SimplePointChecker();
							jboolean converged(jint int_0,util::Pair pair_1,util::Pair pair_2);
						}; // end class SimplePointChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class DifferentiableMultivariateVectorMultiStartOptimizer : public BaseMultivariateVectorMultiStartOptimizer {
							public:
						            DifferentiableMultivariateVectorMultiStartOptimizer(jobject _jthis, bool copy);
						            DifferentiableMultivariateVectorMultiStartOptimizer(const DifferentiableMultivariateVectorMultiStartOptimizer &);
						        
							DifferentiableMultivariateVectorMultiStartOptimizer(DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer_0,jint int_1,random::RandomVectorGenerator randomVectorGenerator_2);
							virtual ~DifferentiableMultivariateVectorMultiStartOptimizer();
						}; // end class DifferentiableMultivariateVectorMultiStartOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace twod{
								
								class NeuronSquareMesh2D : public java::lang::Object {
									public:
								            NeuronSquareMesh2D(jobject _jthis, bool copy);
								            NeuronSquareMesh2D(const NeuronSquareMesh2D &);
								        
									NeuronSquareMesh2D(jint int_0,jboolean boolean_1,jint int_2,jboolean boolean_3,SquareNeighbourhood squareNeighbourhood_4,jobjectArray featureInitializerArray_5);
									virtual ~NeuronSquareMesh2D();
									Network getNetwork();
									jint getNumberOfRows();
									jint getNumberOfColumns();
									Neuron getNeuron(jint int_0,jint int_1);
								}; // end class NeuronSquareMesh2D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							
							class UpdateAction : public java::lang::Object {
								public:
							            UpdateAction(jobject _jthis, bool copy);
							            UpdateAction(const UpdateAction &);
							        
								UpdateAction();
								virtual ~UpdateAction();
							}; // end class UpdateAction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							
							class Network : public java::lang::Object {
								public:
							            Network(jobject _jthis, bool copy);
							            Network(const Network &);
							        
								Network(jlong long_0,jint int_1);
								virtual ~Network();
								Neuron getNeuron(jlong long_0);
								jlong createNeuron(jdoubleArray doubleArray_0);
								void addLink(Neuron neuron_0,Neuron neuron_1);
								java::util::Collection getNeurons(java::util::Comparator comparator_0);
								void deleteNeuron(Neuron neuron_0);
								jint getFeaturesSize();
								void deleteLink(Neuron neuron_0,Neuron neuron_1);
								java::util::Collection getNeighbours(java::lang::Iterable iterable_0,java::lang::Iterable iterable_1);
								java::util::Collection getNeighbours(java::lang::Iterable iterable_0);
								java::util::Collection getNeighbours(Neuron neuron_0);
								java::util::Collection getNeighbours(Neuron neuron_0,java::lang::Iterable iterable_1);
								java::util::Iterator iterator();
							}; // end class Network
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							
							class Neuron : public java::lang::Object {
								public:
							            Neuron(jobject _jthis, bool copy);
							            Neuron(const Neuron &);
							        
								virtual ~Neuron();
								jdoubleArray getFeatures();
								jlong getIdentifier();
								jboolean compareAndSetFeatures(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jint getSize();
							}; // end class Neuron
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							
							class SquareNeighbourhood : public java::lang::Enum {
								public:
							            SquareNeighbourhood(jobject _jthis, bool copy);
							            SquareNeighbourhood(const SquareNeighbourhood &);
							        
								virtual ~SquareNeighbourhood();
								static jobjectArray values();
								static SquareNeighbourhood valueOf(jstring string_0);
							}; // end class SquareNeighbourhood
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							
							class FeatureInitializer : public java::lang::Object {
								public:
							            FeatureInitializer(jobject _jthis, bool copy);
							            FeatureInitializer(const FeatureInitializer &);
							        
								FeatureInitializer();
								virtual ~FeatureInitializer();
							}; // end class FeatureInitializer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							
							class MapUtils : public java::lang::Object {
								public:
							            MapUtils(jobject _jthis, bool copy);
							            MapUtils(const MapUtils &);
							        
								virtual ~MapUtils();
								static util::Pair findBestAndSecondBest(jdoubleArray doubleArray_0,java::lang::Iterable iterable_1,distance::DistanceMeasure distanceMeasure_2);
								static jdouble computeQuantizationError(java::lang::Iterable iterable_0,java::lang::Iterable iterable_1,distance::DistanceMeasure distanceMeasure_2);
								static jdouble computeTopographicError(java::lang::Iterable iterable_0,Network network_1,distance::DistanceMeasure distanceMeasure_2);
								static Neuron findBest(jdoubleArray doubleArray_0,java::lang::Iterable iterable_1,distance::DistanceMeasure distanceMeasure_2);
							}; // end class MapUtils
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							
							class FeatureInitializerFactory : public java::lang::Object {
								public:
							            FeatureInitializerFactory(jobject _jthis, bool copy);
							            FeatureInitializerFactory(const FeatureInitializerFactory &);
							        
								virtual ~FeatureInitializerFactory();
								static FeatureInitializer uniform(jdouble double_0,jdouble double_1);
								static FeatureInitializer uniform(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
								static FeatureInitializer randomize(distribution::RealDistribution realDistribution_0,FeatureInitializer featureInitializer_1);
								static FeatureInitializer function(analysis::UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2);
							}; // end class FeatureInitializerFactory
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace neuralnet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							
							class EuclideanDistance : public java::lang::Object {
								public:
							            EuclideanDistance(jobject _jthis, bool copy);
							            EuclideanDistance(const EuclideanDistance &);
							        
								EuclideanDistance();
								virtual ~EuclideanDistance();
								jdouble compute(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class EuclideanDistance
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							
							class DistanceMeasure : public java::lang::Object {
								public:
							            DistanceMeasure(jobject _jthis, bool copy);
							            DistanceMeasure(const DistanceMeasure &);
							        
								DistanceMeasure();
								virtual ~DistanceMeasure();
							}; // end class DistanceMeasure
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							
							class ManhattanDistance : public java::lang::Object {
								public:
							            ManhattanDistance(jobject _jthis, bool copy);
							            ManhattanDistance(const ManhattanDistance &);
							        
								ManhattanDistance();
								virtual ~ManhattanDistance();
								jdouble compute(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class ManhattanDistance
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							
							class CanberraDistance : public java::lang::Object {
								public:
							            CanberraDistance(jobject _jthis, bool copy);
							            CanberraDistance(const CanberraDistance &);
							        
								CanberraDistance();
								virtual ~CanberraDistance();
								jdouble compute(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class CanberraDistance
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							
							class EarthMoversDistance : public java::lang::Object {
								public:
							            EarthMoversDistance(jobject _jthis, bool copy);
							            EarthMoversDistance(const EarthMoversDistance &);
							        
								EarthMoversDistance();
								virtual ~EarthMoversDistance();
								jdouble compute(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class EarthMoversDistance
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace distance{
							
							class ChebyshevDistance : public java::lang::Object {
								public:
							            ChebyshevDistance(jobject _jthis, bool copy);
							            ChebyshevDistance(const ChebyshevDistance &);
							        
								ChebyshevDistance();
								virtual ~ChebyshevDistance();
								jdouble compute(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class ChebyshevDistance
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace distance

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							namespace evaluation{
								
								class SumOfClusterVariances : public ClusterEvaluator {
									public:
								            SumOfClusterVariances(jobject _jthis, bool copy);
								            SumOfClusterVariances(const SumOfClusterVariances &);
								        
									SumOfClusterVariances(distance::DistanceMeasure distanceMeasure_0);
									virtual ~SumOfClusterVariances();
									jdouble score(java::util::List list_0);
								}; // end class SumOfClusterVariances
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace clustering
	} // end namespace evaluation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							
							class DBSCANClusterer : public Clusterer {
								public:
							            DBSCANClusterer(jobject _jthis, bool copy);
							            DBSCANClusterer(const DBSCANClusterer &);
							        
								DBSCANClusterer(jdouble double_0,jint int_1);
								DBSCANClusterer(jdouble double_0,jint int_1,distance::DistanceMeasure distanceMeasure_2);
								virtual ~DBSCANClusterer();
								java::util::List cluster(java::util::Collection collection_0);
								jdouble getEps();
								jint getMinPts();
							}; // end class DBSCANClusterer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							
							class KMeansPlusPlusClusterer : public Clusterer {
								public:
							            KMeansPlusPlusClusterer(jobject _jthis, bool copy);
							            KMeansPlusPlusClusterer(const KMeansPlusPlusClusterer &);
							        
								KMeansPlusPlusClusterer(jint int_0);
								KMeansPlusPlusClusterer(jint int_0,jint int_1,distance::DistanceMeasure distanceMeasure_2,random::RandomGenerator randomGenerator_3,KMeansPlusPlusClusterer::EmptyClusterStrategy emptyClusterStrategy_4);
								KMeansPlusPlusClusterer(jint int_0,jint int_1,distance::DistanceMeasure distanceMeasure_2,random::RandomGenerator randomGenerator_3);
								KMeansPlusPlusClusterer(jint int_0,jint int_1,distance::DistanceMeasure distanceMeasure_2);
								KMeansPlusPlusClusterer(jint int_0,jint int_1);
								virtual ~KMeansPlusPlusClusterer();
								jint getMaxIterations();
								java::util::List cluster(java::util::Collection collection_0);
								jint getK();
								random::RandomGenerator getRandomGenerator();
								KMeansPlusPlusClusterer::EmptyClusterStrategy getEmptyClusterStrategy();
							}; // end class KMeansPlusPlusClusterer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class RandomGenerator : public java::lang::Object {
							public:
						            RandomGenerator(jobject _jthis, bool copy);
						            RandomGenerator(const RandomGenerator &);
						        
							RandomGenerator();
							virtual ~RandomGenerator();
						}; // end class RandomGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class RandomVectorGenerator : public java::lang::Object {
							public:
						            RandomVectorGenerator(jobject _jthis, bool copy);
						            RandomVectorGenerator(const RandomVectorGenerator &);
						        
							RandomVectorGenerator();
							virtual ~RandomVectorGenerator();
						}; // end class RandomVectorGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class Well19937c : public AbstractWell {
							public:
						            Well19937c(jobject _jthis, bool copy);
						            Well19937c(const Well19937c &);
						        
							Well19937c(jlong long_0);
							Well19937c(jintArray intArray_0);
							Well19937c(jint int_0);
							Well19937c();
							virtual ~Well19937c();
						}; // end class Well19937c
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class RandomDataImpl : public java::lang::Object {
							public:
						            RandomDataImpl(jobject _jthis, bool copy);
						            RandomDataImpl(const RandomDataImpl &);
						        
							RandomDataImpl(RandomGenerator randomGenerator_0);
							RandomDataImpl();
							virtual ~RandomDataImpl();
							jlong nextLong(jlong long_0,jlong long_1);
							jdouble nextGaussian(jdouble double_0,jdouble double_1);
							jdouble nextT(jdouble double_0);
							jstring nextSecureHexString(jint int_0);
							jlong nextSecureLong(jlong long_0,jlong long_1);
							jlong nextPoisson(jdouble double_0);
							jdouble nextExponential(jdouble double_0);
							jdouble nextUniform(jdouble double_0,jdouble double_1);
							jdouble nextUniform(jdouble double_0,jdouble double_1,jboolean boolean_2);
							jdouble nextBeta(jdouble double_0,jdouble double_1);
							jint nextBinomial(jint int_0,jdouble double_1);
							jdouble nextCauchy(jdouble double_0,jdouble double_1);
							jdouble nextChiSquare(jdouble double_0);
							jdouble nextF(jdouble double_0,jdouble double_1);
							jdouble nextGamma(jdouble double_0,jdouble double_1);
							jint nextHypergeometric(jint int_0,jint int_1,jint int_2);
							jint nextPascal(jint int_0,jdouble double_1);
							jdouble nextWeibull(jdouble double_0,jdouble double_1);
							jint nextZipf(jint int_0,jdouble double_1);
							void reSeed();
							void reSeed(jlong long_0);
							void reSeedSecure();
							void reSeedSecure(jlong long_0);
							void setSecureAlgorithm(jstring string_0,jstring string_1);
							jintArray nextPermutation(jint int_0,jint int_1);
							jdouble nextInversionDeviate(distribution::RealDistribution realDistribution_0);
							jint nextInversionDeviate(distribution::IntegerDistribution integerDistribution_0);
							jstring nextHexString(jint int_0);
							jint nextSecureInt(jint int_0,jint int_1);
							jint nextInt(jint int_0,jint int_1);
						}; // end class RandomDataImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class HaltonSequenceGenerator : public java::lang::Object {
							public:
						            HaltonSequenceGenerator(jobject _jthis, bool copy);
						            HaltonSequenceGenerator(const HaltonSequenceGenerator &);
						        
							HaltonSequenceGenerator(jint int_0);
							HaltonSequenceGenerator(jint int_0,jintArray intArray_1,jintArray intArray_2);
							virtual ~HaltonSequenceGenerator();
							jdoubleArray nextVector();
							jdoubleArray skipTo(jint int_0);
							jint getNextIndex();
						}; // end class HaltonSequenceGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class CorrelatedRandomVectorGenerator : public java::lang::Object {
							public:
						            CorrelatedRandomVectorGenerator(jobject _jthis, bool copy);
						            CorrelatedRandomVectorGenerator(const CorrelatedRandomVectorGenerator &);
						        
							CorrelatedRandomVectorGenerator(linear::RealMatrix realMatrix_0,jdouble double_1,NormalizedRandomGenerator normalizedRandomGenerator_2);
							CorrelatedRandomVectorGenerator(jdoubleArray doubleArray_0,linear::RealMatrix realMatrix_1,jdouble double_2,NormalizedRandomGenerator normalizedRandomGenerator_3);
							virtual ~CorrelatedRandomVectorGenerator();
							jdoubleArray nextVector();
							NormalizedRandomGenerator getGenerator();
							jint getRank();
							linear::RealMatrix getRootMatrix();
						}; // end class CorrelatedRandomVectorGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class NormalizedRandomGenerator : public java::lang::Object {
							public:
						            NormalizedRandomGenerator(jobject _jthis, bool copy);
						            NormalizedRandomGenerator(const NormalizedRandomGenerator &);
						        
							NormalizedRandomGenerator();
							virtual ~NormalizedRandomGenerator();
						}; // end class NormalizedRandomGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class AbstractRandomGenerator : public java::lang::Object {
							public:
						            AbstractRandomGenerator(jobject _jthis, bool copy);
						            AbstractRandomGenerator(const AbstractRandomGenerator &);
						        
							AbstractRandomGenerator();
							virtual ~AbstractRandomGenerator();
							void setSeed(jintArray intArray_0);
							void setSeed(jint int_0);
							void nextBytes(jbyteArray byteArray_0);
							jlong nextLong();
							jboolean nextBoolean();
							jfloat nextFloat();
							jdouble nextGaussian();
							void clear();
							jint nextInt();
							jint nextInt(jint int_0);
						}; // end class AbstractRandomGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class ISAACRandom : public BitsStreamGenerator {
							public:
						            ISAACRandom(jobject _jthis, bool copy);
						            ISAACRandom(const ISAACRandom &);
						        
							ISAACRandom(jlong long_0);
							ISAACRandom(jintArray intArray_0);
							ISAACRandom();
							virtual ~ISAACRandom();
							void setSeed(jint int_0);
							void setSeed(jlong long_0);
							void setSeed(jintArray intArray_0);
						}; // end class ISAACRandom
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class GaussianRandomGenerator : public java::lang::Object {
							public:
						            GaussianRandomGenerator(jobject _jthis, bool copy);
						            GaussianRandomGenerator(const GaussianRandomGenerator &);
						        
							GaussianRandomGenerator(RandomGenerator randomGenerator_0);
							virtual ~GaussianRandomGenerator();
							jdouble nextNormalizedDouble();
						}; // end class GaussianRandomGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class UnitSphereRandomVectorGenerator : public java::lang::Object {
							public:
						            UnitSphereRandomVectorGenerator(jobject _jthis, bool copy);
						            UnitSphereRandomVectorGenerator(const UnitSphereRandomVectorGenerator &);
						        
							UnitSphereRandomVectorGenerator(jint int_0);
							UnitSphereRandomVectorGenerator(jint int_0,RandomGenerator randomGenerator_1);
							virtual ~UnitSphereRandomVectorGenerator();
							jdoubleArray nextVector();
						}; // end class UnitSphereRandomVectorGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class RandomAdaptor : public java::util::Random {
							public:
						            RandomAdaptor(jobject _jthis, bool copy);
						            RandomAdaptor(const RandomAdaptor &);
						        
							RandomAdaptor(RandomGenerator randomGenerator_0);
							virtual ~RandomAdaptor();
							void setSeed(jint int_0);
							void setSeed(jintArray intArray_0);
							void setSeed(jlong long_0);
							void nextBytes(jbyteArray byteArray_0);
							jlong nextLong();
							jboolean nextBoolean();
							jfloat nextFloat();
							jdouble nextGaussian();
							static java::util::Random createAdaptor(RandomGenerator randomGenerator_0);
							jdouble nextDouble();
							jint nextInt(jint int_0);
							jint nextInt();
						}; // end class RandomAdaptor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class Well44497b : public AbstractWell {
							public:
						            Well44497b(jobject _jthis, bool copy);
						            Well44497b(const Well44497b &);
						        
							Well44497b(jlong long_0);
							Well44497b(jintArray intArray_0);
							Well44497b(jint int_0);
							Well44497b();
							virtual ~Well44497b();
						}; // end class Well44497b
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class EmpiricalDistribution : public distribution::AbstractRealDistribution {
							public:
						            EmpiricalDistribution(jobject _jthis, bool copy);
						            EmpiricalDistribution(const EmpiricalDistribution &);
						        
							EmpiricalDistribution(RandomDataImpl randomDataImpl_0);
							EmpiricalDistribution(jint int_0,RandomDataImpl randomDataImpl_1);
							EmpiricalDistribution(RandomGenerator randomGenerator_0);
							EmpiricalDistribution(jint int_0,RandomGenerator randomGenerator_1);
							EmpiricalDistribution(jint int_0);
							EmpiricalDistribution();
							virtual ~EmpiricalDistribution();
							jboolean isLoaded();
							jdouble probability(jdouble double_0);
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							void reseedRandomGenerator(jlong long_0);
							void reSeed(jlong long_0);
							jdouble getNextValue();
							stat::descriptive::StatisticalSummary getSampleStats();
							jint getBinCount();
							java::util::List getBinStats();
							jdoubleArray getUpperBounds();
							jdoubleArray getGeneratorUpperBounds();
							void load(jdoubleArray doubleArray_0);
							void load(java::net::URL uRL_0);
							void load(java::io::File file_0);
						}; // end class EmpiricalDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class Well19937a : public AbstractWell {
							public:
						            Well19937a(jobject _jthis, bool copy);
						            Well19937a(const Well19937a &);
						        
							Well19937a(jlong long_0);
							Well19937a(jintArray intArray_0);
							Well19937a(jint int_0);
							Well19937a();
							virtual ~Well19937a();
						}; // end class Well19937a
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class StableRandomGenerator : public java::lang::Object {
							public:
						            StableRandomGenerator(jobject _jthis, bool copy);
						            StableRandomGenerator(const StableRandomGenerator &);
						        
							StableRandomGenerator(RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							virtual ~StableRandomGenerator();
							jdouble nextNormalizedDouble();
						}; // end class StableRandomGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							
							class OLSMultipleLinearRegression : public AbstractMultipleLinearRegression {
								public:
							            OLSMultipleLinearRegression(jobject _jthis, bool copy);
							            OLSMultipleLinearRegression(const OLSMultipleLinearRegression &);
							        
								OLSMultipleLinearRegression(jdouble double_0);
								OLSMultipleLinearRegression();
								virtual ~OLSMultipleLinearRegression();
								void newSampleData(jdoubleArray doubleArray_0,jint int_1,jint int_2);
								linear::RealMatrix calculateHat();
								jdouble calculateTotalSumOfSquares();
								jdouble calculateResidualSumOfSquares();
								jdouble calculateRSquared();
								jdouble calculateAdjustedRSquared();
							}; // end class OLSMultipleLinearRegression
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							
							class MultipleLinearRegression : public java::lang::Object {
								public:
							            MultipleLinearRegression(jobject _jthis, bool copy);
							            MultipleLinearRegression(const MultipleLinearRegression &);
							        
								MultipleLinearRegression();
								virtual ~MultipleLinearRegression();
							}; // end class MultipleLinearRegression
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class StandardDeviation : public AbstractStorelessUnivariateStatistic {
									public:
								            StandardDeviation(jobject _jthis, bool copy);
								            StandardDeviation(const StandardDeviation &);
								        
									StandardDeviation();
									StandardDeviation(jboolean boolean_0,SecondMoment secondMoment_1);
									StandardDeviation(jboolean boolean_0);
									StandardDeviation(SecondMoment secondMoment_0);
									StandardDeviation(StandardDeviation standardDeviation_0);
									virtual ~StandardDeviation();
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jdouble evaluate(jdoubleArray doubleArray_0,jdouble double_1,jint int_2,jint int_3);
									jdouble evaluate(jdoubleArray doubleArray_0,jdouble double_1);
									jdouble evaluate(jdoubleArray doubleArray_0);
									jlong getN();
									jboolean isBiasCorrected();
									void setBiasCorrected(jboolean boolean_0);
									void clear();
									void increment(jdouble double_0);
									static void copy(StandardDeviation standardDeviation_0,StandardDeviation standardDeviation_1);
									StandardDeviation copy();
									jdouble getResult();
								}; // end class StandardDeviation
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class FourthMoment : public ThirdMoment {
									public:
								            FourthMoment(jobject _jthis, bool copy);
								            FourthMoment(const FourthMoment &);
								        
									FourthMoment();
									FourthMoment(FourthMoment fourthMoment_0);
									virtual ~FourthMoment();
									void clear();
									void increment(jdouble double_0);
									FourthMoment copy();
									static void copy(FourthMoment fourthMoment_0,FourthMoment fourthMoment_1);
									jdouble getResult();
								}; // end class FourthMoment
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						
						class RootsOfUnity : public java::lang::Object {
							public:
						            RootsOfUnity(jobject _jthis, bool copy);
						            RootsOfUnity(const RootsOfUnity &);
						        
							RootsOfUnity();
							virtual ~RootsOfUnity();
							jdouble getReal(jint int_0);
							jdouble getImaginary(jint int_0);
							jint getNumberOfRoots();
							jboolean isCounterClockWise();
							void computeRoots(jint int_0);
						}; // end class RootsOfUnity
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace gradient{
									
									class NonLinearConjugateGradientOptimizer : public GradientMultivariateOptimizer {
										public:
									            NonLinearConjugateGradientOptimizer(jobject _jthis, bool copy);
									            NonLinearConjugateGradientOptimizer(const NonLinearConjugateGradientOptimizer &);
									        
										virtual ~NonLinearConjugateGradientOptimizer();
										PointValuePair optimize(jobjectArray optimizationDataArray_0);
									}; // end class NonLinearConjugateGradientOptimizer
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace gradient

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									
									class BOBYQAOptimizer : public MultivariateOptimizer {
										public:
									            BOBYQAOptimizer(jobject _jthis, bool copy);
									            BOBYQAOptimizer(const BOBYQAOptimizer &);
									        
										BOBYQAOptimizer(jint int_0);
										BOBYQAOptimizer(jint int_0,jdouble double_1,jdouble double_2);
										virtual ~BOBYQAOptimizer();
									}; // end class BOBYQAOptimizer
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							
							class MultiStartUnivariateOptimizer : public UnivariateOptimizer {
								public:
							            MultiStartUnivariateOptimizer(jobject _jthis, bool copy);
							            MultiStartUnivariateOptimizer(const MultiStartUnivariateOptimizer &);
							        
								MultiStartUnivariateOptimizer(UnivariateOptimizer univariateOptimizer_0,jint int_1,random::RandomGenerator randomGenerator_2);
								virtual ~MultiStartUnivariateOptimizer();
								jint getEvaluations();
								jobjectArray getOptima();
								UnivariatePointValuePair optimize(jobjectArray optimizationDataArray_0);
							}; // end class MultiStartUnivariateOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							
							class SearchInterval : public java::lang::Object {
								public:
							            SearchInterval(jobject _jthis, bool copy);
							            SearchInterval(const SearchInterval &);
							        
								SearchInterval(jdouble double_0,jdouble double_1);
								SearchInterval(jdouble double_0,jdouble double_1,jdouble double_2);
								virtual ~SearchInterval();
								jdouble getMax();
								jdouble getStartValue();
								jdouble getMin();
							}; // end class SearchInterval
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class BigFractionField : public java::lang::Object {
							public:
						            BigFractionField(jobject _jthis, bool copy);
						            BigFractionField(const BigFractionField &);
						        
							virtual ~BigFractionField();
							BigFraction getZero();
							BigFraction getOne();
							static BigFractionField getInstance();
						}; // end class BigFractionField
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class LogNormalDistribution : public AbstractRealDistribution {
							public:
						            LogNormalDistribution(jobject _jthis, bool copy);
						            LogNormalDistribution(const LogNormalDistribution &);
						        
							LogNormalDistribution(jdouble double_0,jdouble double_1);
							LogNormalDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							LogNormalDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							LogNormalDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							LogNormalDistribution();
							virtual ~LogNormalDistribution();
							jdouble getShape();
							jdouble getScale();
							jdouble probability(jdouble double_0,jdouble double_1);
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0,jdouble double_1);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble sample();
							jdouble logDensity(jdouble double_0);
						}; // end class LogNormalDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class TriangularDistribution : public AbstractRealDistribution {
							public:
						            TriangularDistribution(jobject _jthis, bool copy);
						            TriangularDistribution(const TriangularDistribution &);
						        
							TriangularDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							TriangularDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							virtual ~TriangularDistribution();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble getMode();
						}; // end class TriangularDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class PoissonDistribution : public AbstractIntegerDistribution {
							public:
						            PoissonDistribution(jobject _jthis, bool copy);
						            PoissonDistribution(const PoissonDistribution &);
						        
							PoissonDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jint int_3);
							PoissonDistribution(jdouble double_0,jdouble double_1,jint int_2);
							PoissonDistribution(jdouble double_0);
							PoissonDistribution(jdouble double_0,jdouble double_1);
							PoissonDistribution(jdouble double_0,jint int_1);
							virtual ~PoissonDistribution();
							jdouble probability(jint int_0);
							jdouble cumulativeProbability(jint int_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jint getSupportLowerBound();
							jint getSupportUpperBound();
							jboolean isSupportConnected();
							jint sample();
							jdouble getMean();
							jdouble logProbability(jint int_0);
							jdouble normalApproximateProbability(jint int_0);
						}; // end class PoissonDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class ChiSquaredDistribution : public AbstractRealDistribution {
							public:
						            ChiSquaredDistribution(jobject _jthis, bool copy);
						            ChiSquaredDistribution(const ChiSquaredDistribution &);
						        
							ChiSquaredDistribution(jdouble double_0);
							ChiSquaredDistribution(jdouble double_0,jdouble double_1);
							ChiSquaredDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1);
							ChiSquaredDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							virtual ~ChiSquaredDistribution();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble logDensity(jdouble double_0);
							jdouble getDegreesOfFreedom();
						}; // end class ChiSquaredDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class BSPTreeVisitor : public java::lang::Object {
								public:
							            BSPTreeVisitor(jobject _jthis, bool copy);
							            BSPTreeVisitor(const BSPTreeVisitor &);
							        
								BSPTreeVisitor();
								virtual ~BSPTreeVisitor();
							}; // end class BSPTreeVisitor
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class NonPositiveDefiniteOperatorException : public exception::MathIllegalArgumentException {
							public:
						            NonPositiveDefiniteOperatorException(jobject _jthis, bool copy);
						            NonPositiveDefiniteOperatorException(const NonPositiveDefiniteOperatorException &);
						        
							NonPositiveDefiniteOperatorException();
							virtual ~NonPositiveDefiniteOperatorException();
						}; // end class NonPositiveDefiniteOperatorException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class ConjugateGradient : public PreconditionedIterativeLinearSolver {
							public:
						            ConjugateGradient(jobject _jthis, bool copy);
						            ConjugateGradient(const ConjugateGradient &);
						        
							ConjugateGradient(util::IterationManager iterationManager_0,jdouble double_1,jboolean boolean_2);
							ConjugateGradient(jint int_0,jdouble double_1,jboolean boolean_2);
							virtual ~ConjugateGradient();
							virtual jboolean getCheck();
							RealVector solveInPlace(RealLinearOperator realLinearOperator_0,RealLinearOperator realLinearOperator_1,RealVector realVector_2,RealVector realVector_3);
						}; // end class ConjugateGradient
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class NonSquareMatrixException : public exception::DimensionMismatchException {
							public:
						            NonSquareMatrixException(jobject _jthis, bool copy);
						            NonSquareMatrixException(const NonSquareMatrixException &);
						        
							NonSquareMatrixException(jint int_0,jint int_1);
							virtual ~NonSquareMatrixException();
						}; // end class NonSquareMatrixException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class AnyMatrix : public java::lang::Object {
							public:
						            AnyMatrix(jobject _jthis, bool copy);
						            AnyMatrix(const AnyMatrix &);
						        
							AnyMatrix();
							virtual ~AnyMatrix();
						}; // end class AnyMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class CompositeFormat : public java::lang::Object {
							public:
						            CompositeFormat(jobject _jthis, bool copy);
						            CompositeFormat(const CompositeFormat &);
						        
							virtual ~CompositeFormat();
							static java::text::NumberFormat getDefaultNumberFormat(java::util::Locale locale_0);
							static java::text::NumberFormat getDefaultNumberFormat();
							static java::lang::StringBuffer formatDouble(jdouble double_0,java::text::NumberFormat numberFormat_1,java::lang::StringBuffer stringBuffer_2,java::text::FieldPosition fieldPosition_3);
							static void parseAndIgnoreWhitespace(jstring string_0,java::text::ParsePosition parsePosition_1);
							static jboolean parseFixedstring(jstring string_0,jstring string_1,java::text::ParsePosition parsePosition_2);
							static java::lang::Number parseNumber(jstring string_0,java::text::NumberFormat numberFormat_1,java::text::ParsePosition parsePosition_2);
							static jchar parseNextCharacter(jstring string_0,java::text::ParsePosition parsePosition_1);
						}; // end class CompositeFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class TransformerMap : public java::lang::Object {
							public:
						            TransformerMap(jobject _jthis, bool copy);
						            TransformerMap(const TransformerMap &);
						        
							TransformerMap();
							virtual ~TransformerMap();
							java::util::Collection transformers();
							jboolean containsTransformer(NumberTransformer numberTransformer_0);
							jint hashCode();
							void clear();
							java::util::Set classes();
						}; // end class TransformerMap
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class MultidimensionalCounter : public java::lang::Object {
							public:
						            MultidimensionalCounter(jobject _jthis, bool copy);
						            MultidimensionalCounter(const MultidimensionalCounter &);
						        
							MultidimensionalCounter(jintArray intArray_0);
							virtual ~MultidimensionalCounter();
							jint getDimension();
							jint getCount(jintArray intArray_0);
							jintArray getCounts(jint int_0);
							jintArray getSizes();
							jstring toString();
							MultidimensionalCounter::Iterator iterator();
							jint getSize();
						}; // end class MultidimensionalCounter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace crcl{
		namespace base{
			
			class JointSpeedAccelType : public JointDetailsType {
				public:
			            JointSpeedAccelType(jobject _jthis, bool copy);
			            JointSpeedAccelType(const JointSpeedAccelType &);
			        
				JointSpeedAccelType();
				virtual ~JointSpeedAccelType();
				void setJointAccel(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getJointSpeed();
				void setJointSpeed(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getJointAccel();
			}; // end class JointSpeedAccelType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetIntermediatePoseToleranceType : public MiddleCommandType {
				public:
			            SetIntermediatePoseToleranceType(jobject _jthis, bool copy);
			            SetIntermediatePoseToleranceType(const SetIntermediatePoseToleranceType &);
			        
				SetIntermediatePoseToleranceType();
				virtual ~SetIntermediatePoseToleranceType();
				void setTolerance(PoseToleranceType poseToleranceType_0);
				PoseToleranceType getTolerance();
			}; // end class SetIntermediatePoseToleranceType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetEndPoseToleranceType : public MiddleCommandType {
				public:
			            SetEndPoseToleranceType(jobject _jthis, bool copy);
			            SetEndPoseToleranceType(const SetEndPoseToleranceType &);
			        
				SetEndPoseToleranceType();
				virtual ~SetEndPoseToleranceType();
				void setTolerance(PoseToleranceType poseToleranceType_0);
				PoseToleranceType getTolerance();
			}; // end class SetEndPoseToleranceType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class EndCanonType : public CRCLCommandType {
				public:
			            EndCanonType(jobject _jthis, bool copy);
			            EndCanonType(const EndCanonType &);
			        
				EndCanonType();
				virtual ~EndCanonType();
			}; // end class EndCanonType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetRobotParametersType : public MiddleCommandType {
				public:
			            SetRobotParametersType(jobject _jthis, bool copy);
			            SetRobotParametersType(const SetRobotParametersType &);
			        
				SetRobotParametersType();
				virtual ~SetRobotParametersType();
				java::util::List getParameterSetting();
			}; // end class SetRobotParametersType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class ByteOrderMark : public java::lang::Object {
						public:
					            ByteOrderMark(jobject _jthis, bool copy);
					            ByteOrderMark(const ByteOrderMark &);
					        
						ByteOrderMark(jstring string_0,jintArray intArray_1);
						virtual ~ByteOrderMark();
						jstring getCharsetName();
						jint get(jint int_0);
						jstring toString();
						jint hashCode();
						jint length();
						jbyteArray getBytes();
					}; // end class ByteOrderMark
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class NameFileComparator : public AbstractFileComparator {
							public:
						            NameFileComparator(jobject _jthis, bool copy);
						            NameFileComparator(const NameFileComparator &);
						        
							NameFileComparator();
							NameFileComparator(IOCase iOCase_0);
							virtual ~NameFileComparator();
							jstring toString();
							jint compare(java::io::File file_0,java::io::File file_1);
						}; // end class NameFileComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class ReverseComparator : public AbstractFileComparator {
							public:
						            ReverseComparator(jobject _jthis, bool copy);
						            ReverseComparator(const ReverseComparator &);
						        
							ReverseComparator(java::util::Comparator comparator_0);
							virtual ~ReverseComparator();
							jstring toString();
							jint compare(java::io::File file_0,java::io::File file_1);
						}; // end class ReverseComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class FileCleaner : public java::lang::Object {
						public:
					            FileCleaner(jobject _jthis, bool copy);
					            FileCleaner(const FileCleaner &);
					        
						FileCleaner();
						virtual ~FileCleaner();
						static jint getTrackCount();
						static void exitWhenFinished();
						static FileCleaningTracker getInstance();
					}; // end class FileCleaner
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class AgeFileFilter : public AbstractFileFilter {
							public:
						            AgeFileFilter(jobject _jthis, bool copy);
						            AgeFileFilter(const AgeFileFilter &);
						        
							AgeFileFilter(java::io::File file_0,jboolean boolean_1);
							AgeFileFilter(java::io::File file_0);
							AgeFileFilter(java::util::Date date_0,jboolean boolean_1);
							AgeFileFilter(jlong long_0);
							AgeFileFilter(jlong long_0,jboolean boolean_1);
							AgeFileFilter(java::util::Date date_0);
							virtual ~AgeFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0);
						}; // end class AgeFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class NotFileFilter : public AbstractFileFilter {
							public:
						            NotFileFilter(jobject _jthis, bool copy);
						            NotFileFilter(const NotFileFilter &);
						        
							NotFileFilter(IOFileFilter iOFileFilter_0);
							virtual ~NotFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0);
							jboolean accept(java::io::File file_0,jstring string_1);
						}; // end class NotFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class WildcardFilter : public AbstractFileFilter {
							public:
						            WildcardFilter(jobject _jthis, bool copy);
						            WildcardFilter(const WildcardFilter &);
						        
							WildcardFilter(java::util::List list_0);
							WildcardFilter(jobjectArray stringArray_0);
							WildcardFilter(jstring string_0);
							virtual ~WildcardFilter();
							jboolean accept(java::io::File file_0,jstring string_1);
							jboolean accept(java::io::File file_0);
						}; // end class WildcardFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class BinaryHexDatatype : public AbstractBinaryDatatype {
							public:
						            BinaryHexDatatype(jobject _jthis, bool copy);
						            BinaryHexDatatype(const BinaryHexDatatype &);
						        
							BinaryHexDatatype(context::QNameContext qNameContext_0);
							virtual ~BinaryHexDatatype();
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
						}; // end class BinaryHexDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class XSDBooleanCharacterSet : public AbstractRestrictedCharacterSet {
								public:
							            XSDBooleanCharacterSet(jobject _jthis, bool copy);
							            XSDBooleanCharacterSet(const XSDBooleanCharacterSet &);
							        
								XSDBooleanCharacterSet();
								virtual ~XSDBooleanCharacterSet();
							}; // end class XSDBooleanCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class XSDDoubleCharacterSet : public AbstractRestrictedCharacterSet {
								public:
							            XSDDoubleCharacterSet(jobject _jthis, bool copy);
							            XSDDoubleCharacterSet(const XSDDoubleCharacterSet &);
							        
								XSDDoubleCharacterSet();
								virtual ~XSDDoubleCharacterSet();
							}; // end class XSDDoubleCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class XSDIntegerCharacterSet : public AbstractRestrictedCharacterSet {
								public:
							            XSDIntegerCharacterSet(jobject _jthis, bool copy);
							            XSDIntegerCharacterSet(const XSDIntegerCharacterSet &);
							        
								XSDIntegerCharacterSet();
								virtual ~XSDIntegerCharacterSet();
							}; // end class XSDIntegerCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class Datatype : public java::lang::Object {
							public:
						            Datatype(jobject _jthis, bool copy);
						            Datatype(const Datatype &);
						        
							Datatype();
							virtual ~Datatype();
						}; // end class Datatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class DecimalDatatype : public AbstractDatatype {
							public:
						            DecimalDatatype(jobject _jthis, bool copy);
						            DecimalDatatype(const DecimalDatatype &);
						        
							DecimalDatatype(context::QNameContext qNameContext_0);
							virtual ~DecimalDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
						}; // end class DecimalDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class FloatDatatype : public AbstractDatatype {
							public:
						            FloatDatatype(jobject _jthis, bool copy);
						            FloatDatatype(const FloatDatatype &);
						        
							FloatDatatype(context::QNameContext qNameContext_0);
							virtual ~FloatDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
						}; // end class FloatDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class IntegerDatatype : public AbstractDatatype {
							public:
						            IntegerDatatype(jobject _jthis, bool copy);
						            IntegerDatatype(const IntegerDatatype &);
						        
							IntegerDatatype(context::QNameContext qNameContext_0);
							virtual ~IntegerDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
						}; // end class IntegerDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class NBitUnsignedIntegerDatatype : public AbstractDatatype {
							public:
						            NBitUnsignedIntegerDatatype(jobject _jthis, bool copy);
						            NBitUnsignedIntegerDatatype(const NBitUnsignedIntegerDatatype &);
						        
							NBitUnsignedIntegerDatatype(values::IntegerValue integerValue_0,values::IntegerValue integerValue_1,context::QNameContext qNameContext_2);
							virtual ~NBitUnsignedIntegerDatatype();
							jboolean isValid(values::Value value_0);
							values::IntegerValue getLowerBound();
							values::IntegerValue getUpperBound();
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
							jint getNumberOfBits();
						}; // end class NBitUnsignedIntegerDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class StringDatatype : public AbstractDatatype {
							public:
						            StringDatatype(jobject _jthis, bool copy);
						            StringDatatype(const StringDatatype &);
						        
							StringDatatype(context::QNameContext qNameContext_0,jboolean boolean_1);
							StringDatatype(context::QNameContext qNameContext_0);
							virtual ~StringDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
							jboolean isDerivedByUnion();
						}; // end class StringDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							
							class BoundedStringEncoderImpl : public StringEncoderImpl {
								public:
							            BoundedStringEncoderImpl(jobject _jthis, bool copy);
							            BoundedStringEncoderImpl(const BoundedStringEncoderImpl &);
							        
								BoundedStringEncoderImpl(jboolean boolean_0,jint int_1,jint int_2);
								virtual ~BoundedStringEncoderImpl();
								void addValue(context::QNameContext qNameContext_0,jstring string_1);
								void clear();
							}; // end class BoundedStringEncoderImpl
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							
							class StringDecoder : public java::lang::Object {
								public:
							            StringDecoder(jobject _jthis, bool copy);
							            StringDecoder(const StringDecoder &);
							        
								StringDecoder();
								virtual ~StringDecoder();
							}; // end class StringDecoder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							
							class StringEncoder : public java::lang::Object {
								public:
							            StringEncoder(jobject _jthis, bool copy);
							            StringEncoder(const StringEncoder &);
							        
								StringEncoder();
								virtual ~StringEncoder();
							}; // end class StringEncoder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class UnsignedIntegerDatatype : public AbstractDatatype {
							public:
						            UnsignedIntegerDatatype(jobject _jthis, bool copy);
						            UnsignedIntegerDatatype(const UnsignedIntegerDatatype &);
						        
							UnsignedIntegerDatatype(context::QNameContext qNameContext_0);
							virtual ~UnsignedIntegerDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
						}; // end class UnsignedIntegerDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class EncodingOptions : public java::lang::Object {
						public:
					            EncodingOptions(jobject _jthis, bool copy);
					            EncodingOptions(const EncodingOptions &);
					        
						virtual ~EncodingOptions();
						static EncodingOptions createDefault();
						jboolean isOptionEnabled(jstring string_0);
						void setOption(jstring string_0);
						jboolean unsetOption(jstring string_0);
						jstring toString();
						jint hashCode();
					}; // end class EncodingOptions
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class EXIBodyDecoder : public java::lang::Object {
						public:
					            EXIBodyDecoder(jobject _jthis, bool copy);
					            EXIBodyDecoder(const EXIBodyDecoder &);
					        
						EXIBodyDecoder();
						virtual ~EXIBodyDecoder();
					}; // end class EXIBodyDecoder
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class EXIFactory : public java::lang::Object {
						public:
					            EXIFactory(jobject _jthis, bool copy);
					            EXIFactory(const EXIFactory &);
					        
						EXIFactory();
						virtual ~EXIFactory();
					}; // end class EXIFactory
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class EXIStreamEncoder : public java::lang::Object {
						public:
					            EXIStreamEncoder(jobject _jthis, bool copy);
					            EXIStreamEncoder(const EXIStreamEncoder &);
					        
						EXIStreamEncoder(EXIFactory eXIFactory_0);
						virtual ~EXIStreamEncoder();
						EXIBodyEncoder encodeHeader(java::io::OutputStream outputStream_0);
					}; // end class EXIStreamEncoder
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class GrammarFactory : public java::lang::Object {
						public:
					            GrammarFactory(jobject _jthis, bool copy);
					            GrammarFactory(const GrammarFactory &);
					        
						virtual ~GrammarFactory();
						grammars::Grammars createSchemaLessGrammars();
						grammars::Grammars createGrammars(jstring string_0,org::apache::xerces::xni::parser::XMLEntityResolver xMLEntityResolver_1);
						grammars::Grammars createGrammars(java::io::InputStream inputStream_0);
						grammars::Grammars createGrammars(java::io::InputStream inputStream_0,org::apache::xerces::xni::parser::XMLEntityResolver xMLEntityResolver_1);
						grammars::Grammars createGrammars(jstring string_0);
						grammars::Grammars createXSDTypesOnlyGrammars();
						static GrammarFactory newInstance();
					}; // end class GrammarFactory
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class AttributeGeneric : public AbstractEvent {
								public:
							            AttributeGeneric(jobject _jthis, bool copy);
							            AttributeGeneric(const AttributeGeneric &);
							        
								AttributeGeneric();
								virtual ~AttributeGeneric();
							}; // end class AttributeGeneric
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class AttributeNS : public AbstractEvent {
								public:
							            AttributeNS(jobject _jthis, bool copy);
							            AttributeNS(const AttributeNS &);
							        
								AttributeNS(jint int_0,jstring string_1);
								virtual ~AttributeNS();
								jstring getNamespaceURI();
								jint getNamespaceUriID();
								jstring toString();
								jint hashCode();
							}; // end class AttributeNS
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class Comment : public AbstractEvent {
								public:
							            Comment(jobject _jthis, bool copy);
							            Comment(const Comment &);
							        
								Comment();
								virtual ~Comment();
							}; // end class Comment
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class DocType : public AbstractEvent {
								public:
							            DocType(jobject _jthis, bool copy);
							            DocType(const DocType &);
							        
								DocType();
								virtual ~DocType();
							}; // end class DocType
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class EndElement : public AbstractEvent {
								public:
							            EndElement(jobject _jthis, bool copy);
							            EndElement(const EndElement &);
							        
								EndElement();
								virtual ~EndElement();
							}; // end class EndElement
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class Event : public java::lang::Object {
								public:
							            Event(jobject _jthis, bool copy);
							            Event(const Event &);
							        
								Event();
								virtual ~Event();
							}; // end class Event
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class EventType : public java::lang::Enum {
								public:
							            EventType(jobject _jthis, bool copy);
							            EventType(const EventType &);
							        
								virtual ~EventType();
								static jobjectArray values();
								static EventType valueOf(jstring string_0);
							}; // end class EventType
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class NamespaceDeclaration : public AbstractEvent {
								public:
							            NamespaceDeclaration(jobject _jthis, bool copy);
							            NamespaceDeclaration(const NamespaceDeclaration &);
							        
								NamespaceDeclaration();
								virtual ~NamespaceDeclaration();
							}; // end class NamespaceDeclaration
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class ProcessingInstruction : public AbstractEvent {
								public:
							            ProcessingInstruction(jobject _jthis, bool copy);
							            ProcessingInstruction(const ProcessingInstruction &);
							        
								ProcessingInstruction();
								virtual ~ProcessingInstruction();
							}; // end class ProcessingInstruction
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class SelfContained : public AbstractEvent {
								public:
							            SelfContained(jobject _jthis, bool copy);
							            SelfContained(const SelfContained &);
							        
								SelfContained();
								virtual ~SelfContained();
							}; // end class SelfContained
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class StartDocument : public AbstractEvent {
								public:
							            StartDocument(jobject _jthis, bool copy);
							            StartDocument(const StartDocument &);
							        
								StartDocument();
								virtual ~StartDocument();
							}; // end class StartDocument
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class StartElementGeneric : public AbstractEvent {
								public:
							            StartElementGeneric(jobject _jthis, bool copy);
							            StartElementGeneric(const StartElementGeneric &);
							        
								StartElementGeneric();
								virtual ~StartElementGeneric();
							}; // end class StartElementGeneric
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class StartElementNS : public AbstractEvent {
								public:
							            StartElementNS(jobject _jthis, bool copy);
							            StartElementNS(const StartElementNS &);
							        
								StartElementNS(jint int_0,jstring string_1);
								virtual ~StartElementNS();
								jstring getNamespaceURI();
								jint getNamespaceUriID();
								jstring toString();
								jint hashCode();
							}; // end class StartElementNS
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class BuiltInDocContent : public AbstractBuiltInGrammar {
								public:
							            BuiltInDocContent(jobject _jthis, bool copy);
							            BuiltInDocContent(const BuiltInDocContent &);
							        
								BuiltInDocContent(Grammar grammar_0,jstring string_1);
								BuiltInDocContent(Grammar grammar_0);
								virtual ~BuiltInDocContent();
								GrammarType getGrammarType();
								jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get1stLevelEventCodeLength(FidelityOptions fidelityOptions_0);
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
							}; // end class BuiltInDocContent
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class BuiltInFragmentContent : public AbstractBuiltInGrammar {
								public:
							            BuiltInFragmentContent(jobject _jthis, bool copy);
							            BuiltInFragmentContent(const BuiltInFragmentContent &);
							        
								BuiltInFragmentContent();
								virtual ~BuiltInFragmentContent();
								GrammarType getGrammarType();
								jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get1stLevelEventCodeLength(FidelityOptions fidelityOptions_0);
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								void learnStartElement(event::StartElement startElement_0);
							}; // end class BuiltInFragmentContent
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class DocEnd : public AbstractSchemaInformedGrammar {
								public:
							            DocEnd(jobject _jthis, bool copy);
							            DocEnd(const DocEnd &);
							        
								DocEnd(jstring string_0);
								DocEnd();
								virtual ~DocEnd();
								GrammarType getGrammarType();
								virtual jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								jstring toString();
							}; // end class DocEnd
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class Fragment : public AbstractSchemaInformedGrammar {
								public:
							            Fragment(jobject _jthis, bool copy);
							            Fragment(const Fragment &);
							        
								Fragment();
								Fragment(jstring string_0);
								virtual ~Fragment();
								GrammarType getGrammarType();
								virtual jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								jint get3rdLevelCharacteristics(FidelityOptions fidelityOptions_0);
								jstring toString();
							}; // end class Fragment
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class SchemaInformedDocContent : public AbstractSchemaInformedGrammar {
								public:
							            SchemaInformedDocContent(jobject _jthis, bool copy);
							            SchemaInformedDocContent(const SchemaInformedDocContent &);
							        
								SchemaInformedDocContent();
								SchemaInformedDocContent(jstring string_0);
								virtual ~SchemaInformedDocContent();
								GrammarType getGrammarType();
								virtual jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								jstring toString();
							}; // end class SchemaInformedDocContent
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class SchemaInformedFirstStartTag : public SchemaInformedStartTag {
								public:
							            SchemaInformedFirstStartTag(jobject _jthis, bool copy);
							            SchemaInformedFirstStartTag(const SchemaInformedFirstStartTag &);
							        
								SchemaInformedFirstStartTag(SchemaInformedGrammar schemaInformedGrammar_0);
								SchemaInformedFirstStartTag(SchemaInformedStartTagGrammar schemaInformedStartTagGrammar_0);
								SchemaInformedFirstStartTag();
								virtual ~SchemaInformedFirstStartTag();
								jboolean isTypeCastable();
								GrammarType getGrammarType();
								jboolean isNillable();
								virtual jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								virtual jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								virtual event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								virtual jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								SchemaInformedFirstStartTagGrammar getTypeEmpty();
								void setTypeName(javax::xml::namespace::QName qName_0);
								void setTypeCastable(jboolean boolean_0);
								void setNillable(jboolean boolean_0);
								void setTypeEmpty(SchemaInformedFirstStartTagGrammar schemaInformedFirstStartTagGrammar_0);
								jstring toString();
								jint hashCode();
								javax::xml::namespace::QName getTypeName();
							}; // end class SchemaInformedFirstStartTag
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class SchemaInformedStartTagGrammar : public java::lang::Object {
								public:
							            SchemaInformedStartTagGrammar(jobject _jthis, bool copy);
							            SchemaInformedStartTagGrammar(const SchemaInformedStartTagGrammar &);
							        
								SchemaInformedStartTagGrammar();
								virtual ~SchemaInformedStartTagGrammar();
							}; // end class SchemaInformedStartTagGrammar
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace production{
							
							class SchemaLessProduction : public AbstractProduction {
								public:
							            SchemaLessProduction(jobject _jthis, bool copy);
							            SchemaLessProduction(const SchemaLessProduction &);
							        
								SchemaLessProduction(grammar::Grammar grammar_0,grammar::Grammar grammar_1,event::Event event_2,jint int_3);
								virtual ~SchemaLessProduction();
								jint getEventCode();
							}; // end class SchemaLessProduction
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace production

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						
						class SchemaLessGrammars : public AbstractGrammars {
							public:
						            SchemaLessGrammars(jobject _jthis, bool copy);
						            SchemaLessGrammars(const SchemaLessGrammars &);
						        
							SchemaLessGrammars();
							virtual ~SchemaLessGrammars();
							virtual jstring getSchemaId();
							void setSchemaId(jstring string_0);
							virtual jboolean isBuiltInXMLSchemaTypesOnly();
							grammar::Grammar getFragmentGrammar();
						}; // end class SchemaLessGrammars
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						
						class XSDGrammarsBuilder : public EXIContentModelBuilder {
							public:
						            XSDGrammarsBuilder(jobject _jthis, bool copy);
						            XSDGrammarsBuilder(const XSDGrammarsBuilder &);
						        
							virtual ~XSDGrammarsBuilder();
							SchemaInformedGrammars toGrammars();
							datatype::Datatype getDatatype(org::apache::xerces::xs::XSSimpleTypeDefinition xSSimpleTypeDefinition_0);
							static context::GrammarUriContext getUriContext(jstring string_0,jobjectArray grammarUriContextArray_1);
							static XSDGrammarsBuilder newInstance();
						}; // end class XSDGrammarsBuilder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLBodyElementImpl : public HTMLElementImpl {
						public:
					            HTMLBodyElementImpl(jobject _jthis, bool copy);
					            HTMLBodyElementImpl(const HTMLBodyElementImpl &);
					        
						HTMLBodyElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLBodyElementImpl();
						void setBackground(jstring string_0);
						jstring getBackground();
						void setText(jstring string_0);
						jstring getText();
						jstring getBgColor();
						void setBgColor(jstring string_0);
						jstring getLink();
						void setLink(jstring string_0);
						jstring getVLink();
						void setVLink(jstring string_0);
						void setALink(jstring string_0);
						jstring getALink();
					}; // end class HTMLBodyElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLBuilder : public java::lang::Object {
						public:
					            HTMLBuilder(jobject _jthis, bool copy);
					            HTMLBuilder(const HTMLBuilder &);
					        
						HTMLBuilder();
						virtual ~HTMLBuilder();
						void setDocumentLocator(xml::sax::Locator locator_0);
						void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
						void processingInstruction(jstring string_0,jstring string_1);
						void characters(jcharArray charArray_0,jint int_1,jint int_2);
						void characters(jstring string_0);
						void startElement(jstring string_0,xml::sax::AttributeList attributeList_1);
						void startDocument();
						void endDocument();
						void endElement(jstring string_0);
						w3c::dom::html::HTMLDocument getHTMLDocument();
					}; // end class HTMLBuilder
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLFieldSetElementImpl : public HTMLElementImpl {
						public:
					            HTMLFieldSetElementImpl(jobject _jthis, bool copy);
					            HTMLFieldSetElementImpl(const HTMLFieldSetElementImpl &);
					        
						HTMLFieldSetElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLFieldSetElementImpl();
					}; // end class HTMLFieldSetElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLFontElementImpl : public HTMLElementImpl {
						public:
					            HTMLFontElementImpl(jobject _jthis, bool copy);
					            HTMLFontElementImpl(const HTMLFontElementImpl &);
					        
						HTMLFontElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLFontElementImpl();
						void setColor(jstring string_0);
						jstring getColor();
						void setFace(jstring string_0);
						jstring getFace();
						jstring getSize();
						void setSize(jstring string_0);
					}; // end class HTMLFontElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLFormControl : public java::lang::Object {
						public:
					            HTMLFormControl(jobject _jthis, bool copy);
					            HTMLFormControl(const HTMLFormControl &);
					        
						HTMLFormControl();
						virtual ~HTMLFormControl();
					}; // end class HTMLFormControl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLIsIndexElementImpl : public HTMLElementImpl {
						public:
					            HTMLIsIndexElementImpl(jobject _jthis, bool copy);
					            HTMLIsIndexElementImpl(const HTMLIsIndexElementImpl &);
					        
						HTMLIsIndexElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLIsIndexElementImpl();
						jstring getPrompt();
						void setPrompt(jstring string_0);
					}; // end class HTMLIsIndexElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLCardElement : public java::lang::Object {
					public:
				            WMLCardElement(jobject _jthis, bool copy);
				            WMLCardElement(const WMLCardElement &);
				        
					WMLCardElement();
					virtual ~WMLCardElement();
				}; // end class WMLCardElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLHeadElement : public java::lang::Object {
					public:
				            WMLHeadElement(jobject _jthis, bool copy);
				            WMLHeadElement(const WMLHeadElement &);
				        
					WMLHeadElement();
					virtual ~WMLHeadElement();
				}; // end class WMLHeadElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLOptionElement : public java::lang::Object {
					public:
				            WMLOptionElement(jobject _jthis, bool copy);
				            WMLOptionElement(const WMLOptionElement &);
				        
					WMLOptionElement();
					virtual ~WMLOptionElement();
				}; // end class WMLOptionElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLStrongElement : public java::lang::Object {
					public:
				            WMLStrongElement(jobject _jthis, bool copy);
				            WMLStrongElement(const WMLStrongElement &);
				        
					WMLStrongElement();
					virtual ~WMLStrongElement();
				}; // end class WMLStrongElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLAElementImpl : public WMLElementImpl {
						public:
					            WMLAElementImpl(jobject _jthis, bool copy);
					            WMLAElementImpl(const WMLAElementImpl &);
					        
						WMLAElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLAElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getTitle();
						void setTitle(jstring string_0);
						jstring getHref();
						void setHref(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLAElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLDoElementImpl : public WMLElementImpl {
						public:
					            WMLDoElementImpl(jobject _jthis, bool copy);
					            WMLDoElementImpl(const WMLDoElementImpl &);
					        
						WMLDoElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLDoElementImpl();
						jstring getLabel();
						void setLabel(jstring string_0);
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						void setType(jstring string_0);
						void setOptional(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getOptional();
						jstring getName();
						void setName(jstring string_0);
						jstring getId();
						jstring getType();
						jstring getClassName();
					}; // end class WMLDoElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class LCount : public java::lang::Object {
						public:
					            LCount(jobject _jthis, bool copy);
					            LCount(const LCount &);
					        
						virtual ~LCount();
					}; // end class LCount
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class ObjectFactory : public java::lang::Object {
						public:
					            ObjectFactory(jobject _jthis, bool copy);
					            ObjectFactory(const ObjectFactory &);
					        
						virtual ~ObjectFactory();
					}; // end class ObjectFactory
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					namespace events{
						
						class MouseEventImpl : public UIEventImpl {
							public:
						            MouseEventImpl(jobject _jthis, bool copy);
						            MouseEventImpl(const MouseEventImpl &);
						        
							MouseEventImpl();
							virtual ~MouseEventImpl();
							jshort getButton();
							jint getClientX();
							jint getClientY();
							jint getScreenX();
							jint getScreenY();
							jboolean getCtrlKey();
							jboolean getAltKey();
							jboolean getShiftKey();
							jboolean getMetaKey();
							w3c::dom::events::EventTarget getRelatedTarget();
							void initMouseEvent(jstring string_0,jboolean boolean_1,jboolean boolean_2,w3c::dom::views::AbstractView abstractView_3,jint int_4,jint int_5,jint int_6,jint int_7,jint int_8,jboolean boolean_9,jboolean boolean_10,jboolean boolean_11,jboolean boolean_12,jshort short_13,w3c::dom::events::EventTarget eventTarget_14);
						}; // end class MouseEventImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class Constants : public java::lang::Object {
						public:
					            Constants(jobject _jthis, bool copy);
					            Constants(const Constants &);
					        
						virtual ~Constants();
						static java::util::Enumeration getSAXFeatures();
						static java::util::Enumeration getSAXProperties();
						static java::util::Enumeration getXercesFeatures();
						static java::util::Enumeration getXercesProperties();
						static void main(jobjectArray stringArray_0);
						static void main(int argc,const char **argv);
					}; // end class Constants
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XML11NamespaceBinder : public XMLNamespaceBinder {
						public:
					            XML11NamespaceBinder(jobject _jthis, bool copy);
					            XML11NamespaceBinder(const XML11NamespaceBinder &);
					        
						XML11NamespaceBinder();
						virtual ~XML11NamespaceBinder();
					}; // end class XML11NamespaceBinder
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLEntityHandler : public java::lang::Object {
						public:
					            XMLEntityHandler(jobject _jthis, bool copy);
					            XMLEntityHandler(const XMLEntityHandler &);
					        
						XMLEntityHandler();
						virtual ~XMLEntityHandler();
					}; // end class XMLEntityHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class AttributePSVImpl : public java::lang::Object {
							public:
						            AttributePSVImpl(jobject _jthis, bool copy);
						            AttributePSVImpl(const AttributePSVImpl &);
						        
							AttributePSVImpl();
							virtual ~AttributePSVImpl();
							xs::XSAttributeDeclaration getAttributeDeclaration();
							xs::XSTypeDefinition getTypeDefinition();
							xs::ShortList getItemValueTypes();
							jstring getSchemaDefault();
							jstring getSchemaNormalizedValue();
							jboolean getIsSchemaSpecified();
							jshort getValidationAttempted();
							jshort getValidity();
							xs::StringList getErrorCodes();
							xs::StringList getErrorMessages();
							jstring getValidationContext();
							xs::XSSimpleTypeDefinition getMemberTypeDefinition();
							jshort getActualNormalizedValueType();
							xs::XSValue getSchemaValue();
							void reset();
						}; // end class AttributePSVImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class FilePathToURI : public java::lang::Object {
							public:
						            FilePathToURI(jobject _jthis, bool copy);
						            FilePathToURI(const FilePathToURI &);
						        
							virtual ~FilePathToURI();
							static jstring filepath2URI(jstring string_0);
						}; // end class FilePathToURI
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class SchemaGrammar : public java::lang::Object {
							public:
						            SchemaGrammar(jobject _jthis, bool copy);
						            SchemaGrammar(const SchemaGrammar &);
						        
							SchemaGrammar(SchemaGrammar schemaGrammar_0);
							SchemaGrammar(jstring string_0,XSDDescription xSDDescription_1,util::SymbolTable symbolTable_2);
							virtual ~SchemaGrammar();
							xs::XSNamedMap getComponents(jshort short_0);
							xs::XSAttributeDeclaration getAttributeDeclaration(jstring string_0);
							xs::XSAttributeGroupDefinition getAttributeGroup(jstring string_0);
							xs::XSModelGroupDefinition getModelGroupDefinition(jstring string_0);
							xs::XSNotationDeclaration getNotationDeclaration(jstring string_0);
							virtual jstring getTargetNamespace();
							xs::XSModel toXSModel(jobjectArray xSGrammarArray_0);
							xs::XSModel toXSModel();
							xs::XSElementDeclaration getElementDeclaration(jstring string_0);
							xs::XSIDCDefinition getIDCDefinition(jstring string_0);
							virtual XSElementDecl getGlobalElementDecl(jstring string_0);
							virtual XSElementDecl getGlobalElementDecl(jstring string_0,jstring string_1);
							xs::XSTypeDefinition getTypeDefinition(jstring string_0);
							xni::grammars::XMLGrammarDescription getGrammarDescription();
							jboolean isNamespaceAware();
							void setImportedGrammars(java::util::Vector vector_0);
							java::util::Vector getImportedGrammars();
							void addGlobalAttributeDecl(XSAttributeDecl xSAttributeDecl_0);
							void addGlobalAttributeDecl(XSAttributeDecl xSAttributeDecl_0,jstring string_1);
							void addGlobalAttributeGroupDecl(XSAttributeGroupDecl xSAttributeGroupDecl_0,jstring string_1);
							void addGlobalAttributeGroupDecl(XSAttributeGroupDecl xSAttributeGroupDecl_0);
							void addGlobalElementDeclAll(XSElementDecl xSElementDecl_0);
							void addGlobalElementDecl(XSElementDecl xSElementDecl_0);
							void addGlobalElementDecl(XSElementDecl xSElementDecl_0,jstring string_1);
							void addGlobalGroupDecl(XSGroupDecl xSGroupDecl_0);
							void addGlobalGroupDecl(XSGroupDecl xSGroupDecl_0,jstring string_1);
							void addGlobalNotationDecl(XSNotationDecl xSNotationDecl_0,jstring string_1);
							void addGlobalNotationDecl(XSNotationDecl xSNotationDecl_0);
							void addGlobalTypeDecl(xs::XSTypeDefinition xSTypeDefinition_0,jstring string_1);
							void addGlobalTypeDecl(xs::XSTypeDefinition xSTypeDefinition_0);
							void addGlobalComplexTypeDecl(XSComplexTypeDecl xSComplexTypeDecl_0,jstring string_1);
							void addGlobalComplexTypeDecl(XSComplexTypeDecl xSComplexTypeDecl_0);
							void addGlobalSimpleTypeDecl(dv::XSSimpleType xSSimpleType_0);
							void addGlobalSimpleTypeDecl(dv::XSSimpleType xSSimpleType_0,jstring string_1);
							virtual void addIDConstraintDecl(XSElementDecl xSElementDecl_0,identity::IdentityConstraint identityConstraint_1);
							virtual void addIDConstraintDecl(XSElementDecl xSElementDecl_0,identity::IdentityConstraint identityConstraint_1,jstring string_2);
							virtual XSAttributeDecl getGlobalAttributeDecl(jstring string_0,jstring string_1);
							virtual XSAttributeDecl getGlobalAttributeDecl(jstring string_0);
							virtual XSAttributeGroupDecl getGlobalAttributeGroupDecl(jstring string_0);
							virtual XSAttributeGroupDecl getGlobalAttributeGroupDecl(jstring string_0,jstring string_1);
							virtual XSGroupDecl getGlobalGroupDecl(jstring string_0);
							virtual XSGroupDecl getGlobalGroupDecl(jstring string_0,jstring string_1);
							virtual XSNotationDecl getGlobalNotationDecl(jstring string_0,jstring string_1);
							virtual XSNotationDecl getGlobalNotationDecl(jstring string_0);
							virtual xs::XSTypeDefinition getGlobalTypeDecl(jstring string_0,jstring string_1);
							virtual xs::XSTypeDefinition getGlobalTypeDecl(jstring string_0);
							virtual identity::IdentityConstraint getIDConstraintDecl(jstring string_0,jstring string_1);
							virtual identity::IdentityConstraint getIDConstraintDecl(jstring string_0);
							virtual jboolean hasIDConstraints();
							void addComplexTypeDecl(XSComplexTypeDecl xSComplexTypeDecl_0,util::SimpleLocator simpleLocator_1);
							void addRedefinedGroupDecl(XSGroupDecl xSGroupDecl_0,XSGroupDecl xSGroupDecl_1,util::SimpleLocator simpleLocator_2);
							static SchemaGrammar getS4SGrammar(jshort short_0);
							void removeDocument(jint int_0);
							jstring getSchemaNamespace();
							xs::datatypes::ObjectList getComponentsExt(jshort short_0);
							void resetComponents();
							xs::StringList getDocumentLocations();
							void addAnnotation(XSAnnotationImpl xSAnnotationImpl_0);
							void setImmutable(jboolean boolean_0);
							jboolean isImmutable();
							xs::XSObjectList getAnnotations();
						}; // end class SchemaGrammar
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSAnnotationImpl : public java::lang::Object {
							public:
						            XSAnnotationImpl(jobject _jthis, bool copy);
						            XSAnnotationImpl(const XSAnnotationImpl &);
						        
							XSAnnotationImpl(jstring string_0,SchemaGrammar schemaGrammar_1);
							virtual ~XSAnnotationImpl();
							xs::XSNamespaceItem getNamespaceItem();
							jstring getNamespace();
							jstring getAnnotationString();
							jstring getName();
							jshort getType();
						}; // end class XSAnnotationImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSAttributeGroupDecl : public java::lang::Object {
							public:
						            XSAttributeGroupDecl(jobject _jthis, bool copy);
						            XSAttributeGroupDecl(const XSAttributeGroupDecl &);
						        
							XSAttributeGroupDecl();
							virtual ~XSAttributeGroupDecl();
							xs::XSAttributeUse getAttributeUse(jstring string_0,jstring string_1);
							xs::XSNamespaceItem getNamespaceItem();
							jstring getNamespace();
							xs::XSObjectList getAttributeUses();
							xs::XSWildcard getAttributeWildcard();
							jstring addAttributeUse(XSAttributeUseImpl xSAttributeUseImpl_0);
							void replaceAttributeUse(xs::XSAttributeUse xSAttributeUse_0,XSAttributeUseImpl xSAttributeUseImpl_1);
							xs::XSAttributeUse getAttributeUseNoProhibited(jstring string_0,jstring string_1);
							void removeProhibitedAttrs();
							jstring getName();
							xs::XSAnnotation getAnnotation();
							xs::XSObjectList getAnnotations();
							jshort getType();
							void reset();
						}; // end class XSAttributeGroupDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSConstraints : public java::lang::Object {
							public:
						            XSConstraints(jobject _jthis, bool copy);
						            XSConstraints(const XSConstraints &);
						        
							XSConstraints();
							virtual ~XSConstraints();
							static jboolean checkSimpleDerivationOk(dv::XSSimpleType xSSimpleType_0,xs::XSTypeDefinition xSTypeDefinition_1,jshort short_2);
							static jboolean checkTypeDerivationOk(xs::XSTypeDefinition xSTypeDefinition_0,xs::XSTypeDefinition xSTypeDefinition_1,jshort short_2);
							static XSParticleDecl getEmptySequence();
							static jboolean checkComplexDerivationOk(XSComplexTypeDecl xSComplexTypeDecl_0,xs::XSTypeDefinition xSTypeDefinition_1,jshort short_2);
							static void findElemInTable(XSComplexTypeDecl xSComplexTypeDecl_0,XSElementDecl xSElementDecl_1,util::SymbolHash symbolHash_2);
							static jboolean overlapUPA(XSElementDecl xSElementDecl_0,XSElementDecl xSElementDecl_1,SubstitutionGroupHandler substitutionGroupHandler_2);
							static jboolean overlapUPA(XSElementDecl xSElementDecl_0,XSWildcardDecl xSWildcardDecl_1,SubstitutionGroupHandler substitutionGroupHandler_2);
							static jboolean overlapUPA(XSWildcardDecl xSWildcardDecl_0,XSWildcardDecl xSWildcardDecl_1);
							static void fullSchemaChecking(XSGrammarBucket xSGrammarBucket_0,SubstitutionGroupHandler substitutionGroupHandler_1,models::CMBuilder cMBuilder_2,XMLErrorReporter xMLErrorReporter_3);
							static void checkElementDeclsConsistent(XSComplexTypeDecl xSComplexTypeDecl_0,XSParticleDecl xSParticleDecl_1,util::SymbolHash symbolHash_2,SubstitutionGroupHandler substitutionGroupHandler_3);
						}; // end class XSConstraints
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSElementDeclHelper : public java::lang::Object {
							public:
						            XSElementDeclHelper(jobject _jthis, bool copy);
						            XSElementDeclHelper(const XSElementDeclHelper &);
						        
							XSElementDeclHelper();
							virtual ~XSElementDeclHelper();
						}; // end class XSElementDeclHelper
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSGrammarBucket : public java::lang::Object {
							public:
						            XSGrammarBucket(jobject _jthis, bool copy);
						            XSGrammarBucket(const XSGrammarBucket &);
						        
							XSGrammarBucket();
							virtual ~XSGrammarBucket();
							jobjectArray getGrammars();
							SchemaGrammar getGrammar(jstring string_0);
							jboolean putGrammar(SchemaGrammar schemaGrammar_0,jboolean boolean_1,jboolean boolean_2);
							void putGrammar(SchemaGrammar schemaGrammar_0);
							jboolean putGrammar(SchemaGrammar schemaGrammar_0,jboolean boolean_1);
							void reset();
						}; // end class XSGrammarBucket
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSImplementationImpl : public dom::PSVIDOMImplementationImpl {
							public:
						            XSImplementationImpl(jobject _jthis, bool copy);
						            XSImplementationImpl(const XSImplementationImpl &);
						        
							XSImplementationImpl();
							virtual ~XSImplementationImpl();
							jboolean hasFeature(jstring string_0,jstring string_1);
							static w3c::dom::DOMImplementation getDOMImplementation();
							xs::StringList createStringList(jobjectArray stringArray_0);
							xs::StringList createStringList(int argc,const char **argv);
							xs::StringList getRecognizedVersions();
							xs::LSInputList createLSInputList(jobjectArray lSInputArray_0);
							xs::XSLoader createXSLoader(xs::StringList stringList_0);
						}; // end class XSImplementationImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSLoaderImpl : public java::lang::Object {
							public:
						            XSLoaderImpl(jobject _jthis, bool copy);
						            XSLoaderImpl(const XSLoaderImpl &);
						        
							XSLoaderImpl();
							virtual ~XSLoaderImpl();
							xs::XSModel loadURI(jstring string_0);
							xs::XSModel loadURIList(xs::StringList stringList_0);
							w3c::dom::DOMConfiguration getConfig();
							xs::XSModel loadInputList(xs::LSInputList lSInputList_0);
							w3c::dom::DOMStringList getParameterNames();
							xs::XSModel load(w3c::dom::ls::LSInput lSInput_0);
						}; // end class XSLoaderImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSModelGroupImpl : public java::lang::Object {
							public:
						            XSModelGroupImpl(jobject _jthis, bool copy);
						            XSModelGroupImpl(const XSModelGroupImpl &);
						        
							XSModelGroupImpl();
							virtual ~XSModelGroupImpl();
							xs::XSNamespaceItem getNamespaceItem();
							xs::XSObjectList getParticles();
							jshort getCompositor();
							jstring getNamespace();
							jint minEffectiveTotalRange();
							jint maxEffectiveTotalRange();
							jstring toString();
							jstring getName();
							jboolean isEmpty();
							xs::XSAnnotation getAnnotation();
							xs::XSObjectList getAnnotations();
							jshort getType();
							void reset();
						}; // end class XSModelGroupImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSNotationDecl : public java::lang::Object {
							public:
						            XSNotationDecl(jobject _jthis, bool copy);
						            XSNotationDecl(const XSNotationDecl &);
						        
							XSNotationDecl();
							virtual ~XSNotationDecl();
							xs::XSNamespaceItem getNamespaceItem();
							jstring getSystemId();
							jstring getNamespace();
							jstring getPublicId();
							jstring getName();
							xs::XSAnnotation getAnnotation();
							xs::XSObjectList getAnnotations();
							jshort getType();
						}; // end class XSNotationDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSParticleDecl : public java::lang::Object {
							public:
						            XSParticleDecl(jobject _jthis, bool copy);
						            XSParticleDecl(const XSParticleDecl &);
						        
							XSParticleDecl();
							virtual ~XSParticleDecl();
							xs::XSNamespaceItem getNamespaceItem();
							xs::XSTerm getTerm();
							jboolean getMaxOccursUnbounded();
							jstring getNamespace();
							XSParticleDecl makeClone();
							jboolean emptiable();
							jint minEffectiveTotalRange();
							jint maxEffectiveTotalRange();
							jint getMaxOccurs();
							jint getMinOccurs();
							jstring toString();
							jstring getName();
							jboolean isEmpty();
							xs::XSObjectList getAnnotations();
							jshort getType();
							void reset();
						}; // end class XSParticleDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSWildcardDecl : public java::lang::Object {
							public:
						            XSWildcardDecl(jobject _jthis, bool copy);
						            XSWildcardDecl(const XSWildcardDecl &);
						        
							XSWildcardDecl();
							virtual ~XSWildcardDecl();
							xs::XSNamespaceItem getNamespaceItem();
							jstring getNamespace();
							jshort getConstraintType();
							xs::StringList getNsConstraintList();
							jshort getProcessContents();
							jboolean allowNamespace(jstring string_0);
							jboolean isSubsetOf(XSWildcardDecl xSWildcardDecl_0);
							jboolean weakerProcessContents(XSWildcardDecl xSWildcardDecl_0);
							jstring getProcessContentsAsString();
							XSWildcardDecl performIntersectionWith(XSWildcardDecl xSWildcardDecl_0,jshort short_1);
							XSWildcardDecl performUnionWith(XSWildcardDecl xSWildcardDecl_0,jshort short_1);
							jstring toString();
							jstring getName();
							xs::XSAnnotation getAnnotation();
							xs::XSObjectList getAnnotations();
							jshort getType();
						}; // end class XSWildcardDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							
							class XPathMatcher : public java::lang::Object {
								public:
							            XPathMatcher(jobject _jthis, bool copy);
							            XPathMatcher(const XPathMatcher &);
							        
								XPathMatcher(xpath::XPath xPath_0);
								virtual ~XPathMatcher();
								void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1);
								jboolean isMatched();
								void startDocumentFragment();
								jstring toString();
							}; // end class XPathMatcher
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class XSCMValidator : public java::lang::Object {
								public:
							            XSCMValidator(jobject _jthis, bool copy);
							            XSCMValidator(const XSCMValidator &);
							        
								XSCMValidator();
								virtual ~XSCMValidator();
							}; // end class XSCMValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XPointerParserConfiguration : public XML11Configuration {
						public:
					            XPointerParserConfiguration(jobject _jthis, bool copy);
					            XPointerParserConfiguration(const XPointerParserConfiguration &);
					        
						XPointerParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						XPointerParserConfiguration();
						XPointerParserConfiguration(util::SymbolTable symbolTable_0);
						XPointerParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						virtual ~XPointerParserConfiguration();
					}; // end class XPointerParserConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					
					class ImmutableLocation : public java::lang::Object {
						public:
					            ImmutableLocation(jobject _jthis, bool copy);
					            ImmutableLocation(const ImmutableLocation &);
					        
						ImmutableLocation(javax::xml::stream::Location location_0);
						ImmutableLocation(jint int_0,jint int_1,jint int_2,jstring string_3,jstring string_4);
						virtual ~ImmutableLocation();
						jint getCharacterOffset();
						jint getColumnNumber();
						jstring getSystemId();
						jstring getPublicId();
						jint getLineNumber();
					}; // end class ImmutableLocation
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace stax

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class CharactersImpl : public XMLEventImpl {
							public:
						            CharactersImpl(jobject _jthis, bool copy);
						            CharactersImpl(const CharactersImpl &);
						        
							CharactersImpl(jstring string_0,jint int_1,javax::xml::stream::Location location_2);
							virtual ~CharactersImpl();
							jstring getData();
							jboolean isWhiteSpace();
							jboolean isCData();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
							jboolean isIgnorableWhiteSpace();
						}; // end class CharactersImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class DTDImpl : public XMLEventImpl {
							public:
						            DTDImpl(jobject _jthis, bool copy);
						            DTDImpl(const DTDImpl &);
						        
							DTDImpl(jstring string_0,javax::xml::stream::Location location_1);
							virtual ~DTDImpl();
							java::util::List getNotations();
							java::util::List getEntities();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
							jstring getDocumentTypeDeclaration();
						}; // end class DTDImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class EndElementImpl : public ElementImpl {
							public:
						            EndElementImpl(jobject _jthis, bool copy);
						            EndElementImpl(const EndElementImpl &);
						        
							EndElementImpl(javax::xml::namespace::QName qName_0,java::util::Iterator iterator_1,javax::xml::stream::Location location_2);
							virtual ~EndElementImpl();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
						}; // end class EndElementImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class NamespaceImpl : public AttributeImpl {
							public:
						            NamespaceImpl(jobject _jthis, bool copy);
						            NamespaceImpl(const NamespaceImpl &);
						        
							NamespaceImpl(jstring string_0,jstring string_1,javax::xml::stream::Location location_2);
							virtual ~NamespaceImpl();
							jstring getPrefix();
							jstring getNamespaceURI();
							jboolean isDefaultNamespaceDeclaration();
						}; // end class NamespaceImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class StartDocumentImpl : public XMLEventImpl {
							public:
						            StartDocumentImpl(jobject _jthis, bool copy);
						            StartDocumentImpl(const StartDocumentImpl &);
						        
							StartDocumentImpl(jstring string_0,jboolean boolean_1,jboolean boolean_2,jboolean boolean_3,jstring string_4,javax::xml::stream::Location location_5);
							virtual ~StartDocumentImpl();
							jstring getVersion();
							jstring getSystemId();
							jstring getCharacterEncodingScheme();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
							jboolean encodingSet();
							jboolean isStandalone();
							jboolean standaloneSet();
						}; // end class StartDocumentImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class AttributesProxy : public java::lang::Object {
						public:
					            AttributesProxy(jobject _jthis, bool copy);
					            AttributesProxy(const AttributesProxy &);
					        
						AttributesProxy(xni::XMLAttributes xMLAttributes_0);
						virtual ~AttributesProxy();
						jint getIndex(jstring string_0);
						jint getIndex(jstring string_0,jstring string_1);
						jstring getQName(jint int_0);
						jstring getLocalName(jint int_0);
						jstring getURI(jint int_0);
						jboolean isSpecified(jint int_0);
						jboolean isSpecified(jstring string_0);
						jboolean isSpecified(jstring string_0,jstring string_1);
						void setAttributes(xni::XMLAttributes xMLAttributes_0);
						jboolean isDeclared(jint int_0);
						jboolean isDeclared(jstring string_0,jstring string_1);
						jboolean isDeclared(jstring string_0);
						jint getLength();
						jstring getName(jint int_0);
						jstring getValue(jstring string_0);
						jstring getValue(jint int_0);
						jstring getValue(jstring string_0,jstring string_1);
						jstring getType(jstring string_0);
						jstring getType(jint int_0);
						jstring getType(jstring string_0,jstring string_1);
						xni::XMLAttributes getAttributes();
					}; // end class AttributesProxy
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class DefaultErrorHandler : public java::lang::Object {
						public:
					            DefaultErrorHandler(jobject _jthis, bool copy);
					            DefaultErrorHandler(const DefaultErrorHandler &);
					        
						DefaultErrorHandler();
						DefaultErrorHandler(java::io::PrintWriter printWriter_0);
						virtual ~DefaultErrorHandler();
						void fatalError(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
						void warning(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
						void error(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
					}; // end class DefaultErrorHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class EntityResolver2Wrapper : public java::lang::Object {
						public:
					            EntityResolver2Wrapper(jobject _jthis, bool copy);
					            EntityResolver2Wrapper(const EntityResolver2Wrapper &);
					        
						EntityResolver2Wrapper(xml::sax::ext::EntityResolver2 entityResolver2_0);
						EntityResolver2Wrapper();
						virtual ~EntityResolver2Wrapper();
						xni::parser::XMLInputSource getExternalSubset(xni::grammars::XMLDTDDescription xMLDTDDescription_0);
						xni::parser::XMLInputSource resolveEntity(xni::XMLResourceIdentifier xMLResourceIdentifier_0);
						void setEntityResolver(xml::sax::ext::EntityResolver2 entityResolver2_0);
						xml::sax::ext::EntityResolver2 getEntityResolver();
					}; // end class EntityResolver2Wrapper
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class EntityResolverWrapper : public java::lang::Object {
						public:
					            EntityResolverWrapper(jobject _jthis, bool copy);
					            EntityResolverWrapper(const EntityResolverWrapper &);
					        
						EntityResolverWrapper(xml::sax::EntityResolver entityResolver_0);
						EntityResolverWrapper();
						virtual ~EntityResolverWrapper();
						xni::parser::XMLInputSource resolveEntity(xni::XMLResourceIdentifier xMLResourceIdentifier_0);
						void setEntityResolver(xml::sax::EntityResolver entityResolver_0);
						xml::sax::EntityResolver getEntityResolver();
					}; // end class EntityResolverWrapper
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class HTTPInputSource : public xni::parser::XMLInputSource {
						public:
					            HTTPInputSource(jobject _jthis, bool copy);
					            HTTPInputSource(const HTTPInputSource &);
					        
						HTTPInputSource(jstring string_0,jstring string_1,jstring string_2);
						HTTPInputSource(xni::XMLResourceIdentifier xMLResourceIdentifier_0);
						HTTPInputSource(jstring string_0,jstring string_1,jstring string_2,java::io::Reader reader_3,jstring string_4);
						HTTPInputSource(jstring string_0,jstring string_1,jstring string_2,java::io::InputStream inputStream_3,jstring string_4);
						virtual ~HTTPInputSource();
						jboolean getFollowHTTPRedirects();
						java::util::Iterator getHTTPRequestProperties();
						void setHTTPRequestProperty(jstring string_0,jstring string_1);
						void setFollowHTTPRedirects(jboolean boolean_0);
						jstring getHTTPRequestProperty(jstring string_0);
					}; // end class HTTPInputSource
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class MessageFormatter : public java::lang::Object {
						public:
					            MessageFormatter(jobject _jthis, bool copy);
					            MessageFormatter(const MessageFormatter &);
					        
						MessageFormatter();
						virtual ~MessageFormatter();
					}; // end class MessageFormatter
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class XMLDTDContentModelHandler : public java::lang::Object {
						public:
					            XMLDTDContentModelHandler(jobject _jthis, bool copy);
					            XMLDTDContentModelHandler(const XMLDTDContentModelHandler &);
					        
						XMLDTDContentModelHandler();
						virtual ~XMLDTDContentModelHandler();
					}; // end class XMLDTDContentModelHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class XMLDocumentFragmentHandler : public java::lang::Object {
						public:
					            XMLDocumentFragmentHandler(jobject _jthis, bool copy);
					            XMLDocumentFragmentHandler(const XMLDocumentFragmentHandler &);
					        
						XMLDocumentFragmentHandler();
						virtual ~XMLDocumentFragmentHandler();
					}; // end class XMLDocumentFragmentHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class XMLLocator : public java::lang::Object {
						public:
					            XMLLocator(jobject _jthis, bool copy);
					            XMLLocator(const XMLLocator &);
					        
						XMLLocator();
						virtual ~XMLLocator();
					}; // end class XMLLocator
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						
						class XMLGrammarLoader : public java::lang::Object {
							public:
						            XMLGrammarLoader(jobject _jthis, bool copy);
						            XMLGrammarLoader(const XMLGrammarLoader &);
						        
							XMLGrammarLoader();
							virtual ~XMLGrammarLoader();
						}; // end class XMLGrammarLoader
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLComponent : public java::lang::Object {
							public:
						            XMLComponent(jobject _jthis, bool copy);
						            XMLComponent(const XMLComponent &);
						        
							XMLComponent();
							virtual ~XMLComponent();
						}; // end class XMLComponent
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLDTDContentModelSource : public java::lang::Object {
							public:
						            XMLDTDContentModelSource(jobject _jthis, bool copy);
						            XMLDTDContentModelSource(const XMLDTDContentModelSource &);
						        
							XMLDTDContentModelSource();
							virtual ~XMLDTDContentModelSource();
						}; // end class XMLDTDContentModelSource
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLDTDSource : public java::lang::Object {
							public:
						            XMLDTDSource(jobject _jthis, bool copy);
						            XMLDTDSource(const XMLDTDSource &);
						        
							XMLDTDSource();
							virtual ~XMLDTDSource();
						}; // end class XMLDTDSource
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLDocumentSource : public java::lang::Object {
							public:
						            XMLDocumentSource(jobject _jthis, bool copy);
						            XMLDocumentSource(const XMLDocumentSource &);
						        
							XMLDocumentSource();
							virtual ~XMLDocumentSource();
						}; // end class XMLDocumentSource
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLErrorHandler : public java::lang::Object {
							public:
						            XMLErrorHandler(jobject _jthis, bool copy);
						            XMLErrorHandler(const XMLErrorHandler &);
						        
							XMLErrorHandler();
							virtual ~XMLErrorHandler();
						}; // end class XMLErrorHandler
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLParserConfiguration : public java::lang::Object {
							public:
						            XMLParserConfiguration(jobject _jthis, bool copy);
						            XMLParserConfiguration(const XMLParserConfiguration &);
						        
							XMLParserConfiguration();
							virtual ~XMLParserConfiguration();
						}; // end class XMLParserConfiguration
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					
					class XPointerErrorHandler : public java::lang::Object {
						public:
					            XPointerErrorHandler(jobject _jthis, bool copy);
					            XPointerErrorHandler(const XPointerErrorHandler &);
					        
						XPointerErrorHandler();
						XPointerErrorHandler(java::io::PrintWriter printWriter_0);
						virtual ~XPointerErrorHandler();
						void fatalError(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
						void warning(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
						void error(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
					}; // end class XPointerErrorHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					
					class XPointerPart : public java::lang::Object {
						public:
					            XPointerPart(jobject _jthis, bool copy);
					            XPointerPart(const XPointerPart &);
					        
						XPointerPart();
						virtual ~XPointerPart();
					}; // end class XPointerPart
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class AttributePSVI : public java::lang::Object {
						public:
					            AttributePSVI(jobject _jthis, bool copy);
					            AttributePSVI(const AttributePSVI &);
					        
						AttributePSVI();
						virtual ~AttributePSVI();
					}; // end class AttributePSVI
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class ItemPSVI : public java::lang::Object {
						public:
					            ItemPSVI(jobject _jthis, bool copy);
					            ItemPSVI(const ItemPSVI &);
					        
						ItemPSVI();
						virtual ~ItemPSVI();
					}; // end class ItemPSVI
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class StringList : public java::lang::Object {
						public:
					            StringList(jobject _jthis, bool copy);
					            StringList(const StringList &);
					        
						StringList();
						virtual ~StringList();
					}; // end class StringList
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSAttributeGroupDefinition : public java::lang::Object {
						public:
					            XSAttributeGroupDefinition(jobject _jthis, bool copy);
					            XSAttributeGroupDefinition(const XSAttributeGroupDefinition &);
					        
						XSAttributeGroupDefinition();
						virtual ~XSAttributeGroupDefinition();
					}; // end class XSAttributeGroupDefinition
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSConstants : public java::lang::Object {
						public:
					            XSConstants(jobject _jthis, bool copy);
					            XSConstants(const XSConstants &);
					        
						XSConstants();
						virtual ~XSConstants();
					}; // end class XSConstants
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSModelGroup : public java::lang::Object {
						public:
					            XSModelGroup(jobject _jthis, bool copy);
					            XSModelGroup(const XSModelGroup &);
					        
						XSModelGroup();
						virtual ~XSModelGroup();
					}; // end class XSModelGroup
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSObjectList : public java::lang::Object {
						public:
					            XSObjectList(jobject _jthis, bool copy);
					            XSObjectList(const XSObjectList &);
					        
						XSObjectList();
						virtual ~XSObjectList();
					}; // end class XSObjectList
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						
						class ObjectList : public java::lang::Object {
							public:
						            ObjectList(jobject _jthis, bool copy);
						            ObjectList(const ObjectList &);
						        
							ObjectList();
							virtual ~ObjectList();
						}; // end class ObjectList
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes

	namespace javax{
		namespace xml{
			namespace parsers{
				
				class ParserConfigurationException : public java::lang::Exception {
					public:
				            ParserConfigurationException(jobject _jthis, bool copy);
				            ParserConfigurationException(const ParserConfigurationException &);
				        
					ParserConfigurationException();
					ParserConfigurationException(jstring string_0);
					virtual ~ParserConfigurationException();
				}; // end class ParserConfigurationException
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLStreamException : public java::lang::Exception {
					public:
				            XMLStreamException(jobject _jthis, bool copy);
				            XMLStreamException(const XMLStreamException &);
				        
					XMLStreamException(jstring string_0,java::lang::Throwable throwable_1);
					XMLStreamException(jstring string_0,Location location_1,java::lang::Throwable throwable_2);
					XMLStreamException(jstring string_0,Location location_1);
					XMLStreamException();
					XMLStreamException(jstring string_0);
					XMLStreamException(java::lang::Throwable throwable_0);
					virtual ~XMLStreamException();
					java::lang::Throwable getNestedException();
					Location getLocation();
				}; // end class XMLStreamException
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class EndElement : public java::lang::Object {
						public:
					            EndElement(jobject _jthis, bool copy);
					            EndElement(const EndElement &);
					        
						EndElement();
						virtual ~EndElement();
					}; // end class EndElement
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class XMLEvent : public java::lang::Object {
						public:
					            XMLEvent(jobject _jthis, bool copy);
					            XMLEvent(const XMLEvent &);
					        
						XMLEvent();
						virtual ~XMLEvent();
					}; // end class XMLEvent
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace transform{
				
				class OutputKeys : public java::lang::Object {
					public:
				            OutputKeys(jobject _jthis, bool copy);
				            OutputKeys(const OutputKeys &);
				        
					virtual ~OutputKeys();
				}; // end class OutputKeys
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				
				class SecuritySupport : public java::lang::Object {
					public:
				            SecuritySupport(jobject _jthis, bool copy);
				            SecuritySupport(const SecuritySupport &);
				        
					virtual ~SecuritySupport();
				}; // end class SecuritySupport
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				
				class TransformerFactoryConfigurationError : public java::lang::Error {
					public:
				            TransformerFactoryConfigurationError(jobject _jthis, bool copy);
				            TransformerFactoryConfigurationError(const TransformerFactoryConfigurationError &);
				        
					TransformerFactoryConfigurationError(java::lang::Exception exception_0,jstring string_1);
					TransformerFactoryConfigurationError(java::lang::Exception exception_0);
					TransformerFactoryConfigurationError(jstring string_0);
					TransformerFactoryConfigurationError();
					virtual ~TransformerFactoryConfigurationError();
					java::lang::Throwable getCause();
					jstring getMessage();
					java::lang::Exception getException();
				}; // end class TransformerFactoryConfigurationError
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					
					class SAXTransformerFactory : public TransformerFactory {
						public:
					            SAXTransformerFactory(jobject _jthis, bool copy);
					            SAXTransformerFactory(const SAXTransformerFactory &);
					        
						virtual ~SAXTransformerFactory();
					}; // end class SAXTransformerFactory
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax

	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					
					class TemplatesHandler : public java::lang::Object {
						public:
					            TemplatesHandler(jobject _jthis, bool copy);
					            TemplatesHandler(const TemplatesHandler &);
					        
						TemplatesHandler();
						virtual ~TemplatesHandler();
					}; // end class TemplatesHandler
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax

	namespace javax{
		namespace xml{
			namespace validation{
				
				class TypeInfoProvider : public java::lang::Object {
					public:
				            TypeInfoProvider(jobject _jthis, bool copy);
				            TypeInfoProvider(const TypeInfoProvider &);
				        
					virtual ~TypeInfoProvider();
				}; // end class TypeInfoProvider
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathFunctionException : public XPathExpressionException {
					public:
				            XPathFunctionException(jobject _jthis, bool copy);
				            XPathFunctionException(const XPathFunctionException &);
				        
					XPathFunctionException(jstring string_0);
					XPathFunctionException(java::lang::Throwable throwable_0);
					virtual ~XPathFunctionException();
				}; // end class XPathFunctionException
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace org{
		namespace w3c{
			namespace dom{
				
				class CharacterData : public java::lang::Object {
					public:
				            CharacterData(jobject _jthis, bool copy);
				            CharacterData(const CharacterData &);
				        
					CharacterData();
					virtual ~CharacterData();
				}; // end class CharacterData
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DOMImplementationList : public java::lang::Object {
					public:
				            DOMImplementationList(jobject _jthis, bool copy);
				            DOMImplementationList(const DOMImplementationList &);
				        
					DOMImplementationList();
					virtual ~DOMImplementationList();
				}; // end class DOMImplementationList
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class ElementTraversal : public java::lang::Object {
					public:
				            ElementTraversal(jobject _jthis, bool copy);
				            ElementTraversal(const ElementTraversal &);
				        
					ElementTraversal();
					virtual ~ElementTraversal();
				}; // end class ElementTraversal
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class ProcessingInstruction : public java::lang::Object {
					public:
				            ProcessingInstruction(jobject _jthis, bool copy);
				            ProcessingInstruction(const ProcessingInstruction &);
				        
					ProcessingInstruction();
					virtual ~ProcessingInstruction();
				}; // end class ProcessingInstruction
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSPrimitiveValue : public java::lang::Object {
						public:
					            CSSPrimitiveValue(jobject _jthis, bool copy);
					            CSSPrimitiveValue(const CSSPrimitiveValue &);
					        
						CSSPrimitiveValue();
						virtual ~CSSPrimitiveValue();
					}; // end class CSSPrimitiveValue
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSValueList : public java::lang::Object {
						public:
					            CSSValueList(jobject _jthis, bool copy);
					            CSSValueList(const CSSValueList &);
					        
						CSSValueList();
						virtual ~CSSValueList();
					}; // end class CSSValueList
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					
					class DocumentEvent : public java::lang::Object {
						public:
					            DocumentEvent(jobject _jthis, bool copy);
					            DocumentEvent(const DocumentEvent &);
					        
						DocumentEvent();
						virtual ~DocumentEvent();
					}; // end class DocumentEvent
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLAnchorElement : public java::lang::Object {
						public:
					            HTMLAnchorElement(jobject _jthis, bool copy);
					            HTMLAnchorElement(const HTMLAnchorElement &);
					        
						HTMLAnchorElement();
						virtual ~HTMLAnchorElement();
					}; // end class HTMLAnchorElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLCollection : public java::lang::Object {
						public:
					            HTMLCollection(jobject _jthis, bool copy);
					            HTMLCollection(const HTMLCollection &);
					        
						HTMLCollection();
						virtual ~HTMLCollection();
					}; // end class HTMLCollection
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLFormElement : public java::lang::Object {
						public:
					            HTMLFormElement(jobject _jthis, bool copy);
					            HTMLFormElement(const HTMLFormElement &);
					        
						HTMLFormElement();
						virtual ~HTMLFormElement();
					}; // end class HTMLFormElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLImageElement : public java::lang::Object {
						public:
					            HTMLImageElement(jobject _jthis, bool copy);
					            HTMLImageElement(const HTMLImageElement &);
					        
						HTMLImageElement();
						virtual ~HTMLImageElement();
					}; // end class HTMLImageElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLMenuElement : public java::lang::Object {
						public:
					            HTMLMenuElement(jobject _jthis, bool copy);
					            HTMLMenuElement(const HTMLMenuElement &);
					        
						HTMLMenuElement();
						virtual ~HTMLMenuElement();
					}; // end class HTMLMenuElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLParamElement : public java::lang::Object {
						public:
					            HTMLParamElement(jobject _jthis, bool copy);
					            HTMLParamElement(const HTMLParamElement &);
					        
						HTMLParamElement();
						virtual ~HTMLParamElement();
					}; // end class HTMLParamElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLTableColElement : public java::lang::Object {
						public:
					            HTMLTableColElement(jobject _jthis, bool copy);
					            HTMLTableColElement(const HTMLTableColElement &);
					        
						HTMLTableColElement();
						virtual ~HTMLTableColElement();
					}; // end class HTMLTableColElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSException : public java::lang::RuntimeException {
						public:
					            LSException(jobject _jthis, bool copy);
					            LSException(const LSException &);
					        
						LSException(jshort short_0,jstring string_1);
						virtual ~LSException();
					}; // end class LSException
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSSerializer : public java::lang::Object {
						public:
					            LSSerializer(jobject _jthis, bool copy);
					            LSSerializer(const LSSerializer &);
					        
						LSSerializer();
						virtual ~LSSerializer();
					}; // end class LSSerializer
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					
					class StyleSheet : public java::lang::Object {
						public:
					            StyleSheet(jobject _jthis, bool copy);
					            StyleSheet(const StyleSheet &);
					        
						StyleSheet();
						virtual ~StyleSheet();
					}; // end class StyleSheet
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets

	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					
					class XPathEvaluator : public java::lang::Object {
						public:
					            XPathEvaluator(jobject _jthis, bool copy);
					            XPathEvaluator(const XPathEvaluator &);
					        
						XPathEvaluator();
						virtual ~XPathEvaluator();
					}; // end class XPathEvaluator
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath

	namespace org{
		namespace xml{
			namespace sax{
				
				class ContentHandler : public java::lang::Object {
					public:
				            ContentHandler(jobject _jthis, bool copy);
				            ContentHandler(const ContentHandler &);
				        
					ContentHandler();
					virtual ~ContentHandler();
				}; // end class ContentHandler
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				
				class DTDHandler : public java::lang::Object {
					public:
				            DTDHandler(jobject _jthis, bool copy);
				            DTDHandler(const DTDHandler &);
				        
					DTDHandler();
					virtual ~DTDHandler();
				}; // end class DTDHandler
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				
				class SAXNotRecognizedException : public SAXException {
					public:
				            SAXNotRecognizedException(jobject _jthis, bool copy);
				            SAXNotRecognizedException(const SAXNotRecognizedException &);
				        
					SAXNotRecognizedException();
					SAXNotRecognizedException(jstring string_0);
					virtual ~SAXNotRecognizedException();
				}; // end class SAXNotRecognizedException
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					
					class EntityResolver2 : public java::lang::Object {
						public:
					            EntityResolver2(jobject _jthis, bool copy);
					            EntityResolver2(const EntityResolver2 &);
					        
						EntityResolver2();
						virtual ~EntityResolver2();
					}; // end class EntityResolver2
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext

	namespace crcl{
		namespace utils{
			
			class DefaultMain : public java::lang::Object {
				public:
			            DefaultMain(jobject _jthis, bool copy);
			            DefaultMain(const DefaultMain &);
			        
				DefaultMain();
				virtual ~DefaultMain();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class DefaultMain
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class PoseToleranceChecker : public java::lang::Object {
				public:
			            PoseToleranceChecker(jobject _jthis, bool copy);
			            PoseToleranceChecker(const PoseToleranceChecker &);
			        
				virtual ~PoseToleranceChecker();
				static jboolean containsNull(base::PoseType poseType_0);
				static jboolean containsNull(base::VectorType vectorType_0);
				static jboolean containsNull(base::PointType pointType_0);
				static jboolean containsNull(base::PoseToleranceType poseToleranceType_0);
				static jboolean isInTolerance(base::PointType pointType_0,base::PointType pointType_1,base::PoseToleranceType poseToleranceType_2);
				static jboolean isInTolerance(base::VectorType vectorType_0,base::VectorType vectorType_1,java::math::BigDecimal bigDecimal_2,base::AngleUnitEnumType angleUnitEnumType_3);
				static jboolean isInTolerance(java::math::BigDecimal bigDecimal_0,java::math::BigDecimal bigDecimal_1,java::math::BigDecimal bigDecimal_2);
				static jboolean isInTolerance(base::PoseType poseType_0,base::PoseType poseType_1,base::PoseToleranceType poseToleranceType_2,base::AngleUnitEnumType angleUnitEnumType_3);
			}; // end class PoseToleranceChecker
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class SimRobotEnum : public java::lang::Enum {
				public:
			            SimRobotEnum(jobject _jthis, bool copy);
			            SimRobotEnum(const SimRobotEnum &);
			        
				virtual ~SimRobotEnum();
				static jobjectArray values();
				static SimRobotEnum valueOf(jstring string_0);
			}; // end class SimRobotEnum
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class PendantClientOuterStub : public java::lang::Object {
				public:
			            PendantClientOuterStub(jobject _jthis, bool copy);
			            PendantClientOuterStub(const PendantClientOuterStub &);
			        
				PendantClientOuterStub();
				PendantClientOuterStub(jboolean boolean_0,jboolean boolean_1,jstring string_2,jint int_3,jboolean boolean_4,jboolean boolean_5,jboolean boolean_6,jboolean boolean_7,jboolean boolean_8,jboolean boolean_9);
				virtual ~PendantClientOuterStub();
				void finishConnect();
				void showMessage(jstring string_0);
				void showMessage(java::lang::Throwable throwable_0);
				jboolean showDebugMessage(jstring string_0);
				jboolean validateXmlSelected();
				jboolean replaceStateSelected();
				void finishDisconnect();
				void finishSetStatus();
				void checkXmlQuery(CRCLSocket cRCLSocket_0);
				void stopPollTimer();
				void checkPollSelected();
				jboolean isDebugWaitForDoneSelected();
				jboolean isDebugSendCommandSelected();
				jboolean isDebugReadStatusSelected();
				void showCurrentProgramLine(jint int_0);
				void finishOpenXmlProgramFile(java::io::File file_0,base::CRCLProgramType cRCLProgramType_1);
				base::CRCLProgramType editProgram(base::CRCLProgramType cRCLProgramType_0);
				void showLastProgramLineExecTimeMillisDists(jlong long_0,jdouble double_1);
				jboolean isRecordPoseSelected();
				jboolean isEXISelected();
				jboolean isUseReadStatusThreadSelected();
				jstring getHost();
				jint getPort();
			}; // end class PendantClientOuterStub
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class OverHeadJPanel : public javax::swing::JPanel {
				public:
			            OverHeadJPanel(jobject _jthis, bool copy);
			            OverHeadJPanel(const OverHeadJPanel &);
			        
				OverHeadJPanel();
				virtual ~OverHeadJPanel();
				SimRobotEnum getRobotType();
				void setRobotType(SimRobotEnum simRobotEnum_0);
				jdoubleArray getJointvals();
				void setJointvals(jdoubleArray doubleArray_0);
				void setSeglengths(jdoubleArray doubleArray_0);
			}; // end class OverHeadJPanel
		} // end namespace crcl
	} // end namespace utils

	namespace rcsdesign{
		
		class BackupLineData : public java::lang::Object {
			public:
		            BackupLineData(jobject _jthis, bool copy);
		            BackupLineData(const BackupLineData &);
		        
			virtual ~BackupLineData();
		}; // end class BackupLineData
	} // end namespace rcsdesign

	namespace rcs{
		namespace posemath{
			
			class PM_SPHERICAL : public PmSpherical {
				public:
			            PM_SPHERICAL(jobject _jthis, bool copy);
			            PM_SPHERICAL(const PM_SPHERICAL &);
			        
				PM_SPHERICAL();
				PM_SPHERICAL(jdouble double_0,jdouble double_1,jdouble double_2);
				virtual ~PM_SPHERICAL();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_SPHERICAL
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_XYA : public java::lang::Object {
				public:
			            PM_XYA(jobject _jthis, bool copy);
			            PM_XYA(const PM_XYA &);
			        
				PM_XYA(jdouble double_0,jdouble double_1,jdouble double_2);
				PM_XYA();
				PM_XYA(PmCartesian pmCartesian_0);
				PM_XYA(PmPose pmPose_0);
				PM_XYA(PM_POSE pM_POSE_0);
				virtual ~PM_XYA();
				jdouble getX();
				jdouble getY();
				void setX(jdouble double_0);
				void setY(jdouble double_0);
				PM_XYA inv();
				jdouble getA();
				void setA(jdouble double_0);
				jstring toString();
				PM_XYA clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
				static PM_XYA valueOf(jstring string_0);
			}; // end class PM_XYA
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_HOMOGENEOUS : public PmHomogeneous {
				public:
			            PM_HOMOGENEOUS(jobject _jthis, bool copy);
			            PM_HOMOGENEOUS(const PM_HOMOGENEOUS &);
			        
				PM_HOMOGENEOUS(PM_CARTESIAN pM_CARTESIAN_0,PM_ROTATION_MATRIX pM_ROTATION_MATRIX_1);
				PM_HOMOGENEOUS();
				PM_HOMOGENEOUS(jfloatArray floatArray_0);
				virtual ~PM_HOMOGENEOUS();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_HOMOGENEOUS
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_LINE : public java::lang::Object {
				public:
			            PM_LINE(jobject _jthis, bool copy);
			            PM_LINE(const PM_LINE &);
			        
				PM_LINE(PM_CARTESIAN pM_CARTESIAN_0,PM_CARTESIAN pM_CARTESIAN_1);
				PM_LINE();
				virtual ~PM_LINE();
				PM_CARTESIAN intersection(PM_LINE pM_LINE_0);
				PM_CARTESIAN getStart();
				void setStart(PM_CARTESIAN pM_CARTESIAN_0);
				PM_CARTESIAN getEnd();
				void setEnd(PM_CARTESIAN pM_CARTESIAN_0);
				PM_CARTESIAN getuVec();
				void setuVec(PM_CARTESIAN pM_CARTESIAN_0);
				jstring toString();
				PM_LINE clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_LINE
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PmException : public java::lang::Exception {
				public:
			            PmException(jobject _jthis, bool copy);
			            PmException(const PmException &);
			        
				PmException(jint int_0,jstring string_1);
				virtual ~PmException();
			}; // end class PmException
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_ROTATION_MATRIX : public PmRotationMatrix {
				public:
			            PM_ROTATION_MATRIX(jobject _jthis, bool copy);
			            PM_ROTATION_MATRIX(const PM_ROTATION_MATRIX &);
			        
				PM_ROTATION_MATRIX(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5,jdouble double_6,jdouble double_7,jdouble double_8);
				PM_ROTATION_MATRIX(PM_ROTATION_VECTOR pM_ROTATION_VECTOR_0);
				PM_ROTATION_MATRIX(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				PM_ROTATION_MATRIX();
				virtual ~PM_ROTATION_MATRIX();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_ROTATION_MATRIX
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		
		class ClassChooser : public java::lang::Object {
			public:
		            ClassChooser(jobject _jthis, bool copy);
		            ClassChooser(const ClassChooser &);
		        
			ClassChooser();
			virtual ~ClassChooser();
			static void main(jobjectArray stringArray_0);
			static void main(int argc,const char **argv);
		}; // end class ClassChooser
	} // end namespace rcs

	namespace rcs{
		namespace nml{
			
			class XMLFormatConverter : public NMLFormatConverterBase {
				public:
			            XMLFormatConverter(jobject _jthis, bool copy);
			            XMLFormatConverter(const XMLFormatConverter &);
			        
				XMLFormatConverter();
				virtual ~XMLFormatConverter();
				void beginClass(jstring string_0,jstring string_1);
				void beginClassVar(jstring string_0);
				void endClassVar(jstring string_0);
				jint update_with_name(jstring string_0,jint int_1);
				jlong update_with_name(jstring string_0,jlong long_1);
				jfloat update_with_name(jstring string_0,jfloat float_1);
				jdouble update_with_name(jstring string_0,jdouble double_1);
				jboolean update_with_name(jstring string_0,jboolean boolean_1);
				jbyte update_with_name(jstring string_0,jbyte byte_1);
				jchar update_with_name(jstring string_0,jchar char_1);
				jshort update_with_name(jstring string_0,jshort short_1);
				void update_with_name(jstring string_0,jintArray intArray_1,jint int_2);
				void update_with_name(jstring string_0,jlongArray longArray_1,jint int_2);
				void update_with_name(jstring string_0,jfloatArray floatArray_1,jint int_2);
				void update_with_name(jstring string_0,jdoubleArray doubleArray_1,jint int_2);
				void update_with_name(jstring string_0,jshortArray shortArray_1,jint int_2);
				void update_with_name(jstring string_0,jbooleanArray booleanArray_1,jint int_2);
				void update_with_name(jstring string_0,jbyteArray byteArray_1,jint int_2);
				void update_with_name(jstring string_0,jcharArray charArray_1,jint int_2);
				void endClass(jstring string_0,jstring string_1);
				void update_unsigned_with_name(jstring string_0,jbyteArray byteArray_1,jint int_2);
				void beginBaseClass(jstring string_0);
				void endBaseClass(jstring string_0);
				void beginClassArrayElem(jstring string_0,jint int_1);
				void endClassArrayElem(jstring string_0,jint int_1);
				jint update_enumeration_with_name(jstring string_0,jint int_1,NML_ENUM_INFO nML_ENUM_INFO_2);
				void update_enumeration_array_with_name(jstring string_0,jintArray intArray_1,jint int_2,NML_ENUM_INFO nML_ENUM_INFO_3);
				void update_attribute_with_name(jstring string_0,jdoubleArray doubleArray_1,jint int_2);
				void update_attribute_with_name(jstring string_0,jfloatArray floatArray_1,jint int_2);
				void update_attribute_with_name(jstring string_0,jlongArray longArray_1,jint int_2);
				jbyte update_attribute_with_name(jstring string_0,jbyte byte_1);
				jboolean update_attribute_with_name(jstring string_0,jboolean boolean_1);
				void update_attribute_with_name(jstring string_0,jbyteArray byteArray_1,jint int_2);
				void update_attribute_with_name(jstring string_0,jcharArray charArray_1,jint int_2);
				void update_attribute_with_name(jstring string_0,jshortArray shortArray_1,jint int_2);
				void update_attribute_with_name(jstring string_0,jintArray intArray_1,jint int_2);
				jfloat update_attribute_with_name(jstring string_0,jfloat float_1);
				jlong update_attribute_with_name(jstring string_0,jlong long_1);
				jshort update_attribute_with_name(jstring string_0,jshort short_1);
				jchar update_attribute_with_name(jstring string_0,jchar char_1);
				jint update_attribute_with_name(jstring string_0,jint int_1);
				jdouble update_attribute_with_name(jstring string_0,jdouble double_1);
				jint check_type_info(NML_ENUM_INFO nML_ENUM_INFO_0);
				jbyteArray update_unbounded_attribute_with_name(jstring string_0,jbyteArray byteArray_1);
				jlongArray update_unbounded_with_name(jstring string_0,jlongArray longArray_1);
				jintArray update_unbounded_with_name(jstring string_0,jintArray intArray_1);
				jshortArray update_unbounded_with_name(jstring string_0,jshortArray shortArray_1);
				jbyteArray update_unbounded_with_name(jstring string_0,jbyteArray byteArray_1);
				jfloatArray update_unbounded_with_name(jstring string_0,jfloatArray floatArray_1);
				jdoubleArray update_unbounded_with_name(jstring string_0,jdoubleArray doubleArray_1);
				jint update_dla_length_with_name(jstring string_0,jint int_1);
				void update_CMS_TIME(CMS_TIME cMS_TIME_0);
				void update_CMS_DATE(CMS_DATE cMS_DATE_0);
				jstring convertMsgToXML(NMLmsg nMLmsg_0);
				NMLmsg readXmlFromFile(jstring string_0);
				NMLmsg readXmlFromURL(java::net::URL uRL_0);
				static jstring limitString(jstring string_0,jint int_1);
				NMLmsg convertXMLToMsg(jstring string_0);
				jstring get_content(jstring string_0);
				jstring get_attribute(jstring string_0);
				jstring toString();
				void update(jbyteArray byteArray_0,jint int_1);
				jchar update(jchar char_0);
				void update(jcharArray charArray_0,jint int_1);
				void update(jdoubleArray doubleArray_0,jint int_1);
				jshort update(jshort short_0);
				jboolean update(jboolean boolean_0);
				void update(jbooleanArray booleanArray_0,jint int_1);
				jbyte update(jbyte byte_0);
				void update(jlongArray longArray_0,jint int_1);
				jfloat update(jfloat float_0);
				void update(jfloatArray floatArray_0,jint int_1);
				jdouble update(jdouble double_0);
				void update(jshortArray shortArray_0,jint int_1);
				jint update(jint int_0);
				void update(jintArray intArray_0,jint int_1);
				jlong update(jlong long_0);
			}; // end class XMLFormatConverter
		} // end namespace rcs
	} // end namespace nml

	namespace diagapplet{
		
		class plotSetPreserve : public java::lang::Object {
			public:
		            plotSetPreserve(jobject _jthis, bool copy);
		            plotSetPreserve(const plotSetPreserve &);
		        
			plotSetPreserve();
			virtual ~plotSetPreserve();
			jint getGraphFunction();
			jint getFuncArg();
			void setGraphFunction(jint int_0);
			void setFuncArg(jint int_0);
			java::util::Vector getPlotList();
			void setPlotList(java::util::Vector vector_0);
		}; // end class plotSetPreserve
	} // end namespace diagapplet

	namespace diagapplet{
		
		class auxBufferPreserve : public java::lang::Object {
			public:
		            auxBufferPreserve(jobject _jthis, bool copy);
		            auxBufferPreserve(const auxBufferPreserve &);
		        
			auxBufferPreserve();
			virtual ~auxBufferPreserve();
			void setPreviousMessages(java::util::Hashtable hashtable_0);
			jint getLastSelectedMessageIndex();
			void setLastSelectedMessageIndex(jint int_0);
			java::util::Hashtable getPreviousMessages();
			jstring getName();
			void setName(jstring string_0);
		}; // end class auxBufferPreserve
	} // end namespace diagapplet

	namespace diagapplet{
		
		class LineInfo : public java::lang::Object {
			public:
		            LineInfo(jobject _jthis, bool copy);
		            LineInfo(const LineInfo &);
		        
			virtual ~LineInfo();
		}; // end class LineInfo
	} // end namespace diagapplet

	namespace diagapplet{
		namespace CodeGen{
			
			class STI_Tokenizer : public java::lang::Object {
				public:
			            STI_Tokenizer(jobject _jthis, bool copy);
			            STI_Tokenizer(const STI_Tokenizer &);
			        
				virtual ~STI_Tokenizer();
				static void ErrorPrint(jstring string_0);
				jboolean skipInfoTokenInSameArray();
				static void DebugPrint2(jstring string_0);
				jboolean skipInfoTokenInSameStruct();
				void throwAwayToken();
				jboolean hasMoreElements();
				jstring nextToken();
				jboolean hasMoreTokens();
			}; // end class STI_Tokenizer
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class StringFuncs : public java::lang::Object {
				public:
			            StringFuncs(jobject _jthis, bool copy);
			            StringFuncs(const StringFuncs &);
			        
				StringFuncs();
				virtual ~StringFuncs();
				static jstring GetParameter(jstring string_0,jobjectArray stringArray_1,java::util::Hashtable hashtable_2,jobjectArray stringArray_3);
				static jobjectArray SortClassList(jobjectArray stringArray_0,CodeGenCommonInterface2 codeGenCommonInterface2_1,java::util::Hashtable hashtable_2);
				static jstring replaceAllInString(jstring string_0,jstring string_1,jstring string_2);
				static jstring replaceFirstInString(jstring string_0,jstring string_1,jstring string_2);
				static jstring replace_white_space(jstring string_0);
				static jstring getenv(jstring string_0);
			}; // end class StringFuncs
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace utils{
			
			class URlLoadInfoFrame : public javax::swing::JFrame {
				public:
			            URlLoadInfoFrame(jobject _jthis, bool copy);
			            URlLoadInfoFrame(const URlLoadInfoFrame &);
			        
				URlLoadInfoFrame();
				virtual ~URlLoadInfoFrame();
				URLLoadInfoPanelInterface get_uRLLoadInfoPanel();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class URlLoadInfoFrame
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class FakeFastListPanel : public java::lang::Object {
				public:
			            FakeFastListPanel(jobject _jthis, bool copy);
			            FakeFastListPanel(const FakeFastListPanel &);
			        
				FakeFastListPanel();
				virtual ~FakeFastListPanel();
				jstring getItem(jint int_0);
				jint getItemCount();
				void select(jint int_0);
				jint countItems();
				jboolean isSelected(jint int_0);
				jintArray getSelectedIndexes();
				jint getSelectedIndex();
				void replaceItem(jstring string_0,jint int_1);
				void replaceItem(jstring string_0,jint int_1,jint int_2);
				void deselect(jint int_0);
				jstring getSelectedItem();
				jint getSelectedVarNumber();
				jobjectArray getSelectedItems();
				jint getVarNumber(jint int_0);
				void add(jstring string_0,jint int_1);
				void add(jstring string_0);
				void add(jstring string_0,jint int_1,jint int_2);
				void clear();
				void removeAll();
			}; // end class FakeFastListPanel
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class CountButtonInterface : public java::lang::Object {
				public:
			            CountButtonInterface(jobject _jthis, bool copy);
			            CountButtonInterface(const CountButtonInterface &);
			        
				CountButtonInterface();
				virtual ~CountButtonInterface();
			}; // end class CountButtonInterface
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class SaveImage : public java::lang::Object {
				public:
			            SaveImage(jobject _jthis, bool copy);
			            SaveImage(const SaveImage &);
			        
				SaveImage();
				virtual ~SaveImage();
				static jbyteArray bayer_NearestNeighbor(jbyteArray byteArray_0,jint int_1,jint int_2,SaveImage::BAYER_PATTERN bAYER_PATTERN_3);
				static java::awt::image::BufferedImage BayerByteArrayToImage(jbyteArray byteArray_0,jint int_1,jint int_2,SaveImage::BAYER_PATTERN bAYER_PATTERN_3);
				static java::awt::image::BufferedImage BayerByteArrayToImage(jbyteArray byteArray_0,jint int_1,jint int_2);
				static java::awt::image::BufferedImage ByteArrayToImage(jbyteArray byteArray_0,jint int_1,jint int_2);
				static void SaveImageAs(java::awt::Image image_0,java::awt::Component component_1);
				static void SaveImageFileBySuffix(java::awt::Image image_0,jstring string_1);
			}; // end class SaveImage
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class DiagError : public java::lang::Object {
				public:
			            DiagError(jobject _jthis, bool copy);
			            DiagError(const DiagError &);
			        
				DiagError();
				virtual ~DiagError();
				static void AddDiagErrorAppender(DiagErrorAppendInterface diagErrorAppendInterface_0);
				static void ClearErrorAppendersList();
				static void PrintException(java::lang::Exception exception_0);
				static void println(jstring string_0);
			}; // end class DiagError
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class CountListInterface : public java::lang::Object {
				public:
			            CountListInterface(jobject _jthis, bool copy);
			            CountListInterface(const CountListInterface &);
			        
				CountListInterface();
				virtual ~CountListInterface();
			}; // end class CountListInterface
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		
		class diagappletFrame : public java::awt::Frame {
			public:
		            diagappletFrame(jobject _jthis, bool copy);
		            diagappletFrame(const diagappletFrame &);
		        
			diagappletFrame(jstring string_0);
			virtual ~diagappletFrame();
			void windowOpened(java::awt::event::WindowEvent windowEvent_0);
			void windowClosing(java::awt::event::WindowEvent windowEvent_0);
			void windowClosed(java::awt::event::WindowEvent windowEvent_0);
			void windowIconified(java::awt::event::WindowEvent windowEvent_0);
			void windowDeiconified(java::awt::event::WindowEvent windowEvent_0);
			void windowActivated(java::awt::event::WindowEvent windowEvent_0);
			void windowDeactivated(java::awt::event::WindowEvent windowEvent_0);
			void componentResized(java::awt::event::ComponentEvent componentEvent_0);
			void componentMoved(java::awt::event::ComponentEvent componentEvent_0);
			void componentShown(java::awt::event::ComponentEvent componentEvent_0);
			void componentHidden(java::awt::event::ComponentEvent componentEvent_0);
			void RecheckSize();
			void resizeInnerApplet();
			void manual_resize(jint int_0,jint int_1);
		}; // end class diagappletFrame
	} // end namespace diagapplet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Sin : public java::lang::Object {
								public:
							            Sin(jobject _jthis, bool copy);
							            Sin(const Sin &);
							        
								Sin();
								virtual ~Sin();
								DifferentiableUnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Sin
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Ceil : public java::lang::Object {
								public:
							            Ceil(jobject _jthis, bool copy);
							            Ceil(const Ceil &);
							        
								Ceil();
								virtual ~Ceil();
								jdouble value(jdouble double_0);
							}; // end class Ceil
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Sinc : public java::lang::Object {
								public:
							            Sinc(jobject _jthis, bool copy);
							            Sinc(const Sinc &);
							        
								Sinc();
								Sinc(jboolean boolean_0);
								virtual ~Sinc();
								UnivariateFunction derivative();
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
								jdouble value(jdouble double_0);
							}; // end class Sinc
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class UnivariateSolverUtils : public java::lang::Object {
								public:
							            UnivariateSolverUtils(jobject _jthis, bool copy);
							            UnivariateSolverUtils(const UnivariateSolverUtils &);
							        
								virtual ~UnivariateSolverUtils();
								static jboolean isBracketing(UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2);
								static jboolean isSequence(jdouble double_0,jdouble double_1,jdouble double_2);
								static void verifyInterval(jdouble double_0,jdouble double_1);
								static void verifySequence(jdouble double_0,jdouble double_1,jdouble double_2);
								static void verifyBracketing(UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2);
								static jdouble solve(UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2);
								static jdouble solve(UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2,jdouble double_3);
								static jdouble forceSide(jint int_0,UnivariateFunction univariateFunction_1,BracketedUnivariateSolver bracketedUnivariateSolver_2,jdouble double_3,jdouble double_4,jdouble double_5,AllowedSolution allowedSolution_6);
								static jdoubleArray bracket(UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2,jdouble double_3,jint int_4);
								static jdoubleArray bracket(UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5,jint int_6);
								static jdoubleArray bracket(UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2,jdouble double_3);
								static jdouble midpoint(jdouble double_0,jdouble double_1);
							}; // end class UnivariateSolverUtils
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class RiddersSolver : public AbstractUnivariateSolver {
								public:
							            RiddersSolver(jobject _jthis, bool copy);
							            RiddersSolver(const RiddersSolver &);
							        
								RiddersSolver();
								RiddersSolver(jdouble double_0,jdouble double_1);
								RiddersSolver(jdouble double_0);
								virtual ~RiddersSolver();
							}; // end class RiddersSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class BaseUnivariateSolver : public java::lang::Object {
								public:
							            BaseUnivariateSolver(jobject _jthis, bool copy);
							            BaseUnivariateSolver(const BaseUnivariateSolver &);
							        
								BaseUnivariateSolver();
								virtual ~BaseUnivariateSolver();
							}; // end class BaseUnivariateSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class DifferentiableMultivariateVectorFunction : public java::lang::Object {
							public:
						            DifferentiableMultivariateVectorFunction(jobject _jthis, bool copy);
						            DifferentiableMultivariateVectorFunction(const DifferentiableMultivariateVectorFunction &);
						        
							DifferentiableMultivariateVectorFunction();
							virtual ~DifferentiableMultivariateVectorFunction();
						}; // end class DifferentiableMultivariateVectorFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class MultivariateVectorFunction : public java::lang::Object {
							public:
						            MultivariateVectorFunction(jobject _jthis, bool copy);
						            MultivariateVectorFunction(const MultivariateVectorFunction &);
						        
							MultivariateVectorFunction();
							virtual ~MultivariateVectorFunction();
						}; // end class MultivariateVectorFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class ClassicalRungeKuttaIntegrator : public RungeKuttaIntegrator {
								public:
							            ClassicalRungeKuttaIntegrator(jobject _jthis, bool copy);
							            ClassicalRungeKuttaIntegrator(const ClassicalRungeKuttaIntegrator &);
							        
								ClassicalRungeKuttaIntegrator(jdouble double_0);
								virtual ~ClassicalRungeKuttaIntegrator();
							}; // end class ClassicalRungeKuttaIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class JacobianMatrices : public java::lang::Object {
							public:
						            JacobianMatrices(jobject _jthis, bool copy);
						            JacobianMatrices(const JacobianMatrices &);
						        
							JacobianMatrices(FirstOrderDifferentialEquations firstOrderDifferentialEquations_0,jdoubleArray doubleArray_1,jobjectArray stringArray_2);
							JacobianMatrices(MainStateJacobianProvider mainStateJacobianProvider_0,jobjectArray stringArray_1);
							virtual ~JacobianMatrices();
							void registerVariationalEquations(ExpandableStatefulODE expandableStatefulODE_0);
							void addParameterJacobianProvider(ParameterJacobianProvider parameterJacobianProvider_0);
							void setParameterizedODE(ParameterizedODE parameterizedODE_0);
							void setParameterStep(jstring string_0,jdouble double_1);
							void setInitialParameterJacobian(jstring string_0,jdoubleArray doubleArray_1);
							void getCurrentParameterJacobian(jstring string_0,jdoubleArray doubleArray_1);
						}; // end class JacobianMatrices
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							
							class EventFilter : public java::lang::Object {
								public:
							            EventFilter(jobject _jthis, bool copy);
							            EventFilter(const EventFilter &);
							        
								EventFilter(EventHandler eventHandler_0,FilterType filterType_1);
								virtual ~EventFilter();
								jdouble g(jdouble double_0,jdoubleArray doubleArray_1);
								void resetState(jdouble double_0,jdoubleArray doubleArray_1);
								EventHandler::Action eventOccurred(jdouble double_0,jdoubleArray doubleArray_1,jboolean boolean_2);
								void init(jdouble double_0,jdoubleArray doubleArray_1,jdouble double_2);
							}; // end class EventFilter
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							
							class EventState : public java::lang::Object {
								public:
							            EventState(jobject _jthis, bool copy);
							            EventState(const EventState &);
							        
								EventState(EventHandler eventHandler_0,jdouble double_1,jdouble double_2,jint int_3,analysis::solvers::UnivariateSolver univariateSolver_4);
								virtual ~EventState();
								EventHandler getEventHandler();
								void setExpandable(ExpandableStatefulODE expandableStatefulODE_0);
								void reinitializeBegin(sampling::StepInterpolator stepInterpolator_0);
								jboolean evaluateStep(sampling::StepInterpolator stepInterpolator_0);
								jdouble getEventTime();
								void stepAccepted(jdouble double_0,jdoubleArray doubleArray_1);
								jdouble getMaxCheckInterval();
								jdouble getConvergence();
								jint getMaxIterationCount();
								jboolean stop();
								jboolean reset(jdouble double_0,jdoubleArray doubleArray_1);
							}; // end class EventState
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							
							class NonLinearConjugateGradientOptimizer : public AbstractScalarDifferentiableOptimizer {
								public:
							            NonLinearConjugateGradientOptimizer(jobject _jthis, bool copy);
							            NonLinearConjugateGradientOptimizer(const NonLinearConjugateGradientOptimizer &);
							        
								NonLinearConjugateGradientOptimizer(ConjugateGradientFormula conjugateGradientFormula_0);
								NonLinearConjugateGradientOptimizer(ConjugateGradientFormula conjugateGradientFormula_0,ConvergenceChecker convergenceChecker_1);
								NonLinearConjugateGradientOptimizer(ConjugateGradientFormula conjugateGradientFormula_0,ConvergenceChecker convergenceChecker_1,analysis::solvers::UnivariateSolver univariateSolver_2);
								NonLinearConjugateGradientOptimizer(ConjugateGradientFormula conjugateGradientFormula_0,ConvergenceChecker convergenceChecker_1,analysis::solvers::UnivariateSolver univariateSolver_2,Preconditioner preconditioner_3);
								virtual ~NonLinearConjugateGradientOptimizer();
								void setInitialStep(jdouble double_0);
							}; // end class NonLinearConjugateGradientOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class Variance : public AbstractStorelessUnivariateStatistic {
									public:
								            Variance(jobject _jthis, bool copy);
								            Variance(const Variance &);
								        
									Variance();
									Variance(Variance variance_0);
									Variance(jboolean boolean_0,SecondMoment secondMoment_1);
									Variance(SecondMoment secondMoment_0);
									Variance(jboolean boolean_0);
									virtual ~Variance();
									jdouble evaluate(jdoubleArray doubleArray_0,jdouble double_1);
									jdouble evaluate(jdoubleArray doubleArray_0,jdouble double_1,jint int_2,jint int_3);
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
									jdouble evaluate(jdoubleArray doubleArray_0);
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jint int_2,jint int_3);
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2,jint int_3,jint int_4);
									jlong getN();
									jboolean isBiasCorrected();
									void setBiasCorrected(jboolean boolean_0);
									void clear();
									void increment(jdouble double_0);
									static void copy(Variance variance_0,Variance variance_1);
									Variance copy();
									jdouble getResult();
								}; // end class Variance
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class SynchronizedDescriptiveStatistics : public DescriptiveStatistics {
								public:
							            SynchronizedDescriptiveStatistics(jobject _jthis, bool copy);
							            SynchronizedDescriptiveStatistics(const SynchronizedDescriptiveStatistics &);
							        
								SynchronizedDescriptiveStatistics();
								SynchronizedDescriptiveStatistics(jint int_0);
								SynchronizedDescriptiveStatistics(SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics_0);
								virtual ~SynchronizedDescriptiveStatistics();
								jdoubleArray getValues();
								void addValue(jdouble double_0);
								jlong getN();
								jdouble getStandardDeviation();
								jint getWindowSize();
								void setWindowSize(jint int_0);
								jdouble getElement(jint int_0);
								jdouble getQuadraticMean();
								jstring toString();
								void clear();
								jdouble apply(UnivariateStatistic univariateStatistic_0);
								static void copy(SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics_0,SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics_1);
								SynchronizedDescriptiveStatistics copy();
							}; // end class SynchronizedDescriptiveStatistics
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class StorelessUnivariateStatistic : public java::lang::Object {
								public:
							            StorelessUnivariateStatistic(jobject _jthis, bool copy);
							            StorelessUnivariateStatistic(const StorelessUnivariateStatistic &);
							        
								StorelessUnivariateStatistic();
								virtual ~StorelessUnivariateStatistic();
							}; // end class StorelessUnivariateStatistic
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						
						class UnivariateDfpFunction : public java::lang::Object {
							public:
						            UnivariateDfpFunction(jobject _jthis, bool copy);
						            UnivariateDfpFunction(const UnivariateDfpFunction &);
						        
							UnivariateDfpFunction();
							virtual ~UnivariateDfpFunction();
						}; // end class UnivariateDfpFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						
						class DfpMath : public java::lang::Object {
							public:
						            DfpMath(jobject _jthis, bool copy);
						            DfpMath(const DfpMath &);
						        
							virtual ~DfpMath();
							static Dfp sin(Dfp dfp_0);
							static Dfp cos(Dfp dfp_0);
							static Dfp tan(Dfp dfp_0);
							static Dfp log(Dfp dfp_0);
							static Dfp pow(Dfp dfp_0,Dfp dfp_1);
							static Dfp pow(Dfp dfp_0,jint int_1);
							static Dfp exp(Dfp dfp_0);
							static Dfp asin(Dfp dfp_0);
							static Dfp acos(Dfp dfp_0);
							static Dfp atan(Dfp dfp_0);
						}; // end class DfpMath
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						
						class Beta : public java::lang::Object {
							public:
						            Beta(jobject _jthis, bool copy);
						            Beta(const Beta &);
						        
							virtual ~Beta();
							static jdouble regularizedBeta(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jint int_4);
							static jdouble regularizedBeta(jdouble double_0,jdouble double_1,jdouble double_2,jint int_3);
							static jdouble regularizedBeta(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
							static jdouble regularizedBeta(jdouble double_0,jdouble double_1,jdouble double_2);
							static jdouble logBeta(jdouble double_0,jdouble double_1);
							static jdouble logBeta(jdouble double_0,jdouble double_1,jdouble double_2,jint int_3);
						}; // end class Beta
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace special

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						
						class MeasurementModel : public java::lang::Object {
							public:
						            MeasurementModel(jobject _jthis, bool copy);
						            MeasurementModel(const MeasurementModel &);
						        
							MeasurementModel();
							virtual ~MeasurementModel();
						}; // end class MeasurementModel
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						
						class DefaultProcessModel : public java::lang::Object {
							public:
						            DefaultProcessModel(jobject _jthis, bool copy);
						            DefaultProcessModel(const DefaultProcessModel &);
						        
							DefaultProcessModel(linear::RealMatrix realMatrix_0,linear::RealMatrix realMatrix_1,linear::RealMatrix realMatrix_2,linear::RealVector realVector_3,linear::RealMatrix realMatrix_4);
							virtual ~DefaultProcessModel();
							linear::RealMatrix getProcessNoise();
							linear::RealVector getInitialStateEstimate();
							linear::RealMatrix getInitialErrorCovariance();
							linear::RealMatrix getStateTransitionMatrix();
							linear::RealMatrix getControlMatrix();
						}; // end class DefaultProcessModel
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					
					class RealFieldElement : public java::lang::Object {
						public:
					            RealFieldElement(jobject _jthis, bool copy);
					            RealFieldElement(const RealFieldElement &);
					        
						RealFieldElement();
						virtual ~RealFieldElement();
					}; // end class RealFieldElement
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace math3

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					
					class FieldElement : public java::lang::Object {
						public:
					            FieldElement(jobject _jthis, bool copy);
					            FieldElement(const FieldElement &);
					        
						FieldElement();
						virtual ~FieldElement();
					}; // end class FieldElement
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace math3

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					
					class Field : public java::lang::Object {
						public:
					            Field(jobject _jthis, bool copy);
					            Field(const Field &);
					        
						Field();
						virtual ~Field();
					}; // end class Field
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace math3

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								namespace jacobian{
									
									class LevenbergMarquardtOptimizer : public AbstractLeastSquaresOptimizer {
										public:
									            LevenbergMarquardtOptimizer(jobject _jthis, bool copy);
									            LevenbergMarquardtOptimizer(const LevenbergMarquardtOptimizer &);
									        
										LevenbergMarquardtOptimizer(ConvergenceChecker convergenceChecker_0);
										LevenbergMarquardtOptimizer(jdouble double_0,ConvergenceChecker convergenceChecker_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
										LevenbergMarquardtOptimizer(jdouble double_0,jdouble double_1,jdouble double_2);
										LevenbergMarquardtOptimizer(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
										LevenbergMarquardtOptimizer();
										virtual ~LevenbergMarquardtOptimizer();
									}; // end class LevenbergMarquardtOptimizer
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace vector
	} // end namespace jacobian

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									
									class MultiDirectionalSimplex : public AbstractSimplex {
										public:
									            MultiDirectionalSimplex(jobject _jthis, bool copy);
									            MultiDirectionalSimplex(const MultiDirectionalSimplex &);
									        
										MultiDirectionalSimplex(jdoubleArray doubleArray_0,jdouble double_1,jdouble double_2);
										MultiDirectionalSimplex(jint int_0);
										MultiDirectionalSimplex(jint int_0,jdouble double_1);
										MultiDirectionalSimplex(jint int_0,jdouble double_1,jdouble double_2);
										MultiDirectionalSimplex(jint int_0,jdouble double_1,jdouble double_2,jdouble double_3);
										MultiDirectionalSimplex(jdoubleArray doubleArray_0);
										virtual ~MultiDirectionalSimplex();
										void iterate(analysis::MultivariateFunction multivariateFunction_0,java::util::Comparator comparator_1);
									}; // end class MultiDirectionalSimplex
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class MultiStartMultivariateOptimizer : public BaseMultiStartMultivariateOptimizer {
									public:
								            MultiStartMultivariateOptimizer(jobject _jthis, bool copy);
								            MultiStartMultivariateOptimizer(const MultiStartMultivariateOptimizer &);
								        
									MultiStartMultivariateOptimizer(MultivariateOptimizer multivariateOptimizer_0,jint int_1,random::RandomVectorGenerator randomVectorGenerator_2);
									virtual ~MultiStartMultivariateOptimizer();
									jobjectArray getOptima();
								}; // end class MultiStartMultivariateOptimizer
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class ObjectiveFunction : public java::lang::Object {
									public:
								            ObjectiveFunction(jobject _jthis, bool copy);
								            ObjectiveFunction(const ObjectiveFunction &);
								        
									ObjectiveFunction(analysis::MultivariateFunction multivariateFunction_0);
									virtual ~ObjectiveFunction();
									analysis::MultivariateFunction getObjectiveFunction();
								}; // end class ObjectiveFunction
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class MultivariateFunctionMappingAdapter : public java::lang::Object {
									public:
								            MultivariateFunctionMappingAdapter(jobject _jthis, bool copy);
								            MultivariateFunctionMappingAdapter(const MultivariateFunctionMappingAdapter &);
								        
									MultivariateFunctionMappingAdapter(analysis::MultivariateFunction multivariateFunction_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
									virtual ~MultivariateFunctionMappingAdapter();
									jdoubleArray unboundedToBounded(jdoubleArray doubleArray_0);
									jdoubleArray boundedToUnbounded(jdoubleArray doubleArray_0);
									jdouble value(jdoubleArray doubleArray_0);
								}; // end class MultivariateFunctionMappingAdapter
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class GoalType : public java::lang::Enum {
									public:
								            GoalType(jobject _jthis, bool copy);
								            GoalType(const GoalType &);
								        
									virtual ~GoalType();
									static jobjectArray values();
									static GoalType valueOf(jstring string_0);
								}; // end class GoalType
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							
							class SimpleUnivariateValueChecker : public AbstractConvergenceChecker {
								public:
							            SimpleUnivariateValueChecker(jobject _jthis, bool copy);
							            SimpleUnivariateValueChecker(const SimpleUnivariateValueChecker &);
							        
								SimpleUnivariateValueChecker(jdouble double_0,jdouble double_1,jint int_2);
								SimpleUnivariateValueChecker(jdouble double_0,jdouble double_1);
								virtual ~SimpleUnivariateValueChecker();
								jboolean converged(jint int_0,UnivariatePointValuePair univariatePointValuePair_1,UnivariatePointValuePair univariatePointValuePair_2);
							}; // end class SimpleUnivariateValueChecker
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							
							class BrentOptimizer : public UnivariateOptimizer {
								public:
							            BrentOptimizer(jobject _jthis, bool copy);
							            BrentOptimizer(const BrentOptimizer &);
							        
								BrentOptimizer(jdouble double_0,jdouble double_1,ConvergenceChecker convergenceChecker_2);
								BrentOptimizer(jdouble double_0,jdouble double_1);
								virtual ~BrentOptimizer();
							}; // end class BrentOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							
							class UnivariatePointValuePair : public java::lang::Object {
								public:
							            UnivariatePointValuePair(jobject _jthis, bool copy);
							            UnivariatePointValuePair(const UnivariatePointValuePair &);
							        
								UnivariatePointValuePair(jdouble double_0,jdouble double_1);
								virtual ~UnivariatePointValuePair();
								jdouble getPoint();
								jdouble getValue();
							}; // end class UnivariatePointValuePair
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class SimplexTableau : public java::lang::Object {
								public:
							            SimplexTableau(jobject _jthis, bool copy);
							            SimplexTableau(const SimplexTableau &);
							        
								virtual ~SimplexTableau();
								java::util::List normalizeConstraints(java::util::Collection collection_0);
								jint hashCode();
							}; // end class SimplexTableau
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class AbstractOptimizationProblem : public java::lang::Object {
							public:
						            AbstractOptimizationProblem(jobject _jthis, bool copy);
						            AbstractOptimizationProblem(const AbstractOptimizationProblem &);
						        
							virtual ~AbstractOptimizationProblem();
							ConvergenceChecker getConvergenceChecker();
							util::Incrementor getIterationCounter();
							util::Incrementor getEvaluationCounter();
						}; // end class AbstractOptimizationProblem
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class OptimizationData : public java::lang::Object {
							public:
						            OptimizationData(jobject _jthis, bool copy);
						            OptimizationData(const OptimizationData &);
						        
							OptimizationData();
							virtual ~OptimizationData();
						}; // end class OptimizationData
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						namespace fitting{
							
							class MultivariateNormalMixtureExpectationMaximization : public java::lang::Object {
								public:
							            MultivariateNormalMixtureExpectationMaximization(jobject _jthis, bool copy);
							            MultivariateNormalMixtureExpectationMaximization(const MultivariateNormalMixtureExpectationMaximization &);
							        
								virtual ~MultivariateNormalMixtureExpectationMaximization();
								void fit(MixtureMultivariateNormalDistribution mixtureMultivariateNormalDistribution_0);
								void fit(MixtureMultivariateNormalDistribution mixtureMultivariateNormalDistribution_0,jint int_1,jdouble double_2);
								jdouble getLogLikelihood();
								MixtureMultivariateNormalDistribution getFittedModel();
							}; // end class MultivariateNormalMixtureExpectationMaximization
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace distribution
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class UniformRealDistribution : public AbstractRealDistribution {
							public:
						            UniformRealDistribution(jobject _jthis, bool copy);
						            UniformRealDistribution(const UniformRealDistribution &);
						        
							UniformRealDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							UniformRealDistribution(jdouble double_0,jdouble double_1);
							UniformRealDistribution();
							UniformRealDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							UniformRealDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							virtual ~UniformRealDistribution();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble sample();
						}; // end class UniformRealDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace enclosing{
							
							class WelzlEncloser : public java::lang::Object {
								public:
							            WelzlEncloser(jobject _jthis, bool copy);
							            WelzlEncloser(const WelzlEncloser &);
							        
								WelzlEncloser(jdouble double_0,SupportBallGenerator supportBallGenerator_1);
								virtual ~WelzlEncloser();
								EnclosingBall enclose(java::lang::Iterable iterable_0);
								Point selectFarthest(java::lang::Iterable iterable_0,EnclosingBall enclosingBall_1);
							}; // end class WelzlEncloser
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace enclosing

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class PolyhedronsSet : public partitioning::AbstractRegion {
									public:
								            PolyhedronsSet(jobject _jthis, bool copy);
								            PolyhedronsSet(const PolyhedronsSet &);
								        
									PolyhedronsSet(jdouble double_0);
									PolyhedronsSet(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5,jdouble double_6);
									PolyhedronsSet(java::util::List list_0,java::util::List list_1,jdouble double_2);
									PolyhedronsSet(java::util::Collection collection_0,jdouble double_1);
									PolyhedronsSet(partitioning::BSPTree bSPTree_0,jdouble double_1);
									PolyhedronsSet(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
									PolyhedronsSet(java::util::Collection collection_0);
									PolyhedronsSet(partitioning::BSPTree bSPTree_0);
									PolyhedronsSet();
									virtual ~PolyhedronsSet();
									PolyhedronsSet translate(Vector3D vector3D_0);
									PolyhedronsSet buildNew(partitioning::BSPTree bSPTree_0);
									partitioning::SubHyperplane firstIntersection(Vector3D vector3D_0,Line line_1);
									PolyhedronsSet rotate(Vector3D vector3D_0,Rotation rotation_1);
								}; // end class PolyhedronsSet
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class SubLine : public java::lang::Object {
									public:
								            SubLine(jobject _jthis, bool copy);
								            SubLine(const SubLine &);
								        
									SubLine(Line line_0,oned::IntervalsSet intervalsSet_1);
									SubLine(Segment segment_0);
									SubLine(Vector3D vector3D_0,Vector3D vector3D_1);
									SubLine(Vector3D vector3D_0,Vector3D vector3D_1,jdouble double_2);
									virtual ~SubLine();
									Vector3D intersection(SubLine subLine_0,jboolean boolean_1);
									java::util::List getSegments();
								}; // end class SubLine
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class Vector3D : public java::lang::Object {
									public:
								            Vector3D(jobject _jthis, bool copy);
								            Vector3D(const Vector3D &);
								        
									Vector3D(jdouble double_0,Vector3D vector3D_1);
									Vector3D(jdouble double_0,jdouble double_1);
									Vector3D(jdoubleArray doubleArray_0);
									Vector3D(jdouble double_0,jdouble double_1,jdouble double_2);
									Vector3D(jdouble double_0,Vector3D vector3D_1,jdouble double_2,Vector3D vector3D_3);
									Vector3D(jdouble double_0,Vector3D vector3D_1,jdouble double_2,Vector3D vector3D_3,jdouble double_4,Vector3D vector3D_5);
									Vector3D(jdouble double_0,Vector3D vector3D_1,jdouble double_2,Vector3D vector3D_3,jdouble double_4,Vector3D vector3D_5,jdouble double_6,Vector3D vector3D_7);
									virtual ~Vector3D();
									jdouble distanceSq(Vector vector_0);
									static jdouble distanceSq(Vector3D vector3D_0,Vector3D vector3D_1);
									jdouble distance(Vector vector_0);
									jdouble distance(Point point_0);
									static jdouble distance(Vector3D vector3D_0,Vector3D vector3D_1);
									jdouble getX();
									jdouble getY();
									jdouble getAlpha();
									static jdouble angle(Vector3D vector3D_0,Vector3D vector3D_1);
									Vector3D subtract(Vector vector_0);
									Vector3D subtract(jdouble double_0,Vector vector_1);
									jdouble getZ();
									Vector3D negate();
									Vector3D getZero();
									Vector3D scalarMultiply(jdouble double_0);
									jdouble getNorm();
									jdouble dotProduct(Vector vector_0);
									static jdouble dotProduct(Vector3D vector3D_0,Vector3D vector3D_1);
									static jdouble distanceInf(Vector3D vector3D_0,Vector3D vector3D_1);
									jdouble distanceInf(Vector vector_0);
									static jdouble distance1(Vector3D vector3D_0,Vector3D vector3D_1);
									jdouble distance1(Vector vector_0);
									jdouble getNorm1();
									jdouble getNormSq();
									jdouble getNormInf();
									Vector3D crossProduct(Vector vector_0);
									static Vector3D crossProduct(Vector3D vector3D_0,Vector3D vector3D_1);
									Vector3D orthogonal();
									jdouble getDelta();
									Vector3D add(Vector vector_0);
									Vector3D add(jdouble double_0,Vector vector_1);
									jstring toString(java::text::NumberFormat numberFormat_0);
									jstring toString();
									jint hashCode();
									jdoubleArray toArray();
									jboolean isNaN();
									Vector3D normalize();
									Space getSpace();
									jboolean isInfinite();
								}; // end class Vector3D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class RegionFactory : public java::lang::Object {
								public:
							            RegionFactory(jobject _jthis, bool copy);
							            RegionFactory(const RegionFactory &);
							        
								RegionFactory();
								virtual ~RegionFactory();
								Region union(Region region_0,Region region_1);
								Region intersection(Region region_0,Region region_1);
								Region difference(Region region_0,Region region_1);
								Region buildConvex(jobjectArray hyperplaneArray_0);
								Region getComplement(Region region_0);
								Region xorMethod(Region region_0,Region region_1);
							}; // end class RegionFactory
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class Transform : public java::lang::Object {
								public:
							            Transform(jobject _jthis, bool copy);
							            Transform(const Transform &);
							        
								Transform();
								virtual ~Transform();
							}; // end class Transform
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class BoundaryProjection : public java::lang::Object {
								public:
							            BoundaryProjection(jobject _jthis, bool copy);
							            BoundaryProjection(const BoundaryProjection &);
							        
								BoundaryProjection(Point point_0,Point point_1,jdouble double_2);
								virtual ~BoundaryProjection();
								Point getOriginal();
								Point getProjected();
								jdouble getOffset();
							}; // end class BoundaryProjection
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class Hyperplane : public java::lang::Object {
								public:
							            Hyperplane(jobject _jthis, bool copy);
							            Hyperplane(const Hyperplane &);
							        
								Hyperplane();
								virtual ~Hyperplane();
							}; // end class Hyperplane
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class DiagonalMatrix : public AbstractRealMatrix {
							public:
						            DiagonalMatrix(jobject _jthis, bool copy);
						            DiagonalMatrix(const DiagonalMatrix &);
						        
							DiagonalMatrix(jdoubleArray doubleArray_0);
							DiagonalMatrix(jint int_0);
							DiagonalMatrix(jdoubleArray doubleArray_0,jboolean boolean_1);
							virtual ~DiagonalMatrix();
							void setEntry(jint int_0,jint int_1,jdouble double_2);
							DiagonalMatrix multiply(DiagonalMatrix diagonalMatrix_0);
							RealMatrix multiply(RealMatrix realMatrix_0);
							DiagonalMatrix subtract(DiagonalMatrix diagonalMatrix_0);
							RealMatrix createMatrix(jint int_0,jint int_1);
							void addToEntry(jint int_0,jint int_1,jdouble double_2);
							void multiplyEntry(jint int_0,jint int_1,jdouble double_2);
							jint getRowDimension();
							jint getColumnDimension();
							jdoubleArray getDataRef();
							jdoubleArray operate(jdoubleArray doubleArray_0);
							jdoubleArray preMultiply(jdoubleArray doubleArray_0);
							RealVector preMultiply(RealVector realVector_0);
							DiagonalMatrix inverse(jdouble double_0);
							DiagonalMatrix inverse();
							jboolean isSingular(jdouble double_0);
							DiagonalMatrix add(DiagonalMatrix diagonalMatrix_0);
							RealMatrix copy();
							jdouble getEntry(jint int_0,jint int_1);
						}; // end class DiagonalMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class BlockRealMatrix : public AbstractRealMatrix {
							public:
						            BlockRealMatrix(jobject _jthis, bool copy);
						            BlockRealMatrix(const BlockRealMatrix &);
						        
							BlockRealMatrix(jint int_0,jint int_1);
							virtual ~BlockRealMatrix();
							void setEntry(jint int_0,jint int_1,jdouble double_2);
							jdoubleArray getRow(jint int_0);
							jdoubleArray getColumn(jint int_0);
							BlockRealMatrix multiply(BlockRealMatrix blockRealMatrix_0);
							BlockRealMatrix multiply(RealMatrix realMatrix_0);
							BlockRealMatrix subtract(BlockRealMatrix blockRealMatrix_0);
							BlockRealMatrix subtract(RealMatrix realMatrix_0);
							BlockRealMatrix createMatrix(jint int_0,jint int_1);
							void addToEntry(jint int_0,jint int_1,jdouble double_2);
							void multiplyEntry(jint int_0,jint int_1,jdouble double_2);
							jint getRowDimension();
							jint getColumnDimension();
							BlockRealMatrix scalarAdd(jdouble double_0);
							RealMatrix scalarMultiply(jdouble double_0);
							jdouble getNorm();
							jdouble getFrobeniusNorm();
							BlockRealMatrix getSubMatrix(jint int_0,jint int_1,jint int_2,jint int_3);
							BlockRealMatrix getRowMatrix(jint int_0);
							void setRowMatrix(jint int_0,BlockRealMatrix blockRealMatrix_1);
							void setRowMatrix(jint int_0,RealMatrix realMatrix_1);
							BlockRealMatrix getColumnMatrix(jint int_0);
							void setColumnMatrix(jint int_0,RealMatrix realMatrix_1);
							RealVector getRowVector(jint int_0);
							void setRowVector(jint int_0,RealVector realVector_1);
							RealVector getColumnVector(jint int_0);
							void setColumnVector(jint int_0,RealVector realVector_1);
							void setRow(jint int_0,jdoubleArray doubleArray_1);
							void setColumn(jint int_0,jdoubleArray doubleArray_1);
							BlockRealMatrix transpose();
							jdouble walkInOptimizedOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0);
							jdouble walkInOptimizedOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0);
							jdouble walkInOptimizedOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInOptimizedOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdoubleArray operate(jdoubleArray doubleArray_0);
							jdoubleArray preMultiply(jdoubleArray doubleArray_0);
							jdouble walkInRowOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInRowOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0);
							jdouble walkInRowOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInRowOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0);
							BlockRealMatrix add(BlockRealMatrix blockRealMatrix_0);
							BlockRealMatrix add(RealMatrix realMatrix_0);
							BlockRealMatrix copy();
							jdouble getEntry(jint int_0,jint int_1);
						}; // end class BlockRealMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RectangularCholeskyDecomposition : public java::lang::Object {
							public:
						            RectangularCholeskyDecomposition(jobject _jthis, bool copy);
						            RectangularCholeskyDecomposition(const RectangularCholeskyDecomposition &);
						        
							RectangularCholeskyDecomposition(RealMatrix realMatrix_0,jdouble double_1);
							RectangularCholeskyDecomposition(RealMatrix realMatrix_0);
							virtual ~RectangularCholeskyDecomposition();
							jint getRank();
							RealMatrix getRootMatrix();
						}; // end class RectangularCholeskyDecomposition
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class FieldLUDecomposition : public java::lang::Object {
							public:
						            FieldLUDecomposition(jobject _jthis, bool copy);
						            FieldLUDecomposition(const FieldLUDecomposition &);
						        
							FieldLUDecomposition(FieldMatrix fieldMatrix_0);
							virtual ~FieldLUDecomposition();
							FieldDecompositionSolver getSolver();
							FieldMatrix getL();
							FieldMatrix getU();
							FieldMatrix getP();
							jintArray getPivot();
							FieldElement getDeterminant();
						}; // end class FieldLUDecomposition
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class FieldDecompositionSolver : public java::lang::Object {
							public:
						            FieldDecompositionSolver(jobject _jthis, bool copy);
						            FieldDecompositionSolver(const FieldDecompositionSolver &);
						        
							FieldDecompositionSolver();
							virtual ~FieldDecompositionSolver();
						}; // end class FieldDecompositionSolver
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class JacobiPreconditioner : public RealLinearOperator {
							public:
						            JacobiPreconditioner(jobject _jthis, bool copy);
						            JacobiPreconditioner(const JacobiPreconditioner &);
						        
							JacobiPreconditioner(jdoubleArray doubleArray_0,jboolean boolean_1);
							virtual ~JacobiPreconditioner();
							jint getRowDimension();
							jint getColumnDimension();
							RealVector operate(RealVector realVector_0);
							RealLinearOperator sqrt();
							static JacobiPreconditioner create(RealLinearOperator realLinearOperator_0);
						}; // end class JacobiPreconditioner
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class NonSquareOperatorException : public exception::DimensionMismatchException {
							public:
						            NonSquareOperatorException(jobject _jthis, bool copy);
						            NonSquareOperatorException(const NonSquareOperatorException &);
						        
							NonSquareOperatorException(jint int_0,jint int_1);
							virtual ~NonSquareOperatorException();
						}; // end class NonSquareOperatorException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class FieldMatrix : public java::lang::Object {
							public:
						            FieldMatrix(jobject _jthis, bool copy);
						            FieldMatrix(const FieldMatrix &);
						        
							FieldMatrix();
							virtual ~FieldMatrix();
						}; // end class FieldMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class DefaultFieldMatrixChangingVisitor : public java::lang::Object {
							public:
						            DefaultFieldMatrixChangingVisitor(jobject _jthis, bool copy);
						            DefaultFieldMatrixChangingVisitor(const DefaultFieldMatrixChangingVisitor &);
						        
							DefaultFieldMatrixChangingVisitor(FieldElement fieldElement_0);
							virtual ~DefaultFieldMatrixChangingVisitor();
							FieldElement end();
							FieldElement visit(jint int_0,jint int_1,FieldElement fieldElement_2);
							void start(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
						}; // end class DefaultFieldMatrixChangingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RealMatrixPreservingVisitor : public java::lang::Object {
							public:
						            RealMatrixPreservingVisitor(jobject _jthis, bool copy);
						            RealMatrixPreservingVisitor(const RealMatrixPreservingVisitor &);
						        
							RealMatrixPreservingVisitor();
							virtual ~RealMatrixPreservingVisitor();
						}; // end class RealMatrixPreservingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RealMatrix : public java::lang::Object {
							public:
						            RealMatrix(jobject _jthis, bool copy);
						            RealMatrix(const RealMatrix &);
						        
							RealMatrix();
							virtual ~RealMatrix();
						}; // end class RealMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class Precision : public java::lang::Object {
							public:
						            Precision(jobject _jthis, bool copy);
						            Precision(const Precision &);
						        
							virtual ~Precision();
							static jboolean equalsIncludingNaN(jfloat float_0,jfloat float_1);
							static jboolean equalsIncludingNaN(jdouble double_0,jdouble double_1);
							static jboolean equalsIncludingNaN(jfloat float_0,jfloat float_1,jfloat float_2);
							static jboolean equalsIncludingNaN(jfloat float_0,jfloat float_1,jint int_2);
							static jboolean equalsIncludingNaN(jdouble double_0,jdouble double_1,jdouble double_2);
							static jboolean equalsIncludingNaN(jdouble double_0,jdouble double_1,jint int_2);
							static jdouble representableDelta(jdouble double_0,jdouble double_1);
							static jboolean equalsWithRelativeTolerance(jdouble double_0,jdouble double_1,jdouble double_2);
							static jboolean equals(jdouble double_0,jdouble double_1,jdouble double_2);
							static jboolean equals(jfloat float_0,jfloat float_1);
							static jboolean equals(jdouble double_0,jdouble double_1,jint int_2);
							static jboolean equals(jdouble double_0,jdouble double_1);
							static jboolean equals(jfloat float_0,jfloat float_1,jint int_2);
							static jboolean equals(jfloat float_0,jfloat float_1,jfloat float_2);
							static jint compareTo(jdouble double_0,jdouble double_1,jint int_2);
							static jint compareTo(jdouble double_0,jdouble double_1,jdouble double_2);
							static jdouble round(jdouble double_0,jint int_1,jint int_2);
							static jfloat round(jfloat float_0,jint int_1,jint int_2);
							static jfloat round(jfloat float_0,jint int_1);
							static jdouble round(jdouble double_0,jint int_1);
						}; // end class Precision
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class MedianOf3PivotingStrategy : public java::lang::Object {
							public:
						            MedianOf3PivotingStrategy(jobject _jthis, bool copy);
						            MedianOf3PivotingStrategy(const MedianOf3PivotingStrategy &);
						        
							MedianOf3PivotingStrategy();
							virtual ~MedianOf3PivotingStrategy();
							jint pivotIndex(jdoubleArray doubleArray_0,jint int_1,jint int_2);
						}; // end class MedianOf3PivotingStrategy
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class CentralPivotingStrategy : public java::lang::Object {
							public:
						            CentralPivotingStrategy(jobject _jthis, bool copy);
						            CentralPivotingStrategy(const CentralPivotingStrategy &);
						        
							CentralPivotingStrategy();
							virtual ~CentralPivotingStrategy();
							jint pivotIndex(jdoubleArray doubleArray_0,jint int_1,jint int_2);
						}; // end class CentralPivotingStrategy
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class PivotingStrategyInterface : public java::lang::Object {
							public:
						            PivotingStrategyInterface(jobject _jthis, bool copy);
						            PivotingStrategyInterface(const PivotingStrategyInterface &);
						        
							PivotingStrategyInterface();
							virtual ~PivotingStrategyInterface();
						}; // end class PivotingStrategyInterface
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class KthSelector : public java::lang::Object {
							public:
						            KthSelector(jobject _jthis, bool copy);
						            KthSelector(const KthSelector &);
						        
							KthSelector(PivotingStrategyInterface pivotingStrategyInterface_0);
							KthSelector();
							virtual ~KthSelector();
							jdouble select(jdoubleArray doubleArray_0,jintArray intArray_1,jint int_2);
							PivotingStrategyInterface getPivotingStrategy();
						}; // end class KthSelector
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class FastMathCalc : public java::lang::Object {
							public:
						            FastMathCalc(jobject _jthis, bool copy);
						            FastMathCalc(const FastMathCalc &);
						        
							virtual ~FastMathCalc();
						}; // end class FastMathCalc
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class DoubleArray : public java::lang::Object {
							public:
						            DoubleArray(jobject _jthis, bool copy);
						            DoubleArray(const DoubleArray &);
						        
							DoubleArray();
							virtual ~DoubleArray();
						}; // end class DoubleArray
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class Decimal64Field : public java::lang::Object {
							public:
						            Decimal64Field(jobject _jthis, bool copy);
						            Decimal64Field(const Decimal64Field &);
						        
							virtual ~Decimal64Field();
							Decimal64 getZero();
							Decimal64 getOne();
							static Decimal64Field getInstance();
						}; // end class Decimal64Field
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class FastMathLiteralArrays : public java::lang::Object {
							public:
						            FastMathLiteralArrays(jobject _jthis, bool copy);
						            FastMathLiteralArrays(const FastMathLiteralArrays &);
						        
							virtual ~FastMathLiteralArrays();
						}; // end class FastMathLiteralArrays
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace crcl{
		namespace base{
			
			class CloseToolChangerType : public MiddleCommandType {
				public:
			            CloseToolChangerType(jobject _jthis, bool copy);
			            CloseToolChangerType(const CloseToolChangerType &);
			        
				CloseToolChangerType();
				virtual ~CloseToolChangerType();
			}; // end class CloseToolChangerType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class ForceUnitEnumType : public java::lang::Enum {
				public:
			            ForceUnitEnumType(jobject _jthis, bool copy);
			            ForceUnitEnumType(const ForceUnitEnumType &);
			        
				virtual ~ForceUnitEnumType();
				static ForceUnitEnumType fromValue(jstring string_0);
				jstring value();
				static jobjectArray values();
				static ForceUnitEnumType valueOf(jstring string_0);
			}; // end class ForceUnitEnumType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class ParameterSettingType : public DataThingType {
				public:
			            ParameterSettingType(jobject _jthis, bool copy);
			            ParameterSettingType(const ParameterSettingType &);
			        
				ParameterSettingType();
				virtual ~ParameterSettingType();
				jstring getParameterName();
				void setParameterName(jstring string_0);
				jstring getParameterValue();
				void setParameterValue(jstring string_0);
			}; // end class ParameterSettingType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class CRCLStatusType : public DataThingType {
				public:
			            CRCLStatusType(jobject _jthis, bool copy);
			            CRCLStatusType(const CRCLStatusType &);
			        
				CRCLStatusType();
				virtual ~CRCLStatusType();
				JointStatusesType getJointStatuses();
				CommandStatusType getCommandStatus();
				PoseType getPose();
				GripperStatusType getGripperStatus();
				void setGripperStatus(GripperStatusType gripperStatusType_0);
				void setCommandStatus(CommandStatusType commandStatusType_0);
				void setJointStatuses(JointStatusesType jointStatusesType_0);
				void setPose(PoseType poseType_0);
			}; // end class CRCLStatusType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class MoveScrewType : public MiddleCommandType {
				public:
			            MoveScrewType(jobject _jthis, bool copy);
			            MoveScrewType(const MoveScrewType &);
			        
				MoveScrewType();
				virtual ~MoveScrewType();
				PoseType getStartPosition();
				void setStartPosition(PoseType poseType_0);
				PointType getAxisPoint();
				void setAxisPoint(PointType pointType_0);
				java::math::BigDecimal getAxialDistanceFree();
				void setAxialDistanceFree(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getAxialDistanceScrew();
				void setAxialDistanceScrew(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getTurn();
				void setTurn(java::math::BigDecimal bigDecimal_0);
			}; // end class MoveScrewType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class MoveToType : public MiddleCommandType {
				public:
			            MoveToType(jobject _jthis, bool copy);
			            MoveToType(const MoveToType &);
			        
				MoveToType();
				virtual ~MoveToType();
				PoseType getEndPosition();
				void setMoveStraight(jboolean boolean_0);
				void setEndPosition(PoseType poseType_0);
				jboolean isMoveStraight();
			}; // end class MoveToType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class ObjectFactory : public java::lang::Object {
				public:
			            ObjectFactory(jobject _jthis, bool copy);
			            ObjectFactory(const ObjectFactory &);
			        
				ObjectFactory();
				virtual ~ObjectFactory();
				javax::xml::bind::JAXBElement createCRCLStatus(CRCLStatusType cRCLStatusType_0);
				javax::xml::bind::JAXBElement createCRCLCommandInstance(CRCLCommandInstanceType cRCLCommandInstanceType_0);
				javax::xml::bind::JAXBElement createCRCLProgram(CRCLProgramType cRCLProgramType_0);
				CRCLProgramType createCRCLProgramType();
				CRCLCommandInstanceType createCRCLCommandInstanceType();
				CRCLStatusType createCRCLStatusType();
				PointType createPointType();
				PoseType createPoseType();
				VectorType createVectorType();
				ActuateJointsType createActuateJointsType();
				ActuateJointType createActuateJointType();
				CloseToolChangerType createCloseToolChangerType();
				DwellType createDwellType();
				ConfigureJointReportsType createConfigureJointReportsType();
				ConfigureJointReportType createConfigureJointReportType();
				EndCanonType createEndCanonType();
				GetStatusType createGetStatusType();
				InitCanonType createInitCanonType();
				JointForceTorqueType createJointForceTorqueType();
				JointSpeedAccelType createJointSpeedAccelType();
				MessageType createMessageType();
				MoveScrewType createMoveScrewType();
				MoveThroughToType createMoveThroughToType();
				MoveToType createMoveToType();
				OpenToolChangerType createOpenToolChangerType();
				ParameterSettingType createParameterSettingType();
				PoseAndSetType createPoseAndSetType();
				PoseToleranceType createPoseToleranceType();
				RotAccelAbsoluteType createRotAccelAbsoluteType();
				RotAccelRelativeType createRotAccelRelativeType();
				RotSpeedAbsoluteType createRotSpeedAbsoluteType();
				RotSpeedRelativeType createRotSpeedRelativeType();
				RunProgramType createRunProgramType();
				SetAngleUnitsType createSetAngleUnitsType();
				SetEndEffectorParametersType createSetEndEffectorParametersType();
				SetEndEffectorType createSetEndEffectorType();
				SetEndPoseToleranceType createSetEndPoseToleranceType();
				SetForceUnitsType createSetForceUnitsType();
				SetIntermediatePoseToleranceType createSetIntermediatePoseToleranceType();
				SetLengthUnitsType createSetLengthUnitsType();
				SetMotionCoordinationType createSetMotionCoordinationType();
				SetRobotParametersType createSetRobotParametersType();
				SetRotAccelType createSetRotAccelType();
				SetRotSpeedType createSetRotSpeedType();
				SetTorqueUnitsType createSetTorqueUnitsType();
				SetTransAccelType createSetTransAccelType();
				SetTransSpeedType createSetTransSpeedType();
				StopMotionType createStopMotionType();
				TransAccelAbsoluteType createTransAccelAbsoluteType();
				TransAccelRelativeType createTransAccelRelativeType();
				TransSpeedAbsoluteType createTransSpeedAbsoluteType();
				TransSpeedRelativeType createTransSpeedRelativeType();
				CommandStatusType createCommandStatusType();
				JointStatusesType createJointStatusesType();
				JointStatusType createJointStatusType();
				ParallelGripperStatusType createParallelGripperStatusType();
				ThreeFingerGripperStatusType createThreeFingerGripperStatusType();
				VacuumGripperStatusType createVacuumGripperStatusType();
			}; // end class ObjectFactory
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class PoseAndSetType : public PoseType {
				public:
			            PoseAndSetType(jobject _jthis, bool copy);
			            PoseAndSetType(const PoseAndSetType &);
			        
				PoseAndSetType();
				virtual ~PoseAndSetType();
				void setTolerance(PoseToleranceType poseToleranceType_0);
				PoseToleranceType getTolerance();
				jboolean isCoordinated();
				void setCoordinated(jboolean boolean_0);
				TransSpeedType getTransSpeed();
				void setTransSpeed(TransSpeedType transSpeedType_0);
				RotSpeedType getRotSpeed();
				void setRotSpeed(RotSpeedType rotSpeedType_0);
				TransAccelType getTransAccel();
				void setTransAccel(TransAccelType transAccelType_0);
				RotAccelType getRotAccel();
				void setRotAccel(RotAccelType rotAccelType_0);
			}; // end class PoseAndSetType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class TransAccelRelativeType : public TransAccelType {
				public:
			            TransAccelRelativeType(jobject _jthis, bool copy);
			            TransAccelRelativeType(const TransAccelRelativeType &);
			        
				TransAccelRelativeType();
				virtual ~TransAccelRelativeType();
				void setFraction(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getFraction();
			}; // end class TransAccelRelativeType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class DwellType : public MiddleCommandType {
				public:
			            DwellType(jobject _jthis, bool copy);
			            DwellType(const DwellType &);
			        
				DwellType();
				virtual ~DwellType();
				java::math::BigDecimal getDwellTime();
				void setDwellTime(java::math::BigDecimal bigDecimal_0);
			}; // end class DwellType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetLengthUnitsType : public MiddleCommandType {
				public:
			            SetLengthUnitsType(jobject _jthis, bool copy);
			            SetLengthUnitsType(const SetLengthUnitsType &);
			        
				SetLengthUnitsType();
				virtual ~SetLengthUnitsType();
				LengthUnitEnumType getUnitName();
				void setUnitName(LengthUnitEnumType lengthUnitEnumType_0);
			}; // end class SetLengthUnitsType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class OpenToolChangerType : public MiddleCommandType {
				public:
			            OpenToolChangerType(jobject _jthis, bool copy);
			            OpenToolChangerType(const OpenToolChangerType &);
			        
				OpenToolChangerType();
				virtual ~OpenToolChangerType();
			}; // end class OpenToolChangerType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetTransAccelType : public MiddleCommandType {
				public:
			            SetTransAccelType(jobject _jthis, bool copy);
			            SetTransAccelType(const SetTransAccelType &);
			        
				SetTransAccelType();
				virtual ~SetTransAccelType();
				TransAccelType getTransAccel();
				void setTransAccel(TransAccelType transAccelType_0);
			}; // end class SetTransAccelType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class JointForceTorqueType : public JointDetailsType {
				public:
			            JointForceTorqueType(jobject _jthis, bool copy);
			            JointForceTorqueType(const JointForceTorqueType &);
			        
				JointForceTorqueType();
				virtual ~JointForceTorqueType();
				java::math::BigDecimal getSetting();
				void setSetting(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getChangeRate();
				void setChangeRate(java::math::BigDecimal bigDecimal_0);
			}; // end class JointForceTorqueType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class PointType : public DataThingType {
				public:
			            PointType(jobject _jthis, bool copy);
			            PointType(const PointType &);
			        
				PointType();
				virtual ~PointType();
				java::math::BigDecimal getX();
				java::math::BigDecimal getY();
				void setX(java::math::BigDecimal bigDecimal_0);
				void setY(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getZ();
				void setZ(java::math::BigDecimal bigDecimal_0);
			}; // end class PointType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class CommandStateEnumType : public java::lang::Enum {
				public:
			            CommandStateEnumType(jobject _jthis, bool copy);
			            CommandStateEnumType(const CommandStateEnumType &);
			        
				virtual ~CommandStateEnumType();
				static CommandStateEnumType fromValue(jstring string_0);
				jstring value();
				static jobjectArray values();
				static CommandStateEnumType valueOf(jstring string_0);
			}; // end class CommandStateEnumType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class LastModifiedFileComparator : public AbstractFileComparator {
							public:
						            LastModifiedFileComparator(jobject _jthis, bool copy);
						            LastModifiedFileComparator(const LastModifiedFileComparator &);
						        
							LastModifiedFileComparator();
							virtual ~LastModifiedFileComparator();
							jint compare(java::io::File file_0,java::io::File file_1);
						}; // end class LastModifiedFileComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class EndianUtils : public java::lang::Object {
						public:
					            EndianUtils(jobject _jthis, bool copy);
					            EndianUtils(const EndianUtils &);
					        
						EndianUtils();
						virtual ~EndianUtils();
						static jshort swapShort(jshort short_0);
						static jint swapInteger(jint int_0);
						static jlong swapLong(jlong long_0);
						static jfloat swapFloat(jfloat float_0);
						static jdouble swapDouble(jdouble double_0);
						static void writeSwappedShort(jbyteArray byteArray_0,jint int_1,jshort short_2);
						static void writeSwappedShort(java::io::OutputStream outputStream_0,jshort short_1);
						static jshort readSwappedShort(java::io::InputStream inputStream_0);
						static jshort readSwappedShort(jbyteArray byteArray_0,jint int_1);
						static jint readSwappedUnsignedShort(java::io::InputStream inputStream_0);
						static jint readSwappedUnsignedShort(jbyteArray byteArray_0,jint int_1);
						static void writeSwappedInteger(java::io::OutputStream outputStream_0,jint int_1);
						static void writeSwappedInteger(jbyteArray byteArray_0,jint int_1,jint int_2);
						static jint readSwappedInteger(jbyteArray byteArray_0,jint int_1);
						static jint readSwappedInteger(java::io::InputStream inputStream_0);
						static jlong readSwappedUnsignedInteger(jbyteArray byteArray_0,jint int_1);
						static jlong readSwappedUnsignedInteger(java::io::InputStream inputStream_0);
						static void writeSwappedLong(java::io::OutputStream outputStream_0,jlong long_1);
						static void writeSwappedLong(jbyteArray byteArray_0,jint int_1,jlong long_2);
						static jlong readSwappedLong(jbyteArray byteArray_0,jint int_1);
						static jlong readSwappedLong(java::io::InputStream inputStream_0);
						static void writeSwappedFloat(jbyteArray byteArray_0,jint int_1,jfloat float_2);
						static void writeSwappedFloat(java::io::OutputStream outputStream_0,jfloat float_1);
						static jfloat readSwappedFloat(java::io::InputStream inputStream_0);
						static jfloat readSwappedFloat(jbyteArray byteArray_0,jint int_1);
						static void writeSwappedDouble(java::io::OutputStream outputStream_0,jdouble double_1);
						static void writeSwappedDouble(jbyteArray byteArray_0,jint int_1,jdouble double_2);
						static jdouble readSwappedDouble(jbyteArray byteArray_0,jint int_1);
						static jdouble readSwappedDouble(java::io::InputStream inputStream_0);
					}; // end class EndianUtils
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class AndFileFilter : public AbstractFileFilter {
							public:
						            AndFileFilter(jobject _jthis, bool copy);
						            AndFileFilter(const AndFileFilter &);
						        
							AndFileFilter();
							AndFileFilter(IOFileFilter iOFileFilter_0,IOFileFilter iOFileFilter_1);
							AndFileFilter(java::util::List list_0);
							virtual ~AndFileFilter();
							void addFileFilter(IOFileFilter iOFileFilter_0);
							java::util::List getFileFilters();
							jboolean removeFileFilter(IOFileFilter iOFileFilter_0);
							void setFileFilters(java::util::List list_0);
							jstring toString();
							jboolean accept(java::io::File file_0,jstring string_1);
							jboolean accept(java::io::File file_0);
						}; // end class AndFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class FileFilterUtils : public java::lang::Object {
							public:
						            FileFilterUtils(jobject _jthis, bool copy);
						            FileFilterUtils(const FileFilterUtils &);
						        
							FileFilterUtils();
							virtual ~FileFilterUtils();
							static java::util::List filterList(IOFileFilter iOFileFilter_0,java::lang::Iterable iterable_1);
							static java::util::List filterList(IOFileFilter iOFileFilter_0,jobjectArray fileArray_1);
							static java::util::Set filterSet(IOFileFilter iOFileFilter_0,jobjectArray fileArray_1);
							static java::util::Set filterSet(IOFileFilter iOFileFilter_0,java::lang::Iterable iterable_1);
							static IOFileFilter prefixFileFilter(jstring string_0,IOCase iOCase_1);
							static IOFileFilter prefixFileFilter(jstring string_0);
							static IOFileFilter suffixFileFilter(jstring string_0);
							static IOFileFilter suffixFileFilter(jstring string_0,IOCase iOCase_1);
							static IOFileFilter nameFileFilter(jstring string_0,IOCase iOCase_1);
							static IOFileFilter nameFileFilter(jstring string_0);
							static IOFileFilter directoryFileFilter();
							static IOFileFilter fileFileFilter();
							static IOFileFilter andFileFilter(IOFileFilter iOFileFilter_0,IOFileFilter iOFileFilter_1);
							static IOFileFilter orFileFilter(IOFileFilter iOFileFilter_0,IOFileFilter iOFileFilter_1);
							static java::util::List toList(jobjectArray iOFileFilterArray_0);
							static IOFileFilter notFileFilter(IOFileFilter iOFileFilter_0);
							static IOFileFilter trueFileFilter();
							static IOFileFilter falseFileFilter();
							static IOFileFilter asFileFilter(java::io::FilenameFilter filenameFilter_0);
							static IOFileFilter asFileFilter(java::io::FileFilter fileFilter_0);
							static IOFileFilter ageFileFilter(java::util::Date date_0,jboolean boolean_1);
							static IOFileFilter ageFileFilter(jlong long_0);
							static IOFileFilter ageFileFilter(jlong long_0,jboolean boolean_1);
							static IOFileFilter ageFileFilter(java::util::Date date_0);
							static IOFileFilter ageFileFilter(java::io::File file_0,jboolean boolean_1);
							static IOFileFilter ageFileFilter(java::io::File file_0);
							static IOFileFilter sizeFileFilter(jlong long_0);
							static IOFileFilter sizeFileFilter(jlong long_0,jboolean boolean_1);
							static IOFileFilter sizeRangeFileFilter(jlong long_0,jlong long_1);
							static IOFileFilter magicNumberFileFilter(jstring string_0);
							static IOFileFilter magicNumberFileFilter(jstring string_0,jlong long_1);
							static IOFileFilter magicNumberFileFilter(jbyteArray byteArray_0,jlong long_1);
							static IOFileFilter magicNumberFileFilter(jbyteArray byteArray_0);
							static IOFileFilter makeCVSAware(IOFileFilter iOFileFilter_0);
							static IOFileFilter makeSVNAware(IOFileFilter iOFileFilter_0);
							static IOFileFilter makeDirectoryOnly(IOFileFilter iOFileFilter_0);
							static IOFileFilter makeFileOnly(IOFileFilter iOFileFilter_0);
							static jobjectArray filter(IOFileFilter iOFileFilter_0,jobjectArray fileArray_1);
							static jobjectArray filter(IOFileFilter iOFileFilter_0,java::lang::Iterable iterable_1);
							static IOFileFilter andMethod(jobjectArray iOFileFilterArray_0);
							static IOFileFilter orMethod(jobjectArray iOFileFilterArray_0);
						}; // end class FileFilterUtils
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class TrueFileFilter : public java::lang::Object {
							public:
						            TrueFileFilter(jobject _jthis, bool copy);
						            TrueFileFilter(const TrueFileFilter &);
						        
							virtual ~TrueFileFilter();
							jboolean accept(java::io::File file_0);
							jboolean accept(java::io::File file_0,jstring string_1);
						}; // end class TrueFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class WildcardFileFilter : public AbstractFileFilter {
							public:
						            WildcardFileFilter(jobject _jthis, bool copy);
						            WildcardFileFilter(const WildcardFileFilter &);
						        
							WildcardFileFilter(java::util::List list_0,IOCase iOCase_1);
							WildcardFileFilter(java::util::List list_0);
							WildcardFileFilter(jobjectArray stringArray_0,IOCase iOCase_1);
							WildcardFileFilter(jstring string_0);
							WildcardFileFilter(jstring string_0,IOCase iOCase_1);
							WildcardFileFilter(jobjectArray stringArray_0);
							virtual ~WildcardFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0);
							jboolean accept(java::io::File file_0,jstring string_1);
						}; // end class WildcardFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class FileSystemUtils : public java::lang::Object {
						public:
					            FileSystemUtils(jobject _jthis, bool copy);
					            FileSystemUtils(const FileSystemUtils &);
					        
						FileSystemUtils();
						virtual ~FileSystemUtils();
						static jlong freeSpace(jstring string_0);
						static jlong freeSpaceKb();
						static jlong freeSpaceKb(jlong long_0);
						static jlong freeSpaceKb(jstring string_0);
						static jlong freeSpaceKb(jstring string_0,jlong long_1);
					}; // end class FileSystemUtils
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class BoundedInputStream : public java::io::InputStream {
							public:
						            BoundedInputStream(jobject _jthis, bool copy);
						            BoundedInputStream(const BoundedInputStream &);
						        
							BoundedInputStream(java::io::InputStream inputStream_0,jlong long_1);
							BoundedInputStream(java::io::InputStream inputStream_0);
							virtual ~BoundedInputStream();
							jboolean isPropagateClose();
							void setPropagateClose(jboolean boolean_0);
							jstring toString();
							jint read();
							jint read(jbyteArray byteArray_0);
							jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jint available();
							jboolean markSupported();
							void reset();
						}; // end class BoundedInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class WriterOutputStream : public java::io::OutputStream {
							public:
						            WriterOutputStream(jobject _jthis, bool copy);
						            WriterOutputStream(const WriterOutputStream &);
						        
							WriterOutputStream(java::io::Writer writer_0);
							WriterOutputStream(java::io::Writer writer_0,jstring string_1);
							WriterOutputStream(java::io::Writer writer_0,java::nio::charset::Charset charset_1,jint int_2,jboolean boolean_3);
							WriterOutputStream(java::io::Writer writer_0,java::nio::charset::Charset charset_1);
							WriterOutputStream(java::io::Writer writer_0,jstring string_1,jint int_2,jboolean boolean_3);
							virtual ~WriterOutputStream();
							void write(jbyteArray byteArray_0,jint int_1,jint int_2);
							void write(jbyteArray byteArray_0);
							void write(jint int_0);
							void flush();
							void close();
						}; // end class WriterOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class ThreadMonitor : public java::lang::Object {
						public:
					            ThreadMonitor(jobject _jthis, bool copy);
					            ThreadMonitor(const ThreadMonitor &);
					        
						virtual ~ThreadMonitor();
						void run();
						static java::lang::Thread start(jlong long_0);
						static java::lang::Thread start(java::lang::Thread thread_0,jlong long_1);
						static void stop(java::lang::Thread thread_0);
					}; // end class ThreadMonitor
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class EXIBodyEncoderReordered : public AbstractEXIBodyEncoder {
							public:
						            EXIBodyEncoderReordered(jobject _jthis, bool copy);
						            EXIBodyEncoderReordered(const EXIBodyEncoderReordered &);
						        
							EXIBodyEncoderReordered(EXIFactory eXIFactory_0);
							virtual ~EXIBodyEncoderReordered();
							void setOutputStream(java::io::OutputStream outputStream_0);
							void setOutputChannel(io::channel::EncoderChannel encoderChannel_0);
							void flush();
						}; // end class EXIBodyEncoderReordered
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							
							class DecoderChannel : public java::lang::Object {
								public:
							            DecoderChannel(jobject _jthis, bool copy);
							            DecoderChannel(const DecoderChannel &);
							        
								DecoderChannel();
								virtual ~DecoderChannel();
							}; // end class DecoderChannel
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class SchemaIdResolver : public java::lang::Object {
						public:
					            SchemaIdResolver(jobject _jthis, bool copy);
					            SchemaIdResolver(const SchemaIdResolver &);
					        
						SchemaIdResolver();
						virtual ~SchemaIdResolver();
					}; // end class SchemaIdResolver
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class BuiltInType : public java::lang::Enum {
							public:
						            BuiltInType(jobject _jthis, bool copy);
						            BuiltInType(const BuiltInType &);
						        
							virtual ~BuiltInType();
							static jobjectArray values();
							static BuiltInType valueOf(jstring string_0);
						}; // end class BuiltInType
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class DateTimeType : public java::lang::Enum {
							public:
						            DateTimeType(jobject _jthis, bool copy);
						            DateTimeType(const DateTimeType &);
						        
							virtual ~DateTimeType();
							static jobjectArray values();
							static DateTimeType valueOf(jstring string_0);
						}; // end class DateTimeType
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class TypeDecoder : public java::lang::Object {
							public:
						            TypeDecoder(jobject _jthis, bool copy);
						            TypeDecoder(const TypeDecoder &);
						        
							TypeDecoder();
							virtual ~TypeDecoder();
						}; // end class TypeDecoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						
						class SimpleDocTypeParser : public java::lang::Object {
							public:
						            SimpleDocTypeParser(jobject _jthis, bool copy);
						            SimpleDocTypeParser(const SimpleDocTypeParser &);
						        
							SimpleDocTypeParser();
							virtual ~SimpleDocTypeParser();
							void startCDATA();
							void endCDATA();
							void startDTD(jstring string_0,jstring string_1,jstring string_2);
							void endDTD();
							void startEntity(jstring string_0);
							void endEntity(jstring string_0);
							void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
							void elementDecl(jstring string_0,jstring string_1);
							void externalEntityDecl(jstring string_0,jstring string_1,jstring string_2);
							void internalEntityDecl(jstring string_0,jstring string_1);
							void setDocumentLocator(org::xml::sax::Locator locator_0);
							void endPrefixMapping(jstring string_0);
							void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
							void processingInstruction(jstring string_0,jstring string_1);
							void skippedEntity(jstring string_0);
							void comment(jcharArray charArray_0,jint int_1,jint int_2);
							void characters(jcharArray charArray_0,jint int_1,jint int_2);
							void startPrefixMapping(jstring string_0,jstring string_1);
							void startElement(jstring string_0,jstring string_1,jstring string_2,org::xml::sax::Attributes attributes_3);
							void startDocument();
							void endDocument();
							void endElement(jstring string_0,jstring string_1,jstring string_2);
							void parse(jstring string_0);
						}; // end class SimpleDocTypeParser
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class CollectionIndex : public java::lang::Object {
						public:
					            CollectionIndex(jobject _jthis, bool copy);
					            CollectionIndex(const CollectionIndex &);
					        
						virtual ~CollectionIndex();
					}; // end class CollectionIndex
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLDocumentImpl : public xerces::dom::DocumentImpl {
						public:
					            HTMLDocumentImpl(jobject _jthis, bool copy);
					            HTMLDocumentImpl(const HTMLDocumentImpl &);
					        
						HTMLDocumentImpl();
						virtual ~HTMLDocumentImpl();
						virtual w3c::dom::NodeList getElementsByTagName(jstring string_0);
						virtual w3c::dom::NodeList getElementsByTagNameNS(jstring string_0,jstring string_1);
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getTitle();
						void setTitle(jstring string_0);
						w3c::dom::html::HTMLCollection getApplets();
						w3c::dom::Attr createAttribute(jstring string_0);
						jstring getCookie();
						void setCookie(jstring string_0);
						w3c::dom::Element getDocumentElement();
						w3c::dom::html::HTMLElement getHead();
						w3c::dom::html::HTMLElement getBody();
						void setBody(w3c::dom::html::HTMLElement hTMLElement_0);
						w3c::dom::NodeList getElementsByName(jstring string_0);
						jstring getReferrer();
						jstring getDomain();
						w3c::dom::Element createElement(jstring string_0);
						w3c::dom::Element getElementById(jstring string_0);
						w3c::dom::Element createElementNS(jstring string_0,jstring string_1);
						w3c::dom::Element createElementNS(jstring string_0,jstring string_1,jstring string_2);
						w3c::dom::html::HTMLCollection getImages();
						w3c::dom::html::HTMLCollection getLinks();
						w3c::dom::html::HTMLCollection getForms();
						w3c::dom::html::HTMLCollection getAnchors();
						void writeln(jstring string_0);
						jstring getURL();
						void write(jstring string_0);
						void close();
						void open();
					}; // end class HTMLDocumentImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLFormElementImpl : public HTMLElementImpl {
						public:
					            HTMLFormElementImpl(jobject _jthis, bool copy);
					            HTMLFormElementImpl(const HTMLFormElementImpl &);
					        
						HTMLFormElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLFormElementImpl();
						jstring getAction();
						void setAction(jstring string_0);
						w3c::dom::NodeList getChildNodes();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getAcceptCharset();
						void setAcceptCharset(jstring string_0);
						jstring getEnctype();
						void setEnctype(jstring string_0);
						void submit();
						void setMethod(jstring string_0);
						w3c::dom::html::HTMLCollection getElements();
						jint getLength();
						jstring getName();
						jstring getMethod();
						void setName(jstring string_0);
						jstring getTarget();
						void setTarget(jstring string_0);
						void reset();
					}; // end class HTMLFormElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLImageElementImpl : public HTMLElementImpl {
						public:
					            HTMLImageElementImpl(jobject _jthis, bool copy);
					            HTMLImageElementImpl(const HTMLImageElementImpl &);
					        
						HTMLImageElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLImageElementImpl();
						jstring getLowSrc();
						void setLowSrc(jstring string_0);
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getAlt();
						void setAlt(jstring string_0);
						void setHeight(jstring string_0);
						jstring getHspace();
						void setHspace(jstring string_0);
						jboolean getIsMap();
						void setIsMap(jboolean boolean_0);
						jstring getLongDesc();
						void setLongDesc(jstring string_0);
						jstring getSrc();
						void setSrc(jstring string_0);
						jstring getUseMap();
						void setUseMap(jstring string_0);
						jstring getVspace();
						void setVspace(jstring string_0);
						jstring getBorder();
						void setBorder(jstring string_0);
						void setWidth(jstring string_0);
						jstring getWidth();
						jstring getHeight();
						jstring getName();
						void setName(jstring string_0);
					}; // end class HTMLImageElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLBigElement : public java::lang::Object {
					public:
				            WMLBigElement(jobject _jthis, bool copy);
				            WMLBigElement(const WMLBigElement &);
				        
					WMLBigElement();
					virtual ~WMLBigElement();
				}; // end class WMLBigElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLDocument : public java::lang::Object {
					public:
				            WMLDocument(jobject _jthis, bool copy);
				            WMLDocument(const WMLDocument &);
				        
					WMLDocument();
					virtual ~WMLDocument();
				}; // end class WMLDocument
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLInputElement : public java::lang::Object {
					public:
				            WMLInputElement(jobject _jthis, bool copy);
				            WMLInputElement(const WMLInputElement &);
				        
					WMLInputElement();
					virtual ~WMLInputElement();
				}; // end class WMLInputElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLPrevElement : public java::lang::Object {
					public:
				            WMLPrevElement(jobject _jthis, bool copy);
				            WMLPrevElement(const WMLPrevElement &);
				        
					WMLPrevElement();
					virtual ~WMLPrevElement();
				}; // end class WMLPrevElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLTemplateElement : public java::lang::Object {
					public:
				            WMLTemplateElement(jobject _jthis, bool copy);
				            WMLTemplateElement(const WMLTemplateElement &);
				        
					WMLTemplateElement();
					virtual ~WMLTemplateElement();
				}; // end class WMLTemplateElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLEmElementImpl : public WMLElementImpl {
						public:
					            WMLEmElementImpl(jobject _jthis, bool copy);
					            WMLEmElementImpl(const WMLEmElementImpl &);
					        
						WMLEmElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLEmElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLEmElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLFieldsetElementImpl : public WMLElementImpl {
						public:
					            WMLFieldsetElementImpl(jobject _jthis, bool copy);
					            WMLFieldsetElementImpl(const WMLFieldsetElementImpl &);
					        
						WMLFieldsetElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLFieldsetElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getTitle();
						void setTitle(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLFieldsetElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLHeadElementImpl : public WMLElementImpl {
						public:
					            WMLHeadElementImpl(jobject _jthis, bool copy);
					            WMLHeadElementImpl(const WMLHeadElementImpl &);
					        
						WMLHeadElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLHeadElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLHeadElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class PSVIDocumentImpl : public DocumentImpl {
						public:
					            PSVIDocumentImpl(jobject _jthis, bool copy);
					            PSVIDocumentImpl(const PSVIDocumentImpl &);
					        
						PSVIDocumentImpl();
						PSVIDocumentImpl(w3c::dom::DocumentType documentType_0);
						virtual ~PSVIDocumentImpl();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						w3c::dom::Attr createAttributeNS(jstring string_0,jstring string_1);
						w3c::dom::Attr createAttributeNS(jstring string_0,jstring string_1,jstring string_2);
						w3c::dom::DOMImplementation getImplementation();
						w3c::dom::DOMConfiguration getDomConfig();
						w3c::dom::Element createElementNS(jstring string_0,jstring string_1);
						w3c::dom::Element createElementNS(jstring string_0,jstring string_1,jstring string_2);
					}; // end class PSVIDocumentImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class RangeExceptionImpl : public w3c::dom::ranges::RangeException {
						public:
					            RangeExceptionImpl(jobject _jthis, bool copy);
					            RangeExceptionImpl(const RangeExceptionImpl &);
					        
						RangeExceptionImpl(jshort short_0,jstring string_1);
						virtual ~RangeExceptionImpl();
					}; // end class RangeExceptionImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class SecuritySupport : public java::lang::Object {
						public:
					            SecuritySupport(jobject _jthis, bool copy);
					            SecuritySupport(const SecuritySupport &);
					        
						virtual ~SecuritySupport();
					}; // end class SecuritySupport
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class TreeWalkerImpl : public java::lang::Object {
						public:
					            TreeWalkerImpl(jobject _jthis, bool copy);
					            TreeWalkerImpl(const TreeWalkerImpl &);
					        
						TreeWalkerImpl(w3c::dom::Node node_0,jint int_1,w3c::dom::traversal::NodeFilter nodeFilter_2,jboolean boolean_3);
						virtual ~TreeWalkerImpl();
						w3c::dom::Node nextNode();
						w3c::dom::traversal::NodeFilter getFilter();
						w3c::dom::Node previousSibling();
						w3c::dom::Node lastChild();
						jboolean getExpandEntityReferences();
						w3c::dom::Node getCurrentNode();
						void setCurrentNode(w3c::dom::Node node_0);
						w3c::dom::Node previousNode();
						w3c::dom::Node parentNode();
						w3c::dom::Node firstChild();
						w3c::dom::Node nextSibling();
						jint getWhatToShow();
						void setWhatShow(jint int_0);
						w3c::dom::Node getRoot();
					}; // end class TreeWalkerImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					namespace events{
						
						class MutationEventImpl : public EventImpl {
							public:
						            MutationEventImpl(jobject _jthis, bool copy);
						            MutationEventImpl(const MutationEventImpl &);
						        
							MutationEventImpl();
							virtual ~MutationEventImpl();
							w3c::dom::Node getRelatedNode();
							jstring getPrevValue();
							jstring getAttrName();
							jshort getAttrChange();
							jstring getNewValue();
							void initMutationEvent(jstring string_0,jboolean boolean_1,jboolean boolean_2,w3c::dom::Node node_3,jstring string_4,jstring string_5,jstring string_6,jshort short_7);
						}; // end class MutationEventImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class ExternalSubsetResolver : public java::lang::Object {
						public:
					            ExternalSubsetResolver(jobject _jthis, bool copy);
					            ExternalSubsetResolver(const ExternalSubsetResolver &);
					        
						ExternalSubsetResolver();
						virtual ~ExternalSubsetResolver();
					}; // end class ExternalSubsetResolver
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class Version : public java::lang::Object {
						public:
					            Version(jobject _jthis, bool copy);
					            Version(const Version &);
					        
						Version();
						virtual ~Version();
						static jstring getVersion();
						static void main(jobjectArray stringArray_0);
						static void main(int argc,const char **argv);
					}; // end class Version
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XML11DTDScannerImpl : public XMLDTDScannerImpl {
						public:
					            XML11DTDScannerImpl(jobject _jthis, bool copy);
					            XML11DTDScannerImpl(const XML11DTDScannerImpl &);
					        
						XML11DTDScannerImpl();
						XML11DTDScannerImpl(util::SymbolTable symbolTable_0,XMLErrorReporter xMLErrorReporter_1,XMLEntityManager xMLEntityManager_2);
						virtual ~XML11DTDScannerImpl();
					}; // end class XML11DTDScannerImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XML11EntityScanner : public XMLEntityScanner {
						public:
					            XML11EntityScanner(jobject _jthis, bool copy);
					            XML11EntityScanner(const XML11EntityScanner &);
					        
						XML11EntityScanner();
						virtual ~XML11EntityScanner();
						jboolean skipString(jstring string_0);
						jint peekChar();
						jint scanChar();
						jstring scanName();
						jboolean skipChar(jint int_0);
						jstring scanNmtoken();
						jboolean skipSpaces();
						jstring scanNCName();
						jint scanLiteral(jint int_0,xni::XMLString xMLString_1);
						jboolean scanData(jstring string_0,util::XMLStringBuffer xMLStringBuffer_1);
						jboolean scanQName(xni::QName qName_0);
						jint scanContent(xni::XMLString xMLString_0);
					}; // end class XML11EntityScanner
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class DTDGrammarBucket : public java::lang::Object {
							public:
						            DTDGrammarBucket(jobject _jthis, bool copy);
						            DTDGrammarBucket(const DTDGrammarBucket &);
						        
							DTDGrammarBucket();
							virtual ~DTDGrammarBucket();
							DTDGrammar getGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
							void putGrammar(DTDGrammar dTDGrammar_0);
							void clear();
						}; // end class DTDGrammarBucket
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLAttributeDecl : public java::lang::Object {
							public:
						            XMLAttributeDecl(jobject _jthis, bool copy);
						            XMLAttributeDecl(const XMLAttributeDecl &);
						        
							XMLAttributeDecl();
							virtual ~XMLAttributeDecl();
							void setValues(xni::QName qName_0,XMLSimpleType xMLSimpleType_1,jboolean boolean_2);
							void clear();
						}; // end class XMLAttributeDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLContentSpec : public java::lang::Object {
							public:
						            XMLContentSpec(jobject _jthis, bool copy);
						            XMLContentSpec(const XMLContentSpec &);
						        
							XMLContentSpec();
							XMLContentSpec(XMLContentSpec xMLContentSpec_0);
							XMLContentSpec(XMLContentSpec::Provider provider_0,jint int_1);
							virtual ~XMLContentSpec();
							void setValues(XMLContentSpec xMLContentSpec_0);
							void setValues(XMLContentSpec::Provider provider_0,jint int_1);
							jint hashCode();
							void clear();
						}; // end class XMLContentSpec
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class EntityDV : public TypeValidator {
								public:
							            EntityDV(jobject _jthis, bool copy);
							            EntityDV(const EntityDV &);
							        
								EntityDV();
								virtual ~EntityDV();
								jshort getAllowedFacets();
							}; // end class EntityDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						
						class Latin1Reader : public java::io::Reader {
							public:
						            Latin1Reader(jobject _jthis, bool copy);
						            Latin1Reader(const Latin1Reader &);
						        
							Latin1Reader(java::io::InputStream inputStream_0,jbyteArray byteArray_1);
							Latin1Reader(java::io::InputStream inputStream_0,jint int_1);
							Latin1Reader(java::io::InputStream inputStream_0);
							virtual ~Latin1Reader();
							jint read(jcharArray charArray_0,jint int_1,jint int_2);
							jint read();
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jboolean markSupported();
							void reset();
							jboolean ready();
						}; // end class Latin1Reader
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						
						class UTF8Reader : public java::io::Reader {
							public:
						            UTF8Reader(jobject _jthis, bool copy);
						            UTF8Reader(const UTF8Reader &);
						        
							UTF8Reader(java::io::InputStream inputStream_0);
							UTF8Reader(java::io::InputStream inputStream_0,util::MessageFormatter messageFormatter_1,java::util::Locale locale_2);
							UTF8Reader(java::io::InputStream inputStream_0,jint int_1,util::MessageFormatter messageFormatter_2,java::util::Locale locale_3);
							UTF8Reader(java::io::InputStream inputStream_0,jbyteArray byteArray_1,util::MessageFormatter messageFormatter_2,java::util::Locale locale_3);
							virtual ~UTF8Reader();
							jint read();
							jint read(jcharArray charArray_0,jint int_1,jint int_2);
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jboolean markSupported();
							void reset();
							jboolean ready();
						}; // end class UTF8Reader
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							
							class Field : public java::lang::Object {
								public:
							            Field(jobject _jthis, bool copy);
							            Field(const Field &);
							        
								virtual ~Field();
								xpath::XPath getXPath();
								IdentityConstraint getIdentityConstraint();
								XPathMatcher createMatcher(ValueStore valueStore_0);
								jstring toString();
							}; // end class Field
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							
							class ValueStore : public java::lang::Object {
								public:
							            ValueStore(jobject _jthis, bool copy);
							            ValueStore(const ValueStore &);
							        
								ValueStore();
								virtual ~ValueStore();
							}; // end class ValueStore
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class XSAllCM : public java::lang::Object {
								public:
							            XSAllCM(jobject _jthis, bool copy);
							            XSAllCM(const XSAllCM &);
							        
								XSAllCM(jboolean boolean_0,jint int_1);
								virtual ~XSAllCM();
								jintArray occurenceInfo(jintArray intArray_0);
								jintArray startContentModel();
								java::util::Vector whatCanGoHere(jintArray intArray_0);
								jboolean endContentModel(jintArray intArray_0);
								jboolean isCompactedForUPA();
								jboolean checkUniqueParticleAttribution(SubstitutionGroupHandler substitutionGroupHandler_0);
								jstring getTermName(jint int_0);
								void addElement(XSElementDecl xSElementDecl_0,jboolean boolean_1);
							}; // end class XSAllCM
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class XMLSchemaValidatorComponentManager : public util::ParserConfigurationSettings {
							public:
						            XMLSchemaValidatorComponentManager(jobject _jthis, bool copy);
						            XMLSchemaValidatorComponentManager(const XMLSchemaValidatorComponentManager &);
						        
							XMLSchemaValidatorComponentManager(XSGrammarPoolContainer xSGrammarPoolContainer_0);
							virtual ~XMLSchemaValidatorComponentManager();
							jboolean getFeature(jstring string_0);
							void setFeature(jstring string_0,jboolean boolean_1);
							void addRecognizedParamsAndSetDefaults(xni::parser::XMLComponent xMLComponent_0,XSGrammarPoolContainer xSGrammarPoolContainer_1);
							void reset();
						}; // end class XMLSchemaValidatorComponentManager
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSModelGroupDefinition : public java::lang::Object {
						public:
					            XSModelGroupDefinition(jobject _jthis, bool copy);
					            XSModelGroupDefinition(const XSModelGroupDefinition &);
					        
						XSModelGroupDefinition();
						virtual ~XSModelGroupDefinition();
					}; // end class XSModelGroupDefinition
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSParticle : public java::lang::Object {
						public:
					            XSParticle(jobject _jthis, bool copy);
					            XSParticle(const XSParticle &);
					        
						XSParticle();
						virtual ~XSParticle();
					}; // end class XSParticle
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						
						class XSDateTime : public java::lang::Object {
							public:
						            XSDateTime(jobject _jthis, bool copy);
						            XSDateTime(const XSDateTime &);
						        
							XSDateTime();
							virtual ~XSDateTime();
						}; // end class XSDateTime
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class DOMSerializerImpl : public java::lang::Object {
						public:
					            DOMSerializerImpl(jobject _jthis, bool copy);
					            DOMSerializerImpl(const DOMSerializerImpl &);
					        
						DOMSerializerImpl();
						virtual ~DOMSerializerImpl();
						w3c::dom::ls::LSSerializerFilter getFilter();
						void setFilter(w3c::dom::ls::LSSerializerFilter lSSerializerFilter_0);
						jstring getNewLine();
						void setNewLine(jstring string_0);
						jboolean writeToURI(w3c::dom::Node node_0,jstring string_1);
						w3c::dom::DOMConfiguration getDomConfig();
						jstring writeToString(w3c::dom::Node node_0);
						w3c::dom::DOMStringList getParameterNames();
						jboolean write(w3c::dom::Node node_0,w3c::dom::ls::LSOutput lSOutput_1);
					}; // end class DOMSerializerImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class IndentPrinter : public Printer {
						public:
					            IndentPrinter(jobject _jthis, bool copy);
					            IndentPrinter(const IndentPrinter &);
					        
						IndentPrinter(java::io::Writer writer_0,OutputFormat outputFormat_1);
						virtual ~IndentPrinter();
						void indent();
						void flushLine(jboolean boolean_0);
						void printText(jchar char_0);
						void printText(java::lang::StringBuffer stringBuffer_0);
						void printText(jcharArray charArray_0,jint int_1,jint int_2);
						void printText(jstring string_0);
						void breakLine();
						void breakLine(jboolean boolean_0);
						void printSpace();
						void unindent();
						jstring leaveDTD();
						jint getNextIndent();
						void setNextIndent(jint int_0);
						void setThisIndent(jint int_0);
						void enterDTD();
						void flush();
					}; // end class IndentPrinter
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class LineSeparator : public java::lang::Object {
						public:
					            LineSeparator(jobject _jthis, bool copy);
					            LineSeparator(const LineSeparator &);
					        
						LineSeparator();
						virtual ~LineSeparator();
					}; // end class LineSeparator
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class Method : public java::lang::Object {
						public:
					            Method(jobject _jthis, bool copy);
					            Method(const Method &);
					        
						Method();
						virtual ~Method();
					}; // end class Method
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class ObjectFactory : public java::lang::Object {
						public:
					            ObjectFactory(jobject _jthis, bool copy);
					            ObjectFactory(const ObjectFactory &);
					        
						virtual ~ObjectFactory();
					}; // end class ObjectFactory
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class XHTMLSerializer : public HTMLSerializer {
						public:
					            XHTMLSerializer(jobject _jthis, bool copy);
					            XHTMLSerializer(const XHTMLSerializer &);
					        
						XHTMLSerializer();
						XHTMLSerializer(java::io::OutputStream outputStream_0,OutputFormat outputFormat_1);
						XHTMLSerializer(java::io::Writer writer_0,OutputFormat outputFormat_1);
						XHTMLSerializer(OutputFormat outputFormat_0);
						virtual ~XHTMLSerializer();
						void setOutputFormat(OutputFormat outputFormat_0);
					}; // end class XHTMLSerializer
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class XML11Serializer : public XMLSerializer {
						public:
					            XML11Serializer(jobject _jthis, bool copy);
					            XML11Serializer(const XML11Serializer &);
					        
						XML11Serializer(OutputFormat outputFormat_0);
						XML11Serializer(java::io::Writer writer_0,OutputFormat outputFormat_1);
						XML11Serializer(java::io::OutputStream outputStream_0,OutputFormat outputFormat_1);
						XML11Serializer();
						virtual ~XML11Serializer();
						void characters(jcharArray charArray_0,jint int_1,jint int_2);
						jboolean reset();
					}; // end class XML11Serializer
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLDOMImplementation : public java::lang::Object {
						public:
					            HTMLDOMImplementation(jobject _jthis, bool copy);
					            HTMLDOMImplementation(const HTMLDOMImplementation &);
					        
						HTMLDOMImplementation();
						virtual ~HTMLDOMImplementation();
					}; // end class HTMLDOMImplementation
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace javax{
		namespace xml{
			namespace namespace{
				
				class NamespaceContext : public java::lang::Object {
					public:
				            NamespaceContext(jobject _jthis, bool copy);
				            NamespaceContext(const NamespaceContext &);
				        
					NamespaceContext();
					virtual ~NamespaceContext();
				}; // end class NamespaceContext
			} // end namespace javax
		} // end namespace xml
	} // end namespace namespace

	namespace javax{
		namespace xml{
			namespace parsers{
				
				class FactoryFinder : public java::lang::Object {
					public:
				            FactoryFinder(jobject _jthis, bool copy);
				            FactoryFinder(const FactoryFinder &);
				        
					virtual ~FactoryFinder();
				}; // end class FactoryFinder
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers

	namespace javax{
		namespace xml{
			namespace parsers{
				
				class SecuritySupport : public java::lang::Object {
					public:
				            SecuritySupport(jobject _jthis, bool copy);
				            SecuritySupport(const SecuritySupport &);
				        
					virtual ~SecuritySupport();
				}; // end class SecuritySupport
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLOutputFactory : public java::lang::Object {
					public:
				            XMLOutputFactory(jobject _jthis, bool copy);
				            XMLOutputFactory(const XMLOutputFactory &);
				        
					virtual ~XMLOutputFactory();
					static XMLOutputFactory newFactory(jstring string_0,java::lang::ClassLoader classLoader_1);
					static XMLOutputFactory newFactory();
					static XMLInputFactory newInstance(jstring string_0,java::lang::ClassLoader classLoader_1);
					static XMLOutputFactory newInstance();
				}; // end class XMLOutputFactory
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class NotationDeclaration : public java::lang::Object {
						public:
					            NotationDeclaration(jobject _jthis, bool copy);
					            NotationDeclaration(const NotationDeclaration &);
					        
						NotationDeclaration();
						virtual ~NotationDeclaration();
					}; // end class NotationDeclaration
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace util{
					
					class XMLEventConsumer : public java::lang::Object {
						public:
					            XMLEventConsumer(jobject _jthis, bool copy);
					            XMLEventConsumer(const XMLEventConsumer &);
					        
						XMLEventConsumer();
						virtual ~XMLEventConsumer();
					}; // end class XMLEventConsumer
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace util

	namespace javax{
		namespace xml{
			namespace transform{
				
				class TransformerConfigurationException : public TransformerException {
					public:
				            TransformerConfigurationException(jobject _jthis, bool copy);
				            TransformerConfigurationException(const TransformerConfigurationException &);
				        
					TransformerConfigurationException(jstring string_0,SourceLocator sourceLocator_1,java::lang::Throwable throwable_2);
					TransformerConfigurationException(jstring string_0,SourceLocator sourceLocator_1);
					TransformerConfigurationException(jstring string_0,java::lang::Throwable throwable_1);
					TransformerConfigurationException(java::lang::Throwable throwable_0);
					TransformerConfigurationException(jstring string_0);
					TransformerConfigurationException();
					virtual ~TransformerConfigurationException();
				}; // end class TransformerConfigurationException
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				namespace stream{
					
					class StreamResult : public java::lang::Object {
						public:
					            StreamResult(jobject _jthis, bool copy);
					            StreamResult(const StreamResult &);
					        
						StreamResult();
						StreamResult(java::io::File file_0);
						StreamResult(java::io::OutputStream outputStream_0);
						StreamResult(java::io::Writer writer_0);
						StreamResult(jstring string_0);
						virtual ~StreamResult();
						java::io::OutputStream getOutputStream();
						void setWriter(java::io::Writer writer_0);
						void setOutputStream(java::io::OutputStream outputStream_0);
						jstring getSystemId();
						void setSystemId(java::io::File file_0);
						void setSystemId(jstring string_0);
						java::io::Writer getWriter();
					}; // end class StreamResult
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace validation{
				
				class SchemaFactoryLoader : public java::lang::Object {
					public:
				            SchemaFactoryLoader(jobject _jthis, bool copy);
				            SchemaFactoryLoader(const SchemaFactoryLoader &);
				        
					virtual ~SchemaFactoryLoader();
				}; // end class SchemaFactoryLoader
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathFactoryFinder : public java::lang::Object {
					public:
				            XPathFactoryFinder(jobject _jthis, bool copy);
				            XPathFactoryFinder(const XPathFactoryFinder &);
				        
					XPathFactoryFinder(java::lang::ClassLoader classLoader_0);
					virtual ~XPathFactoryFinder();
					XPathFactory newFactory(jstring string_0);
				}; // end class XPathFactoryFinder
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DOMErrorHandler : public java::lang::Object {
					public:
				            DOMErrorHandler(jobject _jthis, bool copy);
				            DOMErrorHandler(const DOMErrorHandler &);
				        
					DOMErrorHandler();
					virtual ~DOMErrorHandler();
				}; // end class DOMErrorHandler
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DocumentFragment : public java::lang::Object {
					public:
				            DocumentFragment(jobject _jthis, bool copy);
				            DocumentFragment(const DocumentFragment &);
				        
					DocumentFragment();
					virtual ~DocumentFragment();
				}; // end class DocumentFragment
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class Node : public java::lang::Object {
					public:
				            Node(jobject _jthis, bool copy);
				            Node(const Node &);
				        
					Node();
					virtual ~Node();
				}; // end class Node
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSPageRule : public java::lang::Object {
						public:
					            CSSPageRule(jobject _jthis, bool copy);
					            CSSPageRule(const CSSPageRule &);
					        
						CSSPageRule();
						virtual ~CSSPageRule();
					}; // end class CSSPageRule
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSValue : public java::lang::Object {
						public:
					            CSSValue(jobject _jthis, bool copy);
					            CSSValue(const CSSValue &);
					        
						CSSValue();
						virtual ~CSSValue();
					}; // end class CSSValue
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class ViewCSS : public java::lang::Object {
						public:
					            ViewCSS(jobject _jthis, bool copy);
					            ViewCSS(const ViewCSS &);
					        
						ViewCSS();
						virtual ~ViewCSS();
					}; // end class ViewCSS
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					
					class UIEvent : public java::lang::Object {
						public:
					            UIEvent(jobject _jthis, bool copy);
					            UIEvent(const UIEvent &);
					        
						UIEvent();
						virtual ~UIEvent();
					}; // end class UIEvent
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLButtonElement : public java::lang::Object {
						public:
					            HTMLButtonElement(jobject _jthis, bool copy);
					            HTMLButtonElement(const HTMLButtonElement &);
					        
						HTMLButtonElement();
						virtual ~HTMLButtonElement();
					}; // end class HTMLButtonElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLFontElement : public java::lang::Object {
						public:
					            HTMLFontElement(jobject _jthis, bool copy);
					            HTMLFontElement(const HTMLFontElement &);
					        
						HTMLFontElement();
						virtual ~HTMLFontElement();
					}; // end class HTMLFontElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLIFrameElement : public java::lang::Object {
						public:
					            HTMLIFrameElement(jobject _jthis, bool copy);
					            HTMLIFrameElement(const HTMLIFrameElement &);
					        
						HTMLIFrameElement();
						virtual ~HTMLIFrameElement();
					}; // end class HTMLIFrameElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLMapElement : public java::lang::Object {
						public:
					            HTMLMapElement(jobject _jthis, bool copy);
					            HTMLMapElement(const HTMLMapElement &);
					        
						HTMLMapElement();
						virtual ~HTMLMapElement();
					}; // end class HTMLMapElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLParagraphElement : public java::lang::Object {
						public:
					            HTMLParagraphElement(jobject _jthis, bool copy);
					            HTMLParagraphElement(const HTMLParagraphElement &);
					        
						HTMLParagraphElement();
						virtual ~HTMLParagraphElement();
					}; // end class HTMLParagraphElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLTableCellElement : public java::lang::Object {
						public:
					            HTMLTableCellElement(jobject _jthis, bool copy);
					            HTMLTableCellElement(const HTMLTableCellElement &);
					        
						HTMLTableCellElement();
						virtual ~HTMLTableCellElement();
					}; // end class HTMLTableCellElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class DOMImplementationLS : public java::lang::Object {
						public:
					            DOMImplementationLS(jobject _jthis, bool copy);
					            DOMImplementationLS(const DOMImplementationLS &);
					        
						DOMImplementationLS();
						virtual ~DOMImplementationLS();
					}; // end class DOMImplementationLS
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSResourceResolver : public java::lang::Object {
						public:
					            LSResourceResolver(jobject _jthis, bool copy);
					            LSResourceResolver(const LSResourceResolver &);
					        
						LSResourceResolver();
						virtual ~LSResourceResolver();
					}; // end class LSResourceResolver
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					
					class MediaList : public java::lang::Object {
						public:
					            MediaList(jobject _jthis, bool copy);
					            MediaList(const MediaList &);
					        
						MediaList();
						virtual ~MediaList();
					}; // end class MediaList
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets

	namespace org{
		namespace w3c{
			namespace dom{
				namespace views{
					
					class DocumentView : public java::lang::Object {
						public:
					            DocumentView(jobject _jthis, bool copy);
					            DocumentView(const DocumentView &);
					        
						DocumentView();
						virtual ~DocumentView();
					}; // end class DocumentView
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace views

	namespace org{
		namespace xml{
			namespace sax{
				
				class Attributes : public java::lang::Object {
					public:
				            Attributes(jobject _jthis, bool copy);
				            Attributes(const Attributes &);
				        
					Attributes();
					virtual ~Attributes();
				}; // end class Attributes
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				
				class Locator : public java::lang::Object {
					public:
				            Locator(jobject _jthis, bool copy);
				            Locator(const Locator &);
				        
					Locator();
					virtual ~Locator();
				}; // end class Locator
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					
					class Locator2Impl : public helpers::LocatorImpl {
						public:
					            Locator2Impl(jobject _jthis, bool copy);
					            Locator2Impl(const Locator2Impl &);
					        
						Locator2Impl();
						Locator2Impl(Locator locator_0);
						virtual ~Locator2Impl();
						void setEncoding(jstring string_0);
						jstring getXMLVersion();
						void setXMLVersion(jstring string_0);
						jstring getEncoding();
					}; // end class Locator2Impl
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext

	namespace crcl{
		namespace utils{
			
			class CRCLPosemath : public java::lang::Object {
				public:
			            CRCLPosemath(jobject _jthis, bool copy);
			            CRCLPosemath(const CRCLPosemath &);
			        
				virtual ~CRCLPosemath();
				static base::PointType multiply(jdouble double_0,base::VectorType vectorType_1);
				static base::PointType multiply(jdouble double_0,base::PointType pointType_1);
				static base::PointType multiply(java::math::BigDecimal bigDecimal_0,base::VectorType vectorType_1);
				static base::PoseType multiply(base::PoseType poseType_0,base::PoseType poseType_1);
				static base::PointType multiply(java::math::BigDecimal bigDecimal_0,base::PointType pointType_1);
				static base::PointType subtract(base::PointType pointType_0,base::PointType pointType_1);
				static java::math::BigDecimal dot(base::VectorType vectorType_0,base::PointType pointType_1);
				static java::math::BigDecimal dot(base::VectorType vectorType_0,base::VectorType vectorType_1);
				static jdouble norm(base::VectorType vectorType_0);
				static base::VectorType toCRCLUnitVector(org::apache::commons::math3::geometry::euclidean::threed::Vector3D vector3D_0,base::VectorType vectorType_1);
				static base::VectorType toCRCLUnitVector(org::apache::commons::math3::geometry::euclidean::threed::Vector3D vector3D_0);
				static base::PoseType identityPose();
				static org::apache::commons::math3::geometry::euclidean::threed::Rotation toCommonsRotation(base::PoseType poseType_0);
				static rcs::posemath::PmCartesian pointToPmCartesian(base::PointType pointType_0);
				static base::PointType toCRCLPoint(org::apache::commons::math3::geometry::euclidean::threed::Vector3D vector3D_0);
				static base::PointType toCRCLPoint(org::apache::commons::math3::geometry::euclidean::threed::Vector3D vector3D_0,base::PointType pointType_1);
				static rcs::posemath::PmPose toPmPose(base::PoseType poseType_0);
				static jstring poseToString(base::PoseType poseType_0);
				static jdouble diffPoints(base::PointType pointType_0,base::PointType pointType_1);
				static jdouble diffPosesTran(base::PoseType poseType_0,base::PoseType poseType_1);
				static org::apache::commons::math3::geometry::euclidean::threed::Vector3D toCommonsVector3D(base::VectorType vectorType_0);
				static org::apache::commons::math3::geometry::euclidean::threed::Vector3D toCommonsVector3D(base::PointType pointType_0);
				static org::apache::commons::math3::geometry::euclidean::threed::Vector3D toCommonsVector3D(base::PoseType poseType_0);
				static jdouble maxDiffDoubleArray(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
				static base::PoseType pointXAxisZAxisToPose(base::PointType pointType_0,base::VectorType vectorType_1,base::VectorType vectorType_2);
				static base::VectorType cross(base::VectorType vectorType_0,base::VectorType vectorType_1);
				static rcs::posemath::PmRotationVector toPmRotationVector(base::PoseType poseType_0);
				static base::VectorType toCRCLVector(org::apache::commons::math3::geometry::euclidean::threed::Vector3D vector3D_0);
				static base::VectorType toCRCLVector(org::apache::commons::math3::geometry::euclidean::threed::Vector3D vector3D_0,base::VectorType vectorType_1);
				static base::PointType toPointType(rcs::posemath::PmCartesian pmCartesian_0);
				static jdouble diffPosesRot(base::PoseType poseType_0,base::PoseType poseType_1);
				static rcs::posemath::PmRpy toPmRpy(base::PoseType poseType_0);
				static base::PoseType invert(base::PoseType poseType_0);
				static base::PoseType toPoseType(rcs::posemath::PmCartesian pmCartesian_0,rcs::posemath::PmRotationVector pmRotationVector_1);
				static base::PoseType toPoseType(rcs::posemath::PmCartesian pmCartesian_0,rcs::posemath::PmRotationVector pmRotationVector_1,base::PoseType poseType_2);
				static rcs::posemath::PmRotationMatrix toPmRotationMatrix(base::PoseType poseType_0);
				static rcs::posemath::PmCartesian vectorToPmCartesian(base::VectorType vectorType_0);
				static base::PointType add(base::PointType pointType_0,base::PointType pointType_1);
				static base::VectorType normalize(base::VectorType vectorType_0);
				static base::PoseType shift(base::PoseType poseType_0,base::PointType pointType_1);
			}; // end class CRCLPosemath
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class XpathUtils : public java::lang::Object {
				public:
			            XpathUtils(jobject _jthis, bool copy);
			            XpathUtils(const XpathUtils &);
			        
				virtual ~XpathUtils();
				jstring queryXmlString(jstring string_0,jstring string_1);
				virtual jstring nodeToString(org::w3c::dom::Node node_0);
				jstring queryXml(jobjectArray fileArray_0,jstring string_1);
				jstring queryXml(java::io::File file_0,jstring string_1);
				jstring getDocumentation(jstring string_0);
				jstring nodeListToString(org::w3c::dom::NodeList nodeList_0);
				void setSchemaFiles(jobjectArray fileArray_0);
				jobjectArray getSchemaFiles();
			}; // end class XpathUtils
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class ListChooserJPanel : public javax::swing::JPanel {
				public:
			            ListChooserJPanel(jobject _jthis, bool copy);
			            ListChooserJPanel(const ListChooserJPanel &);
			        
				virtual ~ListChooserJPanel();
			}; // end class ListChooserJPanel
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class LauncherJFrame : public javax::swing::JFrame {
				public:
			            LauncherJFrame(jobject _jthis, bool copy);
			            LauncherJFrame(const LauncherJFrame &);
			        
				LauncherJFrame();
				virtual ~LauncherJFrame();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class LauncherJFrame
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class SimulatedKinematicsPlausible : public java::lang::Object {
				public:
			            SimulatedKinematicsPlausible(jobject _jthis, bool copy);
			            SimulatedKinematicsPlausible(const SimulatedKinematicsPlausible &);
			        
				SimulatedKinematicsPlausible();
				virtual ~SimulatedKinematicsPlausible();
				jdouble getScale();
				void setScale(jdouble double_0);
				base::PoseType jointsToPose(jdoubleArray doubleArray_0,base::PoseType poseType_1);
				base::PoseType jointsToPose(jdoubleArray doubleArray_0);
				jdoubleArray poseToJoints(jdoubleArray doubleArray_0,base::PoseType poseType_1);
				jdoubleArray getSeglengths();
				void setSeglengths(jdoubleArray doubleArray_0);
			}; // end class SimulatedKinematicsPlausible
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class GripperJFrame : public javax::swing::JFrame {
				public:
			            GripperJFrame(jobject _jthis, bool copy);
			            GripperJFrame(const GripperJFrame &);
			        
				GripperJFrame();
				virtual ~GripperJFrame();
				jint getDelayMillis();
				void setPort(jint int_0);
				void setDelayMillis(jint int_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
				jint getPort();
			}; // end class GripperJFrame
		} // end namespace crcl
	} // end namespace utils

	namespace rcsdesign{
		
		class FileTypeInfo : public java::lang::Object {
			public:
		            FileTypeInfo(jobject _jthis, bool copy);
		            FileTypeInfo(const FileTypeInfo &);
		        
			virtual ~FileTypeInfo();
			static jstring typeToString(jint int_0);
			jstring toString();
		}; // end class FileTypeInfo
	} // end namespace rcsdesign

	namespace rcsdesign{
		
		class rcsdesignModuleInfo : public java::lang::Object {
			public:
		            rcsdesignModuleInfo(jobject _jthis, bool copy);
		            rcsdesignModuleInfo(const rcsdesignModuleInfo &);
		        
			virtual ~rcsdesignModuleInfo();
		}; // end class rcsdesignModuleInfo
	} // end namespace rcsdesign

	namespace rcsdesign{
		
		class AutoSizedTextArea : public java::awt::TextArea {
			public:
		            AutoSizedTextArea(jobject _jthis, bool copy);
		            AutoSizedTextArea(const AutoSizedTextArea &);
		        
			virtual ~AutoSizedTextArea();
		}; // end class AutoSizedTextArea
	} // end namespace rcsdesign

	namespace rcsdesign{
		
		class MakeFileRunner : public java::lang::Object {
			public:
		            MakeFileRunner(jobject _jthis, bool copy);
		            MakeFileRunner(const MakeFileRunner &);
		        
			virtual ~MakeFileRunner();
			void run();
		}; // end class MakeFileRunner
	} // end namespace rcsdesign

	namespace rcs{
		namespace posemath{
			
			class LineFitTester : public java::lang::Object {
				public:
			            LineFitTester(jobject _jthis, bool copy);
			            LineFitTester(const LineFitTester &);
			        
				LineFitTester();
				virtual ~LineFitTester();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class LineFitTester
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_EULER_ZYX : public PmEulerZyx {
				public:
			            PM_EULER_ZYX(jobject _jthis, bool copy);
			            PM_EULER_ZYX(const PM_EULER_ZYX &);
			        
				PM_EULER_ZYX(jdouble double_0,jdouble double_1,jdouble double_2);
				PM_EULER_ZYX();
				virtual ~PM_EULER_ZYX();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_EULER_ZYX
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_ROTATION_VECTOR : public PmRotationVector {
				public:
			            PM_ROTATION_VECTOR(jobject _jthis, bool copy);
			            PM_ROTATION_VECTOR(const PM_ROTATION_VECTOR &);
			        
				PM_ROTATION_VECTOR(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				PM_ROTATION_VECTOR();
				virtual ~PM_ROTATION_VECTOR();
				PM_ROTATION_VECTOR clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_ROTATION_VECTOR
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace nml{
			
			class errlogMsgDict : public java::lang::Object {
				public:
			            errlogMsgDict(jobject _jthis, bool copy);
			            errlogMsgDict(const errlogMsgDict &);
			        
				errlogMsgDict();
				virtual ~errlogMsgDict();
				jint formatMsg(NMLFormatConverter nMLFormatConverter_0);
				jlong getEstimatedSize(jint int_0);
				jlong getMaxEstimatedSize();
			}; // end class errlogMsgDict
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class nmlperf : public java::lang::Object {
				public:
			            nmlperf(jobject _jthis, bool copy);
			            nmlperf(const nmlperf &);
			        
				virtual ~nmlperf();
				void run_test(jobjectArray stringArray_0);
				void run_test(int argc,const char **argv);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class nmlperf
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class XMLNodeInfo : public java::lang::Object {
				public:
			            XMLNodeInfo(jobject _jthis, bool copy);
			            XMLNodeInfo(const XMLNodeInfo &);
			        
				XMLNodeInfo();
				virtual ~XMLNodeInfo();
				jstring toString();
			}; // end class XMLNodeInfo
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class time_tracker : public java::lang::Object {
				public:
			            time_tracker(jobject _jthis, bool copy);
			            time_tracker(const time_tracker &);
			        
				time_tracker();
				virtual ~time_tracker();
				void cycle();
				jstring toString();
				time_tracker clone();
				void update(NMLFormatConverter nMLFormatConverter_0);
				void reset();
			}; // end class time_tracker
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLConnectionCreator : public java::lang::Object {
				public:
			            NMLConnectionCreator(jobject _jthis, bool copy);
			            NMLConnectionCreator(const NMLConnectionCreator &);
			        
				NMLConnectionCreator();
				virtual ~NMLConnectionCreator();
				NMLConnectionInterface NewNMLConnection();
			}; // end class NMLConnectionCreator
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class RCS_STAT_MSG_V2 : public RCS_STAT_MSG {
				public:
			            RCS_STAT_MSG_V2(jobject _jthis, bool copy);
			            RCS_STAT_MSG_V2(const RCS_STAT_MSG_V2 &);
			        
				RCS_STAT_MSG_V2();
				RCS_STAT_MSG_V2(jint int_0);
				virtual ~RCS_STAT_MSG_V2();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class RCS_STAT_MSG_V2
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLBufferConfigInfo : public java::lang::Object {
				public:
			            NMLBufferConfigInfo(jobject _jthis, bool copy);
			            NMLBufferConfigInfo(const NMLBufferConfigInfo &);
			        
				NMLBufferConfigInfo();
				virtual ~NMLBufferConfigInfo();
				void add_process_line(jstring string_0,jstring string_1);
				jstring getProcessLine(jstring string_0);
				jstring toString();
			}; // end class NMLBufferConfigInfo
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class PackedFileReader : public java::lang::Object {
				public:
			            PackedFileReader(jobject _jthis, bool copy);
			            PackedFileReader(const PackedFileReader &);
			        
				PackedFileReader(NMLMessageDictionary nMLMessageDictionary_0,jboolean boolean_1);
				virtual ~PackedFileReader();
				jstring convertMsgToString(NMLmsg nMLmsg_0);
				java::util::List createLogTimeEntryList(java::io::File file_0,java::io::File file_1,jboolean boolean_2,jint int_3,MsgToTimeStamp msgToTimeStamp_4);
				static jintArray ReadIndexes(jstring string_0,jboolean boolean_1);
				static jintArray ReadIndexes(java::io::File file_0,jboolean boolean_1);
				NMLmsg ReadFileSection(jstring string_0,jint int_1,jint int_2);
				NMLmsg ReadFileSection(java::io::File file_0,jint int_1,jint int_2);
				NMLmsg ReadFile(jstring string_0);
				NMLmsg ReadFile(jstring string_0,jint int_1);
				NMLmsg ReadFile(java::io::File file_0);
				NMLmsg ReadFile(java::io::File file_0,jint int_1);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class PackedFileReader
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLConnectionCreatorInterface : public java::lang::Object {
				public:
			            NMLConnectionCreatorInterface(jobject _jthis, bool copy);
			            NMLConnectionCreatorInterface(const NMLConnectionCreatorInterface &);
			        
				NMLConnectionCreatorInterface();
				virtual ~NMLConnectionCreatorInterface();
			}; // end class NMLConnectionCreatorInterface
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class DISPFormatConverter : public NMLFormatConverterBase {
				public:
			            DISPFormatConverter(jobject _jthis, bool copy);
			            DISPFormatConverter(const DISPFormatConverter &);
			        
				virtual ~DISPFormatConverter();
				jstring toString();
				jfloat update(jfloat float_0);
				void update(jlongArray longArray_0,jint int_1);
				jlong update(jlong long_0);
				void update(jintArray intArray_0,jint int_1);
				void update(jfloatArray floatArray_0,jint int_1);
				jdouble update(jdouble double_0);
				void update(jdoubleArray doubleArray_0,jint int_1);
				void update(jcharArray charArray_0,jint int_1);
				jchar update(jchar char_0);
				void update(jbyteArray byteArray_0,jint int_1);
				jbyte update(jbyte byte_0);
				jshort update(jshort short_0);
				void update(jshortArray shortArray_0,jint int_1);
				jint update(jint int_0);
			}; // end class DISPFormatConverter
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLFormatConvertErrCallbackInterface : public java::lang::Object {
				public:
			            NMLFormatConvertErrCallbackInterface(jobject _jthis, bool copy);
			            NMLFormatConvertErrCallbackInterface(const NMLFormatConvertErrCallbackInterface &);
			        
				NMLFormatConvertErrCallbackInterface();
				virtual ~NMLFormatConvertErrCallbackInterface();
			}; // end class NMLFormatConvertErrCallbackInterface
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class XMLFileWriter : public java::lang::Object {
				public:
			            XMLFileWriter(jobject _jthis, bool copy);
			            XMLFileWriter(const XMLFileWriter &);
			        
				XMLFileWriter(NMLMessageDictionary nMLMessageDictionary_0);
				virtual ~XMLFileWriter();
				NMLmsg convertStringToMsg(jstring string_0);
				void set_add_array_indexes_to_name(jboolean boolean_0);
				void WriteFile(java::io::File file_0,NMLmsg nMLmsg_1);
				void WriteFile(jstring string_0,NMLmsg nMLmsg_1);
			}; // end class XMLFileWriter
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class LogTimeEntry : public java::lang::Object {
				public:
			            LogTimeEntry(jobject _jthis, bool copy);
			            LogTimeEntry(const LogTimeEntry &);
			        
				LogTimeEntry(jstring string_0,jdouble double_1,jint int_2,jint int_3);
				virtual ~LogTimeEntry();
				jdouble getTimeStamp();
				java::io::File getF();
				void setF(java::io::File file_0);
				jstring getFileNameOrURL();
				jint getMaxLen();
				jstring toString();
				jint getOffset();
			}; // end class LogTimeEntry
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLSingleVarLogItem : public java::lang::Object {
				public:
			            NMLSingleVarLogItem(jobject _jthis, bool copy);
			            NMLSingleVarLogItem(const NMLSingleVarLogItem &);
			        
				NMLSingleVarLogItem();
				virtual ~NMLSingleVarLogItem();
			}; // end class NMLSingleVarLogItem
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class CMS_TIME : public java::lang::Object {
				public:
			            CMS_TIME(jobject _jthis, bool copy);
			            CMS_TIME(const CMS_TIME &);
			        
				CMS_TIME(jstring string_0);
				CMS_TIME();
				virtual ~CMS_TIME();
				void update_for_non_xml(NMLFormatConverter nMLFormatConverter_0);
				void setWithString(jstring string_0);
				jstring toString();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class CMS_TIME
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLErrorAppender : public java::lang::Object {
				public:
			            NMLErrorAppender(jobject _jthis, bool copy);
			            NMLErrorAppender(const NMLErrorAppender &);
			        
				NMLErrorAppender();
				virtual ~NMLErrorAppender();
			}; // end class NMLErrorAppender
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace utils{
			
			class StrToInt : public java::lang::Object {
				public:
			            StrToInt(jobject _jthis, bool copy);
			            StrToInt(const StrToInt &);
			        
				StrToInt();
				virtual ~StrToInt();
				static jint convert(jstring string_0);
				static void ErrorPrint(jstring string_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class StrToInt
		} // end namespace rcs
	} // end namespace utils

	namespace rcs{
		namespace utils{
			
			class CorrectedPipedInputStreamInterface : public java::lang::Object {
				public:
			            CorrectedPipedInputStreamInterface(jobject _jthis, bool copy);
			            CorrectedPipedInputStreamInterface(const CorrectedPipedInputStreamInterface &);
			        
				CorrectedPipedInputStreamInterface();
				virtual ~CorrectedPipedInputStreamInterface();
			}; // end class CorrectedPipedInputStreamInterface
		} // end namespace rcs
	} // end namespace utils

	namespace rcs{
		namespace utils{
			
			class StrToLong : public java::lang::Object {
				public:
			            StrToLong(jobject _jthis, bool copy);
			            StrToLong(const StrToLong &);
			        
				StrToLong();
				virtual ~StrToLong();
				static jlong convert(jstring string_0);
				static void ErrorPrint(jstring string_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class StrToLong
		} // end namespace rcs
	} // end namespace utils

	namespace diagapplet{
		namespace plotter{
			
			class PlotData : public java::lang::Object {
				public:
			            PlotData(jobject _jthis, bool copy);
			            PlotData(const PlotData &);
			        
				PlotData();
				virtual ~PlotData();
				jboolean isVisible();
				void AddX(jdouble double_0);
				void CheckPoint(PlotPoint plotPoint_0);
				void set_size(jint int_0);
				void addPlotPoint(PlotPoint plotPoint_0);
				void set_v(java::util::Vector vector_0);
				void clear_v();
				void setLine_color(java::awt::Color color_0);
				void setPointSize(jint int_0);
				void setPoint_color(java::awt::Color color_0);
				jint get_num_points();
				PlotPoint getPlotPointAt(jint int_0);
				jboolean getShow(jint int_0);
				jstring getStatsString();
				void setShow(jint int_0,jboolean boolean_1);
				void setShowAll(jint int_0,jboolean boolean_1);
				java::awt::Color getLine_color();
				java::awt::Color getPoint_color();
				jint getPointSize();
				jint v_size();
				void setPlotPointAt(PlotPoint plotPoint_0,jint int_1);
				void RecheckAllPoints();
				jstring toString();
			}; // end class PlotData
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		namespace plotter{
			
			class ColorEditor : public javax::swing::AbstractCellEditor {
				public:
			            ColorEditor(jobject _jthis, bool copy);
			            ColorEditor(const ColorEditor &);
			        
				ColorEditor();
				virtual ~ColorEditor();
			}; // end class ColorEditor
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		namespace plotter{
			
			class plotter_NB_UI : public javax::swing::JPanel {
				public:
			            plotter_NB_UI(jobject _jthis, bool copy);
			            plotter_NB_UI(const plotter_NB_UI &);
			        
				plotter_NB_UI();
				virtual ~plotter_NB_UI();
				void Clear();
				java::awt::image::BufferedImage getImage(java::awt::Dimension dimension_0);
				java::awt::image::BufferedImage getImage();
				void setParseOptions(ParseOptions parseOptions_0);
				static jint getTotalPlotters();
				jboolean get_array_mode();
				jstring getPlot_order();
				jboolean isUse_Interpolation();
				void setUse_Interpolation(jboolean boolean_0);
				void AddDeleteActionListener(java::awt::event::ActionListener actionListener_0);
				void checkComboBoxFunc(jint int_0);
				void ZoomOut();
				void ZoomIn();
				void SetKeyListener(java::awt::event::KeyListener keyListener_0);
				jstring ComputeStatsString();
				void SaveStatsFile(java::io::File file_0);
				jboolean isNosplit();
				void AddArrayPlot(PlotData plotData_0,jstring string_1);
				void refresh();
				void setGraphFunctionNormal();
				void setGraphFunctionVS();
				void setGraphFunctionXZ();
				void setGraphFunctionYZ();
				void setGraphFunctionSingle();
				void setGraphFunctionSMOOTH();
				void setGraphFunctionDEVIATION();
				void setGraphFunctionDERIVATIVE();
				void setGraphFunctionINTEGRAL();
				void setGraphFunctionDIFF();
				void setGraphFunctionPPDIFF();
				void setGraphFunctionPPDIFFMODPI();
				void setGraphFunctionNEGATIVEX();
				jint getGraphFunction();
				jint getFuncArg();
				jboolean isApply_absolute_value();
				void setApply_absolute_value(jboolean boolean_0);
				void CheckRecalcPlots();
				java::awt::image::BufferedImage plotToImage();
				java::awt::image::BufferedImage plotToImage(jint int_0,jint int_1);
				void SetEqualizeAxis(jboolean boolean_0);
				void set_auto_fit_to_graph(jboolean boolean_0);
				void SetGraphLimits(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				void setGraphFunction(jint int_0);
				void setGraphFunction(jstring string_0);
				void setFuncArg(jint int_0);
				void setFuncArg(jstring string_0);
				void setSplit(jboolean boolean_0);
				void AddPointToPlot(PlotData plotData_0,jdouble double_1,jdouble double_2,jboolean boolean_3);
				void AddPointToPlot(PlotData plotData_0,jdouble double_1,jdouble double_2,jboolean boolean_3,jdouble double_4,jdouble double_5);
				void AddPointToArrayPlot(PlotData plotData_0,jint int_1,jdouble double_2);
				void AddPlot(PlotData plotData_0);
				void AddPlot(PlotData plotData_0,jstring string_1);
				void FitY();
				void FitToGraph();
				void ScrollRight();
				void LoadXYObjectsList(jstring string_0,jstring string_1,java::util::List list_2);
				void LoadObjectsList(jstring string_0,java::util::List list_1);
				void LoadXYFloatArrays(jstring string_0,jfloatArray floatArray_1,jfloatArray floatArray_2);
				void LoadXYDoubleArrays(jstring string_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
				void LoadFloatArray(jstring string_0,jfloatArray floatArray_1);
				void LoadDoubleArray(jstring string_0,jdoubleArray doubleArray_1);
				static void setForcedLineFilterPattern(jstring string_0,jboolean boolean_1);
				static void lock_value_for_plot_versus_line_number(jboolean boolean_0,jboolean boolean_1);
				void SaveFile(jstring string_0);
				jdouble getXMin();
				jdouble getXMax();
				jdouble getYMin();
				jdouble getYMax();
				void setUseShortname(jboolean boolean_0);
				void ReloadFile();
				void setFieldSelectPattern(jstring string_0);
				void setShowKey(jboolean boolean_0);
				void setNosplit(jboolean boolean_0);
				void SetReverseX(jboolean boolean_0);
				void set_point_size_limit(jint int_0);
				void setPlot_order(jstring string_0);
				void setGraphFunctionXY();
				void ForceRecheckComboFunc();
				void SetOuterArea(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				void SetInnerArea(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				jboolean get_paused();
				void ResetMinXToZero();
				void ShowData();
				void ShowOptions();
				void loadFile(jstring string_0);
				jint get_num_plots();
				void addClearActionListener(java::awt::event::ActionListener actionListener_0);
				jboolean isLocked();
			}; // end class plotter_NB_UI
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		
		class MessageFileJFrame : public javax::swing::JFrame {
			public:
		            MessageFileJFrame(jobject _jthis, bool copy);
		            MessageFileJFrame(const MessageFileJFrame &);
		        
			MessageFileJFrame();
			virtual ~MessageFileJFrame();
			void SetTypeInfo(CodeGen::StructureTypeInfo structureTypeInfo_0,java::util::Hashtable hashtable_1);
			void set_hashtable_by_id(java::util::Hashtable hashtable_0);
			void LoadPackedFile(java::io::File file_0);
			void LoadXMLFile(java::io::File file_0);
			void setNmlMessageDictionary(rcs::nml::NMLMessageDictionary nMLMessageDictionary_0);
			void SetDataInfo(java::util::Enumeration enumeration_0);
			void LoadDataStringFile(jstring string_0);
			void LoadDataStringFile(java::io::File file_0);
			static void main(jobjectArray stringArray_0);
			static void main(int argc,const char **argv);
		}; // end class MessageFileJFrame
	} // end namespace diagapplet

	namespace diagapplet{
		
		class HierarchyPanel : public java::awt::Panel {
			public:
		            HierarchyPanel(jobject _jthis, bool copy);
		            HierarchyPanel(const HierarchyPanel &);
		        
			HierarchyPanel(jint int_0,jint int_1);
			HierarchyPanel();
			virtual ~HierarchyPanel();
			java::awt::Dimension getPreferredSize();
			java::awt::Dimension getMinimumSize();
			void componentResized(java::awt::event::ComponentEvent componentEvent_0);
			void componentMoved(java::awt::event::ComponentEvent componentEvent_0);
			void componentShown(java::awt::event::ComponentEvent componentEvent_0);
			void componentHidden(java::awt::event::ComponentEvent componentEvent_0);
			void mousePressed(java::awt::event::MouseEvent mouseEvent_0);
			void mouseReleased(java::awt::event::MouseEvent mouseEvent_0);
			void mouseClicked(java::awt::event::MouseEvent mouseEvent_0);
			void mouseExited(java::awt::event::MouseEvent mouseEvent_0);
			void mouseEntered(java::awt::event::MouseEvent mouseEvent_0);
			void mouseMoved(java::awt::event::MouseEvent mouseEvent_0);
			void mouseDragged(java::awt::event::MouseEvent mouseEvent_0);
			void paint(java::awt::Graphics graphics_0);
			jboolean UpdateDisplay(jboolean boolean_0);
			void paintHierarchy(java::awt::Graphics graphics_0);
			void FindAllParents(java::util::Hashtable hashtable_0,utils::URLLoadInfoPanelInterface uRLLoadInfoPanelInterface_1);
			jint computeMaxX();
			void handle_mouseDragged();
			void monitored_repaint();
			jint computeMaxY();
			jstring getModulesListSelectedItem();
			void setCountList(utils::CountList countList_0);
			void clear();
			void print();
			void reset();
		}; // end class HierarchyPanel
	} // end namespace diagapplet

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenCommon : public java::lang::Object {
				public:
			            CodeGenCommon(jobject _jthis, bool copy);
			            CodeGenCommon(const CodeGenCommon &);
			        
				CodeGenCommon();
				virtual ~CodeGenCommon();
				static void printHelp();
				void setVisible(jboolean boolean_0);
				static void DebugPrint(jstring string_0);
				static void ErrorPrint(jstring string_0);
				jboolean is_preserve_modules_hashtable();
				jboolean is_interrupt_loading();
				void set_m_hierarchyFile(jstring string_0);
				void LoadHierarchy();
				void RingBell();
				void GetParameters(jobjectArray stringArray_0);
				void GetParameters(int argc,const char **argv);
				void set_interrupt_loading(jboolean boolean_0);
				java::util::Hashtable get_m_modulesHashTable();
				java::util::Hashtable get_optionsHashTable();
				jstring get_m_hierarchyFile();
				utils::FastListPanelInterface get_ClassList();
				void set_ClassList(utils::FastListPanelInterface fastListPanelInterface_0);
				utils::FastListPanelInterface get_m_modulesList();
				void set_m_modulesList(utils::FastListPanelInterface fastListPanelInterface_0);
				void set_diag_dict_creator(DiagNMLMsgDictCreatorInterface diagNMLMsgDictCreatorInterface_0);
				DiagNMLMsgDictCreatorInterface get_diag_dict_creator();
				void set_nml_creator(rcs::nml::NMLConnectionCreatorInterface nMLConnectionCreatorInterface_0);
				rcs::nml::NMLConnectionCreatorInterface get_nml_creator();
				jstring GetParameter(jstring string_0,jobjectArray stringArray_1);
				void AddAuxBufferModule(jstring string_0,jstring string_1,jstring string_2);
				java::util::Vector get_extraActionsVector();
				java::util::Vector get_extraTabsVector();
				utils::CountButtonInterface get_m_hierarchyFileLoadButton();
				void set_optionsHashTable(java::util::Hashtable hashtable_0);
				java::util::Hashtable get_serversHashtable();
				jboolean get_force_reload_file();
				void set_first_java_class(jboolean boolean_0);
				void set_first_cpp_function(jboolean boolean_0);
				jboolean get_RunIndependantly();
				void set_javaFileName(jstring string_0);
				void set_script_file_ran(jboolean boolean_0);
				void set_display_on(jboolean boolean_0);
				void append_includePath(jstring string_0);
				jboolean get_debug_on();
				jboolean get_print_prompt();
				utils::CountListInterface get_m_modulesCountList();
				utils::FastListPanelInterface get_serversList();
				void set_serversList(utils::FastListPanelInterface fastListPanelInterface_0);
				void LoadHierarchyNewThread(jstring string_0,LoadHierarchyUpdateInterface loadHierarchyUpdateInterface_1);
				jint get_error_count();
				jboolean CheckForCppEnum(jstring string_0);
				jboolean CheckForCppClass(jstring string_0);
				jboolean CheckForCppPosemathClass(jstring string_0);
				jstring GetEnumTypeName(jstring string_0);
				jboolean VarIsUnsigned(jstring string_0);
				jstring GetCppVarDef(jstring string_0,StructureTypeInfo structureTypeInfo_1);
				jstring ConvertCppTypeToJavaType(jstring string_0);
				jboolean CheckForJavaStatic(jstring string_0);
				jboolean CheckForJavaClass(jstring string_0);
				void CreateJavaDefinition(StructureTypeInfo structureTypeInfo_0);
				void CreateJavaUpdateFunction(StructureTypeInfo structureTypeInfo_0);
				void CreateCppUpdateFunction(StructureTypeInfo structureTypeInfo_0);
				void CreateC_UpdateFunction(StructureTypeInfo structureTypeInfo_0);
				void PrintInfo(jstring string_0);
				void PrintInfo(StructureTypeInfo structureTypeInfo_0,jstring string_1,jint int_2,jint int_3);
				void WriteOutput(jstring string_0);
				void InitializeClassList();
				void ResetGenericClasses();
				void set_preserve_modules_hashtable(jboolean boolean_0);
				void set_inside_diagapplet(jboolean boolean_0);
				void set_m_ConfigFile(jstring string_0);
				void set_m_modulesHashTable(java::util::Hashtable hashtable_0);
				void set_serversHashtable(java::util::Hashtable hashtable_0);
				void set_m_loadingPanel(utils::URLLoadInfoPanelInterface uRLLoadInfoPanelInterface_0);
				void set_m_modulesCountList(utils::CountListInterface countListInterface_0);
				jstring get_script();
				void set_print_prompt(jboolean boolean_0);
				jboolean get_display_on();
				jstring createScript(jobjectArray stringArray_0);
				jstring createScript(int argc,const char **argv);
				void set_script(jstring string_0);
				void set_RunIndependantly(jboolean boolean_0);
				jboolean get_first_java_class();
				jstring get_javaFileName();
				jboolean get_first_cpp_function();
				jstring get_cppFileName();
				CodeGenTextAreaInterface get_codeTextArea();
				CodeGenTextFieldInterface get_configFileTextField();
				void set_reload_hierarchy_needed(jboolean boolean_0);
				jboolean get_running();
				void set_generate_java_classes_needed(jboolean boolean_0);
				void set_generate_java_dictionary_needed(jboolean boolean_0);
				void set_generate_cpp_update_functions_needed(jboolean boolean_0);
				void set_generate_cpp_format_function_needed(jboolean boolean_0);
				void set_generate_cpp_constructors_needed(jboolean boolean_0);
				void set_debug_on(jboolean boolean_0);
				void ClearAll();
				jboolean get_is_loading_hierarchy();
				jboolean get_generating_code();
				jboolean get_running_script();
				void set_is_loading_hierarchy(jboolean boolean_0);
				void set_generating_code(jboolean boolean_0);
				void set_running_script(jboolean boolean_0);
				void set_force_reload_file(jboolean boolean_0);
				jboolean get_inside_diagapplet();
				jstring get_m_ConfigFile();
				void set_configFileTextField(CodeGenTextFieldInterface codeGenTextFieldInterface_0);
				void set_m_hierarchyFileLoadButton(utils::CountButtonInterface countButtonInterface_0);
				utils::URLLoadInfoPanelInterface get_m_loadingPanel();
				jstring get_includePath();
				void set_includePathField(CodeGenTextFieldInterface codeGenTextFieldInterface_0);
				void set_codeTextArea(CodeGenTextAreaInterface codeGenTextAreaInterface_0);
				void RunScript();
				void RunScript(jstring string_0);
				void set_running(jboolean boolean_0);
				void set_run_needed(jboolean boolean_0);
				jboolean get_script_file_ran();
				jboolean get_reload_hierarchy_needed();
				CodeGenTextFieldInterface get_includePathField();
				void set_includePath(jstring string_0);
				jstring get_lastIncludePath();
				void set_lastIncludePath(jstring string_0);
				jboolean get_generate_java_classes_needed();
				void GenerateJavaClasses();
				jboolean get_generate_java_dictionary_needed();
				void GenerateJavaMessageDict();
				jboolean get_generate_cpp_update_functions_needed();
				void GenerateCppUpdateFunctions();
				jboolean get_generate_cpp_format_function_needed();
				void GenerateCppFormatFunction();
				jboolean get_generate_cpp_constructors_needed();
				void GenerateCppConstructors();
				jboolean get_run_needed();
				void set_cppFileName(jstring string_0);
				jboolean get_update_with_name();
				void set_update_with_name(jboolean boolean_0);
				void CreateCppInitializer(StructureTypeInfo structureTypeInfo_0);
				void CreateCppConstructor(StructureTypeInfo structureTypeInfo_0);
				void GenerateJavaClass(jstring string_0);
				jboolean IsNonUpdatebleClass(StructureTypeInfo structureTypeInfo_0);
				void GenerateCppUpdateFunction(jstring string_0);
				void GenerateCppInitializer(jstring string_0);
				void GenerateCppConstructor(jstring string_0);
				jstring find_common_root(jobjectArray stringArray_0);
				jstring find_common_root(int argc,const char **argv);
				jboolean IsNMLMsg(jstring string_0);
				void GenerateCppStartOfFile();
				void GenerateC_StartOfFile();
				jobjectArray RemoveDuplicates(jobjectArray stringArray_0);
				jobjectArray RemoveDuplicates(int argc,const char **argv);
				void GenerateCppPrototypesHeader();
				void SetOutputFile(jstring string_0);
				jstring get_base_name(jstring string_0);
				jstring RemoveStartingEndingSpace(jstring string_0);
				jboolean IsInteger(jstring string_0);
				jboolean IsDouble(jstring string_0);
				void AddAlphabatizedItem(utils::FastListPanelInterface fastListPanelInterface_0,jstring string_1,jboolean boolean_2);
				jboolean is_generic(jstring string_0);
				void SelectByFromFile(jstring string_0);
				void ParseOptionsInfo();
				jstring remove_leading_whitespace(jstring string_0);
				void MakeListGeneric(utils::FastListPanelInterface fastListPanelInterface_0);
				jstring GetFormatFunctionNameBase(jobjectArray stringArray_0);
				jstring GetFormatFunctionNameBase(int argc,const char **argv);
				static void DebugPrint2(jstring string_0);
				static void set_generate_symbol_lookups(jboolean boolean_0);
				static void set_generate_all_enum_symbol_lookups(jboolean boolean_0);
				static void set_add_set_header(jboolean boolean_0);
				static void RunLineOfScriptStatic(jstring string_0);
				static jboolean get_generate_all_enum_symbol_lookups();
				static void SetOutputFileName(jstring string_0);
				static jboolean get_generate_symbol_lookups();
				static jboolean get_add_set_header();
				static void WarningPrint(jstring string_0);
				void GeneratePrintSizesFile();
				jboolean VarIsLongLong(jstring string_0);
				void GenerateC_UpdateFunction(jstring string_0);
				void GenerateC_UpdateFunctions();
				jboolean IsRcsStatMsg(jstring string_0);
				jboolean IsRcsStatMsgV2(jstring string_0);
				void GenerateAdaSpec();
				void GenerateAdaBody();
				void GenerateC_PrototypesHeader();
				void EstimateSize(StructureTypeInfo structureTypeInfo_0);
				void WriteToFos(java::io::FileOutputStream fileOutputStream_0,jstring string_1);
				void GenerateCppEnumInfo(jobjectArray stringArray_0);
				void GenerateCppEnumInfo(int argc,const char **argv);
				void SetFormatFunctionName(jobjectArray stringArray_0);
				void SetFormatFunctionName(int argc,const char **argv);
				void GenerateC_FormatFunction();
				void SelectFromAllFiles();
				static jstring remove_leading_whitespace_static(jstring string_0);
				void RunLineOfScript(jstring string_0);
				static jboolean get_static_debug_on();
				static void set_static_debug_on(jboolean boolean_0);
			}; // end class CodeGenCommon
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace utils{
			
			class FastListPanelInterface : public java::lang::Object {
				public:
			            FastListPanelInterface(jobject _jthis, bool copy);
			            FastListPanelInterface(const FastListPanelInterface &);
			        
				FastListPanelInterface();
				virtual ~FastListPanelInterface();
			}; // end class FastListPanelInterface
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class ModifiedFileDialog : public java::awt::Dialog {
				public:
			            ModifiedFileDialog(jobject _jthis, bool copy);
			            ModifiedFileDialog(const ModifiedFileDialog &);
			        
				ModifiedFileDialog(java::awt::Frame frame_0,jstring string_1,jint int_2);
				ModifiedFileDialog(java::awt::Frame frame_0,jstring string_1,jint int_2,jstring string_3,jstring string_4);
				virtual ~ModifiedFileDialog();
				void actionPerformed(java::awt::event::ActionEvent actionEvent_0);
				void itemStateChanged(java::awt::event::ItemEvent itemEvent_0);
				void windowOpened(java::awt::event::WindowEvent windowEvent_0);
				void windowClosing(java::awt::event::WindowEvent windowEvent_0);
				void windowClosed(java::awt::event::WindowEvent windowEvent_0);
				void windowIconified(java::awt::event::WindowEvent windowEvent_0);
				void windowDeiconified(java::awt::event::WindowEvent windowEvent_0);
				void windowActivated(java::awt::event::WindowEvent windowEvent_0);
				void windowDeactivated(java::awt::event::WindowEvent windowEvent_0);
				void keyTyped(java::awt::event::KeyEvent keyEvent_0);
				void keyPressed(java::awt::event::KeyEvent keyEvent_0);
				void keyReleased(java::awt::event::KeyEvent keyEvent_0);
				void updateDisplay();
				void setDirectory(jstring string_0);
				void setFile(jstring string_0);
				void wait_for_done();
				void tryAutoComplete();
				jstring getDirectory();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
				void init(jstring string_0,jint int_1,jstring string_2,jstring string_3);
				jstring getFile();
			}; // end class ModifiedFileDialog
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class WatchVarEditor : public javax::swing::AbstractCellEditor {
				public:
			            WatchVarEditor(jobject _jthis, bool copy);
			            WatchVarEditor(const WatchVarEditor &);
			        
				WatchVarEditor();
				virtual ~WatchVarEditor();
				void actionPerformed(java::awt::event::ActionEvent actionEvent_0);
				void itemStateChanged(java::awt::event::ItemEvent itemEvent_0);
			}; // end class WatchVarEditor
		} // end namespace diagapplet
	} // end namespace utils

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class View3DDragEnum : public java::lang::Enum {
						public:
					            View3DDragEnum(jobject _jthis, bool copy);
					            View3DDragEnum(const View3DDragEnum &);
					        
						virtual ~View3DDragEnum();
						static jobjectArray values();
						static View3DDragEnum valueOf(jstring string_0);
					}; // end class View3DDragEnum
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class FXMLController : public java::lang::Object {
						public:
					            FXMLController(jobject _jthis, bool copy);
					            FXMLController(const FXMLController &);
					        
						FXMLController();
						virtual ~FXMLController();
						void setStage(javafx::stage::Stage stage_0);
						void autoSetScale();
						void chooseAndOpenCsvFile();
						void openCsvFile(java::io::File file_0);
						void initialize(java::net::URL uRL_0,java::util::ResourceBundle resourceBundle_1);
					}; // end class FXMLController
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class MainApp1 : public javafx::application::Application {
						public:
					            MainApp1(jobject _jthis, bool copy);
					            MainApp1(const MainApp1 &);
					        
						MainApp1();
						virtual ~MainApp1();
						static void main(jobjectArray stringArray_0);
						static void main(int argc,const char **argv);
						void start(javafx::stage::Stage stage_0);
					}; // end class MainApp1
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class MainJFrame : public javax::swing::JFrame {
						public:
					            MainJFrame(jobject _jthis, bool copy);
					            MainJFrame(const MainJFrame &);
					        
						MainJFrame();
						virtual ~MainJFrame();
						static Track getTest1Track();
						Track readTrack(CsvParseOptions csvParseOptions_0,java::io::File file_1);
						void openCsvFile(java::io::File file_0);
						static MainJFrame showPoseList(java::util::List list_0);
						void saveCsvFile(java::io::File file_0);
						static void main(jobjectArray stringArray_0);
						static void main(int argc,const char **argv);
					}; // end class MainJFrame
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class EvaluationRmsChecker : public java::lang::Object {
								public:
							            EvaluationRmsChecker(jobject _jthis, bool copy);
							            EvaluationRmsChecker(const EvaluationRmsChecker &);
							        
								EvaluationRmsChecker(jdouble double_0,jdouble double_1);
								EvaluationRmsChecker(jdouble double_0);
								virtual ~EvaluationRmsChecker();
								jboolean converged(jint int_0,LeastSquaresProblem::Evaluation evaluation_1,LeastSquaresProblem::Evaluation evaluation_2);
							}; // end class EvaluationRmsChecker
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class MultivariateJacobianFunction : public java::lang::Object {
								public:
							            MultivariateJacobianFunction(jobject _jthis, bool copy);
							            MultivariateJacobianFunction(const MultivariateJacobianFunction &);
							        
								MultivariateJacobianFunction();
								virtual ~MultivariateJacobianFunction();
							}; // end class MultivariateJacobianFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class ParameterValidator : public java::lang::Object {
								public:
							            ParameterValidator(jobject _jthis, bool copy);
							            ParameterValidator(const ParameterValidator &);
							        
								ParameterValidator();
								virtual ~ParameterValidator();
							}; // end class ParameterValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class LeastSquaresBuilder : public java::lang::Object {
								public:
							            LeastSquaresBuilder(jobject _jthis, bool copy);
							            LeastSquaresBuilder(const LeastSquaresBuilder &);
							        
								LeastSquaresBuilder();
								virtual ~LeastSquaresBuilder();
								LeastSquaresProblem build();
								LeastSquaresBuilder model(MultivariateJacobianFunction multivariateJacobianFunction_0);
								LeastSquaresBuilder model(analysis::MultivariateVectorFunction multivariateVectorFunction_0,analysis::MultivariateMatrixFunction multivariateMatrixFunction_1);
								LeastSquaresBuilder maxEvaluations(jint int_0);
								LeastSquaresBuilder checker(optim::ConvergenceChecker convergenceChecker_0);
								LeastSquaresBuilder weight(linear::RealMatrix realMatrix_0);
								LeastSquaresBuilder maxIterations(jint int_0);
								LeastSquaresBuilder checkerPair(optim::ConvergenceChecker convergenceChecker_0);
								LeastSquaresBuilder lazyEvaluation(jboolean boolean_0);
								LeastSquaresBuilder parameterValidator(ParameterValidator parameterValidator_0);
								LeastSquaresBuilder target(jdoubleArray doubleArray_0);
								LeastSquaresBuilder target(linear::RealVector realVector_0);
								LeastSquaresBuilder start(jdoubleArray doubleArray_0);
								LeastSquaresBuilder start(linear::RealVector realVector_0);
							}; // end class LeastSquaresBuilder
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class LeastSquaresFactory : public java::lang::Object {
								public:
							            LeastSquaresFactory(jobject _jthis, bool copy);
							            LeastSquaresFactory(const LeastSquaresFactory &);
							        
								virtual ~LeastSquaresFactory();
								static MultivariateJacobianFunction model(analysis::MultivariateVectorFunction multivariateVectorFunction_0,analysis::MultivariateMatrixFunction multivariateMatrixFunction_1);
								static LeastSquaresProblem weightMatrix(LeastSquaresProblem leastSquaresProblem_0,linear::RealMatrix realMatrix_1);
								static optim::ConvergenceChecker evaluationChecker(optim::ConvergenceChecker convergenceChecker_0);
								static LeastSquaresProblem weightDiagonal(LeastSquaresProblem leastSquaresProblem_0,linear::RealVector realVector_1);
								static LeastSquaresProblem countEvaluations(LeastSquaresProblem leastSquaresProblem_0,util::Incrementor incrementor_1);
								static LeastSquaresProblem create(MultivariateJacobianFunction multivariateJacobianFunction_0,linear::RealVector realVector_1,linear::RealVector realVector_2,optim::ConvergenceChecker convergenceChecker_3,jint int_4,jint int_5);
								static LeastSquaresProblem create(MultivariateJacobianFunction multivariateJacobianFunction_0,linear::RealVector realVector_1,linear::RealVector realVector_2,linear::RealMatrix realMatrix_3,optim::ConvergenceChecker convergenceChecker_4,jint int_5,jint int_6);
								static LeastSquaresProblem create(analysis::MultivariateVectorFunction multivariateVectorFunction_0,analysis::MultivariateMatrixFunction multivariateMatrixFunction_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3,linear::RealMatrix realMatrix_4,optim::ConvergenceChecker convergenceChecker_5,jint int_6,jint int_7);
								static LeastSquaresProblem create(MultivariateJacobianFunction multivariateJacobianFunction_0,linear::RealVector realVector_1,linear::RealVector realVector_2,linear::RealMatrix realMatrix_3,optim::ConvergenceChecker convergenceChecker_4,jint int_5,jint int_6,jboolean boolean_7,ParameterValidator parameterValidator_8);
							}; // end class LeastSquaresFactory
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class GaussianCurveFitter : public AbstractCurveFitter {
							public:
						            GaussianCurveFitter(jobject _jthis, bool copy);
						            GaussianCurveFitter(const GaussianCurveFitter &);
						        
							virtual ~GaussianCurveFitter();
							GaussianCurveFitter withStartPoint(jdoubleArray doubleArray_0);
							GaussianCurveFitter withMaxIterations(jint int_0);
							static GaussianCurveFitter create();
						}; // end class GaussianCurveFitter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class PolynomialCurveFitter : public AbstractCurveFitter {
							public:
						            PolynomialCurveFitter(jobject _jthis, bool copy);
						            PolynomialCurveFitter(const PolynomialCurveFitter &);
						        
							virtual ~PolynomialCurveFitter();
							PolynomialCurveFitter withStartPoint(jdoubleArray doubleArray_0);
							PolynomialCurveFitter withMaxIterations(jint int_0);
							static PolynomialCurveFitter create(jint int_0);
						}; // end class PolynomialCurveFitter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class GaussianFitter : public CurveFitter {
							public:
						            GaussianFitter(jobject _jthis, bool copy);
						            GaussianFitter(const GaussianFitter &);
						        
							GaussianFitter(optim::nonlinear::vector::MultivariateVectorOptimizer multivariateVectorOptimizer_0);
							virtual ~GaussianFitter();
							jdoubleArray fit(jdoubleArray doubleArray_0);
							jdoubleArray fit();
						}; // end class GaussianFitter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class HarmonicCurveFitter : public AbstractCurveFitter {
							public:
						            HarmonicCurveFitter(jobject _jthis, bool copy);
						            HarmonicCurveFitter(const HarmonicCurveFitter &);
						        
							virtual ~HarmonicCurveFitter();
							HarmonicCurveFitter withStartPoint(jdoubleArray doubleArray_0);
							HarmonicCurveFitter withMaxIterations(jint int_0);
							static HarmonicCurveFitter create();
						}; // end class HarmonicCurveFitter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							
							class PolynomialFunction : public java::lang::Object {
								public:
							            PolynomialFunction(jobject _jthis, bool copy);
							            PolynomialFunction(const PolynomialFunction &);
							        
								PolynomialFunction(jdoubleArray doubleArray_0);
								virtual ~PolynomialFunction();
								PolynomialFunction multiply(PolynomialFunction polynomialFunction_0);
								PolynomialFunction subtract(PolynomialFunction polynomialFunction_0);
								PolynomialFunction negate();
								UnivariateFunction derivative();
								jint degree();
								jdoubleArray getCoefficients();
								PolynomialFunction polynomialDerivative();
								PolynomialFunction add(PolynomialFunction polynomialFunction_0);
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
								jstring toString();
								jint hashCode();
							}; // end class PolynomialFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							
							class PolynomialsUtils : public java::lang::Object {
								public:
							            PolynomialsUtils(jobject _jthis, bool copy);
							            PolynomialsUtils(const PolynomialsUtils &);
							        
								virtual ~PolynomialsUtils();
								static PolynomialFunction createChebyshevPolynomial(jint int_0);
								static PolynomialFunction createHermitePolynomial(jint int_0);
								static PolynomialFunction createLaguerrePolynomial(jint int_0);
								static PolynomialFunction createLegendrePolynomial(jint int_0);
								static PolynomialFunction createJacobiPolynomial(jint int_0,jint int_1,jint int_2);
								static jdoubleArray shift(jdoubleArray doubleArray_0,jdouble double_1);
							}; // end class PolynomialsUtils
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class UnivariateDifferentiableFunction : public java::lang::Object {
								public:
							            UnivariateDifferentiableFunction(jobject _jthis, bool copy);
							            UnivariateDifferentiableFunction(const UnivariateDifferentiableFunction &);
							        
								UnivariateDifferentiableFunction();
								virtual ~UnivariateDifferentiableFunction();
							}; // end class UnivariateDifferentiableFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class DerivativeStructure : public java::lang::Object {
								public:
							            DerivativeStructure(jobject _jthis, bool copy);
							            DerivativeStructure(const DerivativeStructure &);
							        
								DerivativeStructure(jint int_0,jint int_1,jint int_2,jdouble double_3);
								DerivativeStructure(jdouble double_0,DerivativeStructure derivativeStructure_1,jdouble double_2,DerivativeStructure derivativeStructure_3);
								DerivativeStructure(jdouble double_0,DerivativeStructure derivativeStructure_1,jdouble double_2,DerivativeStructure derivativeStructure_3,jdouble double_4,DerivativeStructure derivativeStructure_5,jdouble double_6,DerivativeStructure derivativeStructure_7);
								DerivativeStructure(jdouble double_0,DerivativeStructure derivativeStructure_1,jdouble double_2,DerivativeStructure derivativeStructure_3,jdouble double_4,DerivativeStructure derivativeStructure_5);
								DerivativeStructure(jint int_0,jint int_1,jdoubleArray doubleArray_2);
								DerivativeStructure(jint int_0,jint int_1);
								DerivativeStructure(jint int_0,jint int_1,jdouble double_2);
								virtual ~DerivativeStructure();
								DerivativeStructure compose(jdoubleArray doubleArray_0);
								DerivativeStructure multiply(jdouble double_0);
								DerivativeStructure multiply(jint int_0);
								DerivativeStructure multiply(DerivativeStructure derivativeStructure_0);
								DerivativeStructure subtract(DerivativeStructure derivativeStructure_0);
								DerivativeStructure subtract(jdouble double_0);
								DerivativeStructure reciprocal();
								DerivativeStructure rootN(jint int_0);
								DerivativeStructure acosh();
								DerivativeStructure asinh();
								DerivativeStructure atanh();
								jdouble taylor(jdoubleArray doubleArray_0);
								DerivativeStructure linearCombination(DerivativeStructure derivativeStructure_0,DerivativeStructure derivativeStructure_1,DerivativeStructure derivativeStructure_2,DerivativeStructure derivativeStructure_3,DerivativeStructure derivativeStructure_4,DerivativeStructure derivativeStructure_5);
								DerivativeStructure linearCombination(jdouble double_0,DerivativeStructure derivativeStructure_1,jdouble double_2,DerivativeStructure derivativeStructure_3,jdouble double_4,DerivativeStructure derivativeStructure_5);
								DerivativeStructure linearCombination(jdouble double_0,DerivativeStructure derivativeStructure_1,jdouble double_2,DerivativeStructure derivativeStructure_3);
								DerivativeStructure linearCombination(DerivativeStructure derivativeStructure_0,DerivativeStructure derivativeStructure_1,DerivativeStructure derivativeStructure_2,DerivativeStructure derivativeStructure_3,DerivativeStructure derivativeStructure_4,DerivativeStructure derivativeStructure_5,DerivativeStructure derivativeStructure_6,DerivativeStructure derivativeStructure_7);
								DerivativeStructure linearCombination(jdouble double_0,DerivativeStructure derivativeStructure_1,jdouble double_2,DerivativeStructure derivativeStructure_3,jdouble double_4,DerivativeStructure derivativeStructure_5,jdouble double_6,DerivativeStructure derivativeStructure_7);
								DerivativeStructure linearCombination(jobjectArray derivativeStructureArray_0,jobjectArray derivativeStructureArray_1);
								DerivativeStructure linearCombination(jdoubleArray doubleArray_0,jobjectArray derivativeStructureArray_1);
								DerivativeStructure linearCombination(DerivativeStructure derivativeStructure_0,DerivativeStructure derivativeStructure_1,DerivativeStructure derivativeStructure_2,DerivativeStructure derivativeStructure_3);
								jint getFreeParameters();
								jint getOrder();
								jdouble getReal();
								jdouble getPartialDerivative(jintArray intArray_0);
								jdoubleArray getAllDerivatives();
								DerivativeStructure negate();
								DerivativeStructure add(DerivativeStructure derivativeStructure_0);
								DerivativeStructure add(jdouble double_0);
								jint hashCode();
								DerivativeStructure abs();
								DerivativeStructure sin();
								DerivativeStructure cos();
								DerivativeStructure tan();
								DerivativeStructure atan2(DerivativeStructure derivativeStructure_0);
								static DerivativeStructure atan2(DerivativeStructure derivativeStructure_0,DerivativeStructure derivativeStructure_1);
								DerivativeStructure sqrt();
								DerivativeStructure log();
								DerivativeStructure log10();
								static DerivativeStructure pow(jdouble double_0,DerivativeStructure derivativeStructure_1);
								DerivativeStructure pow(DerivativeStructure derivativeStructure_0);
								DerivativeStructure pow(jdouble double_0);
								DerivativeStructure pow(jint int_0);
								DerivativeStructure exp();
								jdouble getValue();
								Field getField();
								DerivativeStructure scalb(jint int_0);
								DerivativeStructure copySign(jdouble double_0);
								DerivativeStructure copySign(DerivativeStructure derivativeStructure_0);
								jint getExponent();
								DerivativeStructure signum();
								DerivativeStructure divide(DerivativeStructure derivativeStructure_0);
								DerivativeStructure divide(jdouble double_0);
								DerivativeStructure remainder(jdouble double_0);
								DerivativeStructure remainder(DerivativeStructure derivativeStructure_0);
								DerivativeStructure asin();
								DerivativeStructure acos();
								DerivativeStructure atan();
								DerivativeStructure toRadians();
								DerivativeStructure toDegrees();
								DerivativeStructure cbrt();
								DerivativeStructure ceil();
								DerivativeStructure floor();
								DerivativeStructure rint();
								jlong round();
								DerivativeStructure sinh();
								DerivativeStructure cosh();
								DerivativeStructure tanh();
								DerivativeStructure hypot(DerivativeStructure derivativeStructure_0);
								static DerivativeStructure hypot(DerivativeStructure derivativeStructure_0,DerivativeStructure derivativeStructure_1);
								DerivativeStructure expm1();
								DerivativeStructure log1p();
								DerivativeStructure createConstant(jdouble double_0);
							}; // end class DerivativeStructure
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class MultivariateDifferentiableFunction : public java::lang::Object {
								public:
							            MultivariateDifferentiableFunction(jobject _jthis, bool copy);
							            MultivariateDifferentiableFunction(const MultivariateDifferentiableFunction &);
							        
								MultivariateDifferentiableFunction();
								virtual ~MultivariateDifferentiableFunction();
							}; // end class MultivariateDifferentiableFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								
								class HermiteRuleFactory : public BaseRuleFactory {
									public:
								            HermiteRuleFactory(jobject _jthis, bool copy);
								            HermiteRuleFactory(const HermiteRuleFactory &);
								        
									HermiteRuleFactory();
									virtual ~HermiteRuleFactory();
								}; // end class HermiteRuleFactory
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							
							class IterativeLegendreGaussIntegrator : public BaseAbstractUnivariateIntegrator {
								public:
							            IterativeLegendreGaussIntegrator(jobject _jthis, bool copy);
							            IterativeLegendreGaussIntegrator(const IterativeLegendreGaussIntegrator &);
							        
								IterativeLegendreGaussIntegrator(jint int_0,jdouble double_1,jdouble double_2,jint int_3,jint int_4);
								IterativeLegendreGaussIntegrator(jint int_0,jint int_1,jint int_2);
								IterativeLegendreGaussIntegrator(jint int_0,jdouble double_1,jdouble double_2);
								virtual ~IterativeLegendreGaussIntegrator();
							}; // end class IterativeLegendreGaussIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							
							class UnivariateIntegrator : public java::lang::Object {
								public:
							            UnivariateIntegrator(jobject _jthis, bool copy);
							            UnivariateIntegrator(const UnivariateIntegrator &);
							        
								UnivariateIntegrator();
								virtual ~UnivariateIntegrator();
							}; // end class UnivariateIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							
							class MidPointIntegrator : public BaseAbstractUnivariateIntegrator {
								public:
							            MidPointIntegrator(jobject _jthis, bool copy);
							            MidPointIntegrator(const MidPointIntegrator &);
							        
								MidPointIntegrator(jdouble double_0,jdouble double_1,jint int_2,jint int_3);
								MidPointIntegrator();
								MidPointIntegrator(jint int_0,jint int_1);
								virtual ~MidPointIntegrator();
							}; // end class MidPointIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							
							class LegendreGaussIntegrator : public BaseAbstractUnivariateIntegrator {
								public:
							            LegendreGaussIntegrator(jobject _jthis, bool copy);
							            LegendreGaussIntegrator(const LegendreGaussIntegrator &);
							        
								LegendreGaussIntegrator(jint int_0,jdouble double_1,jdouble double_2,jint int_3,jint int_4);
								LegendreGaussIntegrator(jint int_0,jint int_1,jint int_2);
								LegendreGaussIntegrator(jint int_0,jdouble double_1,jdouble double_2);
								virtual ~LegendreGaussIntegrator();
							}; // end class LegendreGaussIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class UnivariateDifferentiableSolver : public java::lang::Object {
								public:
							            UnivariateDifferentiableSolver(jobject _jthis, bool copy);
							            UnivariateDifferentiableSolver(const UnivariateDifferentiableSolver &);
							        
								UnivariateDifferentiableSolver();
								virtual ~UnivariateDifferentiableSolver();
							}; // end class UnivariateDifferentiableSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class NewtonRaphsonSolver : public AbstractUnivariateDifferentiableSolver {
								public:
							            NewtonRaphsonSolver(jobject _jthis, bool copy);
							            NewtonRaphsonSolver(const NewtonRaphsonSolver &);
							        
								NewtonRaphsonSolver(jdouble double_0);
								NewtonRaphsonSolver();
								virtual ~NewtonRaphsonSolver();
								jdouble solve(jint int_0,differentiation::UnivariateDifferentiableFunction univariateDifferentiableFunction_1,jdouble double_2,jdouble double_3);
							}; // end class NewtonRaphsonSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class AllowedSolution : public java::lang::Enum {
								public:
							            AllowedSolution(jobject _jthis, bool copy);
							            AllowedSolution(const AllowedSolution &);
							        
								virtual ~AllowedSolution();
								static jobjectArray values();
								static AllowedSolution valueOf(jstring string_0);
							}; // end class AllowedSolution
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class BivariateFunction : public java::lang::Object {
							public:
						            BivariateFunction(jobject _jthis, bool copy);
						            BivariateFunction(const BivariateFunction &);
						        
							BivariateFunction();
							virtual ~BivariateFunction();
						}; // end class BivariateFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class AdamsNordsieckTransformer : public java::lang::Object {
								public:
							            AdamsNordsieckTransformer(jobject _jthis, bool copy);
							            AdamsNordsieckTransformer(const AdamsNordsieckTransformer &);
							        
								virtual ~AdamsNordsieckTransformer();
								linear::Array2DRowRealMatrix updateHighOrderDerivativesPhase1(linear::Array2DRowRealMatrix array2DRowRealMatrix_0);
								void updateHighOrderDerivativesPhase2(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,linear::Array2DRowRealMatrix array2DRowRealMatrix_2);
								jint getNSteps();
								static AdamsNordsieckTransformer getInstance(jint int_0);
							}; // end class AdamsNordsieckTransformer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							
							class StepNormalizer : public java::lang::Object {
								public:
							            StepNormalizer(jobject _jthis, bool copy);
							            StepNormalizer(const StepNormalizer &);
							        
								StepNormalizer(jdouble double_0,FixedStepHandler fixedStepHandler_1);
								StepNormalizer(jdouble double_0,FixedStepHandler fixedStepHandler_1,StepNormalizerMode stepNormalizerMode_2);
								StepNormalizer(jdouble double_0,FixedStepHandler fixedStepHandler_1,StepNormalizerBounds stepNormalizerBounds_2);
								StepNormalizer(jdouble double_0,FixedStepHandler fixedStepHandler_1,StepNormalizerMode stepNormalizerMode_2,StepNormalizerBounds stepNormalizerBounds_3);
								virtual ~StepNormalizer();
								void handleStep(StepInterpolator stepInterpolator_0,jboolean boolean_1);
								void init(jdouble double_0,jdoubleArray doubleArray_1,jdouble double_2);
							}; // end class StepNormalizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							
							class DummyStepHandler : public java::lang::Object {
								public:
							            DummyStepHandler(jobject _jthis, bool copy);
							            DummyStepHandler(const DummyStepHandler &);
							        
								virtual ~DummyStepHandler();
								void handleStep(StepInterpolator stepInterpolator_0,jboolean boolean_1);
								static DummyStepHandler getInstance();
								void init(jdouble double_0,jdoubleArray doubleArray_1,jdouble double_2);
							}; // end class DummyStepHandler
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								namespace util{
									
									class QuasiSigmoidDecayFunction : public java::lang::Object {
										public:
									            QuasiSigmoidDecayFunction(jobject _jthis, bool copy);
									            QuasiSigmoidDecayFunction(const QuasiSigmoidDecayFunction &);
									        
										QuasiSigmoidDecayFunction(jdouble double_0,jdouble double_1,jlong long_2);
										virtual ~QuasiSigmoidDecayFunction();
										jdouble value(jlong long_0);
									}; // end class QuasiSigmoidDecayFunction
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace ml
			} // end namespace neuralnet
		} // end namespace sofm
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace oned{
								
								class NeuronString : public java::lang::Object {
									public:
								            NeuronString(jobject _jthis, bool copy);
								            NeuronString(const NeuronString &);
								        
									NeuronString(jint int_0,jboolean boolean_1,jobjectArray featureInitializerArray_2);
									virtual ~NeuronString();
									Network getNetwork();
									jdoubleArray getFeatures(jint int_0);
									jint getSize();
								}; // end class NeuronString
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class VectorialCovariance : public java::lang::Object {
									public:
								            VectorialCovariance(jobject _jthis, bool copy);
								            VectorialCovariance(const VectorialCovariance &);
								        
									VectorialCovariance(jint int_0,jboolean boolean_1);
									virtual ~VectorialCovariance();
									jlong getN();
									jint hashCode();
									void clear();
									void increment(jdoubleArray doubleArray_0);
									linear::RealMatrix getResult();
								}; // end class VectorialCovariance
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class WeightedEvaluation : public java::lang::Object {
								public:
							            WeightedEvaluation(jobject _jthis, bool copy);
							            WeightedEvaluation(const WeightedEvaluation &);
							        
								WeightedEvaluation();
								virtual ~WeightedEvaluation();
							}; // end class WeightedEvaluation
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class UnivariateStatistic : public java::lang::Object {
								public:
							            UnivariateStatistic(jobject _jthis, bool copy);
							            UnivariateStatistic(const UnivariateStatistic &);
							        
								UnivariateStatistic();
								virtual ~UnivariateStatistic();
							}; // end class UnivariateStatistic
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace ranking{
							
							class NaturalRanking : public java::lang::Object {
								public:
							            NaturalRanking(jobject _jthis, bool copy);
							            NaturalRanking(const NaturalRanking &);
							        
								NaturalRanking(NaNStrategy naNStrategy_0);
								NaturalRanking(TiesStrategy tiesStrategy_0);
								NaturalRanking(NaNStrategy naNStrategy_0,TiesStrategy tiesStrategy_1);
								NaturalRanking(random::RandomGenerator randomGenerator_0);
								NaturalRanking(NaNStrategy naNStrategy_0,random::RandomGenerator randomGenerator_1);
								NaturalRanking();
								virtual ~NaturalRanking();
								jdoubleArray rank(jdoubleArray doubleArray_0);
								NaNStrategy getNanStrategy();
								TiesStrategy getTiesStrategy();
							}; // end class NaturalRanking
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace ranking

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							
							class BinomialConfidenceInterval : public java::lang::Object {
								public:
							            BinomialConfidenceInterval(jobject _jthis, bool copy);
							            BinomialConfidenceInterval(const BinomialConfidenceInterval &);
							        
								BinomialConfidenceInterval();
								virtual ~BinomialConfidenceInterval();
							}; // end class BinomialConfidenceInterval
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									
									class PowellOptimizer : public MultivariateOptimizer {
										public:
									            PowellOptimizer(jobject _jthis, bool copy);
									            PowellOptimizer(const PowellOptimizer &);
									        
										PowellOptimizer(jdouble double_0,jdouble double_1,ConvergenceChecker convergenceChecker_2);
										PowellOptimizer(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,ConvergenceChecker convergenceChecker_4);
										PowellOptimizer(jdouble double_0,jdouble double_1);
										PowellOptimizer(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
										virtual ~PowellOptimizer();
									}; // end class PowellOptimizer
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class LeastSquaresConverter : public java::lang::Object {
									public:
								            LeastSquaresConverter(jobject _jthis, bool copy);
								            LeastSquaresConverter(const LeastSquaresConverter &);
								        
									LeastSquaresConverter(analysis::MultivariateVectorFunction multivariateVectorFunction_0,jdoubleArray doubleArray_1,linear::RealMatrix realMatrix_2);
									LeastSquaresConverter(analysis::MultivariateVectorFunction multivariateVectorFunction_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
									LeastSquaresConverter(analysis::MultivariateVectorFunction multivariateVectorFunction_0,jdoubleArray doubleArray_1);
									virtual ~LeastSquaresConverter();
									jdouble value(jdoubleArray doubleArray_0);
								}; // end class LeastSquaresConverter
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							
							class BracketFinder : public java::lang::Object {
								public:
							            BracketFinder(jobject _jthis, bool copy);
							            BracketFinder(const BracketFinder &);
							        
								BracketFinder();
								BracketFinder(jdouble double_0,jint int_1);
								virtual ~BracketFinder();
								jint getEvaluations();
								jint getMaxEvaluations();
								jdouble getLo();
								jdouble getHi();
								jdouble getFLo();
								jdouble getFHi();
								jdouble getMid();
								jdouble getFMid();
								void search(analysis::UnivariateFunction univariateFunction_0,nonlinear::scalar::GoalType goalType_1,jdouble double_2,jdouble double_3);
							}; // end class BracketFinder
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class SimpleValueChecker : public AbstractConvergenceChecker {
							public:
						            SimpleValueChecker(jobject _jthis, bool copy);
						            SimpleValueChecker(const SimpleValueChecker &);
						        
							SimpleValueChecker(jdouble double_0,jdouble double_1,jint int_2);
							SimpleValueChecker(jdouble double_0,jdouble double_1);
							virtual ~SimpleValueChecker();
							jboolean converged(jint int_0,PointValuePair pointValuePair_1,PointValuePair pointValuePair_2);
						}; // end class SimpleValueChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class ProperBigFractionFormat : public BigFractionFormat {
							public:
						            ProperBigFractionFormat(jobject _jthis, bool copy);
						            ProperBigFractionFormat(const ProperBigFractionFormat &);
						        
							ProperBigFractionFormat();
							ProperBigFractionFormat(java::text::NumberFormat numberFormat_0);
							ProperBigFractionFormat(java::text::NumberFormat numberFormat_0,java::text::NumberFormat numberFormat_1,java::text::NumberFormat numberFormat_2);
							virtual ~ProperBigFractionFormat();
							void setWholeFormat(java::text::NumberFormat numberFormat_0);
							java::text::NumberFormat getWholeFormat();
							java::lang::StringBuffer format(BigFraction bigFraction_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
							BigFraction parse(jstring string_0,java::text::ParsePosition parsePosition_1);
						}; // end class ProperBigFractionFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class FractionConversionException : public exception::ConvergenceException {
							public:
						            FractionConversionException(jobject _jthis, bool copy);
						            FractionConversionException(const FractionConversionException &);
						        
							FractionConversionException(jdouble double_0,jint int_1);
							FractionConversionException(jdouble double_0,jlong long_1,jlong long_2);
							virtual ~FractionConversionException();
						}; // end class FractionConversionException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class BigFraction : public java::lang::Number {
							public:
						            BigFraction(jobject _jthis, bool copy);
						            BigFraction(const BigFraction &);
						        
							BigFraction(java::math::BigInteger bigInteger_0);
							BigFraction(jdouble double_0,jdouble double_1,jint int_2);
							BigFraction(jlong long_0,jlong long_1);
							BigFraction(jint int_0,jint int_1);
							BigFraction(jlong long_0);
							BigFraction(jint int_0);
							BigFraction(jdouble double_0,jint int_1);
							BigFraction(java::math::BigInteger bigInteger_0,java::math::BigInteger bigInteger_1);
							BigFraction(jdouble double_0);
							virtual ~BigFraction();
							BigFraction multiply(jint int_0);
							BigFraction multiply(BigFraction bigFraction_0);
							BigFraction multiply(java::math::BigInteger bigInteger_0);
							BigFraction multiply(jlong long_0);
							BigFraction subtract(java::math::BigInteger bigInteger_0);
							BigFraction subtract(jint int_0);
							BigFraction subtract(BigFraction bigFraction_0);
							BigFraction subtract(jlong long_0);
							BigFraction reciprocal();
							BigFraction negate();
							static BigFraction getReducedFraction(jint int_0,jint int_1);
							java::math::BigDecimal bigDecimalValue(jint int_0,jint int_1);
							java::math::BigDecimal bigDecimalValue(jint int_0);
							java::math::BigDecimal bigDecimalValue();
							java::math::BigInteger getDenominator();
							jint getDenominatorAsInt();
							jlong getDenominatorAsLong();
							java::math::BigInteger getNumerator();
							jint getNumeratorAsInt();
							jlong getNumeratorAsLong();
							jdouble percentageValue();
							BigFraction add(java::math::BigInteger bigInteger_0);
							BigFraction add(BigFraction bigFraction_0);
							BigFraction add(jlong long_0);
							BigFraction add(jint int_0);
							jstring toString();
							jint hashCode();
							BigFraction abs();
							BigFraction pow(jint int_0);
							BigFraction pow(jlong long_0);
							BigFraction pow(java::math::BigInteger bigInteger_0);
							jdouble pow(jdouble double_0);
							jint compareTo(BigFraction bigFraction_0);
							jint intValue();
							jlong longValue();
							jfloat floatValue();
							jdouble doubleValue();
							BigFractionField getField();
							BigFraction divide(jlong long_0);
							BigFraction divide(BigFraction bigFraction_0);
							BigFraction divide(java::math::BigInteger bigInteger_0);
							BigFraction divide(jint int_0);
							BigFraction reduce();
						}; // end class BigFraction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class LevyDistribution : public AbstractRealDistribution {
							public:
						            LevyDistribution(jobject _jthis, bool copy);
						            LevyDistribution(const LevyDistribution &);
						        
							LevyDistribution(jdouble double_0,jdouble double_1);
							LevyDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							virtual ~LevyDistribution();
							jdouble getScale();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble logDensity(jdouble double_0);
							jdouble getLocation();
						}; // end class LevyDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class GumbelDistribution : public AbstractRealDistribution {
							public:
						            GumbelDistribution(jobject _jthis, bool copy);
						            GumbelDistribution(const GumbelDistribution &);
						        
							GumbelDistribution(jdouble double_0,jdouble double_1);
							GumbelDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							virtual ~GumbelDistribution();
							jdouble getScale();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble getLocation();
						}; // end class GumbelDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class CauchyDistribution : public AbstractRealDistribution {
							public:
						            CauchyDistribution(jobject _jthis, bool copy);
						            CauchyDistribution(const CauchyDistribution &);
						        
							CauchyDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							CauchyDistribution(jdouble double_0,jdouble double_1);
							CauchyDistribution();
							CauchyDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							CauchyDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							virtual ~CauchyDistribution();
							jdouble getScale();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble getMedian();
						}; // end class CauchyDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class BSPTree : public java::lang::Object {
								public:
							            BSPTree(jobject _jthis, bool copy);
							            BSPTree(const BSPTree &);
							        
								BSPTree();
								virtual ~BSPTree();
								void visit(BSPTreeVisitor bSPTreeVisitor_0);
								BSPTree getCell(Point point_0,jdouble double_1);
								BSPTree getCell(Vector vector_0);
								java::util::List getCloseCuts(Point point_0,jdouble double_1);
								void insertInTree(BSPTree bSPTree_0,jboolean boolean_1,BSPTree::VanishingCutHandler vanishingCutHandler_2);
								void insertInTree(BSPTree bSPTree_0,jboolean boolean_1);
								jboolean insertCut(Hyperplane hyperplane_0);
								BSPTree copySelf();
								SubHyperplane getCut();
								BSPTree getPlus();
								BSPTree getMinus();
								BSPTree split(SubHyperplane subHyperplane_0);
								BSPTree getParent();
								BSPTree merge(BSPTree bSPTree_0,BSPTree::LeafMerger leafMerger_1);
							}; // end class BSPTree
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class SymmLQ : public PreconditionedIterativeLinearSolver {
							public:
						            SymmLQ(jobject _jthis, bool copy);
						            SymmLQ(const SymmLQ &);
						        
							SymmLQ(util::IterationManager iterationManager_0,jdouble double_1,jboolean boolean_2);
							SymmLQ(jint int_0,jdouble double_1,jboolean boolean_2);
							virtual ~SymmLQ();
							RealVector solve(RealLinearOperator realLinearOperator_0,RealLinearOperator realLinearOperator_1,RealVector realVector_2,jboolean boolean_3,jdouble double_4);
							RealVector solve(RealLinearOperator realLinearOperator_0,RealLinearOperator realLinearOperator_1,RealVector realVector_2,RealVector realVector_3);
							RealVector solve(RealLinearOperator realLinearOperator_0,RealVector realVector_1,jboolean boolean_2,jdouble double_3);
							RealVector solve(RealLinearOperator realLinearOperator_0,RealVector realVector_1,RealVector realVector_2);
							RealVector solve(RealLinearOperator realLinearOperator_0,RealVector realVector_1);
							RealVector solve(RealLinearOperator realLinearOperator_0,RealLinearOperator realLinearOperator_1,RealVector realVector_2);
							virtual jboolean getCheck();
							RealVector solveInPlace(RealLinearOperator realLinearOperator_0,RealLinearOperator realLinearOperator_1,RealVector realVector_2,RealVector realVector_3);
							RealVector solveInPlace(RealLinearOperator realLinearOperator_0,RealLinearOperator realLinearOperator_1,RealVector realVector_2,RealVector realVector_3,jboolean boolean_4,jdouble double_5);
							RealVector solveInPlace(RealLinearOperator realLinearOperator_0,RealVector realVector_1,RealVector realVector_2);
						}; // end class SymmLQ
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class LUDecomposition : public java::lang::Object {
							public:
						            LUDecomposition(jobject _jthis, bool copy);
						            LUDecomposition(const LUDecomposition &);
						        
							LUDecomposition(RealMatrix realMatrix_0);
							LUDecomposition(RealMatrix realMatrix_0,jdouble double_1);
							virtual ~LUDecomposition();
							DecompositionSolver getSolver();
							RealMatrix getL();
							RealMatrix getU();
							RealMatrix getP();
							jintArray getPivot();
							jdouble getDeterminant();
						}; // end class LUDecomposition
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class IllConditionedOperatorException : public exception::MathIllegalArgumentException {
							public:
						            IllConditionedOperatorException(jobject _jthis, bool copy);
						            IllConditionedOperatorException(const IllConditionedOperatorException &);
						        
							IllConditionedOperatorException(jdouble double_0);
							virtual ~IllConditionedOperatorException();
						}; // end class IllConditionedOperatorException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class Array2DRowFieldMatrix : public AbstractFieldMatrix {
							public:
						            Array2DRowFieldMatrix(jobject _jthis, bool copy);
						            Array2DRowFieldMatrix(const Array2DRowFieldMatrix &);
						        
							Array2DRowFieldMatrix(Field field_0,jint int_1,jint int_2);
							Array2DRowFieldMatrix(Field field_0);
							Array2DRowFieldMatrix(jobjectArray fieldElementArray_0);
							Array2DRowFieldMatrix(Field field_0,jobjectArray fieldElementArray_1);
							virtual ~Array2DRowFieldMatrix();
							void setEntry(jint int_0,jint int_1,FieldElement fieldElement_2);
							Array2DRowFieldMatrix multiply(Array2DRowFieldMatrix array2DRowFieldMatrix_0);
							Array2DRowFieldMatrix subtract(Array2DRowFieldMatrix array2DRowFieldMatrix_0);
							FieldMatrix createMatrix(jint int_0,jint int_1);
							void addToEntry(jint int_0,jint int_1,FieldElement fieldElement_2);
							void multiplyEntry(jint int_0,jint int_1,FieldElement fieldElement_2);
							jint getRowDimension();
							jint getColumnDimension();
							jobjectArray operate(jobjectArray fieldElementArray_0);
							jobjectArray preMultiply(jobjectArray fieldElementArray_0);
							FieldElement walkInRowOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0);
							FieldElement walkInRowOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInRowOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInRowOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0);
							FieldElement walkInColumnOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0);
							FieldElement walkInColumnOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInColumnOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInColumnOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0);
							Array2DRowFieldMatrix add(Array2DRowFieldMatrix array2DRowFieldMatrix_0);
							FieldMatrix copy();
							FieldElement getEntry(jint int_0,jint int_1);
						}; // end class Array2DRowFieldMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class NonSymmetricMatrixException : public exception::MathIllegalArgumentException {
							public:
						            NonSymmetricMatrixException(jobject _jthis, bool copy);
						            NonSymmetricMatrixException(const NonSymmetricMatrixException &);
						        
							NonSymmetricMatrixException(jint int_0,jint int_1,jdouble double_2);
							virtual ~NonSymmetricMatrixException();
							jint getRow();
							jint getColumn();
							jdouble getThreshold();
						}; // end class NonSymmetricMatrixException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class CholeskyDecomposition : public java::lang::Object {
							public:
						            CholeskyDecomposition(jobject _jthis, bool copy);
						            CholeskyDecomposition(const CholeskyDecomposition &);
						        
							CholeskyDecomposition(RealMatrix realMatrix_0,jdouble double_1,jdouble double_2);
							CholeskyDecomposition(RealMatrix realMatrix_0);
							virtual ~CholeskyDecomposition();
							DecompositionSolver getSolver();
							RealMatrix getL();
							jdouble getDeterminant();
							RealMatrix getLT();
						}; // end class CholeskyDecomposition
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class DefaultRealMatrixPreservingVisitor : public java::lang::Object {
							public:
						            DefaultRealMatrixPreservingVisitor(jobject _jthis, bool copy);
						            DefaultRealMatrixPreservingVisitor(const DefaultRealMatrixPreservingVisitor &);
						        
							DefaultRealMatrixPreservingVisitor();
							virtual ~DefaultRealMatrixPreservingVisitor();
							jdouble end();
							void visit(jint int_0,jint int_1,jdouble double_2);
							void start(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
						}; // end class DefaultRealMatrixPreservingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class BlockFieldMatrix : public AbstractFieldMatrix {
							public:
						            BlockFieldMatrix(jobject _jthis, bool copy);
						            BlockFieldMatrix(const BlockFieldMatrix &);
						        
							BlockFieldMatrix(Field field_0,jint int_1,jint int_2);
							virtual ~BlockFieldMatrix();
							void setEntry(jint int_0,jint int_1,FieldElement fieldElement_2);
							jobjectArray getRow(jint int_0);
							jobjectArray getColumn(jint int_0);
							BlockFieldMatrix multiply(BlockFieldMatrix blockFieldMatrix_0);
							FieldMatrix multiply(FieldMatrix fieldMatrix_0);
							BlockFieldMatrix subtract(BlockFieldMatrix blockFieldMatrix_0);
							FieldMatrix subtract(FieldMatrix fieldMatrix_0);
							FieldMatrix createMatrix(jint int_0,jint int_1);
							void addToEntry(jint int_0,jint int_1,FieldElement fieldElement_2);
							void multiplyEntry(jint int_0,jint int_1,FieldElement fieldElement_2);
							jint getRowDimension();
							jint getColumnDimension();
							FieldMatrix scalarAdd(FieldElement fieldElement_0);
							FieldMatrix scalarMultiply(FieldElement fieldElement_0);
							FieldMatrix getSubMatrix(jint int_0,jint int_1,jint int_2,jint int_3);
							FieldMatrix getRowMatrix(jint int_0);
							void setRowMatrix(jint int_0,BlockFieldMatrix blockFieldMatrix_1);
							void setRowMatrix(jint int_0,FieldMatrix fieldMatrix_1);
							FieldMatrix getColumnMatrix(jint int_0);
							void setColumnMatrix(jint int_0,FieldMatrix fieldMatrix_1);
							FieldVector getRowVector(jint int_0);
							void setRowVector(jint int_0,FieldVector fieldVector_1);
							FieldVector getColumnVector(jint int_0);
							void setColumnVector(jint int_0,FieldVector fieldVector_1);
							void setRow(jint int_0,jobjectArray fieldElementArray_1);
							void setColumn(jint int_0,jobjectArray fieldElementArray_1);
							FieldMatrix transpose();
							FieldElement walkInOptimizedOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInOptimizedOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInOptimizedOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0);
							FieldElement walkInOptimizedOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0);
							jobjectArray operate(jobjectArray fieldElementArray_0);
							jobjectArray preMultiply(jobjectArray fieldElementArray_0);
							FieldElement walkInRowOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0);
							FieldElement walkInRowOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0);
							FieldElement walkInRowOrder(FieldMatrixPreservingVisitor fieldMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							FieldElement walkInRowOrder(FieldMatrixChangingVisitor fieldMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							BlockFieldMatrix add(BlockFieldMatrix blockFieldMatrix_0);
							FieldMatrix add(FieldMatrix fieldMatrix_0);
							FieldMatrix copy();
							FieldElement getEntry(jint int_0,jint int_1);
						}; // end class BlockFieldMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class Array2DRowRealMatrix : public AbstractRealMatrix {
							public:
						            Array2DRowRealMatrix(jobject _jthis, bool copy);
						            Array2DRowRealMatrix(const Array2DRowRealMatrix &);
						        
							Array2DRowRealMatrix(jint int_0,jint int_1);
							Array2DRowRealMatrix();
							Array2DRowRealMatrix(jdoubleArray doubleArray_0);
							virtual ~Array2DRowRealMatrix();
							void setEntry(jint int_0,jint int_1,jdouble double_2);
							Array2DRowRealMatrix multiply(Array2DRowRealMatrix array2DRowRealMatrix_0);
							Array2DRowRealMatrix subtract(Array2DRowRealMatrix array2DRowRealMatrix_0);
							RealMatrix createMatrix(jint int_0,jint int_1);
							void addToEntry(jint int_0,jint int_1,jdouble double_2);
							void multiplyEntry(jint int_0,jint int_1,jdouble double_2);
							jint getRowDimension();
							jint getColumnDimension();
							jdoubleArray operate(jdoubleArray doubleArray_0);
							jdoubleArray preMultiply(jdoubleArray doubleArray_0);
							jdouble walkInRowOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0);
							jdouble walkInRowOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0);
							jdouble walkInRowOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInRowOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInColumnOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInColumnOrder(RealMatrixChangingVisitor realMatrixChangingVisitor_0);
							jdouble walkInColumnOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0,jint int_1,jint int_2,jint int_3,jint int_4);
							jdouble walkInColumnOrder(RealMatrixPreservingVisitor realMatrixPreservingVisitor_0);
							Array2DRowRealMatrix add(Array2DRowRealMatrix array2DRowRealMatrix_0);
							RealMatrix copy();
							jdouble getEntry(jint int_0,jint int_1);
						}; // end class Array2DRowRealMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class DefaultFieldMatrixPreservingVisitor : public java::lang::Object {
							public:
						            DefaultFieldMatrixPreservingVisitor(jobject _jthis, bool copy);
						            DefaultFieldMatrixPreservingVisitor(const DefaultFieldMatrixPreservingVisitor &);
						        
							DefaultFieldMatrixPreservingVisitor(FieldElement fieldElement_0);
							virtual ~DefaultFieldMatrixPreservingVisitor();
							FieldElement end();
							void visit(jint int_0,jint int_1,FieldElement fieldElement_2);
							void start(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
						}; // end class DefaultFieldMatrixPreservingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class SingularMatrixException : public exception::MathIllegalArgumentException {
							public:
						            SingularMatrixException(jobject _jthis, bool copy);
						            SingularMatrixException(const SingularMatrixException &);
						        
							SingularMatrixException();
							virtual ~SingularMatrixException();
						}; // end class SingularMatrixException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class DecompositionSolver : public java::lang::Object {
							public:
						            DecompositionSolver(jobject _jthis, bool copy);
						            DecompositionSolver(const DecompositionSolver &);
						        
							DecompositionSolver();
							virtual ~DecompositionSolver();
						}; // end class DecompositionSolver
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RealVectorFormat : public java::lang::Object {
							public:
						            RealVectorFormat(jobject _jthis, bool copy);
						            RealVectorFormat(const RealVectorFormat &);
						        
							RealVectorFormat();
							RealVectorFormat(jstring string_0,jstring string_1,jstring string_2);
							RealVectorFormat(jstring string_0,jstring string_1,jstring string_2,java::text::NumberFormat numberFormat_3);
							RealVectorFormat(java::text::NumberFormat numberFormat_0);
							virtual ~RealVectorFormat();
							java::text::NumberFormat getFormat();
							jstring getPrefix();
							jstring getSuffix();
							jstring format(RealVector realVector_0);
							java::lang::StringBuffer format(RealVector realVector_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
							static RealVectorFormat getInstance();
							static RealVectorFormat getInstance(java::util::Locale locale_0);
							jstring getSeparator();
							ArrayRealVector parse(jstring string_0,java::text::ParsePosition parsePosition_1);
							ArrayRealVector parse(jstring string_0);
							static jobjectArray getAvailableLocales();
						}; // end class RealVectorFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class FieldMatrixPreservingVisitor : public java::lang::Object {
							public:
						            FieldMatrixPreservingVisitor(jobject _jthis, bool copy);
						            FieldMatrixPreservingVisitor(const FieldMatrixPreservingVisitor &);
						        
							FieldMatrixPreservingVisitor();
							virtual ~FieldMatrixPreservingVisitor();
						}; // end class FieldMatrixPreservingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class FieldVector : public java::lang::Object {
							public:
						            FieldVector(jobject _jthis, bool copy);
						            FieldVector(const FieldVector &);
						        
							FieldVector();
							virtual ~FieldVector();
						}; // end class FieldVector
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class NonSelfAdjointOperatorException : public exception::MathIllegalArgumentException {
							public:
						            NonSelfAdjointOperatorException(jobject _jthis, bool copy);
						            NonSelfAdjointOperatorException(const NonSelfAdjointOperatorException &);
						        
							NonSelfAdjointOperatorException();
							virtual ~NonSelfAdjointOperatorException();
						}; // end class NonSelfAdjointOperatorException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class FieldMatrixChangingVisitor : public java::lang::Object {
							public:
						            FieldMatrixChangingVisitor(jobject _jthis, bool copy);
						            FieldMatrixChangingVisitor(const FieldMatrixChangingVisitor &);
						        
							FieldMatrixChangingVisitor();
							virtual ~FieldMatrixChangingVisitor();
						}; // end class FieldMatrixChangingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RealVectorChangingVisitor : public java::lang::Object {
							public:
						            RealVectorChangingVisitor(jobject _jthis, bool copy);
						            RealVectorChangingVisitor(const RealVectorChangingVisitor &);
						        
							RealVectorChangingVisitor();
							virtual ~RealVectorChangingVisitor();
						}; // end class RealVectorChangingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RealVectorPreservingVisitor : public java::lang::Object {
							public:
						            RealVectorPreservingVisitor(jobject _jthis, bool copy);
						            RealVectorPreservingVisitor(const RealVectorPreservingVisitor &);
						        
							RealVectorPreservingVisitor();
							virtual ~RealVectorPreservingVisitor();
						}; // end class RealVectorPreservingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RealMatrixChangingVisitor : public java::lang::Object {
							public:
						            RealMatrixChangingVisitor(jobject _jthis, bool copy);
						            RealMatrixChangingVisitor(const RealMatrixChangingVisitor &);
						        
							RealMatrixChangingVisitor();
							virtual ~RealMatrixChangingVisitor();
						}; // end class RealMatrixChangingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class MatrixDimensionMismatchException : public exception::MultiDimensionMismatchException {
							public:
						            MatrixDimensionMismatchException(jobject _jthis, bool copy);
						            MatrixDimensionMismatchException(const MatrixDimensionMismatchException &);
						        
							MatrixDimensionMismatchException(jint int_0,jint int_1,jint int_2,jint int_3);
							virtual ~MatrixDimensionMismatchException();
							jint getWrongRowDimension();
							jint getExpectedRowDimension();
							jint getWrongColumnDimension();
							jint getExpectedColumnDimension();
						}; // end class MatrixDimensionMismatchException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace crcl{
		namespace base{
			
			class ActuateJointsType : public MiddleCommandType {
				public:
			            ActuateJointsType(jobject _jthis, bool copy);
			            ActuateJointsType(const ActuateJointsType &);
			        
				ActuateJointsType();
				virtual ~ActuateJointsType();
				java::util::List getActuateJoint();
			}; // end class ActuateJointsType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class MessageType : public MiddleCommandType {
				public:
			            MessageType(jobject _jthis, bool copy);
			            MessageType(const MessageType &);
			        
				MessageType();
				virtual ~MessageType();
				void setMessage(jstring string_0);
				jstring getMessage();
			}; // end class MessageType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class AngleUnitEnumType : public java::lang::Enum {
				public:
			            AngleUnitEnumType(jobject _jthis, bool copy);
			            AngleUnitEnumType(const AngleUnitEnumType &);
			        
				virtual ~AngleUnitEnumType();
				static AngleUnitEnumType fromValue(jstring string_0);
				jstring value();
				static jobjectArray values();
				static AngleUnitEnumType valueOf(jstring string_0);
			}; // end class AngleUnitEnumType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class TransAccelAbsoluteType : public TransAccelType {
				public:
			            TransAccelAbsoluteType(jobject _jthis, bool copy);
			            TransAccelAbsoluteType(const TransAccelAbsoluteType &);
			        
				TransAccelAbsoluteType();
				virtual ~TransAccelAbsoluteType();
				java::math::BigDecimal getSetting();
				void setSetting(java::math::BigDecimal bigDecimal_0);
			}; // end class TransAccelAbsoluteType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class TorqueUnitEnumType : public java::lang::Enum {
				public:
			            TorqueUnitEnumType(jobject _jthis, bool copy);
			            TorqueUnitEnumType(const TorqueUnitEnumType &);
			        
				virtual ~TorqueUnitEnumType();
				static TorqueUnitEnumType fromValue(jstring string_0);
				jstring value();
				static jobjectArray values();
				static TorqueUnitEnumType valueOf(jstring string_0);
			}; // end class TorqueUnitEnumType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class TransSpeedRelativeType : public TransSpeedType {
				public:
			            TransSpeedRelativeType(jobject _jthis, bool copy);
			            TransSpeedRelativeType(const TransSpeedRelativeType &);
			        
				TransSpeedRelativeType();
				virtual ~TransSpeedRelativeType();
				void setFraction(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getFraction();
			}; // end class TransSpeedRelativeType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class RunProgramType : public MiddleCommandType {
				public:
			            RunProgramType(jobject _jthis, bool copy);
			            RunProgramType(const RunProgramType &);
			        
				RunProgramType();
				virtual ~RunProgramType();
				jstring getProgramText();
				void setProgramText(jstring string_0);
			}; // end class RunProgramType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class Charsets : public java::lang::Object {
						public:
					            Charsets(jobject _jthis, bool copy);
					            Charsets(const Charsets &);
					        
						Charsets();
						virtual ~Charsets();
						static java::nio::charset::Charset toCharset(java::nio::charset::Charset charset_0);
						static java::nio::charset::Charset toCharset(jstring string_0);
					}; // end class Charsets
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class PathFileComparator : public AbstractFileComparator {
							public:
						            PathFileComparator(jobject _jthis, bool copy);
						            PathFileComparator(const PathFileComparator &);
						        
							PathFileComparator();
							PathFileComparator(IOCase iOCase_0);
							virtual ~PathFileComparator();
							jstring toString();
							jint compare(java::io::File file_0,java::io::File file_1);
						}; // end class PathFileComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class SizeFileComparator : public AbstractFileComparator {
							public:
						            SizeFileComparator(jobject _jthis, bool copy);
						            SizeFileComparator(const SizeFileComparator &);
						        
							SizeFileComparator();
							SizeFileComparator(jboolean boolean_0);
							virtual ~SizeFileComparator();
							jstring toString();
							jint compare(java::io::File file_0,java::io::File file_1);
						}; // end class SizeFileComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class CanWriteFileFilter : public AbstractFileFilter {
							public:
						            CanWriteFileFilter(jobject _jthis, bool copy);
						            CanWriteFileFilter(const CanWriteFileFilter &);
						        
							virtual ~CanWriteFileFilter();
							jboolean accept(java::io::File file_0);
						}; // end class CanWriteFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class HiddenFileFilter : public AbstractFileFilter {
							public:
						            HiddenFileFilter(jobject _jthis, bool copy);
						            HiddenFileFilter(const HiddenFileFilter &);
						        
							virtual ~HiddenFileFilter();
							jboolean accept(java::io::File file_0);
						}; // end class HiddenFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class RegexFileFilter : public AbstractFileFilter {
							public:
						            RegexFileFilter(jobject _jthis, bool copy);
						            RegexFileFilter(const RegexFileFilter &);
						        
							RegexFileFilter(jstring string_0,jint int_1);
							RegexFileFilter(jstring string_0,IOCase iOCase_1);
							RegexFileFilter(jstring string_0);
							virtual ~RegexFileFilter();
							jboolean accept(java::io::File file_0,jstring string_1);
						}; // end class RegexFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class HexDump : public java::lang::Object {
						public:
					            HexDump(jobject _jthis, bool copy);
					            HexDump(const HexDump &);
					        
						HexDump();
						virtual ~HexDump();
						static void dump(jbyteArray byteArray_0,jlong long_1,java::io::OutputStream outputStream_2,jint int_3);
					}; // end class HexDump
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace dom{
							
							class DOMBuilder : public java::lang::Object {
								public:
							            DOMBuilder(jobject _jthis, bool copy);
							            DOMBuilder(const DOMBuilder &);
							        
								DOMBuilder(EXIFactory eXIFactory_0);
								virtual ~DOMBuilder();
								org::w3c::dom::DocumentFragment parseFragment(java::io::InputStream inputStream_0);
								org::w3c::dom::Document parse(java::io::InputStream inputStream_0,jboolean boolean_1);
								org::w3c::dom::Document parse(java::io::InputStream inputStream_0);
							}; // end class DOMBuilder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace dom

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class TypedTypeEncoder : public AbstractTypeEncoder {
							public:
						            TypedTypeEncoder(jobject _jthis, bool copy);
						            TypedTypeEncoder(const TypedTypeEncoder &);
						        
							TypedTypeEncoder(jobjectArray qNameArray_0,jobjectArray qNameArray_1);
							TypedTypeEncoder();
							virtual ~TypedTypeEncoder();
							jboolean isValid(datatype::Datatype datatype_0,values::Value value_1);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,datatype::strings::StringEncoder stringEncoder_2);
						}; // end class TypedTypeEncoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						
						class SkipRootElementXMLReader : public org::xml::sax::helpers::XMLFilterImpl {
							public:
						            SkipRootElementXMLReader(jobject _jthis, bool copy);
						            SkipRootElementXMLReader(const SkipRootElementXMLReader &);
						        
							SkipRootElementXMLReader(org::xml::sax::XMLReader xMLReader_0);
							virtual ~SkipRootElementXMLReader();
							void startElement(jstring string_0,jstring string_1,jstring string_2,org::xml::sax::Attributes attributes_3);
							void endElement(jstring string_0,jstring string_1,jstring string_2);
						}; // end class SkipRootElementXMLReader
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class BinaryHexValue : public AbstractBinaryValue {
							public:
						            BinaryHexValue(jobject _jthis, bool copy);
						            BinaryHexValue(const BinaryHexValue &);
						        
							BinaryHexValue(jbyteArray byteArray_0);
							virtual ~BinaryHexValue();
							jint getCharactersLength();
							void getCharacters(jcharArray charArray_0,jint int_1);
							jint hashCode();
							static jbyteArray decode(jstring string_0);
							static BinaryHexValue parse(jstring string_0);
						}; // end class BinaryHexValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class DateTimeValue : public AbstractValue {
							public:
						            DateTimeValue(jobject _jthis, bool copy);
						            DateTimeValue(const DateTimeValue &);
						        
							DateTimeValue(types::DateTimeType dateTimeType_0,jint int_1,jint int_2,jint int_3,jboolean boolean_4,jint int_5,jboolean boolean_6,jint int_7);
							virtual ~DateTimeValue();
							static jint getTime(java::util::Calendar calendar_0);
							jint getCharactersLength();
							void getCharacters(jcharArray charArray_0,jint int_1);
							static jint getMonthDay(java::util::Calendar calendar_0);
							java::util::Calendar toCalendar();
							jint hashCode();
							static DateTimeValue parse(java::util::Calendar calendar_0,types::DateTimeType dateTimeType_1);
							static DateTimeValue parse(jstring string_0,types::DateTimeType dateTimeType_1);
						}; // end class DateTimeValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class IntegerValue : public AbstractValue {
							public:
						            IntegerValue(jobject _jthis, bool copy);
						            IntegerValue(const IntegerValue &);
						        
							virtual ~IntegerValue();
							IntegerValue subtract(IntegerValue integerValue_0);
							jint getCharactersLength();
							void getCharacters(jcharArray charArray_0,jint int_1);
							IntegerValueType getIntegerValueType();
							java::math::BigInteger bigIntegerValue();
							jboolean isPositive();
							IntegerValue add(IntegerValue integerValue_0);
							jint hashCode();
							jint compareTo(IntegerValue integerValue_0);
							jint intValue();
							jlong longValue();
							static IntegerValue valueOf(jlong long_0);
							static IntegerValue valueOf(java::math::BigInteger bigInteger_0);
							static IntegerValue valueOf(jint int_0);
							static IntegerValue parse(jstring string_0);
						}; // end class IntegerValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class ValueType : public java::lang::Enum {
							public:
						            ValueType(jobject _jthis, bool copy);
						            ValueType(const ValueType &);
						        
							virtual ~ValueType();
							static jobjectArray values();
							static ValueType valueOf(jstring string_0);
						}; // end class ValueType
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLAppletElementImpl : public HTMLElementImpl {
						public:
					            HTMLAppletElementImpl(jobject _jthis, bool copy);
					            HTMLAppletElementImpl(const HTMLAppletElementImpl &);
					        
						HTMLAppletElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLAppletElementImpl();
						void setObject(jstring string_0);
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getAlt();
						void setAlt(jstring string_0);
						void setHeight(jstring string_0);
						jstring getHspace();
						void setHspace(jstring string_0);
						jstring getVspace();
						void setVspace(jstring string_0);
						void setWidth(jstring string_0);
						jstring getWidth();
						jstring getHeight();
						jstring getCode();
						jstring getArchive();
						void setArchive(jstring string_0);
						void setCode(jstring string_0);
						void setCodeBase(jstring string_0);
						jstring getObject();
						jstring getName();
						void setName(jstring string_0);
						jstring getCodeBase();
					}; // end class HTMLAppletElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLBRElementImpl : public HTMLElementImpl {
						public:
					            HTMLBRElementImpl(jobject _jthis, bool copy);
					            HTMLBRElementImpl(const HTMLBRElementImpl &);
					        
						HTMLBRElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLBRElementImpl();
						void setClear(jstring string_0);
						jstring getClear();
					}; // end class HTMLBRElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLDOMImplementationImpl : public xerces::dom::DOMImplementationImpl {
						public:
					            HTMLDOMImplementationImpl(jobject _jthis, bool copy);
					            HTMLDOMImplementationImpl(const HTMLDOMImplementationImpl &);
					        
						virtual ~HTMLDOMImplementationImpl();
						virtual w3c::dom::html::HTMLDocument createHTMLDocument(jstring string_0);
						static w3c::dom::html::HTMLDOMImplementation getHTMLDOMImplementation();
					}; // end class HTMLDOMImplementationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLIFrameElementImpl : public HTMLElementImpl {
						public:
					            HTMLIFrameElementImpl(jobject _jthis, bool copy);
					            HTMLIFrameElementImpl(const HTMLIFrameElementImpl &);
					        
						HTMLIFrameElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLIFrameElementImpl();
						jstring getAlign();
						void setAlign(jstring string_0);
						void setHeight(jstring string_0);
						jstring getLongDesc();
						void setLongDesc(jstring string_0);
						jstring getSrc();
						void setSrc(jstring string_0);
						void setWidth(jstring string_0);
						jstring getWidth();
						jstring getHeight();
						jstring getFrameBorder();
						void setFrameBorder(jstring string_0);
						jstring getMarginHeight();
						void setMarginHeight(jstring string_0);
						jstring getMarginWidth();
						void setMarginWidth(jstring string_0);
						jstring getScrolling();
						void setScrolling(jstring string_0);
						jstring getName();
						void setName(jstring string_0);
					}; // end class HTMLIFrameElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLOListElementImpl : public HTMLElementImpl {
						public:
					            HTMLOListElementImpl(jobject _jthis, bool copy);
					            HTMLOListElementImpl(const HTMLOListElementImpl &);
					        
						HTMLOListElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLOListElementImpl();
						jboolean getCompact();
						void setCompact(jboolean boolean_0);
						void setType(jstring string_0);
						jint getStart();
						void setStart(jint int_0);
						jstring getType();
					}; // end class HTMLOListElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLElement : public java::lang::Object {
					public:
				            WMLElement(jobject _jthis, bool copy);
				            WMLElement(const WMLElement &);
				        
					WMLElement();
					virtual ~WMLElement();
				}; // end class WMLElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLEmElement : public java::lang::Object {
					public:
				            WMLEmElement(jobject _jthis, bool copy);
				            WMLEmElement(const WMLEmElement &);
				        
					WMLEmElement();
					virtual ~WMLEmElement();
				}; // end class WMLEmElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLNoopElement : public java::lang::Object {
					public:
				            WMLNoopElement(jobject _jthis, bool copy);
				            WMLNoopElement(const WMLNoopElement &);
				        
					WMLNoopElement();
					virtual ~WMLNoopElement();
				}; // end class WMLNoopElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLSelectElement : public java::lang::Object {
					public:
				            WMLSelectElement(jobject _jthis, bool copy);
				            WMLSelectElement(const WMLSelectElement &);
				        
					WMLSelectElement();
					virtual ~WMLSelectElement();
				}; // end class WMLSelectElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLTrElement : public java::lang::Object {
					public:
				            WMLTrElement(jobject _jthis, bool copy);
				            WMLTrElement(const WMLTrElement &);
				        
					WMLTrElement();
					virtual ~WMLTrElement();
				}; // end class WMLTrElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLBrElementImpl : public WMLElementImpl {
						public:
					            WMLBrElementImpl(jobject _jthis, bool copy);
					            WMLBrElementImpl(const WMLBrElementImpl &);
					        
						WMLBrElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLBrElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLBrElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLCardElementImpl : public WMLElementImpl {
						public:
					            WMLCardElementImpl(jobject _jthis, bool copy);
					            WMLCardElementImpl(const WMLCardElementImpl &);
					        
						WMLCardElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLCardElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getTitle();
						void setTitle(jstring string_0);
						void setNewContext(jboolean boolean_0);
						jstring getOnTimer();
						void setOnTimer(jstring string_0);
						jboolean getOrdered();
						jstring getOnEnterBackward();
						void setOnEnterBackward(jstring string_0);
						jstring getXmlLang();
						jboolean getNewContext();
						void setOrdered(jboolean boolean_0);
						void setXmlLang(jstring string_0);
						jstring getOnEnterForward();
						void setOnEnterForward(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLCardElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLImgElementImpl : public WMLElementImpl {
						public:
					            WMLImgElementImpl(jobject _jthis, bool copy);
					            WMLImgElementImpl(const WMLImgElementImpl &);
					        
						WMLImgElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLImgElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getAlt();
						void setAlt(jstring string_0);
						void setHeight(jstring string_0);
						jstring getHspace();
						void setHspace(jstring string_0);
						jstring getSrc();
						void setSrc(jstring string_0);
						jstring getVspace();
						void setVspace(jstring string_0);
						void setWidth(jstring string_0);
						jstring getWidth();
						jstring getHeight();
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						void setLocalSrc(jstring string_0);
						jstring getLocalSrc();
						jstring getId();
						jstring getClassName();
					}; // end class WMLImgElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLInputElementImpl : public WMLElementImpl {
						public:
					            WMLInputElementImpl(jobject _jthis, bool copy);
					            WMLInputElementImpl(const WMLInputElementImpl &);
					        
						WMLInputElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLInputElementImpl();
						void setFormat(jstring string_0);
						jstring getFormat();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jint getTabIndex();
						void setTabIndex(jint int_0);
						jstring getTitle();
						void setType(jstring string_0);
						void setTitle(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jboolean getEmptyOk();
						void setMaxLength(jint int_0);
						jint getMaxLength();
						void setEmptyOk(jboolean boolean_0);
						jstring getName();
						jstring getValue();
						void setName(jstring string_0);
						jstring getId();
						void setValue(jstring string_0);
						jstring getType();
						jint getSize();
						jstring getClassName();
						void setSize(jint int_0);
					}; // end class WMLInputElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLMetaElementImpl : public WMLElementImpl {
						public:
					            WMLMetaElementImpl(jobject _jthis, bool copy);
					            WMLMetaElementImpl(const WMLMetaElementImpl &);
					        
						WMLMetaElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLMetaElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						void setScheme(jstring string_0);
						void setHttpEquiv(jstring string_0);
						jstring getHttpEquiv();
						void setContent(jstring string_0);
						void setForua(jboolean boolean_0);
						jboolean getForua();
						jstring getName();
						void setName(jstring string_0);
						jstring getId();
						jstring getScheme();
						jstring getContent();
						jstring getClassName();
					}; // end class WMLMetaElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLNoopElementImpl : public WMLElementImpl {
						public:
					            WMLNoopElementImpl(jobject _jthis, bool copy);
					            WMLNoopElementImpl(const WMLNoopElementImpl &);
					        
						WMLNoopElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLNoopElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLNoopElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLOneventElementImpl : public WMLElementImpl {
						public:
					            WMLOneventElementImpl(jobject _jthis, bool copy);
					            WMLOneventElementImpl(const WMLOneventElementImpl &);
					        
						WMLOneventElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLOneventElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						void setType(jstring string_0);
						jstring getId();
						jstring getType();
						jstring getClassName();
					}; // end class WMLOneventElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLOptgroupElementImpl : public WMLElementImpl {
						public:
					            WMLOptgroupElementImpl(jobject _jthis, bool copy);
					            WMLOptgroupElementImpl(const WMLOptgroupElementImpl &);
					        
						WMLOptgroupElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLOptgroupElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getTitle();
						void setTitle(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLOptgroupElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLOptionElementImpl : public WMLElementImpl {
						public:
					            WMLOptionElementImpl(jobject _jthis, bool copy);
					            WMLOptionElementImpl(const WMLOptionElementImpl &);
					        
						WMLOptionElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLOptionElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getTitle();
						void setTitle(jstring string_0);
						jstring getOnPick();
						jstring getXmlLang();
						void setOnPick(jstring string_0);
						void setXmlLang(jstring string_0);
						jstring getValue();
						jstring getId();
						void setValue(jstring string_0);
						jstring getClassName();
					}; // end class WMLOptionElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLPElementImpl : public WMLElementImpl {
						public:
					            WMLPElementImpl(jobject _jthis, bool copy);
					            WMLPElementImpl(const WMLPElementImpl &);
					        
						WMLPElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLPElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getMode();
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						void setMode(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLPElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLPostfieldElementImpl : public WMLElementImpl {
						public:
					            WMLPostfieldElementImpl(jobject _jthis, bool copy);
					            WMLPostfieldElementImpl(const WMLPostfieldElementImpl &);
					        
						WMLPostfieldElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLPostfieldElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getName();
						jstring getValue();
						void setName(jstring string_0);
						jstring getId();
						void setValue(jstring string_0);
						jstring getClassName();
					}; // end class WMLPostfieldElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLPrevElementImpl : public WMLElementImpl {
						public:
					            WMLPrevElementImpl(jobject _jthis, bool copy);
					            WMLPrevElementImpl(const WMLPrevElementImpl &);
					        
						WMLPrevElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLPrevElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLPrevElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLRefreshElementImpl : public WMLElementImpl {
						public:
					            WMLRefreshElementImpl(jobject _jthis, bool copy);
					            WMLRefreshElementImpl(const WMLRefreshElementImpl &);
					        
						WMLRefreshElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLRefreshElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLRefreshElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLSelectElementImpl : public WMLElementImpl {
						public:
					            WMLSelectElementImpl(jobject _jthis, bool copy);
					            WMLSelectElementImpl(const WMLSelectElementImpl &);
					        
						WMLSelectElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLSelectElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jint getTabIndex();
						void setTabIndex(jint int_0);
						jstring getTitle();
						void setTitle(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jboolean getMultiple();
						jstring getIName();
						void setIValue(jstring string_0);
						jstring getIValue();
						void setIName(jstring string_0);
						void setMultiple(jboolean boolean_0);
						jstring getName();
						jstring getValue();
						void setName(jstring string_0);
						jstring getId();
						void setValue(jstring string_0);
						jstring getClassName();
					}; // end class WMLSelectElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLSetvarElementImpl : public WMLElementImpl {
						public:
					            WMLSetvarElementImpl(jobject _jthis, bool copy);
					            WMLSetvarElementImpl(const WMLSetvarElementImpl &);
					        
						WMLSetvarElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLSetvarElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getName();
						jstring getValue();
						void setName(jstring string_0);
						jstring getId();
						void setValue(jstring string_0);
						jstring getClassName();
					}; // end class WMLSetvarElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLSmallElementImpl : public WMLElementImpl {
						public:
					            WMLSmallElementImpl(jobject _jthis, bool copy);
					            WMLSmallElementImpl(const WMLSmallElementImpl &);
					        
						WMLSmallElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLSmallElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLSmallElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLStrongElementImpl : public WMLElementImpl {
						public:
					            WMLStrongElementImpl(jobject _jthis, bool copy);
					            WMLStrongElementImpl(const WMLStrongElementImpl &);
					        
						WMLStrongElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLStrongElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLStrongElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLTableElementImpl : public WMLElementImpl {
						public:
					            WMLTableElementImpl(jobject _jthis, bool copy);
					            WMLTableElementImpl(const WMLTableElementImpl &);
					        
						WMLTableElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLTableElementImpl();
						jint getColumns();
						void setColumns(jint int_0);
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getTitle();
						void setTitle(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLTableElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLTdElementImpl : public WMLElementImpl {
						public:
					            WMLTdElementImpl(jobject _jthis, bool copy);
					            WMLTdElementImpl(const WMLTdElementImpl &);
					        
						WMLTdElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLTdElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLTdElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLTemplateElementImpl : public WMLElementImpl {
						public:
					            WMLTemplateElementImpl(jobject _jthis, bool copy);
					            WMLTemplateElementImpl(const WMLTemplateElementImpl &);
					        
						WMLTemplateElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLTemplateElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getOnTimer();
						void setOnTimer(jstring string_0);
						jstring getOnEnterBackward();
						void setOnEnterBackward(jstring string_0);
						jstring getOnEnterForward();
						void setOnEnterForward(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLTemplateElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLTimerElementImpl : public WMLElementImpl {
						public:
					            WMLTimerElementImpl(jobject _jthis, bool copy);
					            WMLTimerElementImpl(const WMLTimerElementImpl &);
					        
						WMLTimerElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLTimerElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getName();
						jstring getValue();
						void setName(jstring string_0);
						jstring getId();
						void setValue(jstring string_0);
						jstring getClassName();
					}; // end class WMLTimerElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLTrElementImpl : public WMLElementImpl {
						public:
					            WMLTrElementImpl(jobject _jthis, bool copy);
					            WMLTrElementImpl(const WMLTrElementImpl &);
					        
						WMLTrElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLTrElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLTrElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLUElementImpl : public WMLElementImpl {
						public:
					            WMLUElementImpl(jobject _jthis, bool copy);
					            WMLUElementImpl(const WMLUElementImpl &);
					        
						WMLUElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLUElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLUElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLWmlElementImpl : public WMLElementImpl {
						public:
					            WMLWmlElementImpl(jobject _jthis, bool copy);
					            WMLWmlElementImpl(const WMLWmlElementImpl &);
					        
						WMLWmlElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLWmlElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLWmlElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASAttributeDeclaration : public java::lang::Object {
							public:
						            ASAttributeDeclaration(jobject _jthis, bool copy);
						            ASAttributeDeclaration(const ASAttributeDeclaration &);
						        
							ASAttributeDeclaration();
							virtual ~ASAttributeDeclaration();
						}; // end class ASAttributeDeclaration
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASContentModel : public java::lang::Object {
							public:
						            ASContentModel(jobject _jthis, bool copy);
						            ASContentModel(const ASContentModel &);
						        
							ASContentModel();
							virtual ~ASContentModel();
						}; // end class ASContentModel
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASDataType : public java::lang::Object {
							public:
						            ASDataType(jobject _jthis, bool copy);
						            ASDataType(const ASDataType &);
						        
							ASDataType();
							virtual ~ASDataType();
						}; // end class ASDataType
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASElementDeclaration : public java::lang::Object {
							public:
						            ASElementDeclaration(jobject _jthis, bool copy);
						            ASElementDeclaration(const ASElementDeclaration &);
						        
							ASElementDeclaration();
							virtual ~ASElementDeclaration();
						}; // end class ASElementDeclaration
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASEntityDeclaration : public java::lang::Object {
							public:
						            ASEntityDeclaration(jobject _jthis, bool copy);
						            ASEntityDeclaration(const ASEntityDeclaration &);
						        
							ASEntityDeclaration();
							virtual ~ASEntityDeclaration();
						}; // end class ASEntityDeclaration
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASModel : public java::lang::Object {
							public:
						            ASModel(jobject _jthis, bool copy);
						            ASModel(const ASModel &);
						        
							ASModel();
							virtual ~ASModel();
						}; // end class ASModel
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASNamedObjectMap : public java::lang::Object {
							public:
						            ASNamedObjectMap(jobject _jthis, bool copy);
						            ASNamedObjectMap(const ASNamedObjectMap &);
						        
							ASNamedObjectMap();
							virtual ~ASNamedObjectMap();
						}; // end class ASNamedObjectMap
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASNotationDeclaration : public java::lang::Object {
							public:
						            ASNotationDeclaration(jobject _jthis, bool copy);
						            ASNotationDeclaration(const ASNotationDeclaration &);
						        
							ASNotationDeclaration();
							virtual ~ASNotationDeclaration();
						}; // end class ASNotationDeclaration
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASObject : public java::lang::Object {
							public:
						            ASObject(jobject _jthis, bool copy);
						            ASObject(const ASObject &);
						        
							ASObject();
							virtual ~ASObject();
						}; // end class ASObject
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ASObjectList : public java::lang::Object {
							public:
						            ASObjectList(jobject _jthis, bool copy);
						            ASObjectList(const ASObjectList &);
						        
							ASObjectList();
							virtual ~ASObjectList();
						}; // end class ASObjectList
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class CharacterDataEditAS : public java::lang::Object {
							public:
						            CharacterDataEditAS(jobject _jthis, bool copy);
						            CharacterDataEditAS(const CharacterDataEditAS &);
						        
							CharacterDataEditAS();
							virtual ~CharacterDataEditAS();
						}; // end class CharacterDataEditAS
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class DOMASBuilder : public java::lang::Object {
							public:
						            DOMASBuilder(jobject _jthis, bool copy);
						            DOMASBuilder(const DOMASBuilder &);
						        
							DOMASBuilder();
							virtual ~DOMASBuilder();
						}; // end class DOMASBuilder
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class DOMASException : public java::lang::RuntimeException {
							public:
						            DOMASException(jobject _jthis, bool copy);
						            DOMASException(const DOMASException &);
						        
							DOMASException(jshort short_0,jstring string_1);
							virtual ~DOMASException();
						}; // end class DOMASException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class DOMASWriter : public java::lang::Object {
							public:
						            DOMASWriter(jobject _jthis, bool copy);
						            DOMASWriter(const DOMASWriter &);
						        
							DOMASWriter();
							virtual ~DOMASWriter();
						}; // end class DOMASWriter
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class DOMImplementationAS : public java::lang::Object {
							public:
						            DOMImplementationAS(jobject _jthis, bool copy);
						            DOMImplementationAS(const DOMImplementationAS &);
						        
							DOMImplementationAS();
							virtual ~DOMImplementationAS();
						}; // end class DOMImplementationAS
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class DocumentAS : public java::lang::Object {
							public:
						            DocumentAS(jobject _jthis, bool copy);
						            DocumentAS(const DocumentAS &);
						        
							DocumentAS();
							virtual ~DocumentAS();
						}; // end class DocumentAS
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class DocumentEditAS : public java::lang::Object {
							public:
						            DocumentEditAS(jobject _jthis, bool copy);
						            DocumentEditAS(const DocumentEditAS &);
						        
							DocumentEditAS();
							virtual ~DocumentEditAS();
						}; // end class DocumentEditAS
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class ElementEditAS : public java::lang::Object {
							public:
						            ElementEditAS(jobject _jthis, bool copy);
						            ElementEditAS(const ElementEditAS &);
						        
							ElementEditAS();
							virtual ~ElementEditAS();
						}; // end class ElementEditAS
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom3{
					namespace as{
						
						class NodeEditAS : public java::lang::Object {
							public:
						            NodeEditAS(jobject _jthis, bool copy);
						            NodeEditAS(const NodeEditAS &);
						        
							NodeEditAS();
							virtual ~NodeEditAS();
						}; // end class NodeEditAS
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace dom3
	} // end namespace as

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class ASDOMImplementationImpl : public DOMImplementationImpl {
						public:
					            ASDOMImplementationImpl(jobject _jthis, bool copy);
					            ASDOMImplementationImpl(const ASDOMImplementationImpl &);
					        
						ASDOMImplementationImpl();
						virtual ~ASDOMImplementationImpl();
						static w3c::dom::DOMImplementation getDOMImplementation();
						dom3::as::ASModel createAS(jboolean boolean_0);
						dom3::as::DOMASBuilder createDOMASBuilder();
						dom3::as::DOMASWriter createDOMASWriter();
					}; // end class ASDOMImplementationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class ASModelImpl : public java::lang::Object {
						public:
					            ASModelImpl(jobject _jthis, bool copy);
					            ASModelImpl(const ASModelImpl &);
					        
						ASModelImpl(jboolean boolean_0);
						ASModelImpl();
						virtual ~ASModelImpl();
						jstring getNodeName();
						void setPrefix(jstring string_0);
						jboolean validate();
						jboolean getContainer();
						jstring getPrefix();
						jstring getNamespaceURI();
						jstring getLocalName();
						void setGrammar(impl::xs::SchemaGrammar schemaGrammar_0);
						impl::xs::SchemaGrammar getGrammar();
						dom3::as::ASNamedObjectMap getContentModelDeclarations();
						jshort getAsNodeType();
						dom3::as::ASModel getOwnerASModel();
						void setOwnerASModel(dom3::as::ASModel aSModel_0);
						void setNodeName(jstring string_0);
						void setLocalName(jstring string_0);
						void setNamespaceURI(jstring string_0);
						dom3::as::ASObject cloneASObject(jboolean boolean_0);
						void removeAS(dom3::as::ASModel aSModel_0);
						dom3::as::ASElementDeclaration createASElementDeclaration(jstring string_0,jstring string_1);
						dom3::as::ASNamedObjectMap getEntityDeclarations();
						jshort getUsageLocation();
						jboolean getIsNamespaceAware();
						jstring getAsLocation();
						void setAsLocation(jstring string_0);
						jstring getAsHint();
						void setAsHint(jstring string_0);
						dom3::as::ASNamedObjectMap getElementDeclarations();
						dom3::as::ASNamedObjectMap getAttributeDeclarations();
						dom3::as::ASNamedObjectMap getNotationDeclarations();
						void addASModel(dom3::as::ASModel aSModel_0);
						dom3::as::ASObjectList getASModels();
						dom3::as::ASAttributeDeclaration createASAttributeDeclaration(jstring string_0,jstring string_1);
						dom3::as::ASNotationDeclaration createASNotationDeclaration(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						dom3::as::ASEntityDeclaration createASEntityDeclaration(jstring string_0);
						dom3::as::ASContentModel createASContentModel(jint int_0,jint int_1,jshort short_2);
						void importASObject(dom3::as::ASObject aSObject_0);
						void insertASObject(dom3::as::ASObject aSObject_0);
						java::util::Vector getInternalASModels();
					}; // end class ASModelImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class AttributeMap : public NamedNodeMapImpl {
						public:
					            AttributeMap(jobject _jthis, bool copy);
					            AttributeMap(const AttributeMap &);
					        
						virtual ~AttributeMap();
						w3c::dom::Node removeNamedItem(jstring string_0);
						w3c::dom::Node removeNamedItemNS(jstring string_0,jstring string_1);
						NamedNodeMapImpl cloneMap(NodeImpl nodeImpl_0);
						w3c::dom::Node setNamedItem(w3c::dom::Node node_0);
						w3c::dom::Node setNamedItemNS(w3c::dom::Node node_0);
					}; // end class AttributeMap
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMConfigurationImpl : public util::ParserConfigurationSettings {
						public:
					            DOMConfigurationImpl(jobject _jthis, bool copy);
					            DOMConfigurationImpl(const DOMConfigurationImpl &);
					        
						virtual ~DOMConfigurationImpl();
						void setLocale(java::util::Locale locale_0);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(xni::parser::XMLEntityResolver xMLEntityResolver_0);
						xni::parser::XMLEntityResolver getEntityResolver();
						void setDTDHandler(xni::XMLDTDHandler xMLDTDHandler_0);
						xni::XMLDTDHandler getDTDHandler();
						xni::parser::XMLErrorHandler getErrorHandler();
						java::util::Locale getLocale();
						void setErrorHandler(xni::parser::XMLErrorHandler xMLErrorHandler_0);
						void setDTDContentModelHandler(xni::XMLDTDContentModelHandler xMLDTDContentModelHandler_0);
						xni::XMLDTDContentModelHandler getDTDContentModelHandler();
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getDocumentHandler();
						w3c::dom::DOMStringList getParameterNames();
						void parse(xni::parser::XMLInputSource xMLInputSource_0);
					}; // end class DOMConfigurationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMErrorImpl : public java::lang::Object {
						public:
					            DOMErrorImpl(jobject _jthis, bool copy);
					            DOMErrorImpl(const DOMErrorImpl &);
					        
						DOMErrorImpl();
						DOMErrorImpl(jshort short_0,xni::parser::XMLParseException xMLParseException_1);
						virtual ~DOMErrorImpl();
						jshort getSeverity();
						w3c::dom::DOMLocator getLocation();
						jstring getMessage();
						jstring getType();
						void reset();
					}; // end class DOMErrorImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMImplementationListImpl : public java::lang::Object {
						public:
					            DOMImplementationListImpl(jobject _jthis, bool copy);
					            DOMImplementationListImpl(const DOMImplementationListImpl &);
					        
						DOMImplementationListImpl(java::util::Vector vector_0);
						DOMImplementationListImpl(java::util::ArrayList arrayList_0);
						DOMImplementationListImpl();
						virtual ~DOMImplementationListImpl();
						w3c::dom::DOMImplementation item(jint int_0);
						jint getLength();
					}; // end class DOMImplementationListImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMInputImpl : public java::lang::Object {
						public:
					            DOMInputImpl(jobject _jthis, bool copy);
					            DOMInputImpl(const DOMInputImpl &);
					        
						DOMInputImpl(jstring string_0,jstring string_1,jstring string_2);
						DOMInputImpl();
						DOMInputImpl(jstring string_0,jstring string_1,jstring string_2,java::io::InputStream inputStream_3,jstring string_4);
						DOMInputImpl(jstring string_0,jstring string_1,jstring string_2,java::io::Reader reader_3,jstring string_4);
						DOMInputImpl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						virtual ~DOMInputImpl();
						jstring getBaseURI();
						jstring getStringData();
						void setStringData(jstring string_0);
						jboolean getCertifiedText();
						void setCertifiedText(jboolean boolean_0);
						jstring getSystemId();
						void setCharacterStream(java::io::Reader reader_0);
						java::io::Reader getCharacterStream();
						void setEncoding(jstring string_0);
						void setPublicId(jstring string_0);
						jstring getPublicId();
						void setSystemId(jstring string_0);
						void setByteStream(java::io::InputStream inputStream_0);
						java::io::InputStream getByteStream();
						void setBaseURI(jstring string_0);
						jstring getEncoding();
					}; // end class DOMInputImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMLocatorImpl : public java::lang::Object {
						public:
					            DOMLocatorImpl(jobject _jthis, bool copy);
					            DOMLocatorImpl(const DOMLocatorImpl &);
					        
						DOMLocatorImpl();
						DOMLocatorImpl(jint int_0,jint int_1,jstring string_2);
						DOMLocatorImpl(jint int_0,jint int_1,jint int_2,jstring string_3);
						DOMLocatorImpl(jint int_0,jint int_1,jint int_2,w3c::dom::Node node_3,jstring string_4);
						DOMLocatorImpl(jint int_0,jint int_1,jint int_2,w3c::dom::Node node_3,jstring string_4,jint int_5);
						virtual ~DOMLocatorImpl();
						jint getByteOffset();
						jint getUtf16Offset();
						w3c::dom::Node getRelatedNode();
						jint getColumnNumber();
						jstring getUri();
						jint getLineNumber();
					}; // end class DOMLocatorImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMMessageFormatter : public java::lang::Object {
						public:
					            DOMMessageFormatter(jobject _jthis, bool copy);
					            DOMMessageFormatter(const DOMMessageFormatter &);
					        
						virtual ~DOMMessageFormatter();
						static void setLocale(java::util::Locale locale_0);
						static void init();
					}; // end class DOMMessageFormatter
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMNormalizer : public java::lang::Object {
						public:
					            DOMNormalizer(jobject _jthis, bool copy);
					            DOMNormalizer(const DOMNormalizer &);
					        
						DOMNormalizer();
						virtual ~DOMNormalizer();
						void startCDATA(xni::Augmentations augmentations_0);
						void endCDATA(xni::Augmentations augmentations_0);
						void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
						void endDocument(xni::Augmentations augmentations_0);
						void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
						void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
						xni::parser::XMLDocumentSource getDocumentSource();
						void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
						void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						static void reportDOMError(w3c::dom::DOMErrorHandler dOMErrorHandler_0,DOMErrorImpl dOMErrorImpl_1,DOMLocatorImpl dOMLocatorImpl_2,jstring string_3,jshort short_4,jstring string_5);
						static void isAttrValueWF(w3c::dom::DOMErrorHandler dOMErrorHandler_0,DOMErrorImpl dOMErrorImpl_1,DOMLocatorImpl dOMLocatorImpl_2,w3c::dom::NamedNodeMap namedNodeMap_3,w3c::dom::Attr attr_4,jstring string_5,jboolean boolean_6);
						static void isCommentWF(w3c::dom::DOMErrorHandler dOMErrorHandler_0,DOMErrorImpl dOMErrorImpl_1,DOMLocatorImpl dOMLocatorImpl_2,jstring string_3,jboolean boolean_4);
						static void isXMLCharWF(w3c::dom::DOMErrorHandler dOMErrorHandler_0,DOMErrorImpl dOMErrorImpl_1,DOMLocatorImpl dOMLocatorImpl_2,jstring string_3,jboolean boolean_4);
						static void isCDataWF(w3c::dom::DOMErrorHandler dOMErrorHandler_0,DOMErrorImpl dOMErrorImpl_1,DOMLocatorImpl dOMLocatorImpl_2,jstring string_3,jboolean boolean_4);
					}; // end class DOMNormalizer
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMOutputImpl : public java::lang::Object {
						public:
					            DOMOutputImpl(jobject _jthis, bool copy);
					            DOMOutputImpl(const DOMOutputImpl &);
					        
						DOMOutputImpl();
						virtual ~DOMOutputImpl();
						jstring getSystemId();
						void setCharacterStream(java::io::Writer writer_0);
						java::io::Writer getCharacterStream();
						void setEncoding(jstring string_0);
						void setSystemId(jstring string_0);
						void setByteStream(java::io::OutputStream outputStream_0);
						java::io::OutputStream getByteStream();
						jstring getEncoding();
					}; // end class DOMOutputImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMStringListImpl : public java::lang::Object {
						public:
					            DOMStringListImpl(jobject _jthis, bool copy);
					            DOMStringListImpl(const DOMStringListImpl &);
					        
						DOMStringListImpl();
						DOMStringListImpl(java::util::Vector vector_0);
						DOMStringListImpl(java::util::ArrayList arrayList_0);
						virtual ~DOMStringListImpl();
						jstring item(jint int_0);
						void add(jstring string_0);
						jint getLength();
						jboolean contains(jstring string_0);
					}; // end class DOMStringListImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DOMXSImplementationSourceImpl : public DOMImplementationSourceImpl {
						public:
					            DOMXSImplementationSourceImpl(jobject _jthis, bool copy);
					            DOMXSImplementationSourceImpl(const DOMXSImplementationSourceImpl &);
					        
						DOMXSImplementationSourceImpl();
						virtual ~DOMXSImplementationSourceImpl();
						w3c::dom::DOMImplementation getDOMImplementation(jstring string_0);
						w3c::dom::DOMImplementationList getDOMImplementationList(jstring string_0);
					}; // end class DOMXSImplementationSourceImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredAttrImpl : public AttrImpl {
						public:
					            DeferredAttrImpl(jobject _jthis, bool copy);
					            DeferredAttrImpl(const DeferredAttrImpl &);
					        
						virtual ~DeferredAttrImpl();
						jint getNodeIndex();
					}; // end class DeferredAttrImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredAttrNSImpl : public AttrNSImpl {
						public:
					            DeferredAttrNSImpl(jobject _jthis, bool copy);
					            DeferredAttrNSImpl(const DeferredAttrNSImpl &);
					        
						virtual ~DeferredAttrNSImpl();
						jint getNodeIndex();
					}; // end class DeferredAttrNSImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredCDATASectionImpl : public CDATASectionImpl {
						public:
					            DeferredCDATASectionImpl(jobject _jthis, bool copy);
					            DeferredCDATASectionImpl(const DeferredCDATASectionImpl &);
					        
						virtual ~DeferredCDATASectionImpl();
						jint getNodeIndex();
					}; // end class DeferredCDATASectionImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredCommentImpl : public CommentImpl {
						public:
					            DeferredCommentImpl(jobject _jthis, bool copy);
					            DeferredCommentImpl(const DeferredCommentImpl &);
					        
						virtual ~DeferredCommentImpl();
						jint getNodeIndex();
					}; // end class DeferredCommentImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredDOMImplementationImpl : public DOMImplementationImpl {
						public:
					            DeferredDOMImplementationImpl(jobject _jthis, bool copy);
					            DeferredDOMImplementationImpl(const DeferredDOMImplementationImpl &);
					        
						DeferredDOMImplementationImpl();
						virtual ~DeferredDOMImplementationImpl();
						static w3c::dom::DOMImplementation getDOMImplementation();
					}; // end class DeferredDOMImplementationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredDocumentImpl : public DocumentImpl {
						public:
					            DeferredDocumentImpl(jobject _jthis, bool copy);
					            DeferredDocumentImpl(const DeferredDocumentImpl &);
					        
						DeferredDocumentImpl();
						DeferredDocumentImpl(jboolean boolean_0);
						DeferredDocumentImpl(jboolean boolean_0,jboolean boolean_1);
						virtual ~DeferredDocumentImpl();
						jint setAttributeNode(jint int_0,jint int_1);
						void setIdAttribute(jint int_0);
						void setIdAttributeNode(jint int_0,jint int_1);
						jstring getNodeName(jint int_0,jboolean boolean_1);
						jstring getNodeName(jint int_0);
						jstring getNodeValue(jint int_0);
						jstring getNodeValue(jint int_0,jboolean boolean_1);
						jshort getNodeType(jint int_0,jboolean boolean_1);
						jshort getNodeType(jint int_0);
						jint getParentNode(jint int_0);
						jint getParentNode(jint int_0,jboolean boolean_1);
						jint getLastChild(jint int_0,jboolean boolean_1);
						jint getLastChild(jint int_0);
						jint insertBefore(jint int_0,jint int_1,jint int_2);
						void appendChild(jint int_0,jint int_1);
						jint cloneNode(jint int_0,jboolean boolean_1);
						jstring getAttribute(jint int_0,jstring string_1);
						void putIdentifier(jstring string_0,jint int_1);
						w3c::dom::DOMImplementation getImplementation();
						void setInputEncoding(jint int_0,jstring string_1);
						void setInternalSubset(jint int_0,jstring string_1);
						jint createDeferredEntityReference(jstring string_0,jstring string_1);
						jint getRealPrevSibling(jint int_0);
						jint getRealPrevSibling(jint int_0,jboolean boolean_1);
						void setEntityInfo(jint int_0,jstring string_1,jstring string_2);
						jint createDeferredComment(jstring string_0);
						jint createDeferredProcessingInstruction(jstring string_0,jstring string_1);
						jint createDeferredDocument();
						jint createDeferredDocumentType(jstring string_0,jstring string_1,jstring string_2);
						jint createDeferredElement(jstring string_0);
						jint createDeferredElement(jstring string_0,jstring string_1);
						jint setDeferredAttribute(jint int_0,jstring string_1,jstring string_2,jstring string_3,jboolean boolean_4);
						jint createDeferredCDATASection(jstring string_0);
						jint createDeferredTextNode(jstring string_0,jboolean boolean_1);
						void setAsLastChild(jint int_0,jint int_1);
						jstring getNodeValueString(jint int_0);
						jstring getNodeValueString(jint int_0,jboolean boolean_1);
						jstring getDeferredEntityBaseURI(jint int_0);
						jint createDeferredEntity(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						jint getPrevSibling(jint int_0);
						jint getPrevSibling(jint int_0,jboolean boolean_1);
						jint createDeferredNotation(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						jint lookupElementDefinition(jstring string_0);
						jint createDeferredElementDefinition(jstring string_0);
						jint createDeferredAttribute(jstring string_0,jstring string_1,jstring string_2,jboolean boolean_3);
						jint createDeferredAttribute(jstring string_0,jstring string_1,jboolean boolean_2);
						jint getNodeIndex();
						jint getNodeExtra(jint int_0,jboolean boolean_1);
						jint getNodeExtra(jint int_0);
						DeferredNode getNodeObject(jint int_0);
						jstring getNodeURI(jint int_0,jboolean boolean_1);
						jstring getNodeURI(jint int_0);
						void print();
					}; // end class DeferredDocumentImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredDocumentTypeImpl : public DocumentTypeImpl {
						public:
					            DeferredDocumentTypeImpl(jobject _jthis, bool copy);
					            DeferredDocumentTypeImpl(const DeferredDocumentTypeImpl &);
					        
						virtual ~DeferredDocumentTypeImpl();
						jint getNodeIndex();
					}; // end class DeferredDocumentTypeImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredElementDefinitionImpl : public ElementDefinitionImpl {
						public:
					            DeferredElementDefinitionImpl(jobject _jthis, bool copy);
					            DeferredElementDefinitionImpl(const DeferredElementDefinitionImpl &);
					        
						virtual ~DeferredElementDefinitionImpl();
						jint getNodeIndex();
					}; // end class DeferredElementDefinitionImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredElementImpl : public ElementImpl {
						public:
					            DeferredElementImpl(jobject _jthis, bool copy);
					            DeferredElementImpl(const DeferredElementImpl &);
					        
						virtual ~DeferredElementImpl();
						virtual jint getNodeIndex();
					}; // end class DeferredElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredElementNSImpl : public ElementNSImpl {
						public:
					            DeferredElementNSImpl(jobject _jthis, bool copy);
					            DeferredElementNSImpl(const DeferredElementNSImpl &);
					        
						virtual ~DeferredElementNSImpl();
						virtual jint getNodeIndex();
					}; // end class DeferredElementNSImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredEntityImpl : public EntityImpl {
						public:
					            DeferredEntityImpl(jobject _jthis, bool copy);
					            DeferredEntityImpl(const DeferredEntityImpl &);
					        
						virtual ~DeferredEntityImpl();
						jint getNodeIndex();
					}; // end class DeferredEntityImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredEntityReferenceImpl : public EntityReferenceImpl {
						public:
					            DeferredEntityReferenceImpl(jobject _jthis, bool copy);
					            DeferredEntityReferenceImpl(const DeferredEntityReferenceImpl &);
					        
						virtual ~DeferredEntityReferenceImpl();
						jint getNodeIndex();
					}; // end class DeferredEntityReferenceImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredNode : public java::lang::Object {
						public:
					            DeferredNode(jobject _jthis, bool copy);
					            DeferredNode(const DeferredNode &);
					        
						DeferredNode();
						virtual ~DeferredNode();
					}; // end class DeferredNode
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredNotationImpl : public NotationImpl {
						public:
					            DeferredNotationImpl(jobject _jthis, bool copy);
					            DeferredNotationImpl(const DeferredNotationImpl &);
					        
						virtual ~DeferredNotationImpl();
						jint getNodeIndex();
					}; // end class DeferredNotationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredProcessingInstructionImpl : public ProcessingInstructionImpl {
						public:
					            DeferredProcessingInstructionImpl(jobject _jthis, bool copy);
					            DeferredProcessingInstructionImpl(const DeferredProcessingInstructionImpl &);
					        
						virtual ~DeferredProcessingInstructionImpl();
						jint getNodeIndex();
					}; // end class DeferredProcessingInstructionImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DeferredTextImpl : public TextImpl {
						public:
					            DeferredTextImpl(jobject _jthis, bool copy);
					            DeferredTextImpl(const DeferredTextImpl &);
					        
						virtual ~DeferredTextImpl();
						jint getNodeIndex();
					}; // end class DeferredTextImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class DocumentFragmentImpl : public ParentNode {
						public:
					            DocumentFragmentImpl(jobject _jthis, bool copy);
					            DocumentFragmentImpl(const DocumentFragmentImpl &);
					        
						DocumentFragmentImpl(CoreDocumentImpl coreDocumentImpl_0);
						DocumentFragmentImpl();
						virtual ~DocumentFragmentImpl();
						jstring getNodeName();
						jshort getNodeType();
						void normalize();
					}; // end class DocumentFragmentImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLNSDTDValidator : public XMLDTDValidator {
							public:
						            XMLNSDTDValidator(jobject _jthis, bool copy);
						            XMLNSDTDValidator(const XMLNSDTDValidator &);
						        
							XMLNSDTDValidator();
							virtual ~XMLNSDTDValidator();
						}; // end class XMLNSDTDValidator
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class ExtendedSchemaDVFactoryImpl : public BaseSchemaDVFactory {
								public:
							            ExtendedSchemaDVFactoryImpl(jobject _jthis, bool copy);
							            ExtendedSchemaDVFactoryImpl(const ExtendedSchemaDVFactoryImpl &);
							        
								ExtendedSchemaDVFactoryImpl();
								virtual ~ExtendedSchemaDVFactoryImpl();
								XSSimpleType getBuiltInType(jstring string_0);
								util::SymbolHash getBuiltInTypes();
							}; // end class ExtendedSchemaDVFactoryImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace validation{
						
						class ConfigurableValidationState : public ValidationState {
							public:
						            ConfigurableValidationState(jobject _jthis, bool copy);
						            ConfigurableValidationState(const ConfigurableValidationState &);
						        
							ConfigurableValidationState();
							virtual ~ConfigurableValidationState();
							jboolean isEntityDeclared(jstring string_0);
							jboolean isEntityUnparsed(jstring string_0);
							jboolean isIdDeclared(jstring string_0);
							void addId(jstring string_0);
							void addIdRef(jstring string_0);
							jstring checkIDRefID();
							void setIdIdrefChecking(jboolean boolean_0);
							void setUnparsedEntityChecking(jboolean boolean_0);
						}; // end class ConfigurableValidationState
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class CaseInsensitiveMap : public java::lang::Object {
								public:
							            CaseInsensitiveMap(jobject _jthis, bool copy);
							            CaseInsensitiveMap(const CaseInsensitiveMap &);
							        
								virtual ~CaseInsensitiveMap();
								static jintArray get(jint int_0);
							}; // end class CaseInsensitiveMap
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSAttributeDecl : public java::lang::Object {
							public:
						            XSAttributeDecl(jobject _jthis, bool copy);
						            XSAttributeDecl(const XSAttributeDecl &);
						        
							XSAttributeDecl();
							virtual ~XSAttributeDecl();
							void setValues(jstring string_0,jstring string_1,dv::XSSimpleType xSSimpleType_2,jshort short_3,jshort short_4,dv::ValidatedInfo validatedInfo_5,XSComplexTypeDecl xSComplexTypeDecl_6,xs::XSObjectList xSObjectList_7);
							xs::XSNamespaceItem getNamespaceItem();
							jstring getNamespace();
							jshort getConstraintType();
							jshort getScope();
							xs::XSSimpleTypeDefinition getTypeDefinition();
							xs::XSComplexTypeDefinition getEnclosingCTDefinition();
							jstring getConstraintValue();
							jshort getActualVCType();
							xs::ShortList getItemValueTypes();
							xs::XSValue getValueConstraintValue();
							dv::ValidatedInfo getValInfo();
							jstring getName();
							xs::XSAnnotation getAnnotation();
							xs::XSObjectList getAnnotations();
							jshort getType();
							void reset();
						}; // end class XSAttributeDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSAttributeUseImpl : public java::lang::Object {
							public:
						            XSAttributeUseImpl(jobject _jthis, bool copy);
						            XSAttributeUseImpl(const XSAttributeUseImpl &);
						        
							XSAttributeUseImpl();
							virtual ~XSAttributeUseImpl();
							xs::XSNamespaceItem getNamespaceItem();
							jstring getNamespace();
							jshort getConstraintType();
							jstring getConstraintValue();
							jshort getActualVCType();
							xs::ShortList getItemValueTypes();
							xs::XSValue getValueConstraintValue();
							xs::XSAttributeDeclaration getAttrDeclaration();
							jboolean getRequired();
							jstring getName();
							xs::XSObjectList getAnnotations();
							jshort getType();
							void reset();
						}; // end class XSAttributeUseImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSComplexTypeDecl : public java::lang::Object {
							public:
						            XSComplexTypeDecl(jobject _jthis, bool copy);
						            XSComplexTypeDecl(const XSComplexTypeDecl &);
						        
							XSComplexTypeDecl();
							virtual ~XSComplexTypeDecl();
							jshort getContentType();
							void setValues(jstring string_0,jstring string_1,xs::XSTypeDefinition xSTypeDefinition_2,jshort short_3,jshort short_4,jshort short_5,jshort short_6,jboolean boolean_7,XSAttributeGroupDecl xSAttributeGroupDecl_8,dv::XSSimpleType xSSimpleType_9,XSParticleDecl xSParticleDecl_10,util::XSObjectListImpl xSObjectListImpl_11);
							jshort getFinalSet();
							jstring getTargetNamespace();
							jboolean containsTypeID();
							void setIsAbstractType();
							void setContainsTypeID();
							void setIsAnonymous();
							XSAttributeGroupDecl getAttrGrp();
							jboolean isDOMDerivedFrom(jstring string_0,jstring string_1,jint int_2);
							xs::XSAttributeUse getAttributeUse(jstring string_0,jstring string_1);
							jstring getTypeNamespace();
							jboolean isDerivedFrom(jstring string_0,jstring string_1,jint int_2);
							xs::XSNamespaceItem getNamespaceItem();
							xs::XSParticle getParticle();
							models::XSCMValidator getContentModel(models::CMBuilder cMBuilder_0,jboolean boolean_1);
							models::XSCMValidator getContentModel(models::CMBuilder cMBuilder_0);
							jstring getNamespace();
							xs::XSObjectList getAttributeUses();
							jshort getDerivationMethod();
							xs::XSWildcard getAttributeWildcard();
							xs::XSSimpleTypeDefinition getSimpleType();
							jboolean isProhibitedSubstitution(jshort short_0);
							jshort getProhibitedSubstitutions();
							jshort getTypeCategory();
							xs::XSTypeDefinition getBaseType();
							jshort getFinal();
							jboolean getAnonymous();
							jboolean derivedFromType(xs::XSTypeDefinition xSTypeDefinition_0,jshort short_1);
							jboolean derivedFrom(jstring string_0,jstring string_1,jshort short_2);
							jboolean getAbstract();
							jstring toString();
							jstring getName();
							jstring getTypeName();
							xs::XSObjectList getAnnotations();
							void setName(jstring string_0);
							jshort getType();
							jboolean isFinal(jshort short_0);
							void reset();
						}; // end class XSComplexTypeDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSDDescription : public util::XMLResourceIdentifierImpl {
							public:
						            XSDDescription(jobject _jthis, bool copy);
						            XSDDescription(const XSDDescription &);
						        
							XSDDescription();
							virtual ~XSDDescription();
							jstring getTargetNamespace();
							jstring getGrammarType();
							XSDDescription makeClone();
							void setAttributes(xni::XMLAttributes xMLAttributes_0);
							jshort getContextType();
							jobjectArray getLocationHints();
							xni::QName getTriggeringComponent();
							xni::QName getEnclosingElementName();
							jboolean fromInstance();
							void setContextType(jshort short_0);
							void setTargetNamespace(jstring string_0);
							void setLocationHints(jobjectArray stringArray_0);
							void setLocationHints(int argc,const char **argv);
							void setTriggeringComponent(xni::QName qName_0);
							void setEnclosingElementName(xni::QName qName_0);
							jint hashCode();
							void reset();
							xni::XMLAttributes getAttributes();
						}; // end class XSDDescription
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSDeclarationPool : public java::lang::Object {
							public:
						            XSDeclarationPool(jobject _jthis, bool copy);
						            XSDeclarationPool(const XSDeclarationPool &);
						        
							XSDeclarationPool();
							virtual ~XSDeclarationPool();
							virtual XSAttributeUseImpl getAttributeUse();
							void setDVFactory(dv::xs::SchemaDVFactoryImpl schemaDVFactoryImpl_0);
							virtual XSElementDecl getElementDecl();
							virtual XSComplexTypeDecl getComplexTypeDecl();
							virtual XSAttributeDecl getAttributeDecl();
							virtual dv::xs::XSSimpleTypeDecl getSimpleTypeDecl();
							virtual XSParticleDecl getParticleDecl();
							virtual XSModelGroupImpl getModelGroup();
							void reset();
						}; // end class XSDeclarationPool
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSElementDecl : public java::lang::Object {
							public:
						            XSElementDecl(jobject _jthis, bool copy);
						            XSElementDecl(const XSElementDecl &);
						        
							XSElementDecl();
							virtual ~XSElementDecl();
							xs::XSNamespaceItem getNamespaceItem();
							jstring getNamespace();
							jshort getConstraintType();
							jshort getScope();
							xs::XSTypeDefinition getTypeDefinition();
							xs::XSComplexTypeDefinition getEnclosingCTDefinition();
							jstring getConstraintValue();
							jshort getActualVCType();
							xs::ShortList getItemValueTypes();
							xs::XSValue getValueConstraintValue();
							jboolean getNillable();
							xs::XSNamedMap getIdentityConstraints();
							xs::XSElementDeclaration getSubstitutionGroupAffiliation();
							jboolean isSubstitutionGroupExclusion(jshort short_0);
							jshort getSubstitutionGroupExclusions();
							jboolean isDisallowedSubstitution(jshort short_0);
							jshort getDisallowedSubstitutions();
							jboolean getAbstract();
							void addIDConstraint(identity::IdentityConstraint identityConstraint_0);
							jobjectArray getIDConstraints();
							void setIsAbstract();
							void setIsGlobal();
							void setIsLocal(XSComplexTypeDecl xSComplexTypeDecl_0);
							void setConstraintType(jshort short_0);
							void setIsNillable();
							jstring toString();
							jint hashCode();
							jstring getName();
							xs::XSAnnotation getAnnotation();
							xs::XSObjectList getAnnotations();
							jshort getType();
							void reset();
						}; // end class XSElementDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSGroupDecl : public java::lang::Object {
							public:
						            XSGroupDecl(jobject _jthis, bool copy);
						            XSGroupDecl(const XSGroupDecl &);
						        
							XSGroupDecl();
							virtual ~XSGroupDecl();
							xs::XSNamespaceItem getNamespaceItem();
							jstring getNamespace();
							xs::XSModelGroup getModelGroup();
							jstring getName();
							xs::XSAnnotation getAnnotation();
							xs::XSObjectList getAnnotations();
							jshort getType();
						}; // end class XSGroupDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSMessageFormatter : public java::lang::Object {
							public:
						            XSMessageFormatter(jobject _jthis, bool copy);
						            XSMessageFormatter(const XSMessageFormatter &);
						        
							XSMessageFormatter();
							virtual ~XSMessageFormatter();
						}; // end class XSMessageFormatter
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XSModelImpl : public java::util::AbstractList {
							public:
						            XSModelImpl(jobject _jthis, bool copy);
						            XSModelImpl(const XSModelImpl &);
						        
							XSModelImpl(jobjectArray schemaGrammarArray_0);
							XSModelImpl(jobjectArray schemaGrammarArray_0,jshort short_1);
							virtual ~XSModelImpl();
							xs::XSNamespaceItem item(jint int_0);
							xs::XSNamedMap getComponents(jshort short_0);
							xs::XSAttributeDeclaration getAttributeDeclaration(jstring string_0,jstring string_1);
							xs::XSAttributeDeclaration getAttributeDeclaration(jstring string_0,jstring string_1,jstring string_2);
							xs::XSAttributeGroupDefinition getAttributeGroup(jstring string_0,jstring string_1);
							xs::XSAttributeGroupDefinition getAttributeGroup(jstring string_0,jstring string_1,jstring string_2);
							xs::XSModelGroupDefinition getModelGroupDefinition(jstring string_0,jstring string_1);
							xs::XSModelGroupDefinition getModelGroupDefinition(jstring string_0,jstring string_1,jstring string_2);
							xs::XSNotationDeclaration getNotationDeclaration(jstring string_0,jstring string_1);
							xs::XSNotationDeclaration getNotationDeclaration(jstring string_0,jstring string_1,jstring string_2);
							xs::XSObjectList getSubstitutionGroup(xs::XSElementDeclaration xSElementDeclaration_0);
							xs::XSNamespaceItemList getNamespaceItems();
							xs::XSNamedMap getComponentsByNamespace(jshort short_0,jstring string_1);
							xs::XSElementDeclaration getElementDeclaration(jstring string_0,jstring string_1,jstring string_2);
							xs::XSElementDeclaration getElementDeclaration(jstring string_0,jstring string_1);
							xs::XSIDCDefinition getIDCDefinition(jstring string_0,jstring string_1,jstring string_2);
							xs::XSIDCDefinition getIDCDefinition(jstring string_0,jstring string_1);
							xs::StringList getNamespaces();
							xs::XSTypeDefinition getTypeDefinition(jstring string_0,jstring string_1,jstring string_2);
							xs::XSTypeDefinition getTypeDefinition(jstring string_0,jstring string_1);
							jboolean hasIDConstraints();
							jint getLength();
							jint size();
							java::util::Iterator iterator();
							xs::XSObjectList getAnnotations();
							java::util::ListIterator listIterator(jint int_0);
							java::util::ListIterator listIterator();
						}; // end class XSModelImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class XSCMRepeatingLeaf : public XSCMLeaf {
								public:
							            XSCMRepeatingLeaf(jobject _jthis, bool copy);
							            XSCMRepeatingLeaf(const XSCMRepeatingLeaf &);
							        
								virtual ~XSCMRepeatingLeaf();
							}; // end class XSCMRepeatingLeaf
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDAttributeGroupTraverser : public XSDAbstractTraverser {
								public:
							            XSDAttributeGroupTraverser(jobject _jthis, bool copy);
							            XSDAttributeGroupTraverser(const XSDAttributeGroupTraverser &);
							        
								virtual ~XSDAttributeGroupTraverser();
							}; // end class XSDAttributeGroupTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDAttributeTraverser : public XSDAbstractTraverser {
								public:
							            XSDAttributeTraverser(jobject _jthis, bool copy);
							            XSDAttributeTraverser(const XSDAttributeTraverser &);
							        
								XSDAttributeTraverser(XSDHandler xSDHandler_0,XSAttributeChecker xSAttributeChecker_1);
								virtual ~XSDAttributeTraverser();
							}; // end class XSDAttributeTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDGroupTraverser : public XSDAbstractParticleTraverser {
								public:
							            XSDGroupTraverser(jobject _jthis, bool copy);
							            XSDGroupTraverser(const XSDGroupTraverser &);
							        
								virtual ~XSDGroupTraverser();
							}; // end class XSDGroupTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDKeyrefTraverser : public XSDAbstractIDConstraintTraverser {
								public:
							            XSDKeyrefTraverser(jobject _jthis, bool copy);
							            XSDKeyrefTraverser(const XSDKeyrefTraverser &);
							        
								XSDKeyrefTraverser(XSDHandler xSDHandler_0,XSAttributeChecker xSAttributeChecker_1);
								virtual ~XSDKeyrefTraverser();
							}; // end class XSDKeyrefTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDNotationTraverser : public XSDAbstractTraverser {
								public:
							            XSDNotationTraverser(jobject _jthis, bool copy);
							            XSDNotationTraverser(const XSDNotationTraverser &);
							        
								virtual ~XSDNotationTraverser();
							}; // end class XSDNotationTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDUniqueOrKeyTraverser : public XSDAbstractIDConstraintTraverser {
								public:
							            XSDUniqueOrKeyTraverser(jobject _jthis, bool copy);
							            XSDUniqueOrKeyTraverser(const XSDUniqueOrKeyTraverser &);
							        
								XSDUniqueOrKeyTraverser(XSDHandler xSDHandler_0,XSAttributeChecker xSAttributeChecker_1);
								virtual ~XSDUniqueOrKeyTraverser();
							}; // end class XSDUniqueOrKeyTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDWildcardTraverser : public XSDAbstractTraverser {
								public:
							            XSDWildcardTraverser(jobject _jthis, bool copy);
							            XSDWildcardTraverser(const XSDWildcardTraverser &);
							        
								virtual ~XSDWildcardTraverser();
							}; // end class XSDWildcardTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDocumentInfo : public java::lang::Object {
								public:
							            XSDocumentInfo(jobject _jthis, bool copy);
							            XSDocumentInfo(const XSDocumentInfo &);
							        
								virtual ~XSDocumentInfo();
								void addAllowedNS(jstring string_0);
								jboolean isAllowedNS(jstring string_0);
								jstring toString();
							}; // end class XSDocumentInfo
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class ShortListImpl : public java::util::AbstractList {
								public:
							            ShortListImpl(jobject _jthis, bool copy);
							            ShortListImpl(const ShortListImpl &);
							        
								ShortListImpl(jshortArray shortArray_0,jint int_1);
								virtual ~ShortListImpl();
								jshort item(jint int_0);
								jint getLength();
								jboolean contains(jshort short_0);
								jint size();
							}; // end class ShortListImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class SimpleLocator : public java::lang::Object {
								public:
							            SimpleLocator(jobject _jthis, bool copy);
							            SimpleLocator(const SimpleLocator &);
							        
								SimpleLocator(jstring string_0,jstring string_1,jint int_2,jint int_3,jint int_4);
								SimpleLocator(jstring string_0,jstring string_1,jint int_2,jint int_3);
								SimpleLocator();
								virtual ~SimpleLocator();
								void setValues(jstring string_0,jstring string_1,jint int_2,jint int_3);
								void setValues(jstring string_0,jstring string_1,jint int_2,jint int_3,jint int_4);
								jint getCharacterOffset();
								jint getColumnNumber();
								void setLiteralSystemId(jstring string_0);
								void setPublicId(jstring string_0);
								jstring getPublicId();
								void setExpandedSystemId(jstring string_0);
								jstring getExpandedSystemId();
								jstring getLiteralSystemId();
								void setBaseSystemId(jstring string_0);
								jstring getBaseSystemId();
								jstring getXMLVersion();
								void setColumnNumber(jint int_0);
								void setLineNumber(jint int_0);
								void setCharacterOffset(jint int_0);
								jint getLineNumber();
								jstring getEncoding();
							}; // end class SimpleLocator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class XInt : public java::lang::Object {
								public:
							            XInt(jobject _jthis, bool copy);
							            XInt(const XInt &);
							        
								virtual ~XInt();
								virtual jboolean equals(XInt xInt_0);
								jstring toString();
								virtual jshort shortValue();
								virtual jint intValue();
							}; // end class XInt
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class XSGrammarPool : public util::XMLGrammarPoolImpl {
								public:
							            XSGrammarPool(jobject _jthis, bool copy);
							            XSGrammarPool(const XSGrammarPool &);
							        
								XSGrammarPool();
								virtual ~XSGrammarPool();
								xs::XSModel toXSModel();
								xs::XSModel toXSModel(jshort short_0);
							}; // end class XSGrammarPool
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class XSNamedMap4Types : public XSNamedMapImpl {
								public:
							            XSNamedMap4Types(jobject _jthis, bool copy);
							            XSNamedMap4Types(const XSNamedMap4Types &);
							        
								XSNamedMap4Types(jstring string_0,util::SymbolHash symbolHash_1,jshort short_2);
								XSNamedMap4Types(jobjectArray stringArray_0,jobjectArray symbolHashArray_1,jint int_2,jshort short_3);
								virtual ~XSNamedMap4Types();
								xs::XSObject item(jint int_0);
								xs::XSObject itemByName(jstring string_0,jstring string_1);
								jint getLength();
							}; // end class XSNamedMap4Types
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class DefaultValidationErrorHandler : public xml::sax::helpers::DefaultHandler {
						public:
					            DefaultValidationErrorHandler(jobject _jthis, bool copy);
					            DefaultValidationErrorHandler(const DefaultValidationErrorHandler &);
					        
						virtual ~DefaultValidationErrorHandler();
						void error(xml::sax::SAXParseException sAXParseException_0);
					}; // end class DefaultValidationErrorHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class DocumentBuilderFactoryImpl : public javax::xml::parsers::DocumentBuilderFactory {
						public:
					            DocumentBuilderFactoryImpl(jobject _jthis, bool copy);
					            DocumentBuilderFactoryImpl(const DocumentBuilderFactoryImpl &);
					        
						DocumentBuilderFactoryImpl();
						virtual ~DocumentBuilderFactoryImpl();
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						javax::xml::parsers::DocumentBuilder newDocumentBuilder();
						void setSchema(javax::xml::validation::Schema schema_0);
						javax::xml::validation::Schema getSchema();
						void setXIncludeAware(jboolean boolean_0);
						jboolean isXIncludeAware();
					}; // end class DocumentBuilderFactoryImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class JAXPConstants : public java::lang::Object {
						public:
					            JAXPConstants(jobject _jthis, bool copy);
					            JAXPConstants(const JAXPConstants &);
					        
						JAXPConstants();
						virtual ~JAXPConstants();
					}; // end class JAXPConstants
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class JAXPValidatorComponent : public TeeXMLDocumentFilterImpl {
						public:
					            JAXPValidatorComponent(jobject _jthis, bool copy);
					            JAXPValidatorComponent(const JAXPValidatorComponent &);
					        
						JAXPValidatorComponent(javax::xml::validation::ValidatorHandler validatorHandler_0);
						virtual ~JAXPValidatorComponent();
						void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void setFeature(jstring string_0,jboolean boolean_1);
						void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
						jobjectArray getRecognizedFeatures();
						jobjectArray getRecognizedProperties();
						java::lang::Boolean getFeatureDefault(jstring string_0);
						void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class JAXPValidatorComponent
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class SAXParserImpl : public javax::xml::parsers::SAXParser {
						public:
					            SAXParserImpl(jobject _jthis, bool copy);
					            SAXParserImpl(const SAXParserImpl &);
					        
						virtual ~SAXParserImpl();
						jboolean isNamespaceAware();
						xs::ElementPSVI getElementPSVI();
						xs::AttributePSVI getAttributePSVI(jint int_0);
						xs::AttributePSVI getAttributePSVIByName(jstring string_0,jstring string_1);
						xml::sax::XMLReader getXMLReader();
						javax::xml::validation::Schema getSchema();
						jboolean isValidating();
						xml::sax::Parser getParser();
						jboolean isXIncludeAware();
						void reset();
						void parse(xml::sax::InputSource inputSource_0,xml::sax::HandlerBase handlerBase_1);
						void parse(xml::sax::InputSource inputSource_0,xml::sax::helpers::DefaultHandler defaultHandler_1);
					}; // end class SAXParserImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class UnparsedEntityHandler : public java::lang::Object {
						public:
					            UnparsedEntityHandler(jobject _jthis, bool copy);
					            UnparsedEntityHandler(const UnparsedEntityHandler &);
					        
						virtual ~UnparsedEntityHandler();
						void startDTD(xni::XMLLocator xMLLocator_0,xni::Augmentations augmentations_1);
						void endDTD(xni::Augmentations augmentations_0);
						void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jobjectArray stringArray_3,jstring string_4,xni::XMLString xMLString_5,xni::XMLString xMLString_6,xni::Augmentations augmentations_7);
						void elementDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void externalEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void internalEntityDecl(jstring string_0,xni::XMLString xMLString_1,xni::XMLString xMLString_2,xni::Augmentations augmentations_3);
						void notationDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void unparsedEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void setDTDHandler(xni::XMLDTDHandler xMLDTDHandler_0);
						xni::XMLDTDHandler getDTDHandler();
						void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void startExternalSubset(xni::XMLResourceIdentifier xMLResourceIdentifier_0,xni::Augmentations augmentations_1);
						void startParameterEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void endParameterEntity(jstring string_0,xni::Augmentations augmentations_1);
						void endExternalSubset(xni::Augmentations augmentations_0);
						void startAttlist(jstring string_0,xni::Augmentations augmentations_1);
						void endAttlist(xni::Augmentations augmentations_0);
						void setDTDSource(xni::parser::XMLDTDSource xMLDTDSource_0);
						xni::parser::XMLDTDSource getDTDSource();
						void startConditional(jshort short_0,xni::Augmentations augmentations_1);
						void ignoredCharacters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void endConditional(xni::Augmentations augmentations_0);
						jboolean isEntityDeclared(jstring string_0);
						jboolean isEntityUnparsed(jstring string_0);
						void reset();
					}; // end class UnparsedEntityHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						
						class SerializedDuration : public java::lang::Object {
							public:
						            SerializedDuration(jobject _jthis, bool copy);
						            SerializedDuration(const SerializedDuration &);
						        
							SerializedDuration(jstring string_0);
							virtual ~SerializedDuration();
						}; // end class SerializedDuration
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						
						class XMLGregorianCalendarImpl : public javax::xml::datatype::XMLGregorianCalendar {
							public:
						            XMLGregorianCalendarImpl(jobject _jthis, bool copy);
						            XMLGregorianCalendarImpl(const XMLGregorianCalendarImpl &);
						        
							XMLGregorianCalendarImpl(java::util::GregorianCalendar gregorianCalendar_0);
							XMLGregorianCalendarImpl();
							virtual ~XMLGregorianCalendarImpl();
							jboolean isValid();
							void setTime(jint int_0,jint int_1,jint int_2,java::math::BigDecimal bigDecimal_3);
							void setTime(jint int_0,jint int_1,jint int_2);
							void setTime(jint int_0,jint int_1,jint int_2,jint int_3);
							jint getYear();
							jint getMonth();
							void setYear(jint int_0);
							void setYear(java::math::BigInteger bigInteger_0);
							void setMonth(jint int_0);
							jint getDay();
							java::util::TimeZone getTimeZone(jint int_0);
							void setDay(jint int_0);
							void setHour(jint int_0);
							void setMinute(jint int_0);
							void setSecond(jint int_0);
							void setMillisecond(jint int_0);
							void setFractionalSecond(java::math::BigDecimal bigDecimal_0);
							java::math::BigInteger getEon();
							java::math::BigInteger getEonAndYear();
							jint getTimezone();
							jint getHour();
							jint getMinute();
							jint getMillisecond();
							java::math::BigDecimal getFractionalSecond();
							jstring toXMLFormat();
							javax::xml::namespace::QName getXMLSchemaType();
							java::util::GregorianCalendar toGregorianCalendar();
							java::util::GregorianCalendar toGregorianCalendar(java::util::TimeZone timeZone_0,java::util::Locale locale_1,javax::xml::datatype::XMLGregorianCalendar xMLGregorianCalendar_2);
							jint getSecond();
							void setTimezone(jint int_0);
							static javax::xml::datatype::XMLGregorianCalendar createDateTime(java::math::BigInteger bigInteger_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5,java::math::BigDecimal bigDecimal_6,jint int_7);
							static javax::xml::datatype::XMLGregorianCalendar createDateTime(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5,jint int_6,jint int_7);
							static javax::xml::datatype::XMLGregorianCalendar createDateTime(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
							static javax::xml::datatype::XMLGregorianCalendar createDate(jint int_0,jint int_1,jint int_2,jint int_3);
							static javax::xml::datatype::XMLGregorianCalendar createTime(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4);
							static javax::xml::datatype::XMLGregorianCalendar createTime(jint int_0,jint int_1,jint int_2,java::math::BigDecimal bigDecimal_3,jint int_4);
							static javax::xml::datatype::XMLGregorianCalendar createTime(jint int_0,jint int_1,jint int_2,jint int_3);
							void add(javax::xml::datatype::Duration duration_0);
							jint hashCode();
							void clear();
							jint compare(javax::xml::datatype::XMLGregorianCalendar xMLGregorianCalendar_0);
							javax::xml::datatype::XMLGregorianCalendar normalize();
							void reset();
							static javax::xml::datatype::XMLGregorianCalendar parse(jstring string_0);
						}; // end class XMLGregorianCalendarImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class EmptyXMLSchema : public AbstractXMLSchema {
							public:
						            EmptyXMLSchema(jobject _jthis, bool copy);
						            EmptyXMLSchema(const EmptyXMLSchema &);
						        
							EmptyXMLSchema();
							virtual ~EmptyXMLSchema();
							void cacheGrammars(jstring string_0,jobjectArray grammarArray_1);
							xni::grammars::Grammar retrieveGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
							void lockPool();
							void unlockPool();
							jobjectArray retrieveInitialGrammarSet(jstring string_0);
							xni::grammars::XMLGrammarPool getGrammarPool();
							jboolean isFullyComposed();
							void clear();
						}; // end class EmptyXMLSchema
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class ReadOnlyGrammarPool : public java::lang::Object {
							public:
						            ReadOnlyGrammarPool(jobject _jthis, bool copy);
						            ReadOnlyGrammarPool(const ReadOnlyGrammarPool &);
						        
							ReadOnlyGrammarPool(xni::grammars::XMLGrammarPool xMLGrammarPool_0);
							virtual ~ReadOnlyGrammarPool();
							void cacheGrammars(jstring string_0,jobjectArray grammarArray_1);
							xni::grammars::Grammar retrieveGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
							void lockPool();
							void unlockPool();
							jobjectArray retrieveInitialGrammarSet(jstring string_0);
							void clear();
						}; // end class ReadOnlyGrammarPool
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class ErrorHandlerProxy : public java::lang::Object {
						public:
					            ErrorHandlerProxy(jobject _jthis, bool copy);
					            ErrorHandlerProxy(const ErrorHandlerProxy &);
					        
						ErrorHandlerProxy();
						virtual ~ErrorHandlerProxy();
						void fatalError(xml::sax::SAXParseException sAXParseException_0);
						void warning(xml::sax::SAXParseException sAXParseException_0);
						void error(xml::sax::SAXParseException sAXParseException_0);
					}; // end class ErrorHandlerProxy
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class ErrorHandlerWrapper : public java::lang::Object {
						public:
					            ErrorHandlerWrapper(jobject _jthis, bool copy);
					            ErrorHandlerWrapper(const ErrorHandlerWrapper &);
					        
						ErrorHandlerWrapper();
						ErrorHandlerWrapper(xml::sax::ErrorHandler errorHandler_0);
						virtual ~ErrorHandlerWrapper();
						void fatalError(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
						void warning(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
						xml::sax::ErrorHandler getErrorHandler();
						void setErrorHandler(xml::sax::ErrorHandler errorHandler_0);
						void error(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
					}; // end class ErrorHandlerWrapper
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class JAXPNamespaceContextWrapper : public java::lang::Object {
						public:
					            JAXPNamespaceContextWrapper(jobject _jthis, bool copy);
					            JAXPNamespaceContextWrapper(const JAXPNamespaceContextWrapper &);
					        
						JAXPNamespaceContextWrapper(SymbolTable symbolTable_0);
						virtual ~JAXPNamespaceContextWrapper();
						javax::xml::namespace::NamespaceContext getNamespaceContext();
						void setNamespaceContext(javax::xml::namespace::NamespaceContext namespaceContext_0);
						jstring getPrefix(jstring string_0);
						jstring getURI(jstring string_0);
						jstring getDeclaredPrefixAt(jint int_0);
						java::util::Enumeration getAllPrefixes();
						void pushContext();
						jboolean declarePrefix(jstring string_0,jstring string_1);
						void popContext();
						jint getDeclaredPrefixCount();
						SymbolTable getSymbolTable();
						void setSymbolTable(SymbolTable symbolTable_0);
						void setDeclaredPrefixes(java::util::List list_0);
						java::util::List getDeclaredPrefixes();
						void reset();
					}; // end class JAXPNamespaceContextWrapper
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					
					class XIncludeNamespaceSupport : public MultipleScopeNamespaceSupport {
						public:
					            XIncludeNamespaceSupport(jobject _jthis, bool copy);
					            XIncludeNamespaceSupport(const XIncludeNamespaceSupport &);
					        
						XIncludeNamespaceSupport(xni::NamespaceContext namespaceContext_0);
						XIncludeNamespaceSupport();
						virtual ~XIncludeNamespaceSupport();
						void pushContext();
						void setContextInvalid();
						jstring getURIFromIncludeParent(jstring string_0);
					}; // end class XIncludeNamespaceSupport
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSComplexTypeDefinition : public java::lang::Object {
						public:
					            XSComplexTypeDefinition(jobject _jthis, bool copy);
					            XSComplexTypeDefinition(const XSComplexTypeDefinition &);
					        
						XSComplexTypeDefinition();
						virtual ~XSComplexTypeDefinition();
					}; // end class XSComplexTypeDefinition
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSModel : public java::lang::Object {
						public:
					            XSModel(jobject _jthis, bool copy);
					            XSModel(const XSModel &);
					        
						XSModel();
						virtual ~XSModel();
					}; // end class XSModel
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSObject : public java::lang::Object {
						public:
					            XSObject(jobject _jthis, bool copy);
					            XSObject(const XSObject &);
					        
						XSObject();
						virtual ~XSObject();
					}; // end class XSObject
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						
						class ByteList : public java::lang::Object {
							public:
						            ByteList(jobject _jthis, bool copy);
						            ByteList(const ByteList &);
						        
							ByteList();
							virtual ~ByteList();
						}; // end class ByteList
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class DOMSerializer : public java::lang::Object {
						public:
					            DOMSerializer(jobject _jthis, bool copy);
					            DOMSerializer(const DOMSerializer &);
					        
						DOMSerializer();
						virtual ~DOMSerializer();
					}; // end class DOMSerializer
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class SecuritySupport : public java::lang::Object {
						public:
					            SecuritySupport(jobject _jthis, bool copy);
					            SecuritySupport(const SecuritySupport &);
					        
						virtual ~SecuritySupport();
					}; // end class SecuritySupport
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace javax{
		namespace xml{
			namespace namespace{
				
				class QName : public java::lang::Object {
					public:
				            QName(jobject _jthis, bool copy);
				            QName(const QName &);
				        
					QName(jstring string_0,jstring string_1);
					QName(jstring string_0);
					QName(jstring string_0,jstring string_1,jstring string_2);
					virtual ~QName();
					jstring getPrefix();
					jstring getLocalPart();
					jstring getNamespaceURI();
					jstring toString();
					virtual jint hashCode();
					static QName valueOf(jstring string_0);
				}; // end class QName
			} // end namespace javax
		} // end namespace xml
	} // end namespace namespace

	namespace javax{
		namespace xml{
			namespace stream{
				
				class FactoryConfigurationError : public java::lang::Error {
					public:
				            FactoryConfigurationError(jobject _jthis, bool copy);
				            FactoryConfigurationError(const FactoryConfigurationError &);
				        
					FactoryConfigurationError(jstring string_0);
					FactoryConfigurationError(jstring string_0,java::lang::Exception exception_1);
					FactoryConfigurationError(java::lang::Exception exception_0,jstring string_1);
					FactoryConfigurationError(java::lang::Exception exception_0);
					FactoryConfigurationError();
					virtual ~FactoryConfigurationError();
					java::lang::Throwable getCause();
					jstring getMessage();
					java::lang::Exception getException();
				}; // end class FactoryConfigurationError
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLReporter : public java::lang::Object {
					public:
				            XMLReporter(jobject _jthis, bool copy);
				            XMLReporter(const XMLReporter &);
				        
					XMLReporter();
					virtual ~XMLReporter();
				}; // end class XMLReporter
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class Characters : public java::lang::Object {
						public:
					            Characters(jobject _jthis, bool copy);
					            Characters(const Characters &);
					        
						Characters();
						virtual ~Characters();
					}; // end class Characters
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class Comment : public java::lang::Object {
						public:
					            Comment(jobject _jthis, bool copy);
					            Comment(const Comment &);
					        
						Comment();
						virtual ~Comment();
					}; // end class Comment
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class ProcessingInstruction : public java::lang::Object {
						public:
					            ProcessingInstruction(jobject _jthis, bool copy);
					            ProcessingInstruction(const ProcessingInstruction &);
					        
						ProcessingInstruction();
						virtual ~ProcessingInstruction();
					}; // end class ProcessingInstruction
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace transform{
				
				class ErrorListener : public java::lang::Object {
					public:
				            ErrorListener(jobject _jthis, bool copy);
				            ErrorListener(const ErrorListener &);
				        
					ErrorListener();
					virtual ~ErrorListener();
				}; // end class ErrorListener
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				namespace sax{
					
					class TransformerHandler : public java::lang::Object {
						public:
					            TransformerHandler(jobject _jthis, bool copy);
					            TransformerHandler(const TransformerHandler &);
					        
						TransformerHandler();
						virtual ~TransformerHandler();
					}; // end class TransformerHandler
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace sax

	namespace javax{
		namespace xml{
			namespace transform{
				namespace stax{
					
					class StAXResult : public java::lang::Object {
						public:
					            StAXResult(jobject _jthis, bool copy);
					            StAXResult(const StAXResult &);
					        
						StAXResult(stream::XMLStreamWriter xMLStreamWriter_0);
						StAXResult(stream::XMLEventWriter xMLEventWriter_0);
						virtual ~StAXResult();
						stream::XMLEventWriter getXMLEventWriter();
						stream::XMLStreamWriter getXMLStreamWriter();
						jstring getSystemId();
						void setSystemId(jstring string_0);
					}; // end class StAXResult
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stax

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPath : public java::lang::Object {
					public:
				            XPath(jobject _jthis, bool copy);
				            XPath(const XPath &);
				        
					XPath();
					virtual ~XPath();
				}; // end class XPath
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DOMException : public java::lang::RuntimeException {
					public:
				            DOMException(jobject _jthis, bool copy);
				            DOMException(const DOMException &);
				        
					DOMException(jshort short_0,jstring string_1);
					virtual ~DOMException();
				}; // end class DOMException
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class Element : public java::lang::Object {
					public:
				            Element(jobject _jthis, bool copy);
				            Element(const Element &);
				        
					Element();
					virtual ~Element();
				}; // end class Element
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class Notation : public java::lang::Object {
					public:
				            Notation(jobject _jthis, bool copy);
				            Notation(const Notation &);
				        
					Notation();
					virtual ~Notation();
				}; // end class Notation
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				namespace bootstrap{
					
					class DOMImplementationRegistry : public java::lang::Object {
						public:
					            DOMImplementationRegistry(jobject _jthis, bool copy);
					            DOMImplementationRegistry(const DOMImplementationRegistry &);
					        
						virtual ~DOMImplementationRegistry();
						void addSource(DOMImplementationSource dOMImplementationSource_0);
						DOMImplementation getDOMImplementation(jstring string_0);
						DOMImplementationList getDOMImplementationList(jstring string_0);
						static DOMImplementationRegistry newInstance();
					}; // end class DOMImplementationRegistry
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace bootstrap

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class Counter : public java::lang::Object {
						public:
					            Counter(jobject _jthis, bool copy);
					            Counter(const Counter &);
					        
						Counter();
						virtual ~Counter();
					}; // end class Counter
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					
					class Event : public java::lang::Object {
						public:
					            Event(jobject _jthis, bool copy);
					            Event(const Event &);
					        
						Event();
						virtual ~Event();
					}; // end class Event
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLAppletElement : public java::lang::Object {
						public:
					            HTMLAppletElement(jobject _jthis, bool copy);
					            HTMLAppletElement(const HTMLAppletElement &);
					        
						HTMLAppletElement();
						virtual ~HTMLAppletElement();
					}; // end class HTMLAppletElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLDListElement : public java::lang::Object {
						public:
					            HTMLDListElement(jobject _jthis, bool copy);
					            HTMLDListElement(const HTMLDListElement &);
					        
						HTMLDListElement();
						virtual ~HTMLDListElement();
					}; // end class HTMLDListElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLFrameElement : public java::lang::Object {
						public:
					            HTMLFrameElement(jobject _jthis, bool copy);
					            HTMLFrameElement(const HTMLFrameElement &);
					        
						HTMLFrameElement();
						virtual ~HTMLFrameElement();
					}; // end class HTMLFrameElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLInputElement : public java::lang::Object {
						public:
					            HTMLInputElement(jobject _jthis, bool copy);
					            HTMLInputElement(const HTMLInputElement &);
					        
						HTMLInputElement();
						virtual ~HTMLInputElement();
					}; // end class HTMLInputElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLMetaElement : public java::lang::Object {
						public:
					            HTMLMetaElement(jobject _jthis, bool copy);
					            HTMLMetaElement(const HTMLMetaElement &);
					        
						HTMLMetaElement();
						virtual ~HTMLMetaElement();
					}; // end class HTMLMetaElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLPreElement : public java::lang::Object {
						public:
					            HTMLPreElement(jobject _jthis, bool copy);
					            HTMLPreElement(const HTMLPreElement &);
					        
						HTMLPreElement();
						virtual ~HTMLPreElement();
					}; // end class HTMLPreElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLTableElement : public java::lang::Object {
						public:
					            HTMLTableElement(jobject _jthis, bool copy);
					            HTMLTableElement(const HTMLTableElement &);
					        
						HTMLTableElement();
						virtual ~HTMLTableElement();
					}; // end class HTMLTableElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSInput : public java::lang::Object {
						public:
					            LSInput(jobject _jthis, bool copy);
					            LSInput(const LSInput &);
					        
						LSInput();
						virtual ~LSInput();
					}; // end class LSInput
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSSerializerFilter : public java::lang::Object {
						public:
					            LSSerializerFilter(jobject _jthis, bool copy);
					            LSSerializerFilter(const LSSerializerFilter &);
					        
						LSSerializerFilter();
						virtual ~LSSerializerFilter();
					}; // end class LSSerializerFilter
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					
					class StyleSheetList : public java::lang::Object {
						public:
					            StyleSheetList(jobject _jthis, bool copy);
					            StyleSheetList(const StyleSheetList &);
					        
						StyleSheetList();
						virtual ~StyleSheetList();
					}; // end class StyleSheetList
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets

	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					
					class XPathException : public java::lang::RuntimeException {
						public:
					            XPathException(jobject _jthis, bool copy);
					            XPathException(const XPathException &);
					        
						XPathException(jshort short_0,jstring string_1);
						virtual ~XPathException();
					}; // end class XPathException
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath

	namespace org{
		namespace xml{
			namespace sax{
				
				class Parser : public java::lang::Object {
					public:
				            Parser(jobject _jthis, bool copy);
				            Parser(const Parser &);
				        
					Parser();
					virtual ~Parser();
				}; // end class Parser
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					
					class Attributes2Impl : public helpers::AttributesImpl {
						public:
					            Attributes2Impl(jobject _jthis, bool copy);
					            Attributes2Impl(const Attributes2Impl &);
					        
						Attributes2Impl(Attributes attributes_0);
						Attributes2Impl();
						virtual ~Attributes2Impl();
						void removeAttribute(jint int_0);
						void addAttribute(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						void setDeclared(jint int_0,jboolean boolean_1);
						jboolean isSpecified(jint int_0);
						jboolean isSpecified(jstring string_0);
						jboolean isSpecified(jstring string_0,jstring string_1);
						void setSpecified(jint int_0,jboolean boolean_1);
						void setAttributes(Attributes attributes_0);
						jboolean isDeclared(jint int_0);
						jboolean isDeclared(jstring string_0,jstring string_1);
						jboolean isDeclared(jstring string_0);
					}; // end class Attributes2Impl
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class XMLReaderAdapter : public java::lang::Object {
						public:
					            XMLReaderAdapter(jobject _jthis, bool copy);
					            XMLReaderAdapter(const XMLReaderAdapter &);
					        
						XMLReaderAdapter();
						XMLReaderAdapter(XMLReader xMLReader_0);
						virtual ~XMLReaderAdapter();
						void setDocumentLocator(Locator locator_0);
						void endPrefixMapping(jstring string_0);
						void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
						void processingInstruction(jstring string_0,jstring string_1);
						void skippedEntity(jstring string_0);
						void setLocale(java::util::Locale locale_0);
						void setEntityResolver(EntityResolver entityResolver_0);
						void setDTDHandler(DTDHandler dTDHandler_0);
						void characters(jcharArray charArray_0,jint int_1,jint int_2);
						void setErrorHandler(ErrorHandler errorHandler_0);
						void startPrefixMapping(jstring string_0,jstring string_1);
						void startElement(jstring string_0,jstring string_1,jstring string_2,Attributes attributes_3);
						void startDocument();
						void endDocument();
						void endElement(jstring string_0,jstring string_1,jstring string_2);
						void setDocumentHandler(DocumentHandler documentHandler_0);
						void parse(InputSource inputSource_0);
						void parse(jstring string_0);
					}; // end class XMLReaderAdapter
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace crcl{
		namespace utils{
			
			class PerfTest : public java::lang::Object {
				public:
			            PerfTest(jobject _jthis, bool copy);
			            PerfTest(const PerfTest &);
			        
				PerfTest();
				virtual ~PerfTest();
				static void runPerfTest(jboolean boolean_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class PerfTest
		} // end namespace crcl
	} // end namespace utils

	namespace rcsdesign{
		
		class rcsDesignUserAbortException : public java::lang::Exception {
			public:
		            rcsDesignUserAbortException(jobject _jthis, bool copy);
		            rcsDesignUserAbortException(const rcsDesignUserAbortException &);
		        
			rcsDesignUserAbortException();
			virtual ~rcsDesignUserAbortException();
		}; // end class rcsDesignUserAbortException
	} // end namespace rcsdesign

	namespace rcsdesign{
		
		class ListElement : public java::lang::Object {
			public:
		            ListElement(jobject _jthis, bool copy);
		            ListElement(const ListElement &);
		        
			virtual ~ListElement();
		}; // end class ListElement
	} // end namespace rcsdesign

	namespace rcsdesign{
		
		class AlertDialog : public java::awt::Dialog {
			public:
		            AlertDialog(jobject _jthis, bool copy);
		            AlertDialog(const AlertDialog &);
		        
			AlertDialog(java::awt::Frame frame_0,jstring string_1,jstring string_2);
			virtual ~AlertDialog();
			void actionPerformed(java::awt::event::ActionEvent actionEvent_0);
			java::awt::Dimension getPreferredSize();
			java::awt::Dimension getMinimumSize();
			void windowOpened(java::awt::event::WindowEvent windowEvent_0);
			void windowClosing(java::awt::event::WindowEvent windowEvent_0);
			void windowClosed(java::awt::event::WindowEvent windowEvent_0);
			void windowIconified(java::awt::event::WindowEvent windowEvent_0);
			void windowDeiconified(java::awt::event::WindowEvent windowEvent_0);
			void windowActivated(java::awt::event::WindowEvent windowEvent_0);
			void windowDeactivated(java::awt::event::WindowEvent windowEvent_0);
			static void main(jobjectArray stringArray_0);
			static void main(int argc,const char **argv);
			void run();
			void init(jstring string_0,jstring string_1);
		}; // end class AlertDialog
	} // end namespace rcsdesign

	namespace rcsdesign{
		
		class QueryStringDialog : public java::awt::Dialog {
			public:
		            QueryStringDialog(jobject _jthis, bool copy);
		            QueryStringDialog(const QueryStringDialog &);
		        
			virtual ~QueryStringDialog();
			void actionPerformed(java::awt::event::ActionEvent actionEvent_0);
			java::awt::Dimension getPreferredSize();
			java::awt::Dimension getMinimumSize();
		}; // end class QueryStringDialog
	} // end namespace rcsdesign

	namespace rcsdesign{
		
		class Merger : public java::lang::Object {
			public:
		            Merger(jobject _jthis, bool copy);
		            Merger(const Merger &);
		        
			Merger();
			virtual ~Merger();
			jboolean FunctionFoundInExistingFile(jstring string_0);
			jboolean ClassFoundInExistingFile(jstring string_0);
			void Finish();
			void SetPrintWriter(java::io::PrintWriter printWriter_0);
			void GetBackupData(java::io::File file_0);
			void DisableMerge(jstring string_0);
			void EnableMerge(jstring string_0);
			jint DeleteLine(jstring string_0);
		}; // end class Merger
	} // end namespace rcsdesign

	namespace rcs{
		namespace posemath{
			
			class PmLine : public java::lang::Object {
				public:
			            PmLine(jobject _jthis, bool copy);
			            PmLine(const PmLine &);
			        
				PmLine();
				virtual ~PmLine();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PmLine
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace nml{
			
			class RCS_CMD_MSG : public NMLmsg {
				public:
			            RCS_CMD_MSG(jobject _jthis, bool copy);
			            RCS_CMD_MSG(const RCS_CMD_MSG &);
			        
				RCS_CMD_MSG(jint int_0);
				virtual ~RCS_CMD_MSG();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class RCS_CMD_MSG
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLException : public java::lang::Exception {
				public:
			            NMLException(jobject _jthis, bool copy);
			            NMLException(const NMLException &);
			        
				NMLException(jstring string_0,NMLConnectionInterface nMLConnectionInterface_1);
				NMLException(jstring string_0,NMLConnectionInterface nMLConnectionInterface_1,java::lang::Exception exception_2);
				virtual ~NMLException();
				java::lang::Throwable getCause();
			}; // end class NMLException
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLConnectionInterface : public java::lang::Object {
				public:
			            NMLConnectionInterface(jobject _jthis, bool copy);
			            NMLConnectionInterface(const NMLConnectionInterface &);
			        
				NMLConnectionInterface();
				virtual ~NMLConnectionInterface();
			}; // end class NMLConnectionInterface
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NML_ERROR : public NMLmsg {
				public:
			            NML_ERROR(jobject _jthis, bool copy);
			            NML_ERROR(const NML_ERROR &);
			        
				NML_ERROR();
				virtual ~NML_ERROR();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class NML_ERROR
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLConfigInfo : public java::lang::Object {
				public:
			            NMLConfigInfo(jobject _jthis, bool copy);
			            NMLConfigInfo(const NMLConfigInfo &);
			        
				NMLConfigInfo();
				virtual ~NMLConfigInfo();
			}; // end class NMLConfigInfo
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class perftypeMsgDict : public java::lang::Object {
				public:
			            perftypeMsgDict(jobject _jthis, bool copy);
			            perftypeMsgDict(const perftypeMsgDict &);
			        
				virtual ~perftypeMsgDict();
				jint formatMsg(NMLFormatConverter nMLFormatConverter_0);
				jlong getEstimatedSize(jint int_0);
				jlong getMaxEstimatedSize();
				static jstring SymbolLookup(jint int_0);
			}; // end class perftypeMsgDict
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace utils{
			
			class SimpleFileFilter : public java::lang::Object {
				public:
			            SimpleFileFilter(jobject _jthis, bool copy);
			            SimpleFileFilter(const SimpleFileFilter &);
			        
				SimpleFileFilter(jstring string_0);
				virtual ~SimpleFileFilter();
				static jboolean CheckPatternMatch(jstring string_0,jstring string_1);
				jboolean accept(java::io::File file_0,jstring string_1);
			}; // end class SimpleFileFilter
		} // end namespace rcs
	} // end namespace utils

	namespace rcs{
		namespace utils{
			
			class rcs_states : public java::lang::Object {
				public:
			            rcs_states(jobject _jthis, bool copy);
			            rcs_states(const rcs_states &);
			        
				rcs_states();
				virtual ~rcs_states();
				static jstring printWhereAmI();
				static jboolean state_match(nml::RCS_STAT_MSG rCS_STAT_MSG_0,jint int_1);
				static void state_new(nml::RCS_STAT_MSG rCS_STAT_MSG_0);
				static void state_next(nml::RCS_STAT_MSG rCS_STAT_MSG_0,jint int_1);
				static void status_next(nml::RCS_STAT_MSG rCS_STAT_MSG_0,jint int_1);
				static void state_default(nml::RCS_STAT_MSG rCS_STAT_MSG_0);
			}; // end class rcs_states
		} // end namespace rcs
	} // end namespace utils

	namespace rcs{
		namespace utils{
			
			class CorrectedPipedInputStream : public java::io::InputStream {
				public:
			            CorrectedPipedInputStream(jobject _jthis, bool copy);
			            CorrectedPipedInputStream(const CorrectedPipedInputStream &);
			        
				CorrectedPipedInputStream();
				CorrectedPipedInputStream(CorrectedPipedOutputStreamInterface correctedPipedOutputStreamInterface_0);
				virtual ~CorrectedPipedInputStream();
				CorrectedPipeData get_pipe_data();
				jint read(jbyteArray byteArray_0);
				jint read();
				jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
				void close();
				jint available();
			}; // end class CorrectedPipedInputStream
		} // end namespace rcs
	} // end namespace utils

	namespace diagapplet{
		namespace plotter{
			
			class ColorRenderer : public javax::swing::JLabel {
				public:
			            ColorRenderer(jobject _jthis, bool copy);
			            ColorRenderer(const ColorRenderer &);
			        
				ColorRenderer(jboolean boolean_0);
				virtual ~ColorRenderer();
			}; // end class ColorRenderer
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		namespace plotter{
			
			class StatsTextJFrame : public javax::swing::JFrame {
				public:
			            StatsTextJFrame(jobject _jthis, bool copy);
			            StatsTextJFrame(const StatsTextJFrame &);
			        
				StatsTextJFrame();
				StatsTextJFrame(jstring string_0);
				virtual ~StatsTextJFrame();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class StatsTextJFrame
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		
		class diagappletJFrame : public javax::swing::JFrame {
			public:
		            diagappletJFrame(jobject _jthis, bool copy);
		            diagappletJFrame(const diagappletJFrame &);
		        
			diagappletJFrame(jstring string_0);
			virtual ~diagappletJFrame();
			void windowOpened(java::awt::event::WindowEvent windowEvent_0);
			void windowClosing(java::awt::event::WindowEvent windowEvent_0);
			void windowClosed(java::awt::event::WindowEvent windowEvent_0);
			void windowIconified(java::awt::event::WindowEvent windowEvent_0);
			void windowDeiconified(java::awt::event::WindowEvent windowEvent_0);
			void windowActivated(java::awt::event::WindowEvent windowEvent_0);
			void windowDeactivated(java::awt::event::WindowEvent windowEvent_0);
			void componentResized(java::awt::event::ComponentEvent componentEvent_0);
			void componentMoved(java::awt::event::ComponentEvent componentEvent_0);
			void componentShown(java::awt::event::ComponentEvent componentEvent_0);
			void componentHidden(java::awt::event::ComponentEvent componentEvent_0);
			void RecheckSize();
			void resizeInnerApplet();
			void manual_resize(jint int_0,jint int_1);
		}; // end class diagappletJFrame
	} // end namespace diagapplet

	namespace diagapplet{
		
		class plotTrackerPreserve : public java::lang::Object {
			public:
		            plotTrackerPreserve(jobject _jthis, bool copy);
		            plotTrackerPreserve(const plotTrackerPreserve &);
		        
			plotTrackerPreserve();
			virtual ~plotTrackerPreserve();
			jboolean isIsAux();
			void setIsAux(jboolean boolean_0);
			jboolean isIsCmd();
			void setIsCmd(jboolean boolean_0);
			jboolean isIsArray();
			void setIsArray(jboolean boolean_0);
			jstring getModuleName();
			void setModuleName(jstring string_0);
			jstring getBufferName();
			void setBufferName(jstring string_0);
			jint getVariableNumber();
			void setVariableNumber(jint int_0);
			jstring getVariableName();
			void setVariableName(jstring string_0);
			jstring getStiName();
			void setStiName(jstring string_0);
			jlong getMsgType();
			void setMsgType(jlong long_0);
			jstring toString();
			jstring getName();
			void setName(jstring string_0);
		}; // end class plotTrackerPreserve
	} // end namespace diagapplet

	namespace diagapplet{
		
		class diag_NB_UI : public javax::swing::JFrame {
			public:
		            diag_NB_UI(jobject _jthis, bool copy);
		            diag_NB_UI(const diag_NB_UI &);
		        
			diag_NB_UI();
			virtual ~diag_NB_UI();
			static void PrintException(java::lang::Throwable throwable_0);
			static void PrintError(jstring string_0);
			jboolean isAutomatically_Keep_and_Use_PlotSets();
			void setAutomatically_Keep_and_Use_PlotSets(jboolean boolean_0);
			void AutoSavePlotSet();
			void LoadAuxBuffersFromNmlConfigFile(jstring string_0);
			static void main(jobjectArray stringArray_0);
			static void main(int argc,const char **argv);
		}; // end class diag_NB_UI
	} // end namespace diagapplet

	namespace diagapplet{
		namespace CodeGen{
			
			class info_array_elem_info : public java::lang::Object {
				public:
			            info_array_elem_info(jobject _jthis, bool copy);
			            info_array_elem_info(const info_array_elem_info &);
			        
				virtual ~info_array_elem_info();
				jstring toString();
			}; // end class info_array_elem_info
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class ModuleInfoInterface : public java::lang::Object {
				public:
			            ModuleInfoInterface(jobject _jthis, bool copy);
			            ModuleInfoInterface(const ModuleInfoInterface &);
			        
				ModuleInfoInterface();
				virtual ~ModuleInfoInterface();
			}; // end class ModuleInfoInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class C_Generator : public java::lang::Object {
				public:
			            C_Generator(jobject _jthis, bool copy);
			            C_Generator(const C_Generator &);
			        
				virtual ~C_Generator();
				static void DebugPrint(jstring string_0);
				static void CreateC_UpdateFunction(StructureTypeInfo structureTypeInfo_0,CodeGenCommonInterface2 codeGenCommonInterface2_1,java::util::Hashtable hashtable_2,ModuleInfo moduleInfo_3);
				static void GenerateC_StartOfFile(jobjectArray stringArray_0,CodeGenCommonInterface2 codeGenCommonInterface2_1,jstring string_2,java::util::Hashtable hashtable_3,jstring string_4);
				static void GenerateC_UpdateFunction(jstring string_0,CodeGenCommonInterface2 codeGenCommonInterface2_1,java::util::Hashtable hashtable_2);
				static void GenerateC_PrototypesHeader(jobjectArray stringArray_0,CodeGenCommonInterface2 codeGenCommonInterface2_1,jstring string_2,java::util::Hashtable hashtable_3);
				static void GenerateC_FormatFunction(jobjectArray stringArray_0,CodeGenCommonInterface2 codeGenCommonInterface2_1,jstring string_2,java::util::Hashtable hashtable_3,jstring string_4,jboolean boolean_5);
				static jstring Get_C_FormatFunction(jobjectArray stringArray_0,CodeGenCommonInterface2 codeGenCommonInterface2_1);
				static jstring ConvertCppTokToC_Tok(jstring string_0,CodeGenCommonInterface2 codeGenCommonInterface2_1);
				static void WriteC_UpdateFunctionProtos(jobjectArray stringArray_0,CodeGenCommonInterface2 codeGenCommonInterface2_1);
				static jstring ConvertCppTypeTo_C_Update_Suffix(jstring string_0);
			}; // end class C_Generator
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace utils{
			
			class URLLoadInfoJPanel : public javax::swing::JPanel {
				public:
			            URLLoadInfoJPanel(jobject _jthis, bool copy);
			            URLLoadInfoJPanel(const URLLoadInfoJPanel &);
			        
				URLLoadInfoJPanel();
				virtual ~URLLoadInfoJPanel();
				jint get_bytes_read();
				void set_URLname(jstring string_0);
				void inc_bytes_read(jint int_0);
				void set_content_length(jint int_0);
				jint get_content_length();
				void set_bytes_read(jint int_0);
				jstring get_URLname();
				void updateDisplay();
				void force_repaint(jint int_0);
			}; // end class URLLoadInfoJPanel
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class DiagErrorAppendInterface : public java::lang::Object {
				public:
			            DiagErrorAppendInterface(jobject _jthis, bool copy);
			            DiagErrorAppendInterface(const DiagErrorAppendInterface &);
			        
				DiagErrorAppendInterface();
				virtual ~DiagErrorAppendInterface();
			}; // end class DiagErrorAppendInterface
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class WatchTableModel : public javax::swing::table::AbstractTableModel {
				public:
			            WatchTableModel(jobject _jthis, bool copy);
			            WatchTableModel(const WatchTableModel &);
			        
				WatchTableModel();
				virtual ~WatchTableModel();
				void Clear();
				jint getRowCount();
				jint getColumnCount();
				jstring getColumnName(jint int_0);
				jboolean isCellEditable(jint int_0,jint int_1);
				void SetTypeInfo(CodeGen::StructureTypeInfo structureTypeInfo_0,java::util::Hashtable hashtable_1);
				jstring getTypeInfoName();
				java::util::Hashtable get_structInfoByNameHashtable();
				void set_editable(jboolean boolean_0);
				jboolean getIsNewStruct(jint int_0);
				jboolean getIsEnumeration(jint int_0);
				jboolean getIsArray(jint int_0);
				void ToggleOpen(jint int_0);
				jboolean get_editable();
				jint getVarNumAt(jint int_0);
				jstring getVarNameAt(jint int_0);
				CodeGen::StructureTypeInfo getStructureTypeInfo();
				jstring getValueStringForVarNumber(jint int_0);
				void SetDataInfo(java::util::Enumeration enumeration_0);
				jstring getDataString();
				CodeGen::EnumTypeInfo getEnumTypeInfo(jint int_0);
				void ExpandAll();
				void CollapseAll();
				void SetDefault(jstring string_0);
				void setValueForVarNumber(jint int_0,jdouble double_1);
				void SetRowValue(jint int_0,jstring string_1);
			}; // end class WatchTableModel
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class FastListContainer : public java::awt::Panel {
				public:
			            FastListContainer(jobject _jthis, bool copy);
			            FastListContainer(const FastListContainer &);
			        
				FastListContainer(FastListPanel fastListPanel_0);
				virtual ~FastListContainer();
				void adjustmentValueChanged(java::awt::event::AdjustmentEvent adjustmentEvent_0);
				void UpdateScrollbars();
			}; // end class FastListContainer
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class WatchJPanel : public javax::swing::JPanel {
				public:
			            WatchJPanel(jobject _jthis, bool copy);
			            WatchJPanel(const WatchJPanel &);
			        
				WatchJPanel();
				virtual ~WatchJPanel();
				void Clear();
				void addListSelectionListener(javax::swing::event::ListSelectionListener listSelectionListener_0);
				void setEditable(jboolean boolean_0);
				javax::swing::table::TableCellEditor getTableColumnCellEditor(jint int_0);
				void SetTypeInfo(CodeGen::StructureTypeInfo structureTypeInfo_0,java::util::Hashtable hashtable_1);
				CodeGen::StructureTypeInfo getStructureTypeInfo();
				jstring GetVarName();
				void set_hashtable_by_id(java::util::Hashtable hashtable_0);
				void setTableCellEditor(jint int_0,javax::swing::table::TableCellEditor tableCellEditor_1);
				jstring getValueStringForVarNumber(jint int_0);
				void setChangeIdRunnable(java::lang::Runnable runnable_0);
				void LoadPackedFile(java::io::File file_0);
				void LoadXMLFile(java::io::File file_0);
				void setNmlMessageDictionary(rcs::nml::NMLMessageDictionary nMLMessageDictionary_0);
				void SetDataInfo(java::util::Enumeration enumeration_0);
				void LoadDataStringFile(java::io::File file_0);
				void DumpDataStringFile(java::io::File file_0,jstring string_1);
				void DumpText();
				jstring getDataString();
				jboolean GetIsEnumeration(jint int_0);
				CodeGen::EnumTypeInfo getEnumTypeInfo(jint int_0);
				jboolean GetIsArray();
				void SelectRow(jint int_0);
				jstring GetSelectedValue();
				jboolean GetIsNewStruct();
				jint GetVarNum();
				void SavePackedFile(java::io::File file_0);
				void ExpandAll();
				void CollapseAll();
				void setRecordAll(jboolean boolean_0);
				void SaveXMLFile(java::io::File file_0);
				void DumpDataString();
				void LoadDataString();
				void SetDefault(jstring string_0);
				void setValueForVarNumber(jint int_0,jdouble double_1);
				void SetRowValue(jint int_0,jstring string_1);
				jlong getId();
			}; // end class WatchJPanel
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class ImageJPanel : public javax::swing::JPanel {
				public:
			            ImageJPanel(jobject _jthis, bool copy);
			            ImageJPanel(const ImageJPanel &);
			        
				ImageJPanel();
				virtual ~ImageJPanel();
				java::awt::image::BufferedImage getImage();
				void refresh();
				void AddRunOnSelecteRectChange(java::lang::Runnable runnable_0);
				void setSub_painter(PainterInterface painterInterface_0);
				jint get_xstart();
				jint get_ystart();
				jdouble get_scale();
				void SetFit(jboolean boolean_0);
				void SetZoom(jint int_0);
				void LoadByteArray(jbyteArray byteArray_0,jint int_1,jint int_2);
				void LoadImage(jstring string_0);
				void LoadImage(java::awt::image::BufferedImage bufferedImage_0);
				void LoadImageF(java::io::File file_0);
				void ClearImage();
				void SetStartPos(jint int_0,jint int_1);
				void CombineByteArray(jbyteArray byteArray_0,jint int_1,jint int_2,jint int_3,jint int_4);
				void ClearMarks();
				void AddMark(jbyte byte_0,jbyte byte_1,jbyte byte_2,jint int_3,jint int_4);
				java::io::File get_last_saved_image_file();
				void SetCenterPosition(jint int_0,jint int_1);
				void ClearCenterPosition();
				void set_show_selected_rect(jboolean boolean_0);
				void set_record_images(jboolean boolean_0);
				void AddPaintablePanelMouseListener(java::awt::event::MouseListener mouseListener_0);
				void AddPaintablePanelMouseMotionListener(java::awt::event::MouseMotionListener mouseMotionListener_0);
				void Scroll_To_XY(jint int_0,jint int_1);
				java::awt::Rectangle get_selected_scaled_rect();
				void set_hide_byte_array(jboolean boolean_0);
				java::awt::image::BufferedImage GetByteArrayImage();
			}; // end class ImageJPanel
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class WatchVar : public java::lang::Object {
				public:
			            WatchVar(jobject _jthis, bool copy);
			            WatchVar(const WatchVar &);
			        
				WatchVar(jstring string_0);
				virtual ~WatchVar();
				jint get_var_count_size();
				jboolean get_new_struct();
				jboolean get_open();
				void set_open(jboolean boolean_0);
				jboolean get_expanded();
				jint get_num_children();
				jint get_var_number();
				WatchVar get_child(jint int_0);
				CodeGen::StructureTypeInfo get_sti();
				void set_expanded(jboolean boolean_0);
				void set_ndla(jboolean boolean_0);
				void set_new_struct(jboolean boolean_0);
				void set_sti(CodeGen::StructureTypeInfo structureTypeInfo_0);
				void setEnum_info(CodeGen::EnumTypeInfo enumTypeInfo_0);
				void setEnumeration(jboolean boolean_0);
				void set_var_number(jint int_0);
				jstring get_plotName();
				void set_plotName(jstring string_0);
				void set_parent(WatchVar watchVar_0);
				jint get_struct_level();
				void set_struct_level(jint int_0);
				void set_is_array(jboolean boolean_0);
				void add_child(WatchVar watchVar_0);
				jboolean get_is_array();
				jboolean isEnumeration();
				CodeGen::EnumTypeInfo getEnum_info();
				jboolean get_ndla();
				WatchVar get_parent();
				jstring get_varname();
				void set_varname(jstring string_0);
				jstring toString();
			}; // end class WatchVar
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class ImagePainter : public java::lang::Object {
				public:
			            ImagePainter(jobject _jthis, bool copy);
			            ImagePainter(const ImagePainter &);
			        
				ImagePainter();
				virtual ~ImagePainter();
				java::awt::image::BufferedImage getImage();
				void paintComponent(java::awt::Graphics graphics_0);
				void refresh();
				java::awt::Rectangle get_selected_rect();
				void set_selected_rect(java::awt::Rectangle rectangle_0);
				void setSub_painter(PainterInterface painterInterface_0);
				jint get_xstart();
				jint get_ystart();
				jdouble get_scale();
				void SetFit(jboolean boolean_0);
				void SetZoom(jint int_0);
				void LoadByteArray(jbyteArray byteArray_0,jint int_1,jint int_2);
				void LoadImage(jstring string_0);
				void LoadImage(java::awt::image::BufferedImage bufferedImage_0);
				void LoadImageF(java::io::File file_0);
				void ClearImage();
				void SetStartPos(jint int_0,jint int_1);
				void CombineByteArray(jbyteArray byteArray_0,jint int_1,jint int_2,jint int_3,jint int_4);
				void ClearMarks();
				void AddMark(jbyte byte_0,jbyte byte_1,jbyte byte_2,jint int_3,jint int_4);
				java::io::File get_last_saved_image_file();
				void set_show_selected_rect(jboolean boolean_0);
				void set_record_images(jboolean boolean_0);
				void set_hide_byte_array(jboolean boolean_0);
				java::awt::image::BufferedImage GetByteArrayImage();
				void SetVP(jint int_0,jint int_1);
				void SetComponent(javax::swing::JPanel jPanel_0);
				java::awt::Rectangle get_scaled_selected_rect();
				jint GetZoom();
				void ReloadImage();
				PainterInterface getSub_painter();
			}; // end class ImagePainter
		} // end namespace diagapplet
	} // end namespace utils

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class Track : public java::lang::Object {
						public:
					            Track(jobject _jthis, bool copy);
					            Track(const Track &);
					        
						Track();
						virtual ~Track();
						java::util::List getData();
						void setData(java::util::List list_0);
					}; // end class Track
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class TrackPoint : public rcs::posemath::PmCartesian {
						public:
					            TrackPoint(jobject _jthis, bool copy);
					            TrackPoint(const TrackPoint &);
					        
						TrackPoint(jdouble double_0,jdouble double_1,jdouble double_2,rcs::posemath::PmRpy pmRpy_3);
						TrackPoint();
						virtual ~TrackPoint();
						jdouble distance(TrackPoint trackPoint_0);
						rcs::posemath::PmRpy getRpy();
						void setRoll(jdouble double_0);
						jdouble getRoll();
						jdouble getPitch();
						jdouble getYaw();
						void setPitch(jdouble double_0);
						void setYaw(jdouble double_0);
						void setRpy(rcs::posemath::PmRpy pmRpy_0);
						jstring toString();
					}; // end class TrackPoint
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class CsvParseOptions : public java::lang::Object {
						public:
					            CsvParseOptions(jobject _jthis, bool copy);
					            CsvParseOptions(const CsvParseOptions &);
					        
						CsvParseOptions();
						virtual ~CsvParseOptions();
						jstring toString();
						CsvParseOptions clone();
					}; // end class CsvParseOptions
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class Scene3DController : public java::lang::Object {
						public:
					            Scene3DController(jobject _jthis, bool copy);
					            Scene3DController(const Scene3DController &);
					        
						Scene3DController();
						virtual ~Scene3DController();
						void removePropertyChangeListener(java::beans::PropertyChangeListener propertyChangeListener_0);
						void addPropertyChangeListener(java::beans::PropertyChangeListener propertyChangeListener_0);
						javafx::scene::transform::Scale getS();
						void setS(javafx::scene::transform::Scale scale_0);
						void setP(javafx::scene::transform::Translate translate_0);
						javafx::scene::transform::Translate getP();
						void setDistScale(jdouble double_0);
						void setupSubscene(javafx::scene::SubScene subScene_0,jdouble double_1,jdouble double_2);
						javafx::scene::transform::Translate getCenterWinTranslate();
						void setSingleTrack(Track track_0);
						void addTrack(Track track_0);
						void autoSetScale();
						javafx::scene::Scene create3DScene(jint int_0,jint int_1);
						javafx::scene::SubScene create3DSubScene(javafx::scene::Parent parent_0,jdouble double_1,jdouble double_2);
						javafx::scene::transform::Rotate getRzmain();
						void setRzmain(javafx::scene::transform::Rotate rotate_0);
						java::util::HashMap getTrackGroupMap();
						void setTrackGroupMap(java::util::HashMap hashMap_0);
						java::util::HashMap getTrackListGroupMap();
						void setTrackListGroupMap(java::util::HashMap hashMap_0);
						java::util::HashMap getTrackCurPosGroupMap();
						void setTrackCurPosGroupMap(java::util::HashMap hashMap_0);
						View3DDragEnum getDragEnum();
						void setDragEnum(View3DDragEnum view3DDragEnum_0);
						jdouble getDistScale();
						jboolean isShowRotationFrames();
						void setShowRotationFrames(jboolean boolean_0);
						void setTracksList(java::util::List list_0);
						java::util::List getTracksList();
						void updateTracksList(java::util::List list_0);
						void composeRotation(jdouble double_0,org::apache::commons::math3::geometry::euclidean::threed::Vector3D vector3D_1,javafx::scene::transform::Rotate rotate_2);
						jboolean isLeftMultiplySelected();
						void setLeftMultiplySelected(jboolean boolean_0);
						javafx::scene::transform::Rotate getRxy();
						void setRxy(javafx::scene::transform::Rotate rotate_0);
						void setupTransforms();
						jstring getTransformText();
						void updateSize(jint int_0,jint int_1);
						void refreshScene(java::util::List list_0);
						javafx::scene::transform::Rotate getRz();
						void setRz(javafx::scene::transform::Rotate rotate_0);
						javafx::scene::transform::Translate getT();
						void setT(javafx::scene::transform::Translate translate_0);
						javafx::scene::transform::Translate getTmain();
						void setTmain(javafx::scene::transform::Translate translate_0);
						javafx::scene::transform::Rotate getRxmain();
						void setRxmain(javafx::scene::transform::Rotate rotate_0);
						javafx::scene::transform::Rotate getRymain();
						void setRymain(javafx::scene::transform::Rotate rotate_0);
						javafx::scene::transform::Translate getIp();
						void setIp(javafx::scene::transform::Translate translate_0);
						javafx::scene::Node getContentGroup();
						void setContentGroup(javafx::scene::Node node_0);
						void setCenterWinTranslate(javafx::scene::transform::Translate translate_0);
						javafx::scene::input::MouseEvent getLastMouseEvent();
						void setLastMouseEvent(javafx::scene::input::MouseEvent mouseEvent_0);
						void clear();
					}; // end class Scene3DController
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class TrackUtils : public java::lang::Object {
						public:
					            TrackUtils(jobject _jthis, bool copy);
					            TrackUtils(const TrackUtils &);
					        
						virtual ~TrackUtils();
						static jdouble getAutoScale(java::util::List list_0);
						static Track getTest1Track();
						static Track readTrack(CsvParseOptions csvParseOptions_0,java::io::File file_1);
						static Track toTrack(java::util::List list_0);
						static java::util::stream::Stream allPoints(java::util::List list_0);
						static jdouble maxStream(java::util::stream::Stream stream_0,java::util::function::ToDoubleFunction toDoubleFunction_1);
						static jdouble minStream(java::util::stream::Stream stream_0,java::util::function::ToDoubleFunction toDoubleFunction_1);
					}; // end class TrackUtils
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class LeastSquaresProblem : public java::lang::Object {
								public:
							            LeastSquaresProblem(jobject _jthis, bool copy);
							            LeastSquaresProblem(const LeastSquaresProblem &);
							        
								LeastSquaresProblem();
								virtual ~LeastSquaresProblem();
							}; // end class LeastSquaresProblem
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class LeastSquaresOptimizer : public java::lang::Object {
								public:
							            LeastSquaresOptimizer(jobject _jthis, bool copy);
							            LeastSquaresOptimizer(const LeastSquaresOptimizer &);
							        
								LeastSquaresOptimizer();
								virtual ~LeastSquaresOptimizer();
							}; // end class LeastSquaresOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class OptimumImpl : public java::lang::Object {
								public:
							            OptimumImpl(jobject _jthis, bool copy);
							            OptimumImpl(const OptimumImpl &);
							        
								virtual ~OptimumImpl();
								linear::RealVector getPoint();
								jint getEvaluations();
								jdouble getRMS();
								linear::RealMatrix getCovariances(jdouble double_0);
								linear::RealVector getSigma(jdouble double_0);
								jint getIterations();
								linear::RealMatrix getJacobian();
								jdouble getCost();
								linear::RealVector getResiduals();
							}; // end class OptimumImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class DenseWeightedEvaluation : public AbstractEvaluation {
								public:
							            DenseWeightedEvaluation(jobject _jthis, bool copy);
							            DenseWeightedEvaluation(const DenseWeightedEvaluation &);
							        
								virtual ~DenseWeightedEvaluation();
								linear::RealVector getPoint();
								linear::RealMatrix getJacobian();
								linear::RealVector getResiduals();
							}; // end class DenseWeightedEvaluation
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class LeastSquaresAdapter : public java::lang::Object {
								public:
							            LeastSquaresAdapter(jobject _jthis, bool copy);
							            LeastSquaresAdapter(const LeastSquaresAdapter &);
							        
								LeastSquaresAdapter(LeastSquaresProblem leastSquaresProblem_0);
								virtual ~LeastSquaresAdapter();
								LeastSquaresProblem::Evaluation evaluate(linear::RealVector realVector_0);
								optim::ConvergenceChecker getConvergenceChecker();
								linear::RealVector getStart();
								util::Incrementor getIterationCounter();
								util::Incrementor getEvaluationCounter();
								jint getParameterSize();
								jint getObservationSize();
							}; // end class LeastSquaresAdapter
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class LevenbergMarquardtOptimizer : public java::lang::Object {
								public:
							            LevenbergMarquardtOptimizer(jobject _jthis, bool copy);
							            LevenbergMarquardtOptimizer(const LevenbergMarquardtOptimizer &);
							        
								LevenbergMarquardtOptimizer(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
								LevenbergMarquardtOptimizer();
								virtual ~LevenbergMarquardtOptimizer();
								LevenbergMarquardtOptimizer withCostRelativeTolerance(jdouble double_0);
								LevenbergMarquardtOptimizer withParameterRelativeTolerance(jdouble double_0);
								LevenbergMarquardtOptimizer withOrthoTolerance(jdouble double_0);
								LevenbergMarquardtOptimizer withRankingThreshold(jdouble double_0);
								jdouble getParameterRelativeTolerance();
								jdouble getOrthoTolerance();
								jdouble getRankingThreshold();
								LevenbergMarquardtOptimizer withInitialStepBoundFactor(jdouble double_0);
								jdouble getCostRelativeTolerance();
								jdouble getInitialStepBoundFactor();
								LeastSquaresOptimizer::Optimum optimize(LeastSquaresProblem leastSquaresProblem_0);
							}; // end class LevenbergMarquardtOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class GaussNewtonOptimizer : public java::lang::Object {
								public:
							            GaussNewtonOptimizer(jobject _jthis, bool copy);
							            GaussNewtonOptimizer(const GaussNewtonOptimizer &);
							        
								GaussNewtonOptimizer();
								GaussNewtonOptimizer(GaussNewtonOptimizer::Decomposition decomposition_0);
								virtual ~GaussNewtonOptimizer();
								GaussNewtonOptimizer::Decomposition getDecomposition();
								GaussNewtonOptimizer withDecomposition(GaussNewtonOptimizer::Decomposition decomposition_0);
								jstring toString();
								LeastSquaresOptimizer::Optimum optimize(LeastSquaresProblem leastSquaresProblem_0);
							}; // end class GaussNewtonOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							
							class ValueAndJacobianFunction : public java::lang::Object {
								public:
							            ValueAndJacobianFunction(jobject _jthis, bool copy);
							            ValueAndJacobianFunction(const ValueAndJacobianFunction &);
							        
								ValueAndJacobianFunction();
								virtual ~ValueAndJacobianFunction();
							}; // end class ValueAndJacobianFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace fitting
	} // end namespace leastsquares

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class PolynomialFitter : public CurveFitter {
							public:
						            PolynomialFitter(jobject _jthis, bool copy);
						            PolynomialFitter(const PolynomialFitter &);
						        
							PolynomialFitter(optim::nonlinear::vector::MultivariateVectorOptimizer multivariateVectorOptimizer_0);
							virtual ~PolynomialFitter();
							jdoubleArray fit(jint int_0,jdoubleArray doubleArray_1);
							jdoubleArray fit(jdoubleArray doubleArray_0);
						}; // end class PolynomialFitter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class WeightedObservedPoint : public java::lang::Object {
							public:
						            WeightedObservedPoint(jobject _jthis, bool copy);
						            WeightedObservedPoint(const WeightedObservedPoint &);
						        
							WeightedObservedPoint(jdouble double_0,jdouble double_1,jdouble double_2);
							virtual ~WeightedObservedPoint();
							jdouble getX();
							jdouble getY();
							jdouble getWeight();
						}; // end class WeightedObservedPoint
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class WeightedObservedPoints : public java::lang::Object {
							public:
						            WeightedObservedPoints(jobject _jthis, bool copy);
						            WeightedObservedPoints(const WeightedObservedPoints &);
						        
							WeightedObservedPoints();
							virtual ~WeightedObservedPoints();
							java::util::List toList();
							void add(WeightedObservedPoint weightedObservedPoint_0);
							void add(jdouble double_0,jdouble double_1,jdouble double_2);
							void add(jdouble double_0,jdouble double_1);
							void clear();
						}; // end class WeightedObservedPoints
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class SimpleCurveFitter : public AbstractCurveFitter {
							public:
						            SimpleCurveFitter(jobject _jthis, bool copy);
						            SimpleCurveFitter(const SimpleCurveFitter &);
						        
							virtual ~SimpleCurveFitter();
							SimpleCurveFitter withStartPoint(jdoubleArray doubleArray_0);
							SimpleCurveFitter withMaxIterations(jint int_0);
							static SimpleCurveFitter create(analysis::ParametricUnivariateFunction parametricUnivariateFunction_0,jdoubleArray doubleArray_1);
						}; // end class SimpleCurveFitter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						
						class HarmonicFitter : public CurveFitter {
							public:
						            HarmonicFitter(jobject _jthis, bool copy);
						            HarmonicFitter(const HarmonicFitter &);
						        
							HarmonicFitter(optim::nonlinear::vector::MultivariateVectorOptimizer multivariateVectorOptimizer_0);
							virtual ~HarmonicFitter();
							jdoubleArray fit(jdoubleArray doubleArray_0);
							jdoubleArray fit();
						}; // end class HarmonicFitter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							
							class PolynomialSplineFunction : public java::lang::Object {
								public:
							            PolynomialSplineFunction(jobject _jthis, bool copy);
							            PolynomialSplineFunction(const PolynomialSplineFunction &);
							        
								PolynomialSplineFunction(jdoubleArray doubleArray_0,jobjectArray polynomialFunctionArray_1);
								virtual ~PolynomialSplineFunction();
								UnivariateFunction derivative();
								PolynomialSplineFunction polynomialSplineDerivative();
								jint getN();
								jboolean isValidPoint(jdouble double_0);
								jobjectArray getPolynomials();
								jdoubleArray getKnots();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class PolynomialSplineFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							
							class PolynomialFunctionNewtonForm : public java::lang::Object {
								public:
							            PolynomialFunctionNewtonForm(jobject _jthis, bool copy);
							            PolynomialFunctionNewtonForm(const PolynomialFunctionNewtonForm &);
							        
								PolynomialFunctionNewtonForm(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								virtual ~PolynomialFunctionNewtonForm();
								static jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
								jint degree();
								jdoubleArray getCoefficients();
								jdoubleArray getNewtonCoefficients();
								jdoubleArray getCenters();
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
								jdouble value(jdouble double_0);
							}; // end class PolynomialFunctionNewtonForm
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace polynomials{
							
							class PolynomialFunctionLagrangeForm : public java::lang::Object {
								public:
							            PolynomialFunctionLagrangeForm(jobject _jthis, bool copy);
							            PolynomialFunctionLagrangeForm(const PolynomialFunctionLagrangeForm &);
							        
								PolynomialFunctionLagrangeForm(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								virtual ~PolynomialFunctionLagrangeForm();
								jdoubleArray getInterpolatingPoints();
								static jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
								jint degree();
								jdoubleArray getCoefficients();
								static jboolean verifyInterpolationArray(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jboolean boolean_2);
								jdoubleArray getInterpolatingValues();
								jdouble value(jdouble double_0);
							}; // end class PolynomialFunctionLagrangeForm
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace polynomials

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class DSCompiler : public java::lang::Object {
								public:
							            DSCompiler(jobject _jthis, bool copy);
							            DSCompiler(const DSCompiler &);
							        
								virtual ~DSCompiler();
								void compose(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3,jint int_4);
								void multiply(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jdoubleArray doubleArray_4,jint int_5);
								void subtract(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jdoubleArray doubleArray_4,jint int_5);
								void rootN(jdoubleArray doubleArray_0,jint int_1,jint int_2,jdoubleArray doubleArray_3,jint int_4);
								void acosh(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void asinh(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void atanh(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								jdouble taylor(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2);
								void linearCombination(jdouble double_0,jdoubleArray doubleArray_1,jint int_2,jdouble double_3,jdoubleArray doubleArray_4,jint int_5,jdoubleArray doubleArray_6,jint int_7);
								void linearCombination(jdouble double_0,jdoubleArray doubleArray_1,jint int_2,jdouble double_3,jdoubleArray doubleArray_4,jint int_5,jdouble double_6,jdoubleArray doubleArray_7,jint int_8,jdoubleArray doubleArray_9,jint int_10);
								void linearCombination(jdouble double_0,jdoubleArray doubleArray_1,jint int_2,jdouble double_3,jdoubleArray doubleArray_4,jint int_5,jdouble double_6,jdoubleArray doubleArray_7,jint int_8,jdouble double_9,jdoubleArray doubleArray_10,jint int_11,jdoubleArray doubleArray_12,jint int_13);
								jint getFreeParameters();
								jint getOrder();
								static DSCompiler getCompiler(jint int_0,jint int_1);
								void checkCompatibility(DSCompiler dSCompiler_0);
								jint getPartialDerivativeIndex(jintArray intArray_0);
								jintArray getPartialDerivativeOrders(jint int_0);
								void add(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jdoubleArray doubleArray_4,jint int_5);
								void sin(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void cos(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void tan(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void atan2(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jdoubleArray doubleArray_4,jint int_5);
								void log(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void log10(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void pow(jdouble double_0,jdoubleArray doubleArray_1,jint int_2,jdoubleArray doubleArray_3,jint int_4);
								void pow(jdoubleArray doubleArray_0,jint int_1,jint int_2,jdoubleArray doubleArray_3,jint int_4);
								void pow(jdoubleArray doubleArray_0,jint int_1,jdouble double_2,jdoubleArray doubleArray_3,jint int_4);
								void pow(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jdoubleArray doubleArray_4,jint int_5);
								void exp(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								jint getSize();
								void divide(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jdoubleArray doubleArray_4,jint int_5);
								void remainder(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jdoubleArray doubleArray_4,jint int_5);
								void asin(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void acos(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void atan(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void sinh(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void cosh(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void tanh(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void expm1(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
								void log1p(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3);
							}; // end class DSCompiler
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class UnivariateVectorFunctionDifferentiator : public java::lang::Object {
								public:
							            UnivariateVectorFunctionDifferentiator(jobject _jthis, bool copy);
							            UnivariateVectorFunctionDifferentiator(const UnivariateVectorFunctionDifferentiator &);
							        
								UnivariateVectorFunctionDifferentiator();
								virtual ~UnivariateVectorFunctionDifferentiator();
							}; // end class UnivariateVectorFunctionDifferentiator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class UnivariateDifferentiableMatrixFunction : public java::lang::Object {
								public:
							            UnivariateDifferentiableMatrixFunction(jobject _jthis, bool copy);
							            UnivariateDifferentiableMatrixFunction(const UnivariateDifferentiableMatrixFunction &);
							        
								UnivariateDifferentiableMatrixFunction();
								virtual ~UnivariateDifferentiableMatrixFunction();
							}; // end class UnivariateDifferentiableMatrixFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class JacobianFunction : public java::lang::Object {
								public:
							            JacobianFunction(jobject _jthis, bool copy);
							            JacobianFunction(const JacobianFunction &);
							        
								JacobianFunction(MultivariateDifferentiableVectorFunction multivariateDifferentiableVectorFunction_0);
								virtual ~JacobianFunction();
							}; // end class JacobianFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class GradientFunction : public java::lang::Object {
								public:
							            GradientFunction(jobject _jthis, bool copy);
							            GradientFunction(const GradientFunction &);
							        
								GradientFunction(MultivariateDifferentiableFunction multivariateDifferentiableFunction_0);
								virtual ~GradientFunction();
								jdoubleArray value(jdoubleArray doubleArray_0);
							}; // end class GradientFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class FiniteDifferencesDifferentiator : public java::lang::Object {
								public:
							            FiniteDifferencesDifferentiator(jobject _jthis, bool copy);
							            FiniteDifferencesDifferentiator(const FiniteDifferencesDifferentiator &);
							        
								FiniteDifferencesDifferentiator(jint int_0,jdouble double_1);
								FiniteDifferencesDifferentiator(jint int_0,jdouble double_1,jdouble double_2,jdouble double_3);
								virtual ~FiniteDifferencesDifferentiator();
								UnivariateDifferentiableFunction differentiate(UnivariateFunction univariateFunction_0);
								UnivariateDifferentiableVectorFunction differentiate(UnivariateVectorFunction univariateVectorFunction_0);
								UnivariateDifferentiableMatrixFunction differentiate(UnivariateMatrixFunction univariateMatrixFunction_0);
								jint getNbPoints();
								jdouble getStepSize();
							}; // end class FiniteDifferencesDifferentiator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Acos : public java::lang::Object {
								public:
							            Acos(jobject _jthis, bool copy);
							            Acos(const Acos &);
							        
								Acos();
								virtual ~Acos();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Acos
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Logistic : public java::lang::Object {
								public:
							            Logistic(jobject _jthis, bool copy);
							            Logistic(const Logistic &);
							        
								Logistic(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
								virtual ~Logistic();
								UnivariateFunction derivative();
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
								jdouble value(jdouble double_0);
							}; // end class Logistic
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Log1p : public java::lang::Object {
								public:
							            Log1p(jobject _jthis, bool copy);
							            Log1p(const Log1p &);
							        
								Log1p();
								virtual ~Log1p();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Log1p
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Multiply : public java::lang::Object {
								public:
							            Multiply(jobject _jthis, bool copy);
							            Multiply(const Multiply &);
							        
								Multiply();
								virtual ~Multiply();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class Multiply
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Constant : public java::lang::Object {
								public:
							            Constant(jobject _jthis, bool copy);
							            Constant(const Constant &);
							        
								Constant(jdouble double_0);
								virtual ~Constant();
								DifferentiableUnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Constant
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Cbrt : public java::lang::Object {
								public:
							            Cbrt(jobject _jthis, bool copy);
							            Cbrt(const Cbrt &);
							        
								Cbrt();
								virtual ~Cbrt();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Cbrt
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Logit : public java::lang::Object {
								public:
							            Logit(jobject _jthis, bool copy);
							            Logit(const Logit &);
							        
								Logit();
								Logit(jdouble double_0,jdouble double_1);
								virtual ~Logit();
								UnivariateFunction derivative();
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
								jdouble value(jdouble double_0);
							}; // end class Logit
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class HarmonicOscillator : public java::lang::Object {
								public:
							            HarmonicOscillator(jobject _jthis, bool copy);
							            HarmonicOscillator(const HarmonicOscillator &);
							        
								HarmonicOscillator(jdouble double_0,jdouble double_1,jdouble double_2);
								virtual ~HarmonicOscillator();
								UnivariateFunction derivative();
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
								jdouble value(jdouble double_0);
							}; // end class HarmonicOscillator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Log10 : public java::lang::Object {
								public:
							            Log10(jobject _jthis, bool copy);
							            Log10(const Log10 &);
							        
								Log10();
								virtual ~Log10();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Log10
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Sinh : public java::lang::Object {
								public:
							            Sinh(jobject _jthis, bool copy);
							            Sinh(const Sinh &);
							        
								Sinh();
								virtual ~Sinh();
								DifferentiableUnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Sinh
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Ulp : public java::lang::Object {
								public:
							            Ulp(jobject _jthis, bool copy);
							            Ulp(const Ulp &);
							        
								Ulp();
								virtual ~Ulp();
								jdouble value(jdouble double_0);
							}; // end class Ulp
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Max : public java::lang::Object {
								public:
							            Max(jobject _jthis, bool copy);
							            Max(const Max &);
							        
								Max();
								virtual ~Max();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class Max
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class DifferentiableUnivariateSolver : public java::lang::Object {
								public:
							            DifferentiableUnivariateSolver(jobject _jthis, bool copy);
							            DifferentiableUnivariateSolver(const DifferentiableUnivariateSolver &);
							        
								DifferentiableUnivariateSolver();
								virtual ~DifferentiableUnivariateSolver();
							}; // end class DifferentiableUnivariateSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class SecantSolver : public AbstractUnivariateSolver {
								public:
							            SecantSolver(jobject _jthis, bool copy);
							            SecantSolver(const SecantSolver &);
							        
								SecantSolver();
								SecantSolver(jdouble double_0,jdouble double_1);
								SecantSolver(jdouble double_0);
								virtual ~SecantSolver();
							}; // end class SecantSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class AkimaSplineInterpolator : public java::lang::Object {
								public:
							            AkimaSplineInterpolator(jobject _jthis, bool copy);
							            AkimaSplineInterpolator(const AkimaSplineInterpolator &);
							        
								AkimaSplineInterpolator();
								virtual ~AkimaSplineInterpolator();
								polynomials::PolynomialSplineFunction interpolate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class AkimaSplineInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class DifferentiableUnivariateMatrixFunction : public java::lang::Object {
							public:
						            DifferentiableUnivariateMatrixFunction(jobject _jthis, bool copy);
						            DifferentiableUnivariateMatrixFunction(const DifferentiableUnivariateMatrixFunction &);
						        
							DifferentiableUnivariateMatrixFunction();
							virtual ~DifferentiableUnivariateMatrixFunction();
						}; // end class DifferentiableUnivariateMatrixFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class AdamsMoultonIntegrator : public AdamsIntegrator {
								public:
							            AdamsMoultonIntegrator(jobject _jthis, bool copy);
							            AdamsMoultonIntegrator(const AdamsMoultonIntegrator &);
							        
								AdamsMoultonIntegrator(jint int_0,jdouble double_1,jdouble double_2,jdoubleArray doubleArray_3,jdoubleArray doubleArray_4);
								AdamsMoultonIntegrator(jint int_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
								virtual ~AdamsMoultonIntegrator();
								void integrate(ExpandableStatefulODE expandableStatefulODE_0,jdouble double_1);
							}; // end class AdamsMoultonIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class HighamHall54StepInterpolator : public RungeKuttaStepInterpolator {
								public:
							            HighamHall54StepInterpolator(jobject _jthis, bool copy);
							            HighamHall54StepInterpolator(const HighamHall54StepInterpolator &);
							        
								HighamHall54StepInterpolator(HighamHall54StepInterpolator highamHall54StepInterpolator_0);
								HighamHall54StepInterpolator();
								virtual ~HighamHall54StepInterpolator();
							}; // end class HighamHall54StepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							
							class StepInterpolator : public java::lang::Object {
								public:
							            StepInterpolator(jobject _jthis, bool copy);
							            StepInterpolator(const StepInterpolator &);
							        
								StepInterpolator();
								virtual ~StepInterpolator();
							}; // end class StepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							
							class LevenbergMarquardtOptimizer : public AbstractLeastSquaresOptimizer {
								public:
							            LevenbergMarquardtOptimizer(jobject _jthis, bool copy);
							            LevenbergMarquardtOptimizer(const LevenbergMarquardtOptimizer &);
							        
								LevenbergMarquardtOptimizer();
								LevenbergMarquardtOptimizer(ConvergenceChecker convergenceChecker_0);
								LevenbergMarquardtOptimizer(jdouble double_0,ConvergenceChecker convergenceChecker_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
								LevenbergMarquardtOptimizer(jdouble double_0,jdouble double_1,jdouble double_2);
								LevenbergMarquardtOptimizer(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
								virtual ~LevenbergMarquardtOptimizer();
							}; // end class LevenbergMarquardtOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class SimplexOptimizer : public BaseAbstractMultivariateOptimizer {
								public:
							            SimplexOptimizer(jobject _jthis, bool copy);
							            SimplexOptimizer(const SimplexOptimizer &);
							        
								SimplexOptimizer(jdouble double_0,jdouble double_1);
								SimplexOptimizer(ConvergenceChecker convergenceChecker_0);
								SimplexOptimizer();
								virtual ~SimplexOptimizer();
								void setSimplex(AbstractSimplex abstractSimplex_0);
							}; // end class SimplexOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class BOBYQAOptimizer : public BaseAbstractMultivariateSimpleBoundsOptimizer {
								public:
							            BOBYQAOptimizer(jobject _jthis, bool copy);
							            BOBYQAOptimizer(const BOBYQAOptimizer &);
							        
								BOBYQAOptimizer(jint int_0);
								BOBYQAOptimizer(jint int_0,jdouble double_1,jdouble double_2);
								virtual ~BOBYQAOptimizer();
							}; // end class BOBYQAOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							
							class LinearConstraint : public java::lang::Object {
								public:
							            LinearConstraint(jobject _jthis, bool copy);
							            LinearConstraint(const LinearConstraint &);
							        
								LinearConstraint(jdoubleArray doubleArray_0,Relationship relationship_1,jdouble double_2);
								LinearConstraint(linear::RealVector realVector_0,jdouble double_1,Relationship relationship_2,linear::RealVector realVector_3,jdouble double_4);
								LinearConstraint(jdoubleArray doubleArray_0,jdouble double_1,Relationship relationship_2,jdoubleArray doubleArray_3,jdouble double_4);
								LinearConstraint(linear::RealVector realVector_0,Relationship relationship_1,jdouble double_2);
								virtual ~LinearConstraint();
								linear::RealVector getCoefficients();
								Relationship getRelationship();
								jint hashCode();
								jdouble getValue();
							}; // end class LinearConstraint
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace linear{
							
							class UnboundedSolutionException : public exception::MathIllegalStateException {
								public:
							            UnboundedSolutionException(jobject _jthis, bool copy);
							            UnboundedSolutionException(const UnboundedSolutionException &);
							        
								UnboundedSolutionException();
								virtual ~UnboundedSolutionException();
							}; // end class UnboundedSolutionException
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace fitting{
							
							class WeightedObservedPoint : public java::lang::Object {
								public:
							            WeightedObservedPoint(jobject _jthis, bool copy);
							            WeightedObservedPoint(const WeightedObservedPoint &);
							        
								WeightedObservedPoint(jdouble double_0,jdouble double_1,jdouble double_2);
								virtual ~WeightedObservedPoint();
								jdouble getX();
								jdouble getY();
								jdouble getWeight();
							}; // end class WeightedObservedPoint
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace fitting

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class PointValuePair : public util::Pair {
							public:
						            PointValuePair(jobject _jthis, bool copy);
						            PointValuePair(const PointValuePair &);
						        
							PointValuePair(jdoubleArray doubleArray_0,jdouble double_1);
							PointValuePair(jdoubleArray doubleArray_0,jdouble double_1,jboolean boolean_2);
							virtual ~PointValuePair();
							jdoubleArray getPoint();
							jdoubleArray getPointRef();
						}; // end class PointValuePair
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class OptimizationData : public java::lang::Object {
							public:
						            OptimizationData(jobject _jthis, bool copy);
						            OptimizationData(const OptimizationData &);
						        
							OptimizationData();
							virtual ~OptimizationData();
						}; // end class OptimizationData
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class PointVectorValuePair : public util::Pair {
							public:
						            PointVectorValuePair(jobject _jthis, bool copy);
						            PointVectorValuePair(const PointVectorValuePair &);
						        
							PointVectorValuePair(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jboolean boolean_2);
							PointVectorValuePair(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							virtual ~PointVectorValuePair();
							jdoubleArray getPoint();
							jdoubleArray getValueRef();
							jdoubleArray getPointRef();
							jdoubleArray getValue();
						}; // end class PointVectorValuePair
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class BaseMultivariateSimpleBoundsOptimizer : public java::lang::Object {
							public:
						            BaseMultivariateSimpleBoundsOptimizer(jobject _jthis, bool copy);
						            BaseMultivariateSimpleBoundsOptimizer(const BaseMultivariateSimpleBoundsOptimizer &);
						        
							BaseMultivariateSimpleBoundsOptimizer();
							virtual ~BaseMultivariateSimpleBoundsOptimizer();
						}; // end class BaseMultivariateSimpleBoundsOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class MultivariateOptimizer : public java::lang::Object {
							public:
						            MultivariateOptimizer(jobject _jthis, bool copy);
						            MultivariateOptimizer(const MultivariateOptimizer &);
						        
							MultivariateOptimizer();
							virtual ~MultivariateOptimizer();
						}; // end class MultivariateOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class DifferentiableMultivariateMultiStartOptimizer : public BaseMultivariateMultiStartOptimizer {
							public:
						            DifferentiableMultivariateMultiStartOptimizer(jobject _jthis, bool copy);
						            DifferentiableMultivariateMultiStartOptimizer(const DifferentiableMultivariateMultiStartOptimizer &);
						        
							DifferentiableMultivariateMultiStartOptimizer(DifferentiableMultivariateOptimizer differentiableMultivariateOptimizer_0,jint int_1,random::RandomVectorGenerator randomVectorGenerator_2);
							virtual ~DifferentiableMultivariateMultiStartOptimizer();
						}; // end class DifferentiableMultivariateMultiStartOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						
						class ComplexUtils : public java::lang::Object {
							public:
						            ComplexUtils(jobject _jthis, bool copy);
						            ComplexUtils(const ComplexUtils &);
						        
							virtual ~ComplexUtils();
							static Complex polar2Complex(jdouble double_0,jdouble double_1);
							static jobjectArray convertToComplex(jdoubleArray doubleArray_0);
						}; // end class ComplexUtils
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						
						class BracketingNthOrderBrentSolverDFP : public java::lang::Object {
							public:
						            BracketingNthOrderBrentSolverDFP(jobject _jthis, bool copy);
						            BracketingNthOrderBrentSolverDFP(const BracketingNthOrderBrentSolverDFP &);
						        
							BracketingNthOrderBrentSolverDFP(Dfp dfp_0,Dfp dfp_1,Dfp dfp_2,jint int_3);
							virtual ~BracketingNthOrderBrentSolverDFP();
							jint getEvaluations();
							jint getMaxEvaluations();
							Dfp getAbsoluteAccuracy();
							Dfp getRelativeAccuracy();
							Dfp getFunctionValueAccuracy();
							Dfp solve(jint int_0,UnivariateDfpFunction univariateDfpFunction_1,Dfp dfp_2,Dfp dfp_3,analysis::solvers::AllowedSolution allowedSolution_4);
							Dfp solve(jint int_0,UnivariateDfpFunction univariateDfpFunction_1,Dfp dfp_2,Dfp dfp_3,Dfp dfp_4,analysis::solvers::AllowedSolution allowedSolution_5);
							jint getMaximalOrder();
						}; // end class BracketingNthOrderBrentSolverDFP
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						
						class DfpDec : public Dfp {
							public:
						            DfpDec(jobject _jthis, bool copy);
						            DfpDec(const DfpDec &);
						        
							DfpDec(Dfp dfp_0);
							virtual ~DfpDec();
							Dfp newInstance(Dfp dfp_0);
							Dfp newInstance(jdouble double_0);
							Dfp newInstance(jstring string_0);
							Dfp newInstance(jbyte byte_0,jbyte byte_1);
							Dfp newInstance();
							Dfp newInstance(jbyte byte_0);
							Dfp newInstance(jint int_0);
							Dfp newInstance(jlong long_0);
							Dfp nextAfter(Dfp dfp_0);
						}; // end class DfpDec
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						
						class Gamma : public java::lang::Object {
							public:
						            Gamma(jobject _jthis, bool copy);
						            Gamma(const Gamma &);
						        
							virtual ~Gamma();
							static jdouble gamma(jdouble double_0);
							static jdouble regularizedGammaQ(jdouble double_0,jdouble double_1);
							static jdouble regularizedGammaQ(jdouble double_0,jdouble double_1,jdouble double_2,jint int_3);
							static jdouble logGamma1p(jdouble double_0);
							static jdouble logGamma(jdouble double_0);
							static jdouble digamma(jdouble double_0);
							static jdouble regularizedGammaP(jdouble double_0,jdouble double_1,jdouble double_2,jint int_3);
							static jdouble regularizedGammaP(jdouble double_0,jdouble double_1);
							static jdouble trigamma(jdouble double_0);
							static jdouble lanczos(jdouble double_0);
							static jdouble invGamma1pm1(jdouble double_0);
						}; // end class Gamma
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace special

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace primes{
						
						class Primes : public java::lang::Object {
							public:
						            Primes(jobject _jthis, bool copy);
						            Primes(const Primes &);
						        
							virtual ~Primes();
							static jint nextPrime(jint int_0);
							static java::util::List primeFactors(jint int_0);
							static jboolean isPrime(jint int_0);
						}; // end class Primes
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace primes

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace primes{
						
						class PollardRho : public java::lang::Object {
							public:
						            PollardRho(jobject _jthis, bool copy);
						            PollardRho(const PollardRho &);
						        
							virtual ~PollardRho();
							static java::util::List primeFactors(jint int_0);
						}; // end class PollardRho
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace primes

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						
						class DefaultMeasurementModel : public java::lang::Object {
							public:
						            DefaultMeasurementModel(jobject _jthis, bool copy);
						            DefaultMeasurementModel(const DefaultMeasurementModel &);
						        
							DefaultMeasurementModel(linear::RealMatrix realMatrix_0,linear::RealMatrix realMatrix_1);
							virtual ~DefaultMeasurementModel();
							linear::RealMatrix getMeasurementMatrix();
							linear::RealMatrix getMeasurementNoise();
						}; // end class DefaultMeasurementModel
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						
						class ProcessModel : public java::lang::Object {
							public:
						            ProcessModel(jobject _jthis, bool copy);
						            ProcessModel(const ProcessModel &);
						        
							ProcessModel();
							virtual ~ProcessModel();
						}; // end class ProcessModel
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace filter{
						
						class KalmanFilter : public java::lang::Object {
							public:
						            KalmanFilter(jobject _jthis, bool copy);
						            KalmanFilter(const KalmanFilter &);
						        
							KalmanFilter(ProcessModel processModel_0,MeasurementModel measurementModel_1);
							virtual ~KalmanFilter();
							jint getStateDimension();
							jint getMeasurementDimension();
							jdoubleArray getStateEstimation();
							linear::RealVector getStateEstimationVector();
							linear::RealMatrix getErrorCovarianceMatrix();
							void predict(linear::RealVector realVector_0);
							void predict();
							void predict(jdoubleArray doubleArray_0);
							void correct(jdoubleArray doubleArray_0);
							void correct(linear::RealVector realVector_0);
						}; // end class KalmanFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace filter

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								namespace jacobian{
									
									class GaussNewtonOptimizer : public AbstractLeastSquaresOptimizer {
										public:
									            GaussNewtonOptimizer(jobject _jthis, bool copy);
									            GaussNewtonOptimizer(const GaussNewtonOptimizer &);
									        
										GaussNewtonOptimizer(jboolean boolean_0,ConvergenceChecker convergenceChecker_1);
										GaussNewtonOptimizer(ConvergenceChecker convergenceChecker_0);
										virtual ~GaussNewtonOptimizer();
										PointVectorValuePair doOptimize();
									}; // end class GaussNewtonOptimizer
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace vector
	} // end namespace jacobian

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								
								class Target : public java::lang::Object {
									public:
								            Target(jobject _jthis, bool copy);
								            Target(const Target &);
								        
									Target(jdoubleArray doubleArray_0);
									virtual ~Target();
									jdoubleArray getTarget();
								}; // end class Target
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								
								class ModelFunctionJacobian : public java::lang::Object {
									public:
								            ModelFunctionJacobian(jobject _jthis, bool copy);
								            ModelFunctionJacobian(const ModelFunctionJacobian &);
								        
									ModelFunctionJacobian(analysis::MultivariateMatrixFunction multivariateMatrixFunction_0);
									virtual ~ModelFunctionJacobian();
									analysis::MultivariateMatrixFunction getModelFunctionJacobian();
								}; // end class ModelFunctionJacobian
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								
								class ModelFunction : public java::lang::Object {
									public:
								            ModelFunction(jobject _jthis, bool copy);
								            ModelFunction(const ModelFunction &);
								        
									ModelFunction(analysis::MultivariateVectorFunction multivariateVectorFunction_0);
									virtual ~ModelFunction();
									analysis::MultivariateVectorFunction getModelFunction();
								}; // end class ModelFunction
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									
									class NelderMeadSimplex : public AbstractSimplex {
										public:
									            NelderMeadSimplex(jobject _jthis, bool copy);
									            NelderMeadSimplex(const NelderMeadSimplex &);
									        
										NelderMeadSimplex(jdoubleArray doubleArray_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
										NelderMeadSimplex(jint int_0);
										NelderMeadSimplex(jint int_0,jdouble double_1);
										NelderMeadSimplex(jint int_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
										NelderMeadSimplex(jint int_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
										NelderMeadSimplex(jdoubleArray doubleArray_0);
										virtual ~NelderMeadSimplex();
										void iterate(analysis::MultivariateFunction multivariateFunction_0,java::util::Comparator comparator_1);
									}; // end class NelderMeadSimplex
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									
									class SimplexOptimizer : public MultivariateOptimizer {
										public:
									            SimplexOptimizer(jobject _jthis, bool copy);
									            SimplexOptimizer(const SimplexOptimizer &);
									        
										SimplexOptimizer(ConvergenceChecker convergenceChecker_0);
										SimplexOptimizer(jdouble double_0,jdouble double_1);
										virtual ~SimplexOptimizer();
										PointValuePair optimize(jobjectArray optimizationDataArray_0);
									}; // end class SimplexOptimizer
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class ObjectiveFunctionGradient : public java::lang::Object {
									public:
								            ObjectiveFunctionGradient(jobject _jthis, bool copy);
								            ObjectiveFunctionGradient(const ObjectiveFunctionGradient &);
								        
									ObjectiveFunctionGradient(analysis::MultivariateVectorFunction multivariateVectorFunction_0);
									virtual ~ObjectiveFunctionGradient();
									analysis::MultivariateVectorFunction getObjectiveFunctionGradient();
								}; // end class ObjectiveFunctionGradient
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class MultivariateFunctionPenaltyAdapter : public java::lang::Object {
									public:
								            MultivariateFunctionPenaltyAdapter(jobject _jthis, bool copy);
								            MultivariateFunctionPenaltyAdapter(const MultivariateFunctionPenaltyAdapter &);
								        
									MultivariateFunctionPenaltyAdapter(analysis::MultivariateFunction multivariateFunction_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2,jdouble double_3,jdoubleArray doubleArray_4);
									virtual ~MultivariateFunctionPenaltyAdapter();
									jdouble value(jdoubleArray doubleArray_0);
								}; // end class MultivariateFunctionPenaltyAdapter
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								
								class LineSearch : public java::lang::Object {
									public:
								            LineSearch(jobject _jthis, bool copy);
								            LineSearch(const LineSearch &);
								        
									LineSearch(MultivariateOptimizer multivariateOptimizer_0,jdouble double_1,jdouble double_2,jdouble double_3);
									virtual ~LineSearch();
									univariate::UnivariatePointValuePair search(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								}; // end class LineSearch
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace scalar

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class LinearConstraintSet : public java::lang::Object {
								public:
							            LinearConstraintSet(jobject _jthis, bool copy);
							            LinearConstraintSet(const LinearConstraintSet &);
							        
								LinearConstraintSet(java::util::Collection collection_0);
								LinearConstraintSet(jobjectArray linearConstraintArray_0);
								virtual ~LinearConstraintSet();
								java::util::Collection getConstraints();
							}; // end class LinearConstraintSet
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class OptimizationProblem : public java::lang::Object {
							public:
						            OptimizationProblem(jobject _jthis, bool copy);
						            OptimizationProblem(const OptimizationProblem &);
						        
							OptimizationProblem();
							virtual ~OptimizationProblem();
						}; // end class OptimizationProblem
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class TransformType : public java::lang::Enum {
							public:
						            TransformType(jobject _jthis, bool copy);
						            TransformType(const TransformType &);
						        
							virtual ~TransformType();
							static jobjectArray values();
							static TransformType valueOf(jstring string_0);
						}; // end class TransformType
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								
								class Arc : public java::lang::Object {
									public:
								            Arc(jobject _jthis, bool copy);
								            Arc(const Arc &);
								        
									Arc(jdouble double_0,jdouble double_1,jdouble double_2);
									virtual ~Arc();
									jdouble getTolerance();
									jdouble getBarycenter();
									partitioning::Region::Location checkPoint(jdouble double_0);
									jdouble getInf();
									jdouble getSup();
									jdouble getSize();
								}; // end class Arc
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								
								class SubLimitAngle : public partitioning::AbstractSubHyperplane {
									public:
								            SubLimitAngle(jobject _jthis, bool copy);
								            SubLimitAngle(const SubLimitAngle &);
								        
									SubLimitAngle(partitioning::Hyperplane hyperplane_0,partitioning::Region region_1);
									virtual ~SubLimitAngle();
									partitioning::Side side(partitioning::Hyperplane hyperplane_0);
									jboolean isEmpty();
									partitioning::SubHyperplane::SplitSubHyperplane split(partitioning::Hyperplane hyperplane_0);
									jdouble getSize();
								}; // end class SubLimitAngle
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								
								class Sphere1D : public java::lang::Object {
									public:
								            Sphere1D(jobject _jthis, bool copy);
								            Sphere1D(const Sphere1D &);
								        
									virtual ~Sphere1D();
									jint getDimension();
									Space getSubSpace();
									static Sphere1D getInstance();
								}; // end class Sphere1D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								
								class EdgesBuilder : public java::lang::Object {
									public:
								            EdgesBuilder(jobject _jthis, bool copy);
								            EdgesBuilder(const EdgesBuilder &);
								        
									EdgesBuilder(partitioning::BSPTree bSPTree_0,jdouble double_1);
									virtual ~EdgesBuilder();
									java::util::List getEdges();
									partitioning::BSPTreeVisitor::Order visitOrder(partitioning::BSPTree bSPTree_0);
									void visitInternalNode(partitioning::BSPTree bSPTree_0);
									void visitLeafNode(partitioning::BSPTree bSPTree_0);
								}; // end class EdgesBuilder
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								
								class PropertiesComputer : public java::lang::Object {
									public:
								            PropertiesComputer(jobject _jthis, bool copy);
								            PropertiesComputer(const PropertiesComputer &);
								        
									PropertiesComputer(jdouble double_0);
									virtual ~PropertiesComputer();
									jdouble getArea();
									java::util::List getConvexCellsInsidePoints();
									partitioning::BSPTreeVisitor::Order visitOrder(partitioning::BSPTree bSPTree_0);
									void visitInternalNode(partitioning::BSPTree bSPTree_0);
									void visitLeafNode(partitioning::BSPTree bSPTree_0);
									S2Point getBarycenter();
								}; // end class PropertiesComputer
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								
								class SphericalPolygonsSet : public partitioning::AbstractRegion {
									public:
								            SphericalPolygonsSet(jobject _jthis, bool copy);
								            SphericalPolygonsSet(const SphericalPolygonsSet &);
								        
									SphericalPolygonsSet(euclidean::threed::Vector3D vector3D_0,jdouble double_1);
									SphericalPolygonsSet(euclidean::threed::Vector3D vector3D_0,euclidean::threed::Vector3D vector3D_1,jdouble double_2,jint int_3,jdouble double_4);
									SphericalPolygonsSet(jdouble double_0);
									SphericalPolygonsSet(partitioning::BSPTree bSPTree_0,jdouble double_1);
									SphericalPolygonsSet(java::util::Collection collection_0,jdouble double_1);
									SphericalPolygonsSet(jdouble double_0,jobjectArray s2PointArray_1);
									virtual ~SphericalPolygonsSet();
									java::util::List getBoundaryLoops();
									enclosing::EnclosingBall getEnclosingCap();
									SphericalPolygonsSet buildNew(partitioning::BSPTree bSPTree_0);
								}; // end class SphericalPolygonsSet
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								
								class SubCircle : public partitioning::AbstractSubHyperplane {
									public:
								            SubCircle(jobject _jthis, bool copy);
								            SubCircle(const SubCircle &);
								        
									SubCircle(partitioning::Hyperplane hyperplane_0,partitioning::Region region_1);
									virtual ~SubCircle();
									partitioning::Side side(partitioning::Hyperplane hyperplane_0);
									partitioning::SubHyperplane::SplitSubHyperplane split(partitioning::Hyperplane hyperplane_0);
								}; // end class SubCircle
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								
								class S2Point : public java::lang::Object {
									public:
								            S2Point(jobject _jthis, bool copy);
								            S2Point(const S2Point &);
								        
									S2Point(euclidean::threed::Vector3D vector3D_0);
									S2Point(jdouble double_0,jdouble double_1);
									virtual ~S2Point();
									jdouble getTheta();
									jdouble getPhi();
									jdouble distance(Point point_0);
									static jdouble distance(S2Point s2Point_0,S2Point s2Point_1);
									S2Point negate();
									euclidean::threed::Vector3D getVector();
									jint hashCode();
									jboolean isNaN();
									Space getSpace();
								}; // end class S2Point
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								
								class Circle : public java::lang::Object {
									public:
								            Circle(jobject _jthis, bool copy);
								            Circle(const Circle &);
								        
									Circle(S2Point s2Point_0,S2Point s2Point_1,jdouble double_2);
									Circle(Circle circle_0);
									Circle(euclidean::threed::Vector3D vector3D_0,jdouble double_1);
									virtual ~Circle();
									euclidean::threed::Vector3D getPole();
									oned::Arc getInsideArc(Circle circle_0);
									euclidean::threed::Vector3D getPointAt(jdouble double_0);
									jdouble getPhase(euclidean::threed::Vector3D vector3D_0);
									void revertSelf();
									euclidean::threed::Vector3D getYAxis();
									static partitioning::Transform getTransform(euclidean::threed::Rotation rotation_0);
									SubCircle wholeHyperplane();
									Circle copySelf();
									jboolean sameOrientationAs(partitioning::Hyperplane hyperplane_0);
									jdouble getTolerance();
									euclidean::threed::Vector3D getXAxis();
									oned::S1Point toSubSpace(Point point_0);
									Point project(Point point_0);
									S2Point toSpace(Point point_0);
									SphericalPolygonsSet wholeSpace();
									Circle getReverse();
									void reset(euclidean::threed::Vector3D vector3D_0);
									jdouble getOffset(Point point_0);
									jdouble getOffset(euclidean::threed::Vector3D vector3D_0);
								}; // end class Circle
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								
								class Vertex : public java::lang::Object {
									public:
								            Vertex(jobject _jthis, bool copy);
								            Vertex(const Vertex &);
								        
									virtual ~Vertex();
									Edge getOutgoing();
									Edge getIncoming();
									S2Point getLocation();
								}; // end class Vertex
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								
								class Edge : public java::lang::Object {
									public:
								            Edge(jobject _jthis, bool copy);
								            Edge(const Edge &);
								        
									virtual ~Edge();
									Circle getCircle();
									euclidean::threed::Vector3D getPointAt(jdouble double_0);
									Vertex getStart();
									Vertex getEnd();
									jdouble getLength();
								}; // end class Edge
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace twod{
								
								class Sphere2D : public java::lang::Object {
									public:
								            Sphere2D(jobject _jthis, bool copy);
								            Sphere2D(const Sphere2D &);
								        
									virtual ~Sphere2D();
									jint getDimension();
									oned::Sphere1D getSubSpace();
									static Sphere2D getInstance();
								}; // end class Sphere2D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace enclosing{
							
							class EnclosingBall : public java::lang::Object {
								public:
							            EnclosingBall(jobject _jthis, bool copy);
							            EnclosingBall(const EnclosingBall &);
							        
								EnclosingBall(Point point_0,jdouble double_1,jobjectArray pointArray_2);
								virtual ~EnclosingBall();
								Point getCenter();
								jdouble getRadius();
								jint getSupportSize();
								jobjectArray getSupport();
								jboolean contains(Point point_0);
								jboolean contains(Point point_0,jdouble double_1);
							}; // end class EnclosingBall
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace enclosing

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace enclosing{
							
							class SupportBallGenerator : public java::lang::Object {
								public:
							            SupportBallGenerator(jobject _jthis, bool copy);
							            SupportBallGenerator(const SupportBallGenerator &);
							        
								SupportBallGenerator();
								virtual ~SupportBallGenerator();
							}; // end class SupportBallGenerator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace enclosing

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class SphericalCoordinates : public java::lang::Object {
									public:
								            SphericalCoordinates(jobject _jthis, bool copy);
								            SphericalCoordinates(const SphericalCoordinates &);
								        
									SphericalCoordinates(Vector3D vector3D_0);
									SphericalCoordinates(jdouble double_0,jdouble double_1,jdouble double_2);
									virtual ~SphericalCoordinates();
									jdouble getTheta();
									jdouble getPhi();
									jdoubleArray toCartesianGradient(jdoubleArray doubleArray_0);
									Vector3D getCartesian();
									jdouble getR();
								}; // end class SphericalCoordinates
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class Plane : public java::lang::Object {
									public:
								            Plane(jobject _jthis, bool copy);
								            Plane(const Plane &);
								        
									Plane(Vector3D vector3D_0,Vector3D vector3D_1,jdouble double_2);
									Plane(Vector3D vector3D_0,Vector3D vector3D_1,Vector3D vector3D_2,jdouble double_3);
									Plane(Vector3D vector3D_0,jdouble double_1);
									Plane(Plane plane_0);
									Plane(Vector3D vector3D_0,Vector3D vector3D_1,Vector3D vector3D_2);
									Plane(Vector3D vector3D_0,Vector3D vector3D_1);
									Plane(Vector3D vector3D_0);
									virtual ~Plane();
									Vector3D getPointAt(twod::Vector2D vector2D_0,jdouble double_1);
									void revertSelf();
									Vector3D intersection(Line line_0);
									Line intersection(Plane plane_0);
									static Vector3D intersection(Plane plane_0,Plane plane_1,Plane plane_2);
									Plane translate(Vector3D vector3D_0);
									Vector3D getNormal();
									Vector3D getV();
									SubPlane wholeHyperplane();
									Plane copySelf();
									jboolean sameOrientationAs(partitioning::Hyperplane hyperplane_0);
									jdouble getTolerance();
									twod::Vector2D toSubSpace(Vector vector_0);
									twod::Vector2D toSubSpace(Point point_0);
									Point project(Point point_0);
									Vector3D getOrigin();
									Vector3D toSpace(Point point_0);
									Vector3D toSpace(Vector vector_0);
									PolyhedronsSet wholeSpace();
									jboolean isSimilarTo(Plane plane_0);
									Vector3D getU();
									jboolean contains(Vector3D vector3D_0);
									void reset(Vector3D vector3D_0,Vector3D vector3D_1);
									void reset(Plane plane_0);
									jdouble getOffset(Vector vector_0);
									jdouble getOffset(Point point_0);
									jdouble getOffset(Plane plane_0);
									Plane rotate(Vector3D vector3D_0,Rotation rotation_1);
								}; // end class Plane
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class Vector3DFormat : public VectorFormat {
									public:
								            Vector3DFormat(jobject _jthis, bool copy);
								            Vector3DFormat(const Vector3DFormat &);
								        
									Vector3DFormat(jstring string_0,jstring string_1,jstring string_2,java::text::NumberFormat numberFormat_3);
									Vector3DFormat(jstring string_0,jstring string_1,jstring string_2);
									Vector3DFormat(java::text::NumberFormat numberFormat_0);
									Vector3DFormat();
									virtual ~Vector3DFormat();
									java::lang::StringBuffer format(Vector vector_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
									static Vector3DFormat getInstance(java::util::Locale locale_0);
									static Vector3DFormat getInstance();
									Vector3D parse(jstring string_0,java::text::ParsePosition parsePosition_1);
									Vector3D parse(jstring string_0);
								}; // end class Vector3DFormat
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class Euclidean3D : public java::lang::Object {
									public:
								            Euclidean3D(jobject _jthis, bool copy);
								            Euclidean3D(const Euclidean3D &);
								        
									virtual ~Euclidean3D();
									jint getDimension();
									twod::Euclidean2D getSubSpace();
									static Euclidean3D getInstance();
								}; // end class Euclidean3D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class Rotation : public java::lang::Object {
									public:
								            Rotation(jobject _jthis, bool copy);
								            Rotation(const Rotation &);
								        
									Rotation(Vector3D vector3D_0,jdouble double_1);
									Rotation(Vector3D vector3D_0,Vector3D vector3D_1,Vector3D vector3D_2,Vector3D vector3D_3);
									Rotation(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jboolean boolean_4);
									Rotation(RotationOrder rotationOrder_0,jdouble double_1,jdouble double_2,jdouble double_3);
									Rotation(Vector3D vector3D_0,Vector3D vector3D_1);
									virtual ~Rotation();
									static jdouble distance(Rotation rotation_0,Rotation rotation_1);
									jdouble getAngle();
									jdouble getQ0();
									jdouble getQ1();
									jdouble getQ2();
									jdouble getQ3();
									Vector3D getAxis();
									jdoubleArray getAngles(RotationOrder rotationOrder_0);
									Rotation applyTo(Rotation rotation_0);
									Vector3D applyTo(Vector3D vector3D_0);
									void applyTo(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
									Vector3D applyInverseTo(Vector3D vector3D_0);
									void applyInverseTo(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
									Rotation applyInverseTo(Rotation rotation_0);
									Rotation revert();
								}; // end class Rotation
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class FieldRotation : public java::lang::Object {
									public:
								            FieldRotation(jobject _jthis, bool copy);
								            FieldRotation(const FieldRotation &);
								        
									FieldRotation(RealFieldElement realFieldElement_0,RealFieldElement realFieldElement_1,RealFieldElement realFieldElement_2,RealFieldElement realFieldElement_3,jboolean boolean_4);
									FieldRotation(FieldVector3D fieldVector3D_0,FieldVector3D fieldVector3D_1,FieldVector3D fieldVector3D_2,FieldVector3D fieldVector3D_3);
									FieldRotation(FieldVector3D fieldVector3D_0,FieldVector3D fieldVector3D_1);
									FieldRotation(RotationOrder rotationOrder_0,RealFieldElement realFieldElement_1,RealFieldElement realFieldElement_2,RealFieldElement realFieldElement_3);
									FieldRotation(FieldVector3D fieldVector3D_0,RealFieldElement realFieldElement_1);
									virtual ~FieldRotation();
									Rotation toRotation();
									static RealFieldElement distance(FieldRotation fieldRotation_0,FieldRotation fieldRotation_1);
									RealFieldElement getAngle();
									RealFieldElement getQ0();
									RealFieldElement getQ1();
									RealFieldElement getQ2();
									RealFieldElement getQ3();
									FieldVector3D getAxis();
									jobjectArray getAngles(RotationOrder rotationOrder_0);
									FieldRotation applyTo(Rotation rotation_0);
									void applyTo(jobjectArray realFieldElementArray_0,jobjectArray realFieldElementArray_1);
									static FieldRotation applyTo(Rotation rotation_0,FieldRotation fieldRotation_1);
									FieldVector3D applyTo(Vector3D vector3D_0);
									FieldRotation applyTo(FieldRotation fieldRotation_0);
									static FieldVector3D applyTo(Rotation rotation_0,FieldVector3D fieldVector3D_1);
									void applyTo(jdoubleArray doubleArray_0,jobjectArray realFieldElementArray_1);
									FieldVector3D applyTo(FieldVector3D fieldVector3D_0);
									void applyInverseTo(jobjectArray realFieldElementArray_0,jobjectArray realFieldElementArray_1);
									FieldVector3D applyInverseTo(FieldVector3D fieldVector3D_0);
									FieldVector3D applyInverseTo(Vector3D vector3D_0);
									void applyInverseTo(jdoubleArray doubleArray_0,jobjectArray realFieldElementArray_1);
									static FieldVector3D applyInverseTo(Rotation rotation_0,FieldVector3D fieldVector3D_1);
									static FieldRotation applyInverseTo(Rotation rotation_0,FieldRotation fieldRotation_1);
									FieldRotation applyInverseTo(Rotation rotation_0);
									FieldRotation applyInverseTo(FieldRotation fieldRotation_0);
									FieldRotation revert();
								}; // end class FieldRotation
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								
								class Vector2DFormat : public VectorFormat {
									public:
								            Vector2DFormat(jobject _jthis, bool copy);
								            Vector2DFormat(const Vector2DFormat &);
								        
									Vector2DFormat(jstring string_0,jstring string_1,jstring string_2,java::text::NumberFormat numberFormat_3);
									Vector2DFormat(jstring string_0,jstring string_1,jstring string_2);
									Vector2DFormat(java::text::NumberFormat numberFormat_0);
									Vector2DFormat();
									virtual ~Vector2DFormat();
									java::lang::StringBuffer format(Vector vector_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
									static Vector2DFormat getInstance(java::util::Locale locale_0);
									static Vector2DFormat getInstance();
									Vector2D parse(jstring string_0,java::text::ParsePosition parsePosition_1);
									Vector2D parse(jstring string_0);
								}; // end class Vector2DFormat
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								
								class PolygonsSet : public partitioning::AbstractRegion {
									public:
								            PolygonsSet(jobject _jthis, bool copy);
								            PolygonsSet(const PolygonsSet &);
								        
									PolygonsSet(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
									PolygonsSet(java::util::Collection collection_0,jdouble double_1);
									PolygonsSet(jdouble double_0,jobjectArray vector2DArray_1);
									PolygonsSet(partitioning::BSPTree bSPTree_0,jdouble double_1);
									PolygonsSet(jdouble double_0);
									PolygonsSet(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
									PolygonsSet(java::util::Collection collection_0);
									PolygonsSet(partitioning::BSPTree bSPTree_0);
									PolygonsSet();
									virtual ~PolygonsSet();
									PolygonsSet buildNew(partitioning::BSPTree bSPTree_0);
								}; // end class PolygonsSet
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								
								class SubLine : public partitioning::AbstractSubHyperplane {
									public:
								            SubLine(jobject _jthis, bool copy);
								            SubLine(const SubLine &);
								        
									SubLine(partitioning::Hyperplane hyperplane_0,partitioning::Region region_1);
									SubLine(Vector2D vector2D_0,Vector2D vector2D_1,jdouble double_2);
									SubLine(Vector2D vector2D_0,Vector2D vector2D_1);
									SubLine(Segment segment_0);
									virtual ~SubLine();
									Vector2D intersection(SubLine subLine_0,jboolean boolean_1);
									partitioning::Side side(partitioning::Hyperplane hyperplane_0);
									java::util::List getSegments();
									partitioning::SubHyperplane::SplitSubHyperplane split(partitioning::Hyperplane hyperplane_0);
								}; // end class SubLine
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								
								class Vector2D : public java::lang::Object {
									public:
								            Vector2D(jobject _jthis, bool copy);
								            Vector2D(const Vector2D &);
								        
									Vector2D(jdouble double_0,jdouble double_1);
									Vector2D(jdoubleArray doubleArray_0);
									Vector2D(jdouble double_0,Vector2D vector2D_1,jdouble double_2,Vector2D vector2D_3,jdouble double_4,Vector2D vector2D_5,jdouble double_6,Vector2D vector2D_7);
									Vector2D(jdouble double_0,Vector2D vector2D_1,jdouble double_2,Vector2D vector2D_3,jdouble double_4,Vector2D vector2D_5);
									Vector2D(jdouble double_0,Vector2D vector2D_1,jdouble double_2,Vector2D vector2D_3);
									Vector2D(jdouble double_0,Vector2D vector2D_1);
									virtual ~Vector2D();
									static jdouble distanceSq(Vector2D vector2D_0,Vector2D vector2D_1);
									jdouble distanceSq(Vector vector_0);
									jdouble distance(Vector vector_0);
									jdouble distance(Point point_0);
									static jdouble distance(Vector2D vector2D_0,Vector2D vector2D_1);
									jdouble getX();
									jdouble getY();
									static jdouble angle(Vector2D vector2D_0,Vector2D vector2D_1);
									Vector2D subtract(Vector vector_0);
									Vector2D subtract(jdouble double_0,Vector vector_1);
									Vector2D negate();
									Vector2D getZero();
									Vector2D scalarMultiply(jdouble double_0);
									jdouble getNorm();
									jdouble dotProduct(Vector vector_0);
									static jdouble distanceInf(Vector2D vector2D_0,Vector2D vector2D_1);
									jdouble distanceInf(Vector vector_0);
									jdouble distance1(Vector vector_0);
									jdouble getNorm1();
									jdouble getNormSq();
									jdouble getNormInf();
									jdouble crossProduct(Vector2D vector2D_0,Vector2D vector2D_1);
									Vector2D add(jdouble double_0,Vector vector_1);
									Vector2D add(Vector vector_0);
									jstring toString(java::text::NumberFormat numberFormat_0);
									jstring toString();
									jint hashCode();
									jdoubleArray toArray();
									jboolean isNaN();
									Vector2D normalize();
									Space getSpace();
									jboolean isInfinite();
								}; // end class Vector2D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								
								class Interval : public java::lang::Object {
									public:
								            Interval(jobject _jthis, bool copy);
								            Interval(const Interval &);
								        
									Interval(jdouble double_0,jdouble double_1);
									virtual ~Interval();
									jdouble getMidPoint();
									jdouble getLower();
									jdouble getUpper();
									jdouble getBarycenter();
									partitioning::Region::Location checkPoint(jdouble double_0,jdouble double_1);
									jdouble getInf();
									jdouble getSup();
									jdouble getLength();
									jdouble getSize();
								}; // end class Interval
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								
								class Vector1D : public java::lang::Object {
									public:
								            Vector1D(jobject _jthis, bool copy);
								            Vector1D(const Vector1D &);
								        
									Vector1D(jdouble double_0,Vector1D vector1D_1,jdouble double_2,Vector1D vector1D_3,jdouble double_4,Vector1D vector1D_5,jdouble double_6,Vector1D vector1D_7);
									Vector1D(jdouble double_0,Vector1D vector1D_1,jdouble double_2,Vector1D vector1D_3,jdouble double_4,Vector1D vector1D_5);
									Vector1D(jdouble double_0,Vector1D vector1D_1,jdouble double_2,Vector1D vector1D_3);
									Vector1D(jdouble double_0,Vector1D vector1D_1);
									Vector1D(jdouble double_0);
									virtual ~Vector1D();
									jdouble distanceSq(Vector vector_0);
									static jdouble distanceSq(Vector1D vector1D_0,Vector1D vector1D_1);
									jdouble distance(Point point_0);
									static jdouble distance(Vector1D vector1D_0,Vector1D vector1D_1);
									jdouble distance(Vector vector_0);
									jdouble getX();
									Vector1D subtract(Vector vector_0);
									Vector1D subtract(jdouble double_0,Vector vector_1);
									Vector1D negate();
									Vector1D getZero();
									Vector1D scalarMultiply(jdouble double_0);
									jdouble getNorm();
									jdouble dotProduct(Vector vector_0);
									static jdouble distanceInf(Vector1D vector1D_0,Vector1D vector1D_1);
									jdouble distanceInf(Vector vector_0);
									jdouble distance1(Vector vector_0);
									jdouble getNorm1();
									jdouble getNormSq();
									jdouble getNormInf();
									Vector1D add(Vector vector_0);
									Vector1D add(jdouble double_0,Vector vector_1);
									jstring toString(java::text::NumberFormat numberFormat_0);
									jstring toString();
									jint hashCode();
									jboolean isNaN();
									Vector1D normalize();
									Space getSpace();
									jboolean isInfinite();
								}; // end class Vector1D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace utilities{
								
								class AVLTree : public java::lang::Object {
									public:
								            AVLTree(jobject _jthis, bool copy);
								            AVLTree(const AVLTree &);
								        
									AVLTree();
									virtual ~AVLTree();
									AVLTree::Node getSmallest();
									AVLTree::Node getLargest();
									AVLTree::Node getNotSmaller(java::lang::Comparable comparable_0);
									AVLTree::Node getNotLarger(java::lang::Comparable comparable_0);
									jboolean isEmpty();
									jint size();
									jboolean delete(java::lang::Comparable comparable_0);
									void insert(java::lang::Comparable comparable_0);
								}; // end class AVLTree
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace utilities

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class BoundaryProjector : public java::lang::Object {
								public:
							            BoundaryProjector(jobject _jthis, bool copy);
							            BoundaryProjector(const BoundaryProjector &);
							        
								BoundaryProjector(Point point_0);
								virtual ~BoundaryProjector();
								BSPTreeVisitor::Order visitOrder(BSPTree bSPTree_0);
								void visitInternalNode(BSPTree bSPTree_0);
								void visitLeafNode(BSPTree bSPTree_0);
								BoundaryProjection getProjection();
							}; // end class BoundaryProjector
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class InsideFinder : public java::lang::Object {
								public:
							            InsideFinder(jobject _jthis, bool copy);
							            InsideFinder(const InsideFinder &);
							        
								InsideFinder(Region region_0);
								virtual ~InsideFinder();
								void recurseSides(BSPTree bSPTree_0,SubHyperplane subHyperplane_1);
								jboolean plusFound();
								jboolean minusFound();
							}; // end class InsideFinder
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						
						class Point : public java::lang::Object {
							public:
						            Point(jobject _jthis, bool copy);
						            Point(const Point &);
						        
							Point();
							virtual ~Point();
						}; // end class Point
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace geometry

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						
						class Space : public java::lang::Object {
							public:
						            Space(jobject _jthis, bool copy);
						            Space(const Space &);
						        
							Space();
							virtual ~Space();
						}; // end class Space
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace geometry

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class SingularOperatorException : public exception::MathIllegalArgumentException {
							public:
						            SingularOperatorException(jobject _jthis, bool copy);
						            SingularOperatorException(const SingularOperatorException &);
						        
							SingularOperatorException();
							virtual ~SingularOperatorException();
						}; // end class SingularOperatorException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class EigenDecomposition : public java::lang::Object {
							public:
						            EigenDecomposition(jobject _jthis, bool copy);
						            EigenDecomposition(const EigenDecomposition &);
						        
							EigenDecomposition(RealMatrix realMatrix_0,jdouble double_1);
							EigenDecomposition(RealMatrix realMatrix_0);
							EigenDecomposition(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							EigenDecomposition(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
							virtual ~EigenDecomposition();
							jboolean hasComplexEigenvalues();
							jdoubleArray getRealEigenvalues();
							jdouble getRealEigenvalue(jint int_0);
							jdoubleArray getImagEigenvalues();
							jdouble getImagEigenvalue(jint int_0);
							RealVector getEigenvector(jint int_0);
							RealMatrix getVT();
							DecompositionSolver getSolver();
							RealMatrix getSquareRoot();
							RealMatrix getV();
							RealMatrix getD();
							jdouble getDeterminant();
						}; // end class EigenDecomposition
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RRQRDecomposition : public QRDecomposition {
							public:
						            RRQRDecomposition(jobject _jthis, bool copy);
						            RRQRDecomposition(const RRQRDecomposition &);
						        
							RRQRDecomposition(RealMatrix realMatrix_0,jdouble double_1);
							RRQRDecomposition(RealMatrix realMatrix_0);
							virtual ~RRQRDecomposition();
							DecompositionSolver getSolver();
							jint getRank(jdouble double_0);
							RealMatrix getP();
						}; // end class RRQRDecomposition
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							
							class DummyLocalizable : public java::lang::Object {
								public:
							            DummyLocalizable(jobject _jthis, bool copy);
							            DummyLocalizable(const DummyLocalizable &);
							        
								DummyLocalizable(jstring string_0);
								virtual ~DummyLocalizable();
								jstring getSourceString();
								jstring getLocalizedString(java::util::Locale locale_0);
								jstring toString();
							}; // end class DummyLocalizable
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class Combinations : public java::lang::Object {
							public:
						            Combinations(jobject _jthis, bool copy);
						            Combinations(const Combinations &);
						        
							Combinations(jint int_0,jint int_1);
							virtual ~Combinations();
							java::util::Comparator comparator();
							jint getN();
							jint getK();
							java::util::Iterator iterator();
						}; // end class Combinations
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class OpenIntToFieldHashMap : public java::lang::Object {
							public:
						            OpenIntToFieldHashMap(jobject _jthis, bool copy);
						            OpenIntToFieldHashMap(const OpenIntToFieldHashMap &);
						        
							OpenIntToFieldHashMap(Field field_0);
							OpenIntToFieldHashMap(OpenIntToFieldHashMap openIntToFieldHashMap_0);
							OpenIntToFieldHashMap(Field field_0,jint int_1);
							OpenIntToFieldHashMap(Field field_0,FieldElement fieldElement_1);
							OpenIntToFieldHashMap(Field field_0,jint int_1,FieldElement fieldElement_2);
							virtual ~OpenIntToFieldHashMap();
							FieldElement remove(jint int_0);
							FieldElement get(jint int_0);
							FieldElement put(jint int_0,FieldElement fieldElement_1);
							jint size();
							OpenIntToFieldHashMap::Iterator iterator();
							jboolean containsKey(jint int_0);
						}; // end class OpenIntToFieldHashMap
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class IterationListener : public java::lang::Object {
							public:
						            IterationListener(jobject _jthis, bool copy);
						            IterationListener(const IterationListener &);
						        
							IterationListener();
							virtual ~IterationListener();
						}; // end class IterationListener
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class NumberTransformer : public java::lang::Object {
							public:
						            NumberTransformer(jobject _jthis, bool copy);
						            NumberTransformer(const NumberTransformer &);
						        
							NumberTransformer();
							virtual ~NumberTransformer();
						}; // end class NumberTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class FastMath : public java::lang::Object {
							public:
						            FastMath(jobject _jthis, bool copy);
						            FastMath(const FastMath &);
						        
							virtual ~FastMath();
							static jdouble acosh(jdouble double_0);
							static jdouble asinh(jdouble double_0);
							static jdouble atanh(jdouble double_0);
							static void main(jobjectArray stringArray_0);
							static void main(int argc,const char **argv);
							static jint abs(jint int_0);
							static jfloat abs(jfloat float_0);
							static jdouble abs(jdouble double_0);
							static jlong abs(jlong long_0);
							static jdouble sin(jdouble double_0);
							static jdouble cos(jdouble double_0);
							static jdouble tan(jdouble double_0);
							static jdouble atan2(jdouble double_0,jdouble double_1);
							static jdouble sqrt(jdouble double_0);
							static jdouble log(jdouble double_0,jdouble double_1);
							static jdouble log(jdouble double_0);
							static jdouble log10(jdouble double_0);
							static jdouble pow(jdouble double_0,jint int_1);
							static jdouble pow(jdouble double_0,jdouble double_1);
							static jdouble exp(jdouble double_0);
							static jlong min(jlong long_0,jlong long_1);
							static jdouble min(jdouble double_0,jdouble double_1);
							static jfloat min(jfloat float_0,jfloat float_1);
							static jint min(jint int_0,jint int_1);
							static jlong max(jlong long_0,jlong long_1);
							static jfloat max(jfloat float_0,jfloat float_1);
							static jint max(jint int_0,jint int_1);
							static jdouble max(jdouble double_0,jdouble double_1);
							static jlong addExact(jlong long_0,jlong long_1);
							static jint addExact(jint int_0,jint int_1);
							static jint decrementExact(jint int_0);
							static jlong decrementExact(jlong long_0);
							static jint incrementExact(jint int_0);
							static jlong incrementExact(jlong long_0);
							static jint multiplyExact(jint int_0,jint int_1);
							static jlong multiplyExact(jlong long_0,jlong long_1);
							static jlong subtractExact(jlong long_0,jlong long_1);
							static jint subtractExact(jint int_0,jint int_1);
							static jdouble scalb(jdouble double_0,jint int_1);
							static jfloat scalb(jfloat float_0,jint int_1);
							static jfloat copySign(jfloat float_0,jfloat float_1);
							static jdouble copySign(jdouble double_0,jdouble double_1);
							static jint getExponent(jdouble double_0);
							static jint getExponent(jfloat float_0);
							static jfloat signum(jfloat float_0);
							static jdouble signum(jdouble double_0);
							static jdouble asin(jdouble double_0);
							static jdouble acos(jdouble double_0);
							static jdouble atan(jdouble double_0);
							static jdouble toRadians(jdouble double_0);
							static jdouble toDegrees(jdouble double_0);
							static jdouble cbrt(jdouble double_0);
							static jdouble IEEEremainder(jdouble double_0,jdouble double_1);
							static jdouble ceil(jdouble double_0);
							static jdouble floor(jdouble double_0);
							static jdouble rint(jdouble double_0);
							static jint round(jfloat float_0);
							static jlong round(jdouble double_0);
							static jdouble random();
							static jint toIntExact(jlong long_0);
							static jint floorDiv(jint int_0,jint int_1);
							static jlong floorDiv(jlong long_0,jlong long_1);
							static jint floorMod(jint int_0,jint int_1);
							static jlong floorMod(jlong long_0,jlong long_1);
							static jfloat ulp(jfloat float_0);
							static jdouble ulp(jdouble double_0);
							static jdouble sinh(jdouble double_0);
							static jdouble cosh(jdouble double_0);
							static jdouble tanh(jdouble double_0);
							static jdouble hypot(jdouble double_0,jdouble double_1);
							static jdouble expm1(jdouble double_0);
							static jdouble log1p(jdouble double_0);
							static jdouble nextAfter(jdouble double_0,jdouble double_1);
							static jfloat nextAfter(jfloat float_0,jdouble double_1);
							static jfloat nextUp(jfloat float_0);
							static jdouble nextUp(jdouble double_0);
							static jdouble nextDown(jdouble double_0);
							static jfloat nextDown(jfloat float_0);
						}; // end class FastMath
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class Incrementor : public java::lang::Object {
							public:
						            Incrementor(jobject _jthis, bool copy);
						            Incrementor(const Incrementor &);
						        
							Incrementor();
							Incrementor(jint int_0);
							virtual ~Incrementor();
							jint getMaximalCount();
							jint getCount();
							void setMaximalCount(jint int_0);
							void resetCount();
							void incrementCount();
							void incrementCount(jint int_0);
							jboolean canIncrement();
						}; // end class Incrementor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace crcl{
		namespace base{
			
			class SetTransSpeedType : public MiddleCommandType {
				public:
			            SetTransSpeedType(jobject _jthis, bool copy);
			            SetTransSpeedType(const SetTransSpeedType &);
			        
				SetTransSpeedType();
				virtual ~SetTransSpeedType();
				TransSpeedType getTransSpeed();
				void setTransSpeed(TransSpeedType transSpeedType_0);
			}; // end class SetTransSpeedType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetForceUnitsType : public MiddleCommandType {
				public:
			            SetForceUnitsType(jobject _jthis, bool copy);
			            SetForceUnitsType(const SetForceUnitsType &);
			        
				SetForceUnitsType();
				virtual ~SetForceUnitsType();
				ForceUnitEnumType getUnitName();
				void setUnitName(ForceUnitEnumType forceUnitEnumType_0);
			}; // end class SetForceUnitsType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class RotAccelRelativeType : public RotAccelType {
				public:
			            RotAccelRelativeType(jobject _jthis, bool copy);
			            RotAccelRelativeType(const RotAccelRelativeType &);
			        
				RotAccelRelativeType();
				virtual ~RotAccelRelativeType();
				void setFraction(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getFraction();
			}; // end class RotAccelRelativeType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class EmptyFileFilter : public AbstractFileFilter {
							public:
						            EmptyFileFilter(jobject _jthis, bool copy);
						            EmptyFileFilter(const EmptyFileFilter &);
						        
							virtual ~EmptyFileFilter();
							jboolean accept(java::io::File file_0);
						}; // end class EmptyFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class FalseFileFilter : public java::lang::Object {
							public:
						            FalseFileFilter(jobject _jthis, bool copy);
						            FalseFileFilter(const FalseFileFilter &);
						        
							virtual ~FalseFileFilter();
							jboolean accept(java::io::File file_0);
							jboolean accept(java::io::File file_0,jstring string_1);
						}; // end class FalseFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class FileFileFilter : public AbstractFileFilter {
							public:
						            FileFileFilter(jobject _jthis, bool copy);
						            FileFileFilter(const FileFileFilter &);
						        
							virtual ~FileFileFilter();
							jboolean accept(java::io::File file_0);
						}; // end class FileFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class PrefixFileFilter : public AbstractFileFilter {
							public:
						            PrefixFileFilter(jobject _jthis, bool copy);
						            PrefixFileFilter(const PrefixFileFilter &);
						        
							PrefixFileFilter(java::util::List list_0,IOCase iOCase_1);
							PrefixFileFilter(java::util::List list_0);
							PrefixFileFilter(jobjectArray stringArray_0,IOCase iOCase_1);
							PrefixFileFilter(jstring string_0);
							PrefixFileFilter(jstring string_0,IOCase iOCase_1);
							PrefixFileFilter(jobjectArray stringArray_0);
							virtual ~PrefixFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0,jstring string_1);
							jboolean accept(java::io::File file_0);
						}; // end class PrefixFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class FileUtils : public java::lang::Object {
						public:
					            FileUtils(jobject _jthis, bool copy);
					            FileUtils(const FileUtils &);
					        
						FileUtils();
						virtual ~FileUtils();
						static jstring getTempDirectoryPath();
						static java::io::File getTempDirectory();
						static jstring getUserDirectoryPath();
						static java::io::File getUserDirectory();
						static java::io::FileInputStream openInputStream(java::io::File file_0);
						static java::io::FileOutputStream openOutputStream(java::io::File file_0);
						static java::io::FileOutputStream openOutputStream(java::io::File file_0,jboolean boolean_1);
						static jstring byteCountToDisplaySize(jlong long_0);
						static jstring byteCountToDisplaySize(java::math::BigInteger bigInteger_0);
						static void touch(java::io::File file_0);
						static jobjectArray convertFileCollectionToFileArray(java::util::Collection collection_0);
						static java::util::Collection listFilesAndDirs(java::io::File file_0,filefilter::IOFileFilter iOFileFilter_1,filefilter::IOFileFilter iOFileFilter_2);
						static java::util::Iterator iterateFiles(java::io::File file_0,filefilter::IOFileFilter iOFileFilter_1,filefilter::IOFileFilter iOFileFilter_2);
						static java::util::Iterator iterateFiles(java::io::File file_0,jobjectArray stringArray_1,jboolean boolean_2);
						static java::util::Iterator iterateFilesAndDirs(java::io::File file_0,filefilter::IOFileFilter iOFileFilter_1,filefilter::IOFileFilter iOFileFilter_2);
						static jboolean contentEqualsIgnoreEOL(java::io::File file_0,java::io::File file_1,jstring string_2);
						static jobjectArray toFiles(jobjectArray uRLArray_0);
						static jobjectArray toURLs(jobjectArray fileArray_0);
						static void copyFileToDirectory(java::io::File file_0,java::io::File file_1);
						static void copyFileToDirectory(java::io::File file_0,java::io::File file_1,jboolean boolean_2);
						static void copyFile(java::io::File file_0,java::io::File file_1,jboolean boolean_2);
						static void copyFile(java::io::File file_0,java::io::File file_1);
						static jlong copyFile(java::io::File file_0,java::io::OutputStream outputStream_1);
						static void copyDirectoryToDirectory(java::io::File file_0,java::io::File file_1);
						static void copyDirectory(java::io::File file_0,java::io::File file_1,jboolean boolean_2);
						static void copyDirectory(java::io::File file_0,java::io::File file_1,java::io::FileFilter fileFilter_2);
						static void copyDirectory(java::io::File file_0,java::io::File file_1);
						static void copyDirectory(java::io::File file_0,java::io::File file_1,java::io::FileFilter fileFilter_2,jboolean boolean_3);
						static void copyURLToFile(java::net::URL uRL_0,java::io::File file_1,jint int_2,jint int_3);
						static void copyURLToFile(java::net::URL uRL_0,java::io::File file_1);
						static void deleteDirectory(java::io::File file_0);
						static jboolean directoryContains(java::io::File file_0,java::io::File file_1);
						static void cleanDirectory(java::io::File file_0);
						static jstring readFileToString(java::io::File file_0);
						static jstring readFileToString(java::io::File file_0,jstring string_1);
						static jstring readFileToString(java::io::File file_0,java::nio::charset::Charset charset_1);
						static jbyteArray readFileToByteArray(java::io::File file_0);
						static java::util::List readLines(java::io::File file_0,java::nio::charset::Charset charset_1);
						static java::util::List readLines(java::io::File file_0);
						static java::util::List readLines(java::io::File file_0,jstring string_1);
						static LineIterator lineIterator(java::io::File file_0);
						static LineIterator lineIterator(java::io::File file_0,jstring string_1);
						static void writeStringToFile(java::io::File file_0,jstring string_1,jstring string_2,jboolean boolean_3);
						static void writeStringToFile(java::io::File file_0,jstring string_1);
						static void writeStringToFile(java::io::File file_0,jstring string_1,java::nio::charset::Charset charset_2);
						static void writeStringToFile(java::io::File file_0,jstring string_1,jboolean boolean_2);
						static void writeStringToFile(java::io::File file_0,jstring string_1,java::nio::charset::Charset charset_2,jboolean boolean_3);
						static void writeStringToFile(java::io::File file_0,jstring string_1,jstring string_2);
						static void writeByteArrayToFile(java::io::File file_0,jbyteArray byteArray_1,jboolean boolean_2);
						static void writeByteArrayToFile(java::io::File file_0,jbyteArray byteArray_1);
						static void writeLines(java::io::File file_0,jstring string_1,java::util::Collection collection_2);
						static void writeLines(java::io::File file_0,jstring string_1,java::util::Collection collection_2,jboolean boolean_3);
						static void writeLines(java::io::File file_0,java::util::Collection collection_1);
						static void writeLines(java::io::File file_0,java::util::Collection collection_1,jboolean boolean_2);
						static void writeLines(java::io::File file_0,java::util::Collection collection_1,jstring string_2,jboolean boolean_3);
						static void writeLines(java::io::File file_0,java::util::Collection collection_1,jstring string_2);
						static void writeLines(java::io::File file_0,jstring string_1,java::util::Collection collection_2,jstring string_3,jboolean boolean_4);
						static void writeLines(java::io::File file_0,jstring string_1,java::util::Collection collection_2,jstring string_3);
						static void forceDelete(java::io::File file_0);
						static void forceDeleteOnExit(java::io::File file_0);
						static void forceMkdir(java::io::File file_0);
						static jlong sizeOf(java::io::File file_0);
						static java::math::BigInteger sizeOfAsBigInteger(java::io::File file_0);
						static java::math::BigInteger sizeOfDirectoryAsBigInteger(java::io::File file_0);
						static jboolean isFileOlder(java::io::File file_0,java::util::Date date_1);
						static jboolean isFileOlder(java::io::File file_0,java::io::File file_1);
						static jboolean isFileOlder(java::io::File file_0,jlong long_1);
						static jlong checksumCRC32(java::io::File file_0);
						static void moveDirectory(java::io::File file_0,java::io::File file_1);
						static void moveDirectoryToDirectory(java::io::File file_0,java::io::File file_1,jboolean boolean_2);
						static void moveFile(java::io::File file_0,java::io::File file_1);
						static void moveFileToDirectory(java::io::File file_0,java::io::File file_1,jboolean boolean_2);
						static void moveToDirectory(java::io::File file_0,java::io::File file_1,jboolean boolean_2);
						static jboolean isSymlink(java::io::File file_0);
						static java::util::zip::Checksum checksum(java::io::File file_0,java::util::zip::Checksum checksum_1);
						static jboolean waitFor(java::io::File file_0,jint int_1);
						static jboolean deleteQuietly(java::io::File file_0);
						static jboolean isFileNewer(java::io::File file_0,java::io::File file_1);
						static jboolean isFileNewer(java::io::File file_0,jlong long_1);
						static jboolean isFileNewer(java::io::File file_0,java::util::Date date_1);
						static void copyInputStreamToFile(java::io::InputStream inputStream_0,java::io::File file_1);
						static jlong sizeOfDirectory(java::io::File file_0);
						static jboolean contentEquals(java::io::File file_0,java::io::File file_1);
						static void write(java::io::File file_0,java::lang::CharSequence charSequence_1);
						static void write(java::io::File file_0,java::lang::CharSequence charSequence_1,jstring string_2,jboolean boolean_3);
						static void write(java::io::File file_0,java::lang::CharSequence charSequence_1,java::nio::charset::Charset charset_2,jboolean boolean_3);
						static void write(java::io::File file_0,java::lang::CharSequence charSequence_1,jstring string_2);
						static void write(java::io::File file_0,java::lang::CharSequence charSequence_1,java::nio::charset::Charset charset_2);
						static void write(java::io::File file_0,java::lang::CharSequence charSequence_1,jboolean boolean_2);
						static java::util::Collection listFiles(java::io::File file_0,filefilter::IOFileFilter iOFileFilter_1,filefilter::IOFileFilter iOFileFilter_2);
						static java::util::Collection listFiles(java::io::File file_0,jobjectArray stringArray_1,jboolean boolean_2);
						static java::io::File getFile(java::io::File file_0,jobjectArray stringArray_1);
						static java::io::File getFile(jobjectArray stringArray_0);
						static java::io::File getFile(int argc,const char **argv);
						static java::io::File toFile(java::net::URL uRL_0);
					}; // end class FileUtils
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class ReaderInputStream : public java::io::InputStream {
							public:
						            ReaderInputStream(jobject _jthis, bool copy);
						            ReaderInputStream(const ReaderInputStream &);
						        
							ReaderInputStream(java::io::Reader reader_0,jstring string_1,jint int_2);
							ReaderInputStream(java::io::Reader reader_0,jstring string_1);
							ReaderInputStream(java::io::Reader reader_0);
							ReaderInputStream(java::io::Reader reader_0,java::nio::charset::Charset charset_1,jint int_2);
							ReaderInputStream(java::io::Reader reader_0,java::nio::charset::Charset charset_1);
							virtual ~ReaderInputStream();
							jint read(jbyteArray byteArray_0);
							jint read();
							jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
							void close();
						}; // end class ReaderInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class ReversedLinesFileReader : public java::lang::Object {
							public:
						            ReversedLinesFileReader(jobject _jthis, bool copy);
						            ReversedLinesFileReader(const ReversedLinesFileReader &);
						        
							ReversedLinesFileReader(java::io::File file_0,jint int_1,jstring string_2);
							ReversedLinesFileReader(java::io::File file_0,jint int_1,java::nio::charset::Charset charset_2);
							ReversedLinesFileReader(java::io::File file_0);
							virtual ~ReversedLinesFileReader();
							jstring readLine();
							void close();
						}; // end class ReversedLinesFileReader
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class SwappedDataInputStream : public ProxyInputStream {
							public:
						            SwappedDataInputStream(jobject _jthis, bool copy);
						            SwappedDataInputStream(const SwappedDataInputStream &);
						        
							SwappedDataInputStream(java::io::InputStream inputStream_0);
							virtual ~SwappedDataInputStream();
							jbyte readByte();
							jshort readShort();
							jint skipBytes(jint int_0);
							jboolean readBoolean();
							jint readUnsignedByte();
							jint readUnsignedShort();
							jdouble readDouble();
							jfloat readFloat();
							jlong readLong();
							jstring readLine();
							jint readInt();
							jchar readChar();
							jstring readUTF();
							void readFully(jbyteArray byteArray_0);
							void readFully(jbyteArray byteArray_0,jint int_1,jint int_2);
						}; // end class SwappedDataInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class Tailer : public java::lang::Object {
							public:
						            Tailer(jobject _jthis, bool copy);
						            Tailer(const Tailer &);
						        
							Tailer(java::io::File file_0,TailerListener tailerListener_1,jlong long_2,jboolean boolean_3,jboolean boolean_4,jint int_5);
							Tailer(java::io::File file_0,TailerListener tailerListener_1,jlong long_2,jboolean boolean_3,jint int_4);
							Tailer(java::io::File file_0,TailerListener tailerListener_1);
							Tailer(java::io::File file_0,TailerListener tailerListener_1,jlong long_2);
							Tailer(java::io::File file_0,TailerListener tailerListener_1,jlong long_2,jboolean boolean_3);
							Tailer(java::io::File file_0,TailerListener tailerListener_1,jlong long_2,jboolean boolean_3,jboolean boolean_4);
							virtual ~Tailer();
							jlong getDelay();
							void run();
							static Tailer create(java::io::File file_0,TailerListener tailerListener_1,jlong long_2,jboolean boolean_3);
							static Tailer create(java::io::File file_0,TailerListener tailerListener_1);
							static Tailer create(java::io::File file_0,TailerListener tailerListener_1,jlong long_2,jboolean boolean_3,jint int_4);
							static Tailer create(java::io::File file_0,TailerListener tailerListener_1,jlong long_2,jboolean boolean_3,jboolean boolean_4,jint int_5);
							static Tailer create(java::io::File file_0,TailerListener tailerListener_1,jlong long_2,jboolean boolean_3,jboolean boolean_4);
							static Tailer create(java::io::File file_0,TailerListener tailerListener_1,jlong long_2);
							void stop();
							java::io::File getFile();
						}; // end class Tailer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class XmlStreamReader : public java::io::Reader {
							public:
						            XmlStreamReader(jobject _jthis, bool copy);
						            XmlStreamReader(const XmlStreamReader &);
						        
							XmlStreamReader(java::io::InputStream inputStream_0,jboolean boolean_1,jstring string_2);
							XmlStreamReader(java::io::InputStream inputStream_0,jboolean boolean_1);
							XmlStreamReader(java::io::InputStream inputStream_0);
							XmlStreamReader(java::io::InputStream inputStream_0,jstring string_1,jboolean boolean_2,jstring string_3);
							XmlStreamReader(java::io::File file_0);
							XmlStreamReader(java::io::InputStream inputStream_0,jstring string_1,jboolean boolean_2);
							XmlStreamReader(java::io::InputStream inputStream_0,jstring string_1);
							XmlStreamReader(java::net::URLConnection uRLConnection_0,jstring string_1);
							XmlStreamReader(java::net::URL uRL_0);
							virtual ~XmlStreamReader();
							jstring getDefaultEncoding();
							jint read(jcharArray charArray_0,jint int_1,jint int_2);
							void close();
							jstring getEncoding();
						}; // end class XmlStreamReader
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class LineIterator : public java::lang::Object {
						public:
					            LineIterator(jobject _jthis, bool copy);
					            LineIterator(const LineIterator &);
					        
						LineIterator(java::io::Reader reader_0);
						virtual ~LineIterator();
						jstring nextLine();
						static void closeQuietly(LineIterator lineIterator_0);
						void remove();
						jboolean hasNext();
						jstring next();
						void close();
					}; // end class LineIterator
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						
						class FileAlterationListener : public java::lang::Object {
							public:
						            FileAlterationListener(jobject _jthis, bool copy);
						            FileAlterationListener(const FileAlterationListener &);
						        
							FileAlterationListener();
							virtual ~FileAlterationListener();
						}; // end class FileAlterationListener
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						
						class FileAlterationListenerAdaptor : public java::lang::Object {
							public:
						            FileAlterationListenerAdaptor(jobject _jthis, bool copy);
						            FileAlterationListenerAdaptor(const FileAlterationListenerAdaptor &);
						        
							FileAlterationListenerAdaptor();
							virtual ~FileAlterationListenerAdaptor();
							void onFileCreate(java::io::File file_0);
							void onDirectoryCreate(java::io::File file_0);
							void onDirectoryChange(java::io::File file_0);
							void onDirectoryDelete(java::io::File file_0);
							void onFileChange(java::io::File file_0);
							void onFileDelete(java::io::File file_0);
							void onStop(FileAlterationObserver fileAlterationObserver_0);
							void onStart(FileAlterationObserver fileAlterationObserver_0);
						}; // end class FileAlterationListenerAdaptor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						
						class FileAlterationMonitor : public java::lang::Object {
							public:
						            FileAlterationMonitor(jobject _jthis, bool copy);
						            FileAlterationMonitor(const FileAlterationMonitor &);
						        
							FileAlterationMonitor();
							FileAlterationMonitor(jlong long_0,jobjectArray fileAlterationObserverArray_1);
							FileAlterationMonitor(jlong long_0);
							virtual ~FileAlterationMonitor();
							jlong getInterval();
							void setThreadFactory(java::util::concurrent::ThreadFactory threadFactory_0);
							void addObserver(FileAlterationObserver fileAlterationObserver_0);
							void removeObserver(FileAlterationObserver fileAlterationObserver_0);
							java::lang::Iterable getObservers();
							void run();
							void start();
							void stop(jlong long_0);
							void stop();
						}; // end class FileAlterationMonitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						
						class FileAlterationObserver : public java::lang::Object {
							public:
						            FileAlterationObserver(jobject _jthis, bool copy);
						            FileAlterationObserver(const FileAlterationObserver &);
						        
							FileAlterationObserver(jstring string_0);
							FileAlterationObserver(jstring string_0,java::io::FileFilter fileFilter_1,IOCase iOCase_2);
							FileAlterationObserver(java::io::File file_0,java::io::FileFilter fileFilter_1);
							FileAlterationObserver(java::io::File file_0,java::io::FileFilter fileFilter_1,IOCase iOCase_2);
							FileAlterationObserver(jstring string_0,java::io::FileFilter fileFilter_1);
							FileAlterationObserver(java::io::File file_0);
							virtual ~FileAlterationObserver();
							void checkAndNotify();
							java::lang::Iterable getListeners();
							java::io::FileFilter getFileFilter();
							void addListener(FileAlterationListener fileAlterationListener_0);
							java::io::File getDirectory();
							void removeListener(FileAlterationListener fileAlterationListener_0);
							jstring toString();
							void destroy();
							void initialize();
						}; // end class FileAlterationObserver
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace monitor{
						
						class FileEntry : public java::lang::Object {
							public:
						            FileEntry(jobject _jthis, bool copy);
						            FileEntry(const FileEntry &);
						        
							FileEntry(java::io::File file_0);
							FileEntry(FileEntry fileEntry_0,java::io::File file_1);
							virtual ~FileEntry();
							void setChildren(jobjectArray fileEntryArray_0);
							jboolean isExists();
							FileEntry newChildInstance(java::io::File file_0);
							void setExists(jboolean boolean_0);
							jlong getLastModified();
							jboolean refresh(java::io::File file_0);
							void setDirectory(jboolean boolean_0);
							jint getLevel();
							jobjectArray getChildren();
							jlong getLength();
							jstring getName();
							FileEntry getParent();
							void setName(jstring string_0);
							void setLength(jlong long_0);
							jboolean isDirectory();
							void setLastModified(jlong long_0);
							java::io::File getFile();
						}; // end class FileEntry
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace monitor

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class BrokenOutputStream : public java::io::OutputStream {
							public:
						            BrokenOutputStream(jobject _jthis, bool copy);
						            BrokenOutputStream(const BrokenOutputStream &);
						        
							BrokenOutputStream(java::io::IOException iOException_0);
							BrokenOutputStream();
							virtual ~BrokenOutputStream();
							void write(jint int_0);
							void flush();
							void close();
						}; // end class BrokenOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class ByteArrayOutputStream : public java::io::OutputStream {
							public:
						            ByteArrayOutputStream(jobject _jthis, bool copy);
						            ByteArrayOutputStream(const ByteArrayOutputStream &);
						        
							ByteArrayOutputStream();
							ByteArrayOutputStream(jint int_0);
							virtual ~ByteArrayOutputStream();
							static java::io::InputStream toBufferedInputStream(java::io::InputStream inputStream_0);
							void writeTo(java::io::OutputStream outputStream_0);
							jstring toString(jstring string_0);
							jstring toString();
							jint size();
							void write(jbyteArray byteArray_0,jint int_1,jint int_2);
							void write(jint int_0);
							jint write(java::io::InputStream inputStream_0);
							void close();
							void reset();
							jbyteArray toByteArray();
						}; // end class ByteArrayOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class CountingOutputStream : public ProxyOutputStream {
							public:
						            CountingOutputStream(jobject _jthis, bool copy);
						            CountingOutputStream(const CountingOutputStream &);
						        
							CountingOutputStream(java::io::OutputStream outputStream_0);
							virtual ~CountingOutputStream();
							jint getCount();
							jint resetCount();
							jlong getByteCount();
							jlong resetByteCount();
						}; // end class CountingOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class FileWriterWithEncoding : public java::io::Writer {
							public:
						            FileWriterWithEncoding(jobject _jthis, bool copy);
						            FileWriterWithEncoding(const FileWriterWithEncoding &);
						        
							FileWriterWithEncoding(java::io::File file_0,java::nio::charset::Charset charset_1);
							FileWriterWithEncoding(java::io::File file_0,jstring string_1,jboolean boolean_2);
							FileWriterWithEncoding(java::io::File file_0,jstring string_1);
							FileWriterWithEncoding(java::io::File file_0,java::nio::charset::Charset charset_1,jboolean boolean_2);
							FileWriterWithEncoding(jstring string_0,jstring string_1);
							FileWriterWithEncoding(jstring string_0,jstring string_1,jboolean boolean_2);
							FileWriterWithEncoding(jstring string_0,java::nio::charset::Charset charset_1);
							FileWriterWithEncoding(jstring string_0,java::nio::charset::Charset charset_1,jboolean boolean_2);
							virtual ~FileWriterWithEncoding();
							void write(jcharArray charArray_0,jint int_1,jint int_2);
							void write(jstring string_0);
							void write(jstring string_0,jint int_1,jint int_2);
							void write(jcharArray charArray_0);
							void write(jint int_0);
							void flush();
							void close();
						}; // end class FileWriterWithEncoding
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class ProxyWriter : public java::io::FilterWriter {
							public:
						            ProxyWriter(jobject _jthis, bool copy);
						            ProxyWriter(const ProxyWriter &);
						        
							ProxyWriter(java::io::Writer writer_0);
							virtual ~ProxyWriter();
							java::io::Writer append(java::lang::CharSequence charSequence_0);
							java::io::Writer append(jchar char_0);
							java::io::Writer append(java::lang::CharSequence charSequence_0,jint int_1,jint int_2);
							void write(jint int_0);
							void write(jstring string_0,jint int_1,jint int_2);
							void write(jcharArray charArray_0,jint int_1,jint int_2);
							void write(jstring string_0);
							void write(jcharArray charArray_0);
							void flush();
							void close();
						}; // end class ProxyWriter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class EXIHeaderEncoder : public AbstractEXIHeader {
							public:
						            EXIHeaderEncoder(jobject _jthis, bool copy);
						            EXIHeaderEncoder(const EXIHeaderEncoder &);
						        
							EXIHeaderEncoder();
							virtual ~EXIHeaderEncoder();
							void write(io::channel::BitEncoderChannel bitEncoderChannel_0,EXIFactory eXIFactory_1);
						}; // end class EXIHeaderEncoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class StartElement : public AbstractEvent {
								public:
							            StartElement(jobject _jthis, bool copy);
							            StartElement(const StartElement &);
							        
								StartElement(context::QNameContext qNameContext_0);
								StartElement(context::QNameContext qNameContext_0,grammar::Grammar grammar_1);
								virtual ~StartElement();
								javax::xml::namespace::QName getQName();
								context::QNameContext getQNameContext();
								void setGrammar(grammar::Grammar grammar_0);
								grammar::Grammar getGrammar();
								jstring toString();
								jint hashCode();
							}; // end class StartElement
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class BuiltInElement : public AbstractBuiltInContent {
								public:
							            BuiltInElement(jobject _jthis, bool copy);
							            BuiltInElement(const BuiltInElement &);
							        
								virtual ~BuiltInElement();
								GrammarType getGrammarType();
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								void learnStartElement(event::StartElement startElement_0);
								void learnAttribute(event::Attribute attribute_0);
							}; // end class BuiltInElement
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class BuiltInGrammar : public java::lang::Object {
								public:
							            BuiltInGrammar(jobject _jthis, bool copy);
							            BuiltInGrammar(const BuiltInGrammar &);
							        
								BuiltInGrammar();
								virtual ~BuiltInGrammar();
							}; // end class BuiltInGrammar
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class BuiltInStartTag : public AbstractBuiltInContent {
								public:
							            BuiltInStartTag(jobject _jthis, bool copy);
							            BuiltInStartTag(const BuiltInStartTag &);
							        
								BuiltInStartTag();
								virtual ~BuiltInStartTag();
								GrammarType getGrammarType();
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								void learnEndElement();
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								void learnStartElement(event::StartElement startElement_0);
								void learnAttribute(event::Attribute attribute_0);
								Grammar getElementContentGrammar();
							}; // end class BuiltInStartTag
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class Document : public AbstractSchemaInformedGrammar {
								public:
							            Document(jobject _jthis, bool copy);
							            Document(const Document &);
							        
								Document();
								Document(jstring string_0);
								virtual ~Document();
								GrammarType getGrammarType();
								virtual jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								jint get3rdLevelCharacteristics(FidelityOptions fidelityOptions_0);
								jstring toString();
							}; // end class Document
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class Grammar : public java::lang::Object {
								public:
							            Grammar(jobject _jthis, bool copy);
							            Grammar(const Grammar &);
							        
								Grammar();
								virtual ~Grammar();
							}; // end class Grammar
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class GrammarType : public java::lang::Enum {
								public:
							            GrammarType(jobject _jthis, bool copy);
							            GrammarType(const GrammarType &);
							        
								virtual ~GrammarType();
								static jobjectArray values();
								static GrammarType valueOf(jstring string_0);
							}; // end class GrammarType
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class SchemaInformedElement : public AbstractSchemaInformedContent {
								public:
							            SchemaInformedElement(jobject _jthis, bool copy);
							            SchemaInformedElement(const SchemaInformedElement &);
							        
								SchemaInformedElement();
								virtual ~SchemaInformedElement();
								GrammarType getGrammarType();
								virtual jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								virtual jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								virtual event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								virtual jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								jstring toString();
								SchemaInformedElement clone();
							}; // end class SchemaInformedElement
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class SchemaInformedFirstStartTagGrammar : public java::lang::Object {
								public:
							            SchemaInformedFirstStartTagGrammar(jobject _jthis, bool copy);
							            SchemaInformedFirstStartTagGrammar(const SchemaInformedFirstStartTagGrammar &);
							        
								SchemaInformedFirstStartTagGrammar();
								virtual ~SchemaInformedFirstStartTagGrammar();
							}; // end class SchemaInformedFirstStartTagGrammar
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class SchemaInformedFragmentContent : public AbstractSchemaInformedGrammar {
								public:
							            SchemaInformedFragmentContent(jobject _jthis, bool copy);
							            SchemaInformedFragmentContent(const SchemaInformedFragmentContent &);
							        
								SchemaInformedFragmentContent();
								SchemaInformedFragmentContent(jstring string_0);
								virtual ~SchemaInformedFragmentContent();
								GrammarType getGrammarType();
								virtual jboolean hasSecondOrThirdLevel(FidelityOptions fidelityOptions_0);
								jint get2ndLevelEventCode(event::EventType eventType_0,FidelityOptions fidelityOptions_1);
								event::EventType get2ndLevelEventType(jint int_0,FidelityOptions fidelityOptions_1);
								jint get2ndLevelCharacteristics(FidelityOptions fidelityOptions_0);
								jstring toString();
							}; // end class SchemaInformedFragmentContent
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace grammar{
							
							class SchemaInformedGrammar : public java::lang::Object {
								public:
							            SchemaInformedGrammar(jobject _jthis, bool copy);
							            SchemaInformedGrammar(const SchemaInformedGrammar &);
							        
								SchemaInformedGrammar();
								virtual ~SchemaInformedGrammar();
							}; // end class SchemaInformedGrammar
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace grammar

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						
						class Grammars : public java::lang::Object {
							public:
						            Grammars(jobject _jthis, bool copy);
						            Grammars(const Grammars &);
						        
							Grammars();
							virtual ~Grammars();
						}; // end class Grammars
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace production{
							
							class Production : public java::lang::Object {
								public:
							            Production(jobject _jthis, bool copy);
							            Production(const Production &);
							        
								Production();
								virtual ~Production();
							}; // end class Production
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace production

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace production{
							
							class SchemaInformedProduction : public AbstractProduction {
								public:
							            SchemaInformedProduction(jobject _jthis, bool copy);
							            SchemaInformedProduction(const SchemaInformedProduction &);
							        
								SchemaInformedProduction(grammar::Grammar grammar_0,event::Event event_1,jint int_2);
								virtual ~SchemaInformedProduction();
								jint getEventCode();
							}; // end class SchemaInformedProduction
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace production

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						
						class SchemaInformedGrammars : public AbstractGrammars {
							public:
						            SchemaInformedGrammars(jobject _jthis, bool copy);
						            SchemaInformedGrammars(const SchemaInformedGrammars &);
						        
							SchemaInformedGrammars(context::GrammarContext grammarContext_0,grammar::Document document_1,grammar::Fragment fragment_2);
							virtual ~SchemaInformedGrammars();
							virtual jstring getSchemaId();
							void setSchemaId(jstring string_0);
							jboolean isBuiltInXMLSchemaTypesOnly();
							grammar::Grammar getFragmentGrammar();
							void setBuiltInXMLSchemaTypesOnly(jboolean boolean_0);
						}; // end class SchemaInformedGrammars
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace grammars

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace helpers{
						
						class DefaultErrorHandler : public java::lang::Object {
							public:
						            DefaultErrorHandler(jobject _jthis, bool copy);
						            DefaultErrorHandler(const DefaultErrorHandler &);
						        
							DefaultErrorHandler();
							virtual ~DefaultErrorHandler();
							void warning(exceptions::EXIException eXIException_0);
							void error(exceptions::EXIException eXIException_0);
						}; // end class DefaultErrorHandler
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace helpers

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace helpers{
						
						class DefaultEXIFactory : public java::lang::Object {
							public:
						            DefaultEXIFactory(jobject _jthis, bool copy);
						            DefaultEXIFactory(const DefaultEXIFactory &);
						        
							virtual ~DefaultEXIFactory();
							void setMaximumNumberOfBuiltInProductions(jint int_0);
							jint getMaximumNumberOfBuiltInProductions();
							jboolean isGrammarLearningDisabled();
							void setEXIBodyEncoder(EXIBodyEncoder eXIBodyEncoder_0);
							void setEXIBodyEncoder(jstring string_0);
							void setEXIBodyDecoder(EXIBodyDecoder eXIBodyDecoder_0);
							void setEXIBodyDecoder(jstring string_0);
							EXIBodyEncoder createEXIBodyEncoder();
							EXIBodyDecoder createEXIBodyDecoder();
							org::xml::sax::XMLReader createEXIReader();
							datatype::strings::StringEncoder createStringEncoder();
							types::TypeEncoder createTypeEncoder();
							datatype::strings::StringDecoder createStringDecoder();
							types::TypeDecoder createTypeDecoder();
							void setFragment(jboolean boolean_0);
							void setFidelityOptions(FidelityOptions fidelityOptions_0);
							FidelityOptions getFidelityOptions();
							void setEncodingOptions(EncodingOptions encodingOptions_0);
							EncodingOptions getEncodingOptions();
							void setDecodingOptions(DecodingOptions decodingOptions_0);
							DecodingOptions getDecodingOptions();
							void setSchemaIdResolver(SchemaIdResolver schemaIdResolver_0);
							SchemaIdResolver getSchemaIdResolver();
							jboolean isFragment();
							void setGrammars(grammars::Grammars grammars_0);
							grammars::Grammars getGrammars();
							void setCodingMode(CodingMode codingMode_0);
							CodingMode getCodingMode();
							void setBlockSize(jint int_0);
							jint getBlockSize();
							void setValueMaxLength(jint int_0);
							jint getValueMaxLength();
							void setValuePartitionCapacity(jint int_0);
							jint getValuePartitionCapacity();
							void setDatatypeRepresentationMap(jobjectArray qNameArray_0,jobjectArray qNameArray_1);
							jobjectArray getDatatypeRepresentationMapTypes();
							jobjectArray getDatatypeRepresentationMapRepresentations();
							void setSelfContainedElements(jobjectArray qNameArray_0);
							jboolean isSelfContainedElement(javax::xml::namespace::QName qName_0);
							void setLocalValuePartitions(jboolean boolean_0);
							jboolean isLocalValuePartitions();
							void setMaximumNumberOfBuiltInElementGrammars(jint int_0);
							jint getMaximumNumberOfBuiltInElementGrammars();
							api::sax::SAXEncoder createEXIWriter();
							jstring toString();
							jint hashCode();
							EXIFactory clone();
							static EXIFactory newInstance();
						}; // end class DefaultEXIFactory
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace helpers

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace helpers{
						
						class DefaultSchemaIdResolver : public java::lang::Object {
							public:
						            DefaultSchemaIdResolver(jobject _jthis, bool copy);
						            DefaultSchemaIdResolver(const DefaultSchemaIdResolver &);
						        
							DefaultSchemaIdResolver();
							virtual ~DefaultSchemaIdResolver();
							grammars::Grammars resolveSchemaId(jstring string_0);
						}; // end class DefaultSchemaIdResolver
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace helpers

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						
						class BitInputStream : public java::lang::Object {
							public:
						            BitInputStream(jobject _jthis, bool copy);
						            BitInputStream(const BitInputStream &);
						        
							BitInputStream(java::io::InputStream inputStream_0);
							virtual ~BitInputStream();
							jint lookAhead();
							jint readBit();
							jint readBits(jint int_0);
							void align();
							void setInputStream(java::io::InputStream inputStream_0);
							void read(jbyteArray byteArray_0,jint int_1,jint int_2);
							virtual jint read();
							void skip(jlong long_0);
						}; // end class BitInputStream
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace io

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						
						class BitOutputStream : public java::io::OutputStream {
							public:
						            BitOutputStream(jobject _jthis, bool copy);
						            BitOutputStream(const BitOutputStream &);
						        
							BitOutputStream(java::io::OutputStream outputStream_0);
							virtual ~BitOutputStream();
							void writeBit0();
							void writeBits(jint int_0,jint int_1);
							void writeBit1();
							java::io::OutputStream getUnderlyingOutputStream();
							jboolean isByteAligned();
							jint getBitsInBuffer();
							void align();
							void write(jint int_0);
							void flush();
						}; // end class BitOutputStream
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace io

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							
							class BitDecoderChannel : public AbstractDecoderChannel {
								public:
							            BitDecoderChannel(jobject _jthis, bool copy);
							            BitDecoderChannel(const BitDecoderChannel &);
							        
								BitDecoderChannel(java::io::InputStream inputStream_0);
								virtual ~BitDecoderChannel();
								jint lookAhead();
								void align();
								jboolean decodeBoolean();
								virtual jint decodeNBitUnsignedInteger(jint int_0);
								jbyteArray decodeBinary();
								virtual jint decode();
								void skip(jlong long_0);
							}; // end class BitDecoderChannel
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							
							class BitEncoderChannel : public AbstractEncoderChannel {
								public:
							            BitEncoderChannel(jobject _jthis, bool copy);
							            BitEncoderChannel(const BitEncoderChannel &);
							        
								BitEncoderChannel(java::io::OutputStream outputStream_0);
								virtual ~BitEncoderChannel();
								java::io::OutputStream getOutputStream();
								void align();
								void encodeBoolean(jboolean boolean_0);
								void encodeNBitUnsignedInteger(jint int_0,jint int_1);
								jint getLength();
								void encode(jint int_0);
								void encode(jbyteArray byteArray_0,jint int_1,jint int_2);
								void flush();
							}; // end class BitEncoderChannel
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							
							class ByteEncoderChannel : public AbstractEncoderChannel {
								public:
							            ByteEncoderChannel(jobject _jthis, bool copy);
							            ByteEncoderChannel(const ByteEncoderChannel &);
							        
								ByteEncoderChannel(java::io::OutputStream outputStream_0);
								virtual ~ByteEncoderChannel();
								java::io::OutputStream getOutputStream();
								void align();
								void encodeBoolean(jboolean boolean_0);
								void encodeNBitUnsignedInteger(jint int_0,jint int_1);
								jint getLength();
								void encode(jint int_0);
								void encode(jbyteArray byteArray_0,jint int_1,jint int_2);
								void flush();
							}; // end class ByteEncoderChannel
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class TypedTypeDecoder : public AbstractTypeDecoder {
							public:
						            TypedTypeDecoder(jobject _jthis, bool copy);
						            TypedTypeDecoder(const TypedTypeDecoder &);
						        
							TypedTypeDecoder(jobjectArray qNameArray_0,jobjectArray qNameArray_1);
							TypedTypeDecoder();
							virtual ~TypedTypeDecoder();
							values::Value readValue(datatype::Datatype datatype_0,context::QNameContext qNameContext_1,io::channel::DecoderChannel decoderChannel_2,datatype::strings::StringDecoder stringDecoder_3);
						}; // end class TypedTypeDecoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						
						class SkipRootElementXMLEventReader : public java::lang::Object {
							public:
						            SkipRootElementXMLEventReader(jobject _jthis, bool copy);
						            SkipRootElementXMLEventReader(const SkipRootElementXMLEventReader &);
						        
							SkipRootElementXMLEventReader(javax::xml::stream::XMLEventReader xMLEventReader_0);
							virtual ~SkipRootElementXMLEventReader();
							javax::xml::stream::events::XMLEvent nextEvent();
							javax::xml::stream::events::XMLEvent nextTag();
							jstring getElementText();
							void remove();
							jboolean hasNext();
							void close();
							javax::xml::stream::events::XMLEvent peek();
						}; // end class SkipRootElementXMLEventReader
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class BinaryBase64Value : public AbstractBinaryValue {
							public:
						            BinaryBase64Value(jobject _jthis, bool copy);
						            BinaryBase64Value(const BinaryBase64Value &);
						        
							BinaryBase64Value(jbyteArray byteArray_0);
							virtual ~BinaryBase64Value();
							jint getCharactersLength();
							void getCharacters(jcharArray charArray_0,jint int_1);
							jint hashCode();
							static jbyteArray decode(jstring string_0);
							static BinaryBase64Value parse(jstring string_0);
						}; // end class BinaryBase64Value
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class BooleanValue : public AbstractValue {
							public:
						            BooleanValue(jobject _jthis, bool copy);
						            BooleanValue(const BooleanValue &);
						        
							BooleanValue(jboolean boolean_0);
							BooleanValue(jint int_0);
							virtual ~BooleanValue();
							jint getCharactersLength();
							jcharArray getCharacters();
							void getCharacters(jcharArray charArray_0,jint int_1);
							jboolean toBoolean();
							jstring toString(jcharArray charArray_0,jint int_1);
							jstring toString();
							jint hashCode();
							static BooleanValue parse(jstring string_0);
						}; // end class BooleanValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class DecimalValue : public AbstractValue {
							public:
						            DecimalValue(jobject _jthis, bool copy);
						            DecimalValue(const DecimalValue &);
						        
							DecimalValue(jboolean boolean_0,IntegerValue integerValue_1,IntegerValue integerValue_2);
							virtual ~DecimalValue();
							java::math::BigDecimal toBigDecimal();
							jint getCharactersLength();
							void getCharacters(jcharArray charArray_0,jint int_1);
							IntegerValue getRevFractional();
							jboolean isNegative();
							IntegerValue getIntegral();
							jint hashCode();
							static DecimalValue parse(jstring string_0);
						}; // end class DecimalValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class FloatValue : public AbstractValue {
							public:
						            FloatValue(jobject _jthis, bool copy);
						            FloatValue(const FloatValue &);
						        
							FloatValue(IntegerValue integerValue_0,IntegerValue integerValue_1);
							FloatValue(jlong long_0,jlong long_1);
							virtual ~FloatValue();
							java::lang::Double toDouble();
							jint getCharactersLength();
							void getCharacters(jcharArray charArray_0,jint int_1);
							IntegerValue getMantissa();
							java::lang::Float toFloat();
							jstring toString(jcharArray charArray_0,jint int_1);
							jstring toString();
							jint hashCode();
							IntegerValue getExponent();
							static FloatValue parse(jdouble double_0);
							static FloatValue parse(jfloat float_0);
							static FloatValue parse(jstring string_0);
						}; // end class FloatValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class IntegerValueType : public java::lang::Enum {
							public:
						            IntegerValueType(jobject _jthis, bool copy);
						            IntegerValueType(const IntegerValueType &);
						        
							virtual ~IntegerValueType();
							static jobjectArray values();
							static IntegerValueType valueOf(jstring string_0);
						}; // end class IntegerValueType
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class ListValue : public AbstractValue {
							public:
						            ListValue(jobject _jthis, bool copy);
						            ListValue(const ListValue &);
						        
							ListValue(jobjectArray valueArray_0,datatype::Datatype datatype_1);
							virtual ~ListValue();
							jint getNumberOfValues();
							jobjectArray toValues();
							jint getCharactersLength();
							void getCharacters(jcharArray charArray_0,jint int_1);
							datatype::Datatype getListDatatype();
							jint hashCode();
							static ListValue parse(jstring string_0,datatype::Datatype datatype_1);
						}; // end class ListValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class QNameValue : public AbstractValue {
							public:
						            QNameValue(jobject _jthis, bool copy);
						            QNameValue(const QNameValue &);
						        
							QNameValue(jstring string_0,jstring string_1,jstring string_2);
							virtual ~QNameValue();
							jstring getPrefix();
							jint getCharactersLength();
							jstring getLocalName();
							jstring getNamespaceUri();
							void getCharacters(jcharArray charArray_0,jint int_1);
							jcharArray getCharacters();
							jstring toString(jcharArray charArray_0,jint int_1);
							jstring toString();
							jint hashCode();
						}; // end class QNameValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class StringValue : public AbstractValue {
							public:
						            StringValue(jobject _jthis, bool copy);
						            StringValue(const StringValue &);
						        
							StringValue(jcharArray charArray_0);
							StringValue(jstring string_0);
							virtual ~StringValue();
							jint getCharactersLength();
							jcharArray getCharacters();
							void getCharacters(jcharArray charArray_0,jint int_1);
							jstring toString(jcharArray charArray_0,jint int_1);
							jstring toString();
							jint hashCode();
						}; // end class StringValue
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace values{
						
						class Value : public java::lang::Object {
							public:
						            Value(jobject _jthis, bool copy);
						            Value(const Value &);
						        
							Value();
							virtual ~Value();
						}; // end class Value
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace values

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class EXIRegularExpression : public RegularExpression {
								public:
							            EXIRegularExpression(jobject _jthis, bool copy);
							            EXIRegularExpression(const EXIRegularExpression &);
							        
								EXIRegularExpression(jstring string_0);
								virtual ~EXIRegularExpression();
								jboolean isEntireSetOfXMLCharacters();
								java::util::Set getCodePoints();
								jint hashCode();
							}; // end class EXIRegularExpression
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLAnchorElementImpl : public HTMLElementImpl {
						public:
					            HTMLAnchorElementImpl(jobject _jthis, bool copy);
					            HTMLAnchorElementImpl(const HTMLAnchorElementImpl &);
					        
						HTMLAnchorElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLAnchorElementImpl();
						jstring getAccessKey();
						void setAccessKey(jstring string_0);
						jstring getCharset();
						void setCharset(jstring string_0);
						jstring getCoords();
						void setCoords(jstring string_0);
						jstring getHreflang();
						void setHreflang(jstring string_0);
						jstring getRel();
						void setRel(jstring string_0);
						jstring getRev();
						void setRev(jstring string_0);
						jint getTabIndex();
						void setTabIndex(jint int_0);
						void blur();
						void focus();
						void setShape(jstring string_0);
						jstring getShape();
						void setType(jstring string_0);
						jstring getHref();
						void setHref(jstring string_0);
						jstring getName();
						void setName(jstring string_0);
						jstring getType();
						jstring getTarget();
						void setTarget(jstring string_0);
					}; // end class HTMLAnchorElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLButtonElementImpl : public HTMLElementImpl {
						public:
					            HTMLButtonElementImpl(jobject _jthis, bool copy);
					            HTMLButtonElementImpl(const HTMLButtonElementImpl &);
					        
						HTMLButtonElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLButtonElementImpl();
						jstring getAccessKey();
						void setAccessKey(jstring string_0);
						jint getTabIndex();
						void setTabIndex(jint int_0);
						jboolean getDisabled();
						void setDisabled(jboolean boolean_0);
						jstring getName();
						jstring getValue();
						void setName(jstring string_0);
						void setValue(jstring string_0);
						jstring getType();
					}; // end class HTMLButtonElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLCollectionImpl : public java::lang::Object {
						public:
					            HTMLCollectionImpl(jobject _jthis, bool copy);
					            HTMLCollectionImpl(const HTMLCollectionImpl &);
					        
						virtual ~HTMLCollectionImpl();
						virtual w3c::dom::Node item(jint int_0);
						virtual w3c::dom::Node namedItem(jstring string_0);
						virtual jint getLength();
					}; // end class HTMLCollectionImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLHtmlElementImpl : public HTMLElementImpl {
						public:
					            HTMLHtmlElementImpl(jobject _jthis, bool copy);
					            HTMLHtmlElementImpl(const HTMLHtmlElementImpl &);
					        
						HTMLHtmlElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLHtmlElementImpl();
						jstring getVersion();
						void setVersion(jstring string_0);
					}; // end class HTMLHtmlElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLTitleElementImpl : public HTMLElementImpl {
						public:
					            HTMLTitleElementImpl(jobject _jthis, bool copy);
					            HTMLTitleElementImpl(const HTMLTitleElementImpl &);
					        
						HTMLTitleElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLTitleElementImpl();
						void setText(jstring string_0);
						jstring getText();
					}; // end class HTMLTitleElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class ObjectFactory : public java::lang::Object {
						public:
					            ObjectFactory(jobject _jthis, bool copy);
					            ObjectFactory(const ObjectFactory &);
					        
						virtual ~ObjectFactory();
					}; // end class ObjectFactory
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class SecuritySupport : public java::lang::Object {
						public:
					            SecuritySupport(jobject _jthis, bool copy);
					            SecuritySupport(const SecuritySupport &);
					        
						virtual ~SecuritySupport();
					}; // end class SecuritySupport
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLAnchorElement : public java::lang::Object {
					public:
				            WMLAnchorElement(jobject _jthis, bool copy);
				            WMLAnchorElement(const WMLAnchorElement &);
				        
					WMLAnchorElement();
					virtual ~WMLAnchorElement();
				}; // end class WMLAnchorElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLFieldsetElement : public java::lang::Object {
					public:
				            WMLFieldsetElement(jobject _jthis, bool copy);
				            WMLFieldsetElement(const WMLFieldsetElement &);
				        
					WMLFieldsetElement();
					virtual ~WMLFieldsetElement();
				}; // end class WMLFieldsetElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLOneventElement : public java::lang::Object {
					public:
				            WMLOneventElement(jobject _jthis, bool copy);
				            WMLOneventElement(const WMLOneventElement &);
				        
					WMLOneventElement();
					virtual ~WMLOneventElement();
				}; // end class WMLOneventElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLSetvarElement : public java::lang::Object {
					public:
				            WMLSetvarElement(jobject _jthis, bool copy);
				            WMLSetvarElement(const WMLSetvarElement &);
				        
					WMLSetvarElement();
					virtual ~WMLSetvarElement();
				}; // end class WMLSetvarElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLUElement : public java::lang::Object {
					public:
				            WMLUElement(jobject _jthis, bool copy);
				            WMLUElement(const WMLUElement &);
				        
					WMLUElement();
					virtual ~WMLUElement();
				}; // end class WMLUElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLElementDecl : public java::lang::Object {
							public:
						            XMLElementDecl(jobject _jthis, bool copy);
						            XMLElementDecl(const XMLElementDecl &);
						        
							XMLElementDecl();
							virtual ~XMLElementDecl();
							void setValues(xni::QName qName_0,jint int_1,jshort short_2,models::ContentModelValidator contentModelValidator_3,XMLSimpleType xMLSimpleType_4);
							void clear();
						}; // end class XMLElementDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLNotationDecl : public java::lang::Object {
							public:
						            XMLNotationDecl(jobject _jthis, bool copy);
						            XMLNotationDecl(const XMLNotationDecl &);
						        
							XMLNotationDecl();
							virtual ~XMLNotationDecl();
							void setValues(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
							void clear();
						}; // end class XMLNotationDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class CMAny : public CMNode {
								public:
							            CMAny(jobject _jthis, bool copy);
							            CMAny(const CMAny &);
							        
								CMAny(jint int_0,jstring string_1,jint int_2);
								virtual ~CMAny();
								jboolean isNullable();
								jstring toString();
							}; // end class CMAny
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class CMLeaf : public CMNode {
								public:
							            CMLeaf(jobject _jthis, bool copy);
							            CMLeaf(const CMLeaf &);
							        
								CMLeaf(xni::QName qName_0,jint int_1);
								CMLeaf(xni::QName qName_0);
								virtual ~CMLeaf();
								jboolean isNullable();
								jstring toString();
							}; // end class CMLeaf
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class ContentModelValidator : public java::lang::Object {
								public:
							            ContentModelValidator(jobject _jthis, bool copy);
							            ContentModelValidator(const ContentModelValidator &);
							        
								ContentModelValidator();
								virtual ~ContentModelValidator();
							}; // end class ContentModelValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class MixedContentModel : public java::lang::Object {
								public:
							            MixedContentModel(jobject _jthis, bool copy);
							            MixedContentModel(const MixedContentModel &);
							        
								MixedContentModel(jobjectArray qNameArray_0,jintArray intArray_1,jint int_2,jint int_3,jboolean boolean_4);
								virtual ~MixedContentModel();
								jint validate(jobjectArray qNameArray_0,jint int_1,jint int_2);
							}; // end class MixedContentModel
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class DVFactoryException : public java::lang::RuntimeException {
							public:
						            DVFactoryException(jobject _jthis, bool copy);
						            DVFactoryException(const DVFactoryException &);
						        
							DVFactoryException();
							DVFactoryException(jstring string_0);
							virtual ~DVFactoryException();
						}; // end class DVFactoryException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class DatatypeValidator : public java::lang::Object {
							public:
						            DatatypeValidator(jobject _jthis, bool copy);
						            DatatypeValidator(const DatatypeValidator &);
						        
							DatatypeValidator();
							virtual ~DatatypeValidator();
						}; // end class DatatypeValidator
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class InvalidDatatypeValueException : public DatatypeException {
							public:
						            InvalidDatatypeValueException(jobject _jthis, bool copy);
						            InvalidDatatypeValueException(const InvalidDatatypeValueException &);
						        
							virtual ~InvalidDatatypeValueException();
						}; // end class InvalidDatatypeValueException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class SecuritySupport : public java::lang::Object {
							public:
						            SecuritySupport(jobject _jthis, bool copy);
						            SecuritySupport(const SecuritySupport &);
						        
							virtual ~SecuritySupport();
						}; // end class SecuritySupport
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class XML11DTDDVFactoryImpl : public DTDDVFactoryImpl {
								public:
							            XML11DTDDVFactoryImpl(jobject _jthis, bool copy);
							            XML11DTDDVFactoryImpl(const XML11DTDDVFactoryImpl &);
							        
								XML11DTDDVFactoryImpl();
								virtual ~XML11DTDDVFactoryImpl();
								java::util::Hashtable getBuiltInTypes();
								DatatypeValidator getBuiltInDV(jstring string_0);
							}; // end class XML11DTDDVFactoryImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class FloatDV : public TypeValidator {
								public:
							            FloatDV(jobject _jthis, bool copy);
							            FloatDV(const FloatDV &);
							        
								FloatDV();
								virtual ~FloatDV();
								jshort getAllowedFacets();
							}; // end class FloatDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class FullDVFactory : public BaseDVFactory {
								public:
							            FullDVFactory(jobject _jthis, bool copy);
							            FullDVFactory(const FullDVFactory &);
							        
								FullDVFactory();
								virtual ~FullDVFactory();
								XSSimpleType getBuiltInType(jstring string_0);
								util::SymbolHash getBuiltInTypes();
							}; // end class FullDVFactory
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class IntegerDV : public DecimalDV {
								public:
							            IntegerDV(jobject _jthis, bool copy);
							            IntegerDV(const IntegerDV &);
							        
								IntegerDV();
								virtual ~IntegerDV();
							}; // end class IntegerDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class MonthDV : public AbstractDateTimeDV {
								public:
							            MonthDV(jobject _jthis, bool copy);
							            MonthDV(const MonthDV &);
							        
								MonthDV();
								virtual ~MonthDV();
							}; // end class MonthDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class QNameDV : public TypeValidator {
								public:
							            QNameDV(jobject _jthis, bool copy);
							            QNameDV(const QNameDV &);
							        
								QNameDV();
								virtual ~QNameDV();
								jshort getAllowedFacets();
							}; // end class QNameDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class YearMonthDV : public AbstractDateTimeDV {
								public:
							            YearMonthDV(jobject _jthis, bool copy);
							            YearMonthDV(const YearMonthDV &);
							        
								YearMonthDV();
								virtual ~YearMonthDV();
							}; // end class YearMonthDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace validation{
						
						class EntityState : public java::lang::Object {
							public:
						            EntityState(jobject _jthis, bool copy);
						            EntityState(const EntityState &);
						        
							EntityState();
							virtual ~EntityState();
						}; // end class EntityState
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace validation{
						
						class ValidationManager : public java::lang::Object {
							public:
						            ValidationManager(jobject _jthis, bool copy);
						            ValidationManager(const ValidationManager &);
						        
							ValidationManager();
							virtual ~ValidationManager();
							virtual void addValidationState(ValidationState validationState_0);
							virtual void setCachedDTD(jboolean boolean_0);
							virtual void setEntityState(EntityState entityState_0);
							virtual void setGrammarFound(jboolean boolean_0);
							virtual jboolean isCachedDTD();
							virtual jboolean isGrammarFound();
							virtual void reset();
						}; // end class ValidationManager
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class Op : public java::lang::Object {
								public:
							            Op(jobject _jthis, bool copy);
							            Op(const Op &);
							        
								virtual ~Op();
							}; // end class Op
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class ParserForXMLSchema : public RegexParser {
								public:
							            ParserForXMLSchema(jobject _jthis, bool copy);
							            ParserForXMLSchema(const ParserForXMLSchema &);
							        
								ParserForXMLSchema();
								ParserForXMLSchema(java::util::Locale locale_0);
								virtual ~ParserForXMLSchema();
							}; // end class ParserForXMLSchema
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class REUtil : public java::lang::Object {
								public:
							            REUtil(jobject _jthis, bool copy);
							            REUtil(const REUtil &);
							        
								virtual ~REUtil();
								static jstring quoteMeta(jstring string_0);
								static RegularExpression createRegex(jstring string_0,jstring string_1);
								static void main(jobjectArray stringArray_0);
								static void main(int argc,const char **argv);
								static jboolean matches(jstring string_0,jstring string_1,jstring string_2);
								static jboolean matches(jstring string_0,jstring string_1);
							}; // end class REUtil
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class RangeToken : public Token {
								public:
							            RangeToken(jobject _jthis, bool copy);
							            RangeToken(const RangeToken &);
							        
								virtual ~RangeToken();
								jstring toString(jint int_0);
							}; // end class RangeToken
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class ElementPSVImpl : public java::lang::Object {
							public:
						            ElementPSVImpl(jobject _jthis, bool copy);
						            ElementPSVImpl(const ElementPSVImpl &);
						        
							ElementPSVImpl();
							virtual ~ElementPSVImpl();
							void copySchemaInformationTo(ElementPSVImpl elementPSVImpl_0);
							xs::XSElementDeclaration getElementDeclaration();
							xs::XSTypeDefinition getTypeDefinition();
							xs::ShortList getItemValueTypes();
							jstring getSchemaDefault();
							jstring getSchemaNormalizedValue();
							jboolean getIsSchemaSpecified();
							jshort getValidationAttempted();
							jshort getValidity();
							xs::StringList getErrorCodes();
							xs::StringList getErrorMessages();
							jstring getValidationContext();
							xs::XSSimpleTypeDefinition getMemberTypeDefinition();
							jshort getActualNormalizedValueType();
							xs::XSValue getSchemaValue();
							xs::XSModel getSchemaInformation();
							xs::XSNotationDeclaration getNotation();
							jboolean getNil();
							void reset();
						}; // end class ElementPSVImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class SchemaSymbols : public java::lang::Object {
							public:
						            SchemaSymbols(jobject _jthis, bool copy);
						            SchemaSymbols(const SchemaSymbols &);
						        
							SchemaSymbols();
							virtual ~SchemaSymbols();
						}; // end class SchemaSymbols
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XMLSchemaLoader : public java::lang::Object {
							public:
						            XMLSchemaLoader(jobject _jthis, bool copy);
						            XMLSchemaLoader(const XMLSchemaLoader &);
						        
							XMLSchemaLoader();
							XMLSchemaLoader(util::SymbolTable symbolTable_0);
							virtual ~XMLSchemaLoader();
							void setLocale(java::util::Locale locale_0);
							jboolean getFeature(jstring string_0);
							void setFeature(jstring string_0,jboolean boolean_1);
							void setEntityResolver(xni::parser::XMLEntityResolver xMLEntityResolver_0);
							xni::parser::XMLEntityResolver getEntityResolver();
							xni::parser::XMLErrorHandler getErrorHandler();
							java::util::Locale getLocale();
							void setErrorHandler(xni::parser::XMLErrorHandler xMLErrorHandler_0);
							xni::grammars::Grammar loadGrammar(xni::parser::XMLInputSource xMLInputSource_0);
							void loadGrammar(jobjectArray xMLInputSourceArray_0);
							XSElementDecl getGlobalElementDecl(xni::QName qName_0);
							jobjectArray getRecognizedFeatures();
							jobjectArray getRecognizedProperties();
							java::lang::Boolean getFeatureDefault(jstring string_0);
							xs::XSModel loadURI(jstring string_0);
							xs::XSModel loadURIList(xs::StringList stringList_0);
							w3c::dom::DOMConfiguration getConfig();
							xs::XSModel loadInputList(xs::LSInputList lSInputList_0);
							w3c::dom::DOMStringList getParameterNames();
							static void processExternalHints(jstring string_0,jstring string_1,java::util::Hashtable hashtable_2,XMLErrorReporter xMLErrorReporter_3);
							static jboolean tokenizeSchemaLocationStr(jstring string_0,java::util::Hashtable hashtable_1,jstring string_2);
							static xni::parser::XMLInputSource resolveDocument(XSDDescription xSDDescription_0,java::util::Hashtable hashtable_1,xni::parser::XMLEntityResolver xMLEntityResolver_2);
							xs::XSModel load(w3c::dom::ls::LSInput lSInput_0);
							void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
						}; // end class XMLSchemaLoader
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class XSEmptyCM : public java::lang::Object {
								public:
							            XSEmptyCM(jobject _jthis, bool copy);
							            XSEmptyCM(const XSEmptyCM &);
							        
								XSEmptyCM();
								virtual ~XSEmptyCM();
								jintArray occurenceInfo(jintArray intArray_0);
								jintArray startContentModel();
								java::util::Vector whatCanGoHere(jintArray intArray_0);
								jboolean endContentModel(jintArray intArray_0);
								jboolean isCompactedForUPA();
								jboolean checkUniqueParticleAttribution(SubstitutionGroupHandler substitutionGroupHandler_0);
								jstring getTermName(jint int_0);
							}; // end class XSEmptyCM
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class AttrImpl : public NodeImpl {
								public:
							            AttrImpl(jobject _jthis, bool copy);
							            AttrImpl(const AttrImpl &);
							        
								AttrImpl();
								AttrImpl(w3c::dom::Element element_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jstring string_5);
								virtual ~AttrImpl();
								w3c::dom::TypeInfo getSchemaTypeInfo();
								jstring getNodeValue();
								w3c::dom::Document getOwnerDocument();
								jboolean isId();
								w3c::dom::Element getOwnerElement();
								jboolean getSpecified();
								jstring toString();
								jstring getName();
								jstring getValue();
								void setValue(jstring string_0);
							}; // end class AttrImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class NamedNodeMapImpl : public java::lang::Object {
								public:
							            NamedNodeMapImpl(jobject _jthis, bool copy);
							            NamedNodeMapImpl(const NamedNodeMapImpl &);
							        
								NamedNodeMapImpl(jobjectArray attrArray_0);
								virtual ~NamedNodeMapImpl();
								w3c::dom::Node item(jint int_0);
								w3c::dom::Node removeNamedItem(jstring string_0);
								w3c::dom::Node removeNamedItemNS(jstring string_0,jstring string_1);
								w3c::dom::Node getNamedItem(jstring string_0);
								w3c::dom::Node setNamedItem(w3c::dom::Node node_0);
								w3c::dom::Node getNamedItemNS(jstring string_0,jstring string_1);
								w3c::dom::Node setNamedItemNS(w3c::dom::Node node_0);
								jint getLength();
							}; // end class NamedNodeMapImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class SchemaDOM : public DefaultDocument {
								public:
							            SchemaDOM(jobject _jthis, bool copy);
							            SchemaDOM(const SchemaDOM &);
							        
								SchemaDOM();
								virtual ~SchemaDOM();
								void printDOM();
								static void indent(jint int_0);
								ElementImpl startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,jint int_2,jint int_3,jint int_4);
								ElementImpl startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,jint int_2,jint int_3);
								void endElement();
								w3c::dom::DOMImplementation getImplementation();
								w3c::dom::Element getDocumentElement();
								ElementImpl emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,jint int_2,jint int_3);
								ElementImpl emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,jint int_2,jint int_3,jint int_4);
								static void traverse(w3c::dom::Node node_0,jint int_1);
								void reset();
							}; // end class SchemaDOM
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class SchemaParsingConfig : public parsers::BasicParserConfiguration {
								public:
							            SchemaParsingConfig(jobject _jthis, bool copy);
							            SchemaParsingConfig(const SchemaParsingConfig &);
							        
								SchemaParsingConfig(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
								SchemaParsingConfig();
								SchemaParsingConfig(util::SymbolTable symbolTable_0);
								SchemaParsingConfig(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
								virtual ~SchemaParsingConfig();
								void resetNodePool();
								void setLocale(java::util::Locale locale_0);
								jboolean getFeature(jstring string_0);
								void setFeature(jstring string_0,jboolean boolean_1);
								void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
								void reset();
								void parse(xni::parser::XMLInputSource xMLInputSource_0);
								jboolean parse(jboolean boolean_0);
								void cleanup();
							}; // end class SchemaParsingConfig
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class SmallContainer : public Container {
								public:
							            SmallContainer(jobject _jthis, bool copy);
							            SmallContainer(const SmallContainer &);
							        
								virtual ~SmallContainer();
							}; // end class SmallContainer
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class StAXSchemaParser : public java::lang::Object {
								public:
							            StAXSchemaParser(jobject _jthis, bool copy);
							            StAXSchemaParser(const StAXSchemaParser &);
							        
								StAXSchemaParser();
								virtual ~StAXSchemaParser();
								w3c::dom::Document getDocument();
								void reset(opti::SchemaDOMParser schemaDOMParser_0,util::SymbolTable symbolTable_1);
								void parse(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
								void parse(javax::xml::stream::XMLEventReader xMLEventReader_0);
							}; // end class StAXSchemaParser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDElementTraverser : public XSDAbstractTraverser {
								public:
							            XSDElementTraverser(jobject _jthis, bool copy);
							            XSDElementTraverser(const XSDElementTraverser &);
							        
								virtual ~XSDElementTraverser();
							}; // end class XSDElementTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDHandler : public java::lang::Object {
								public:
							            XSDHandler(jobject _jthis, bool copy);
							            XSDHandler(const XSDHandler &);
							        
								XSDHandler(XSGrammarBucket xSGrammarBucket_0);
								XSDHandler();
								virtual ~XSDHandler();
								void setGenerateSyntheticAnnotations(jboolean boolean_0);
								SchemaGrammar parseSchema(xni::parser::XMLInputSource xMLInputSource_0,XSDDescription xSDDescription_1,java::util::Hashtable hashtable_2);
								void setDeclPool(XSDeclarationPool xSDeclarationPool_0);
								void setDVFactory(dv::SchemaDVFactory schemaDVFactory_0);
								jboolean element2Locator(w3c::dom::Element element_0,util::SimpleLocator simpleLocator_1);
								util::SimpleLocator element2Locator(w3c::dom::Element element_0);
								jstring schemaDocument2SystemId(XSDocumentInfo xSDocumentInfo_0);
								void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
							}; // end class XSDHandler
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						
						class DurationImpl : public javax::xml::datatype::Duration {
							public:
						            DurationImpl(jobject _jthis, bool copy);
						            DurationImpl(const DurationImpl &);
						        
							virtual ~DurationImpl();
							jint getHours();
							jint getMinutes();
							jint getSeconds();
							jlong getTimeInMillis(java::util::Date date_0);
							jlong getTimeInMillis(java::util::Calendar calendar_0);
							javax::xml::datatype::Duration multiply(java::math::BigDecimal bigDecimal_0);
							javax::xml::datatype::Duration multiply(jint int_0);
							javax::xml::datatype::Duration subtract(javax::xml::datatype::Duration duration_0);
							jint getSign();
							void addTo(java::util::Calendar calendar_0);
							void addTo(java::util::Date date_0);
							javax::xml::datatype::Duration normalizeWith(java::util::Calendar calendar_0);
							javax::xml::datatype::Duration negate();
							jint getYears();
							jint getMonths();
							jint getDays();
							javax::xml::datatype::Duration add(javax::xml::datatype::Duration duration_0);
							jstring toString();
							jint hashCode();
							jint compare(javax::xml::datatype::Duration duration_0);
							java::lang::Number getField(javax::xml::datatype::DatatypeConstants::Field field_0);
							jboolean isSet(javax::xml::datatype::DatatypeConstants::Field field_0);
							jint signum();
						}; // end class DurationImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class DOMResultBuilder : public java::lang::Object {
							public:
						            DOMResultBuilder(jobject _jthis, bool copy);
						            DOMResultBuilder(const DOMResultBuilder &);
						        
							DOMResultBuilder();
							virtual ~DOMResultBuilder();
							void setIgnoringCharacters(jboolean boolean_0);
							void setDOMResult(javax::xml::transform::dom::DOMResult dOMResult_0);
							void cdata(w3c::dom::CDATASection cDATASection_0);
							void startCDATA(xni::Augmentations augmentations_0);
							void endCDATA(xni::Augmentations augmentations_0);
							void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void processingInstruction(w3c::dom::ProcessingInstruction processingInstruction_0);
							void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
							void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void comment(w3c::dom::Comment comment_0);
							void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void characters(w3c::dom::Text text_0);
							void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
							void endDocument(xni::Augmentations augmentations_0);
							void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
							void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
							xni::parser::XMLDocumentSource getDocumentSource();
							void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void doctypeDecl(w3c::dom::DocumentType documentType_0);
							void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						}; // end class DOMResultBuilder
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class DraconianErrorHandler : public java::lang::Object {
							public:
						            DraconianErrorHandler(jobject _jthis, bool copy);
						            DraconianErrorHandler(const DraconianErrorHandler &);
						        
							virtual ~DraconianErrorHandler();
							void fatalError(xml::sax::SAXParseException sAXParseException_0);
							void warning(xml::sax::SAXParseException sAXParseException_0);
							static DraconianErrorHandler getInstance();
							void error(xml::sax::SAXParseException sAXParseException_0);
						}; // end class DraconianErrorHandler
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class JAXPValidationMessageFormatter : public java::lang::Object {
							public:
						            JAXPValidationMessageFormatter(jobject _jthis, bool copy);
						            JAXPValidationMessageFormatter(const JAXPValidationMessageFormatter &);
						        
							virtual ~JAXPValidationMessageFormatter();
						}; // end class JAXPValidationMessageFormatter
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class SimpleXMLSchema : public AbstractXMLSchema {
							public:
						            SimpleXMLSchema(jobject _jthis, bool copy);
						            SimpleXMLSchema(const SimpleXMLSchema &);
						        
							SimpleXMLSchema(xni::grammars::Grammar grammar_0);
							virtual ~SimpleXMLSchema();
							void cacheGrammars(jstring string_0,jobjectArray grammarArray_1);
							xni::grammars::Grammar retrieveGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
							void lockPool();
							void unlockPool();
							jobjectArray retrieveInitialGrammarSet(jstring string_0);
							xni::grammars::XMLGrammarPool getGrammarPool();
							jboolean isFullyComposed();
							void clear();
						}; // end class SimpleXMLSchema
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class StAXDocumentHandler : public java::lang::Object {
							public:
						            StAXDocumentHandler(jobject _jthis, bool copy);
						            StAXDocumentHandler(const StAXDocumentHandler &);
						        
							StAXDocumentHandler();
							virtual ~StAXDocumentHandler();
						}; // end class StAXDocumentHandler
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class StAXEventResultBuilder : public java::lang::Object {
							public:
						            StAXEventResultBuilder(jobject _jthis, bool copy);
						            StAXEventResultBuilder(const StAXEventResultBuilder &);
						        
							StAXEventResultBuilder(StAXValidatorHelper stAXValidatorHelper_0,util::JAXPNamespaceContextWrapper jAXPNamespaceContextWrapper_1);
							virtual ~StAXEventResultBuilder();
							void entityReference(javax::xml::stream::events::EntityReference entityReference_0);
							void entityReference(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void setIgnoringCharacters(jboolean boolean_0);
							void setStAXResult(javax::xml::transform::stax::StAXResult stAXResult_0);
							void cdata(javax::xml::stream::events::Characters characters_0);
							void startCDATA(xni::Augmentations augmentations_0);
							void endCDATA(xni::Augmentations augmentations_0);
							void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void processingInstruction(javax::xml::stream::events::ProcessingInstruction processingInstruction_0);
							void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
							void processingInstruction(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void comment(javax::xml::stream::events::Comment comment_0);
							void comment(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void characters(javax::xml::stream::events::Characters characters_0);
							void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
							void startDocument(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void startDocument(javax::xml::stream::events::StartDocument startDocument_0);
							void endDocument(xni::Augmentations augmentations_0);
							void endDocument(javax::xml::stream::events::EndDocument endDocument_0);
							void endDocument(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
							void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
							xni::parser::XMLDocumentSource getDocumentSource();
							void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void doctypeDecl(javax::xml::stream::events::DTD dTD_0);
							void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						}; // end class StAXEventResultBuilder
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class StreamValidatorHelper : public java::lang::Object {
							public:
						            StreamValidatorHelper(jobject _jthis, bool copy);
						            StreamValidatorHelper(const StreamValidatorHelper &);
						        
							StreamValidatorHelper(XMLSchemaValidatorComponentManager xMLSchemaValidatorComponentManager_0);
							virtual ~StreamValidatorHelper();
							void validate(javax::xml::transform::Source source_0,javax::xml::transform::Result result_1);
						}; // end class StreamValidatorHelper
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class WeakReferenceXMLSchema : public AbstractXMLSchema {
							public:
						            WeakReferenceXMLSchema(jobject _jthis, bool copy);
						            WeakReferenceXMLSchema(const WeakReferenceXMLSchema &);
						        
							WeakReferenceXMLSchema();
							virtual ~WeakReferenceXMLSchema();
							xni::grammars::XMLGrammarPool getGrammarPool();
							jboolean isFullyComposed();
						}; // end class WeakReferenceXMLSchema
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class CachingParserPool : public java::lang::Object {
						public:
					            CachingParserPool(jobject _jthis, bool copy);
					            CachingParserPool(const CachingParserPool &);
					        
						CachingParserPool(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						CachingParserPool();
						virtual ~CachingParserPool();
						SAXParser createSAXParser();
						xni::grammars::XMLGrammarPool getXMLGrammarPool();
						void setShadowSymbolTable(jboolean boolean_0);
						DOMParser createDOMParser();
						util::SymbolTable getSymbolTable();
					}; // end class CachingParserPool
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class DOMParser : public AbstractDOMParser {
						public:
					            DOMParser(jobject _jthis, bool copy);
					            DOMParser(const DOMParser &);
					        
						DOMParser(xni::parser::XMLParserConfiguration xMLParserConfiguration_0);
						DOMParser(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						DOMParser();
						DOMParser(util::SymbolTable symbolTable_0);
						virtual ~DOMParser();
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(xml::sax::EntityResolver entityResolver_0);
						xml::sax::EntityResolver getEntityResolver();
						xml::sax::ErrorHandler getErrorHandler();
						void setErrorHandler(xml::sax::ErrorHandler errorHandler_0);
						xni::parser::XMLParserConfiguration getXMLParserConfiguration();
						void parse(jstring string_0);
						void parse(xml::sax::InputSource inputSource_0);
					}; // end class DOMParser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class DTDParser : public XMLGrammarParser {
						public:
					            DTDParser(jobject _jthis, bool copy);
					            DTDParser(const DTDParser &);
					        
						DTDParser(util::SymbolTable symbolTable_0);
						virtual ~DTDParser();
						void childrenStartGroup();
						void childrenElement(jstring string_0);
						void childrenEndGroup();
						void mixedElement(jstring string_0);
						void childrenSeparator(jshort short_0);
						void childrenOccurrence(jshort short_0);
						impl::dtd::DTDGrammar getDTDGrammar();
						void startDTD(xni::XMLLocator xMLLocator_0,xni::Augmentations augmentations_1);
						void endDTD(xni::Augmentations augmentations_0);
						void startEntity(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						void endEntity(jstring string_0,xni::Augmentations augmentations_1);
						void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jobjectArray stringArray_3,jstring string_4,xni::XMLString xMLString_5,xni::XMLString xMLString_6,xni::Augmentations augmentations_7);
						void elementDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
						void externalEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void internalEntityDecl(jstring string_0,xni::XMLString xMLString_1,xni::XMLString xMLString_2,xni::Augmentations augmentations_3);
						void notationDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,xni::Augmentations augmentations_2);
						void unparsedEntityDecl(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void startContentModel(jstring string_0,jshort short_1);
						void endContentModel();
						void textDecl(jstring string_0,jstring string_1);
						void startExternalSubset(xni::XMLResourceIdentifier xMLResourceIdentifier_0,xni::Augmentations augmentations_1);
						void endExternalSubset(xni::Augmentations augmentations_0);
						void startAttlist(jstring string_0,xni::Augmentations augmentations_1);
						void endAttlist(xni::Augmentations augmentations_0);
						void startConditional(jshort short_0,xni::Augmentations augmentations_1);
						void endConditional(xni::Augmentations augmentations_0);
					}; // end class DTDParser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class IntegratedParserConfiguration : public StandardParserConfiguration {
						public:
					            IntegratedParserConfiguration(jobject _jthis, bool copy);
					            IntegratedParserConfiguration(const IntegratedParserConfiguration &);
					        
						IntegratedParserConfiguration();
						IntegratedParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						IntegratedParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						IntegratedParserConfiguration(util::SymbolTable symbolTable_0);
						virtual ~IntegratedParserConfiguration();
					}; // end class IntegratedParserConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class ObjectFactory : public java::lang::Object {
						public:
					            ObjectFactory(jobject _jthis, bool copy);
					            ObjectFactory(const ObjectFactory &);
					        
						virtual ~ObjectFactory();
					}; // end class ObjectFactory
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class SecurityConfiguration : public XIncludeAwareParserConfiguration {
						public:
					            SecurityConfiguration(jobject _jthis, bool copy);
					            SecurityConfiguration(const SecurityConfiguration &);
					        
						SecurityConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						SecurityConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						SecurityConfiguration(util::SymbolTable symbolTable_0);
						SecurityConfiguration();
						virtual ~SecurityConfiguration();
					}; // end class SecurityConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class SoftReferenceSymbolTableConfiguration : public XIncludeAwareParserConfiguration {
						public:
					            SoftReferenceSymbolTableConfiguration(jobject _jthis, bool copy);
					            SoftReferenceSymbolTableConfiguration(const SoftReferenceSymbolTableConfiguration &);
					        
						SoftReferenceSymbolTableConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						SoftReferenceSymbolTableConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						SoftReferenceSymbolTableConfiguration(util::SymbolTable symbolTable_0);
						SoftReferenceSymbolTableConfiguration();
						virtual ~SoftReferenceSymbolTableConfiguration();
					}; // end class SoftReferenceSymbolTableConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XIncludeParserConfiguration : public XML11Configuration {
						public:
					            XIncludeParserConfiguration(jobject _jthis, bool copy);
					            XIncludeParserConfiguration(const XIncludeParserConfiguration &);
					        
						XIncludeParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						XIncludeParserConfiguration();
						XIncludeParserConfiguration(util::SymbolTable symbolTable_0);
						XIncludeParserConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						virtual ~XIncludeParserConfiguration();
					}; // end class XIncludeParserConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XML11DTDConfiguration : public util::ParserConfigurationSettings {
						public:
					            XML11DTDConfiguration(jobject _jthis, bool copy);
					            XML11DTDConfiguration(const XML11DTDConfiguration &);
					        
						XML11DTDConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						XML11DTDConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						XML11DTDConfiguration(util::SymbolTable symbolTable_0);
						XML11DTDConfiguration();
						virtual ~XML11DTDConfiguration();
						void setLocale(java::util::Locale locale_0);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(xni::parser::XMLEntityResolver xMLEntityResolver_0);
						xni::parser::XMLEntityResolver getEntityResolver();
						void setDTDHandler(xni::XMLDTDHandler xMLDTDHandler_0);
						xni::XMLDTDHandler getDTDHandler();
						xni::parser::XMLErrorHandler getErrorHandler();
						java::util::Locale getLocale();
						void setErrorHandler(xni::parser::XMLErrorHandler xMLErrorHandler_0);
						void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
						void setDTDContentModelHandler(xni::XMLDTDContentModelHandler xMLDTDContentModelHandler_0);
						xni::XMLDTDContentModelHandler getDTDContentModelHandler();
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getDocumentHandler();
						void parse(xni::parser::XMLInputSource xMLInputSource_0);
						jboolean parse(jboolean boolean_0);
						void cleanup();
					}; // end class XML11DTDConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XML11NonValidatingConfiguration : public util::ParserConfigurationSettings {
						public:
					            XML11NonValidatingConfiguration(jobject _jthis, bool copy);
					            XML11NonValidatingConfiguration(const XML11NonValidatingConfiguration &);
					        
						XML11NonValidatingConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						XML11NonValidatingConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						XML11NonValidatingConfiguration(util::SymbolTable symbolTable_0);
						XML11NonValidatingConfiguration();
						virtual ~XML11NonValidatingConfiguration();
						void setLocale(java::util::Locale locale_0);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(xni::parser::XMLEntityResolver xMLEntityResolver_0);
						xni::parser::XMLEntityResolver getEntityResolver();
						void setDTDHandler(xni::XMLDTDHandler xMLDTDHandler_0);
						xni::XMLDTDHandler getDTDHandler();
						xni::parser::XMLErrorHandler getErrorHandler();
						java::util::Locale getLocale();
						void setErrorHandler(xni::parser::XMLErrorHandler xMLErrorHandler_0);
						void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
						void setDTDContentModelHandler(xni::XMLDTDContentModelHandler xMLDTDContentModelHandler_0);
						xni::XMLDTDContentModelHandler getDTDContentModelHandler();
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						xni::XMLDocumentHandler getDocumentHandler();
						void parse(xni::parser::XMLInputSource xMLInputSource_0);
						jboolean parse(jboolean boolean_0);
						void cleanup();
					}; // end class XML11NonValidatingConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					
					class DefaultNamespaceContext : public java::lang::Object {
						public:
					            DefaultNamespaceContext(jobject _jthis, bool copy);
					            DefaultNamespaceContext(const DefaultNamespaceContext &);
					        
						virtual ~DefaultNamespaceContext();
						java::util::Iterator getPrefixes(jstring string_0);
						jstring getPrefix(jstring string_0);
						jstring getNamespaceURI(jstring string_0);
						static DefaultNamespaceContext getInstance();
					}; // end class DefaultNamespaceContext
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace stax

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					
					class XMLEventFactoryImpl : public javax::xml::stream::XMLEventFactory {
						public:
					            XMLEventFactoryImpl(jobject _jthis, bool copy);
					            XMLEventFactoryImpl(const XMLEventFactoryImpl &);
					        
						XMLEventFactoryImpl();
						virtual ~XMLEventFactoryImpl();
						javax::xml::stream::events::Namespace createNamespace(jstring string_0);
						javax::xml::stream::events::Namespace createNamespace(jstring string_0,jstring string_1);
						javax::xml::stream::events::EndElement createEndElement(jstring string_0,jstring string_1,jstring string_2,java::util::Iterator iterator_3);
						javax::xml::stream::events::EndElement createEndElement(javax::xml::namespace::QName qName_0,java::util::Iterator iterator_1);
						javax::xml::stream::events::EndElement createEndElement(jstring string_0,jstring string_1,jstring string_2);
						javax::xml::stream::events::Characters createCharacters(jstring string_0);
						javax::xml::stream::events::Characters createCData(jstring string_0);
						javax::xml::stream::events::Characters createSpace(jstring string_0);
						javax::xml::stream::events::Characters createIgnorableSpace(jstring string_0);
						javax::xml::stream::events::StartDocument createStartDocument(jstring string_0);
						javax::xml::stream::events::StartDocument createStartDocument(jstring string_0,jstring string_1);
						javax::xml::stream::events::StartDocument createStartDocument(jstring string_0,jstring string_1,jboolean boolean_2);
						javax::xml::stream::events::StartDocument createStartDocument();
						javax::xml::stream::events::EndDocument createEndDocument();
						javax::xml::stream::events::DTD createDTD(jstring string_0);
						void setLocation(javax::xml::stream::Location location_0);
						javax::xml::stream::events::StartElement createStartElement(javax::xml::namespace::QName qName_0,java::util::Iterator iterator_1,java::util::Iterator iterator_2);
						javax::xml::stream::events::StartElement createStartElement(jstring string_0,jstring string_1,jstring string_2);
						javax::xml::stream::events::StartElement createStartElement(jstring string_0,jstring string_1,jstring string_2,java::util::Iterator iterator_3,java::util::Iterator iterator_4,javax::xml::namespace::NamespaceContext namespaceContext_5);
						javax::xml::stream::events::StartElement createStartElement(jstring string_0,jstring string_1,jstring string_2,java::util::Iterator iterator_3,java::util::Iterator iterator_4);
						javax::xml::stream::events::Attribute createAttribute(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						javax::xml::stream::events::Attribute createAttribute(jstring string_0,jstring string_1);
						javax::xml::stream::events::Attribute createAttribute(javax::xml::namespace::QName qName_0,jstring string_1);
						javax::xml::stream::events::Comment createComment(jstring string_0);
						javax::xml::stream::events::EntityReference createEntityReference(jstring string_0,javax::xml::stream::events::EntityDeclaration entityDeclaration_1);
						javax::xml::stream::events::ProcessingInstruction createProcessingInstruction(jstring string_0,jstring string_1);
					}; // end class XMLEventFactoryImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace stax

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class EntityDeclarationImpl : public XMLEventImpl {
							public:
						            EntityDeclarationImpl(jobject _jthis, bool copy);
						            EntityDeclarationImpl(const EntityDeclarationImpl &);
						        
							EntityDeclarationImpl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,javax::xml::stream::Location location_4);
							virtual ~EntityDeclarationImpl();
							jstring getBaseURI();
							jstring getReplacementText();
							jstring getSystemId();
							jstring getPublicId();
							jstring getNotationName();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
							jstring getName();
						}; // end class EntityDeclarationImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class NotationDeclarationImpl : public XMLEventImpl {
							public:
						            NotationDeclarationImpl(jobject _jthis, bool copy);
						            NotationDeclarationImpl(const NotationDeclarationImpl &);
						        
							NotationDeclarationImpl(jstring string_0,jstring string_1,jstring string_2,javax::xml::stream::Location location_3);
							virtual ~NotationDeclarationImpl();
							jstring getSystemId();
							jstring getPublicId();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
							jstring getName();
						}; // end class NotationDeclarationImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class AugmentationsImpl : public java::lang::Object {
						public:
					            AugmentationsImpl(jobject _jthis, bool copy);
					            AugmentationsImpl(const AugmentationsImpl &);
					        
						AugmentationsImpl();
						virtual ~AugmentationsImpl();
						void removeAllItems();
						jstring toString();
						java::util::Enumeration keys();
					}; // end class AugmentationsImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class DOMErrorHandlerWrapper : public java::lang::Object {
						public:
					            DOMErrorHandlerWrapper(jobject _jthis, bool copy);
					            DOMErrorHandlerWrapper(const DOMErrorHandlerWrapper &);
					        
						DOMErrorHandlerWrapper();
						DOMErrorHandlerWrapper(w3c::dom::DOMErrorHandler dOMErrorHandler_0);
						virtual ~DOMErrorHandlerWrapper();
						void fatalError(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
						void warning(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
						w3c::dom::DOMErrorHandler getErrorHandler();
						void setErrorHandler(w3c::dom::DOMErrorHandler dOMErrorHandler_0);
						jboolean handleError(w3c::dom::DOMError dOMError_0);
						void error(jstring string_0,jstring string_1,xni::parser::XMLParseException xMLParseException_2);
					}; // end class DOMErrorHandlerWrapper
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class DOMUtil : public java::lang::Object {
						public:
					            DOMUtil(jobject _jthis, bool copy);
					            DOMUtil(const DOMUtil &);
					        
						virtual ~DOMUtil();
						static void setHidden(w3c::dom::Node node_0);
						static void setHidden(w3c::dom::Node node_0,java::util::Hashtable hashtable_1);
						static jstring getAttrValue(w3c::dom::Element element_0,jstring string_1);
						static w3c::dom::DOMException createDOMException(jshort short_0,java::lang::Throwable throwable_1);
						static w3c::dom::Element getLastChildElement(w3c::dom::Node node_0,jobjectArray stringArray_1);
						static w3c::dom::Element getLastChildElement(w3c::dom::Node node_0,jstring string_1);
						static w3c::dom::Element getLastChildElement(w3c::dom::Node node_0,jstring string_1,jstring string_2,jstring string_3);
						static w3c::dom::Element getLastChildElement(w3c::dom::Node node_0);
						static w3c::dom::Element getFirstVisibleChildElement(w3c::dom::Node node_0,java::util::Hashtable hashtable_1);
						static w3c::dom::Element getFirstVisibleChildElement(w3c::dom::Node node_0);
						static w3c::dom::Element getNextVisibleSiblingElement(w3c::dom::Node node_0,java::util::Hashtable hashtable_1);
						static w3c::dom::Element getNextVisibleSiblingElement(w3c::dom::Node node_0);
						static w3c::dom::Element getLastVisibleChildElement(w3c::dom::Node node_0,java::util::Hashtable hashtable_1);
						static w3c::dom::Element getLastVisibleChildElement(w3c::dom::Node node_0);
						static w3c::dom::Element getFirstChildElementNS(w3c::dom::Node node_0,jstring string_1,jstring string_2);
						static w3c::dom::Element getLastChildElementNS(w3c::dom::Node node_0,jstring string_1,jstring string_2);
						static w3c::dom::Element getNextSiblingElementNS(w3c::dom::Node node_0,jstring string_1,jstring string_2);
						static jstring getChildText(w3c::dom::Node node_0);
						static w3c::dom::Attr getAttr(w3c::dom::Element element_0,jstring string_1);
						static w3c::dom::Attr getAttrNS(w3c::dom::Element element_0,jstring string_1,jstring string_2);
						static jobjectArray getAttrs(w3c::dom::Element element_0);
						static jstring getAttrValueNS(w3c::dom::Element element_0,jstring string_1,jstring string_2);
						static w3c::dom::Document getDocument(w3c::dom::Node node_0);
						static void setVisible(w3c::dom::Node node_0);
						static void setVisible(w3c::dom::Node node_0,java::util::Hashtable hashtable_1);
						static jstring getPrefix(w3c::dom::Node node_0);
						static jstring getNamespaceURI(w3c::dom::Node node_0);
						static jstring getLocalName(w3c::dom::Node node_0);
						static w3c::dom::ls::LSException createLSException(jshort short_0,java::lang::Throwable throwable_1);
						static w3c::dom::Element getFirstChildElement(w3c::dom::Node node_0,jobjectArray stringArray_1);
						static w3c::dom::Element getFirstChildElement(w3c::dom::Node node_0,jstring string_1);
						static w3c::dom::Element getFirstChildElement(w3c::dom::Node node_0);
						static w3c::dom::Element getFirstChildElement(w3c::dom::Node node_0,jstring string_1,jstring string_2,jstring string_3);
						static w3c::dom::Element getNextSiblingElement(w3c::dom::Node node_0,jstring string_1);
						static w3c::dom::Element getNextSiblingElement(w3c::dom::Node node_0);
						static w3c::dom::Element getNextSiblingElement(w3c::dom::Node node_0,jstring string_1,jstring string_2,jstring string_3);
						static w3c::dom::Element getNextSiblingElement(w3c::dom::Node node_0,jobjectArray stringArray_1);
						static jstring getSyntheticAnnotation(w3c::dom::Node node_0);
						static jstring getName(w3c::dom::Node node_0);
						static jstring getValue(w3c::dom::Attr attr_0);
						static jstring getAnnotation(w3c::dom::Node node_0);
						static w3c::dom::Element getParent(w3c::dom::Element element_0);
						static w3c::dom::Element getRoot(w3c::dom::Document document_0);
						static jboolean isHidden(w3c::dom::Node node_0,java::util::Hashtable hashtable_1);
						static jboolean isHidden(w3c::dom::Node node_0);
						static void copyInto(w3c::dom::Node node_0,w3c::dom::Node node_1);
					}; // end class DOMUtil
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class IntStack : public java::lang::Object {
						public:
					            IntStack(jobject _jthis, bool copy);
					            IntStack(const IntStack &);
					        
						IntStack();
						virtual ~IntStack();
						void clear();
						jint size();
						jint elementAt(jint int_0);
						void push(jint int_0);
						jint pop();
						void print();
						jint peek();
					}; // end class IntStack
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class LocatorProxy : public java::lang::Object {
						public:
					            LocatorProxy(jobject _jthis, bool copy);
					            LocatorProxy(const LocatorProxy &);
					        
						LocatorProxy(xni::XMLLocator xMLLocator_0);
						virtual ~LocatorProxy();
						jint getColumnNumber();
						jstring getSystemId();
						jstring getPublicId();
						jstring getXMLVersion();
						jint getLineNumber();
						jstring getEncoding();
					}; // end class LocatorProxy
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					
					class XIncludeMessageFormatter : public java::lang::Object {
						public:
					            XIncludeMessageFormatter(jobject _jthis, bool copy);
					            XIncludeMessageFormatter(const XIncludeMessageFormatter &);
					        
						XIncludeMessageFormatter();
						virtual ~XIncludeMessageFormatter();
					}; // end class XIncludeMessageFormatter
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class Augmentations : public java::lang::Object {
						public:
					            Augmentations(jobject _jthis, bool copy);
					            Augmentations(const Augmentations &);
					        
						Augmentations();
						virtual ~Augmentations();
					}; // end class Augmentations
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class NamespaceContext : public java::lang::Object {
						public:
					            NamespaceContext(jobject _jthis, bool copy);
					            NamespaceContext(const NamespaceContext &);
					        
						NamespaceContext();
						virtual ~NamespaceContext();
					}; // end class NamespaceContext
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class QName : public java::lang::Object {
						public:
					            QName(jobject _jthis, bool copy);
					            QName(const QName &);
					        
						QName();
						QName(QName qName_0);
						QName(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						virtual ~QName();
						void setValues(QName qName_0);
						void setValues(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						jstring toString();
						jint hashCode();
						void clear();
					}; // end class QName
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class XMLAttributes : public java::lang::Object {
						public:
					            XMLAttributes(jobject _jthis, bool copy);
					            XMLAttributes(const XMLAttributes &);
					        
						XMLAttributes();
						virtual ~XMLAttributes();
					}; // end class XMLAttributes
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class XMLDTDHandler : public java::lang::Object {
						public:
					            XMLDTDHandler(jobject _jthis, bool copy);
					            XMLDTDHandler(const XMLDTDHandler &);
					        
						XMLDTDHandler();
						virtual ~XMLDTDHandler();
					}; // end class XMLDTDHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class XMLDocumentHandler : public java::lang::Object {
						public:
					            XMLDocumentHandler(jobject _jthis, bool copy);
					            XMLDocumentHandler(const XMLDocumentHandler &);
					        
						XMLDocumentHandler();
						virtual ~XMLDocumentHandler();
					}; // end class XMLDocumentHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						
						class Grammar : public java::lang::Object {
							public:
						            Grammar(jobject _jthis, bool copy);
						            Grammar(const Grammar &);
						        
							Grammar();
							virtual ~Grammar();
						}; // end class Grammar
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						
						class XMLDTDDescription : public java::lang::Object {
							public:
						            XMLDTDDescription(jobject _jthis, bool copy);
						            XMLDTDDescription(const XMLDTDDescription &);
						        
							XMLDTDDescription();
							virtual ~XMLDTDDescription();
						}; // end class XMLDTDDescription
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						
						class XMLGrammarPool : public java::lang::Object {
							public:
						            XMLGrammarPool(jobject _jthis, bool copy);
						            XMLGrammarPool(const XMLGrammarPool &);
						        
							XMLGrammarPool();
							virtual ~XMLGrammarPool();
						}; // end class XMLGrammarPool
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						
						class XSGrammar : public java::lang::Object {
							public:
						            XSGrammar(jobject _jthis, bool copy);
						            XSGrammar(const XSGrammar &);
						        
							XSGrammar();
							virtual ~XSGrammar();
						}; // end class XSGrammar
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLComponentManager : public java::lang::Object {
							public:
						            XMLComponentManager(jobject _jthis, bool copy);
						            XMLComponentManager(const XMLComponentManager &);
						        
							XMLComponentManager();
							virtual ~XMLComponentManager();
						}; // end class XMLComponentManager
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLDTDContentModelFilter : public java::lang::Object {
							public:
						            XMLDTDContentModelFilter(jobject _jthis, bool copy);
						            XMLDTDContentModelFilter(const XMLDTDContentModelFilter &);
						        
							XMLDTDContentModelFilter();
							virtual ~XMLDTDContentModelFilter();
						}; // end class XMLDTDContentModelFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLDTDFilter : public java::lang::Object {
							public:
						            XMLDTDFilter(jobject _jthis, bool copy);
						            XMLDTDFilter(const XMLDTDFilter &);
						        
							XMLDTDFilter();
							virtual ~XMLDTDFilter();
						}; // end class XMLDTDFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLDocumentFilter : public java::lang::Object {
							public:
						            XMLDocumentFilter(jobject _jthis, bool copy);
						            XMLDocumentFilter(const XMLDocumentFilter &);
						        
							XMLDocumentFilter();
							virtual ~XMLDocumentFilter();
						}; // end class XMLDocumentFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLDocumentScanner : public java::lang::Object {
							public:
						            XMLDocumentScanner(jobject _jthis, bool copy);
						            XMLDocumentScanner(const XMLDocumentScanner &);
						        
							XMLDocumentScanner();
							virtual ~XMLDocumentScanner();
						}; // end class XMLDocumentScanner
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLPullParserConfiguration : public java::lang::Object {
							public:
						            XMLPullParserConfiguration(jobject _jthis, bool copy);
						            XMLPullParserConfiguration(const XMLPullParserConfiguration &);
						        
							XMLPullParserConfiguration();
							virtual ~XMLPullParserConfiguration();
						}; // end class XMLPullParserConfiguration
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					
					class ShortHandPointer : public java::lang::Object {
						public:
					            ShortHandPointer(jobject _jthis, bool copy);
					            ShortHandPointer(const ShortHandPointer &);
					        
						ShortHandPointer(util::SymbolTable symbolTable_0);
						ShortHandPointer();
						virtual ~ShortHandPointer();
						jstring getDTDDeterminedID(xni::XMLAttributes xMLAttributes_0,jint int_1);
						jstring getSchemaDeterminedID(xni::XMLAttributes xMLAttributes_0,jint int_1);
						jstring getChildrenSchemaDeterminedID(xni::XMLAttributes xMLAttributes_0,jint int_1);
						jboolean resolveXPointer(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2,jint int_3);
						jstring getSchemeName();
						void parseXPointer(jstring string_0);
						jboolean isFragmentResolved();
						jboolean isChildFragmentResolved();
						jstring getSchemeData();
						void setSchemeName(jstring string_0);
						void setSchemeData(jstring string_0);
					}; // end class ShortHandPointer
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					
					class XPointerMessageFormatter : public java::lang::Object {
						public:
					            XPointerMessageFormatter(jobject _jthis, bool copy);
					            XPointerMessageFormatter(const XPointerMessageFormatter &);
					        
						virtual ~XPointerMessageFormatter();
					}; // end class XPointerMessageFormatter
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					
					class XPointerProcessor : public java::lang::Object {
						public:
					            XPointerProcessor(jobject _jthis, bool copy);
					            XPointerProcessor(const XPointerProcessor &);
					        
						XPointerProcessor();
						virtual ~XPointerProcessor();
					}; // end class XPointerProcessor
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class ElementPSVI : public java::lang::Object {
						public:
					            ElementPSVI(jobject _jthis, bool copy);
					            ElementPSVI(const ElementPSVI &);
					        
						ElementPSVI();
						virtual ~ElementPSVI();
					}; // end class ElementPSVI
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class LSInputList : public java::lang::Object {
						public:
					            LSInputList(jobject _jthis, bool copy);
					            LSInputList(const LSInputList &);
					        
						LSInputList();
						virtual ~LSInputList();
					}; // end class LSInputList
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class PSVIProvider : public java::lang::Object {
						public:
					            PSVIProvider(jobject _jthis, bool copy);
					            PSVIProvider(const PSVIProvider &);
					        
						PSVIProvider();
						virtual ~PSVIProvider();
					}; // end class PSVIProvider
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSAnnotation : public java::lang::Object {
						public:
					            XSAnnotation(jobject _jthis, bool copy);
					            XSAnnotation(const XSAnnotation &);
					        
						XSAnnotation();
						virtual ~XSAnnotation();
					}; // end class XSAnnotation
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSIDCDefinition : public java::lang::Object {
						public:
					            XSIDCDefinition(jobject _jthis, bool copy);
					            XSIDCDefinition(const XSIDCDefinition &);
					        
						XSIDCDefinition();
						virtual ~XSIDCDefinition();
					}; // end class XSIDCDefinition
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSNamespaceItem : public java::lang::Object {
						public:
					            XSNamespaceItem(jobject _jthis, bool copy);
					            XSNamespaceItem(const XSNamespaceItem &);
					        
						XSNamespaceItem();
						virtual ~XSNamespaceItem();
					}; // end class XSNamespaceItem
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSTypeDefinition : public java::lang::Object {
						public:
					            XSTypeDefinition(jobject _jthis, bool copy);
					            XSTypeDefinition(const XSTypeDefinition &);
					        
						XSTypeDefinition();
						virtual ~XSTypeDefinition();
					}; // end class XSTypeDefinition
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						
						class XSFloat : public java::lang::Object {
							public:
						            XSFloat(jobject _jthis, bool copy);
						            XSFloat(const XSFloat &);
						        
							XSFloat();
							virtual ~XSFloat();
						}; // end class XSFloat
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class OutputFormat : public java::lang::Object {
						public:
					            OutputFormat(jobject _jthis, bool copy);
					            OutputFormat(const OutputFormat &);
					        
						OutputFormat(jstring string_0,jstring string_1,jboolean boolean_2);
						OutputFormat(w3c::dom::Document document_0);
						OutputFormat(w3c::dom::Document document_0,jstring string_1,jboolean boolean_2);
						OutputFormat();
						virtual ~OutputFormat();
						jstring getVersion();
						void setMethod(jstring string_0);
						void setOmitDocumentType(jboolean boolean_0);
						jboolean getPreserveEmptyAttributes();
						void setMediaType(jstring string_0);
						void setDoctype(jstring string_0,jstring string_1);
						jobjectArray getNonEscapingElements();
						jobjectArray getCDataElements();
						void setCDataElements(jobjectArray stringArray_0);
						void setCDataElements(int argc,const char **argv);
						void setEncoding(jstring string_0);
						void setEncoding(EncodingInfo encodingInfo_0);
						static jstring whichDoctypePublic(w3c::dom::Document document_0);
						void setNonEscapingElements(jobjectArray stringArray_0);
						void setNonEscapingElements(int argc,const char **argv);
						jint getLineWidth();
						void setVersion(jstring string_0);
						void setStandalone(jboolean boolean_0);
						jboolean getStandalone();
						static jstring whichMediaType(jstring string_0);
						static jstring whichDoctypeSystem(w3c::dom::Document document_0);
						jchar getLastPrintable();
						static jstring whichMethod(w3c::dom::Document document_0);
						void setPreserveEmptyAttributes(jboolean boolean_0);
						void setPreserveSpace(jboolean boolean_0);
						void setLineWidth(jint int_0);
						jint getIndent();
						void setIndent(jint int_0);
						jstring getMediaType();
						jboolean setAllowJavaNames();
						void setAllowJavaNames(jboolean boolean_0);
						EncodingInfo getEncodingInfo();
						void setLineSeparator(jstring string_0);
						jstring getLineSeparator();
						void setIndenting(jboolean boolean_0);
						void setOmitComments(jboolean boolean_0);
						void setOmitXMLDeclaration(jboolean boolean_0);
						jboolean getPreserveSpace();
						jboolean isCDataElement(jstring string_0);
						jboolean isNonEscapingElement(jstring string_0);
						jboolean getOmitXMLDeclaration();
						jboolean getOmitDocumentType();
						jboolean getIndenting();
						jstring getDoctypePublic();
						jstring getDoctypeSystem();
						jboolean getOmitComments();
						jstring getMethod();
						jstring getEncoding();
					}; // end class OutputFormat
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace javax{
		namespace xml{
			namespace stream{
				
				class FactoryFinder : public java::lang::Object {
					public:
				            FactoryFinder(jobject _jthis, bool copy);
				            FactoryFinder(const FactoryFinder &);
				        
					virtual ~FactoryFinder();
				}; // end class FactoryFinder
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLEventReader : public java::lang::Object {
					public:
				            XMLEventReader(jobject _jthis, bool copy);
				            XMLEventReader(const XMLEventReader &);
				        
					XMLEventReader();
					virtual ~XMLEventReader();
				}; // end class XMLEventReader
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLStreamReader : public java::lang::Object {
					public:
				            XMLStreamReader(jobject _jthis, bool copy);
				            XMLStreamReader(const XMLStreamReader &);
				        
					XMLStreamReader();
					virtual ~XMLStreamReader();
				}; // end class XMLStreamReader
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class EntityDeclaration : public java::lang::Object {
						public:
					            EntityDeclaration(jobject _jthis, bool copy);
					            EntityDeclaration(const EntityDeclaration &);
					        
						EntityDeclaration();
						virtual ~EntityDeclaration();
					}; // end class EntityDeclaration
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace util{
					
					class EventReaderDelegate : public java::lang::Object {
						public:
					            EventReaderDelegate(jobject _jthis, bool copy);
					            EventReaderDelegate(const EventReaderDelegate &);
					        
						EventReaderDelegate();
						EventReaderDelegate(XMLEventReader xMLEventReader_0);
						virtual ~EventReaderDelegate();
						events::XMLEvent nextEvent();
						events::XMLEvent nextTag();
						jstring getElementText();
						void remove();
						jboolean hasNext();
						XMLEventReader getParent();
						void close();
						events::XMLEvent peek();
						void setParent(XMLEventReader xMLEventReader_0);
					}; // end class EventReaderDelegate
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace util

	namespace javax{
		namespace xml{
			namespace transform{
				
				class Result : public java::lang::Object {
					public:
				            Result(jobject _jthis, bool copy);
				            Result(const Result &);
				        
					Result();
					virtual ~Result();
				}; // end class Result
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				
				class Source : public java::lang::Object {
					public:
				            Source(jobject _jthis, bool copy);
				            Source(const Source &);
				        
					Source();
					virtual ~Source();
				}; // end class Source
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				
				class URIResolver : public java::lang::Object {
					public:
				            URIResolver(jobject _jthis, bool copy);
				            URIResolver(const URIResolver &);
				        
					URIResolver();
					virtual ~URIResolver();
				}; // end class URIResolver
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace validation{
				
				class SecuritySupport : public java::lang::Object {
					public:
				            SecuritySupport(jobject _jthis, bool copy);
				            SecuritySupport(const SecuritySupport &);
				        
					virtual ~SecuritySupport();
				}; // end class SecuritySupport
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathFunction : public java::lang::Object {
					public:
				            XPathFunction(jobject _jthis, bool copy);
				            XPathFunction(const XPathFunction &);
				        
					XPathFunction();
					virtual ~XPathFunction();
				}; // end class XPathFunction
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DOMImplementation : public java::lang::Object {
					public:
				            DOMImplementation(jobject _jthis, bool copy);
				            DOMImplementation(const DOMImplementation &);
				        
					DOMImplementation();
					virtual ~DOMImplementation();
				}; // end class DOMImplementation
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DocumentType : public java::lang::Object {
					public:
				            DocumentType(jobject _jthis, bool copy);
				            DocumentType(const DocumentType &);
				        
					DocumentType();
					virtual ~DocumentType();
				}; // end class DocumentType
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class NodeList : public java::lang::Object {
					public:
				            NodeList(jobject _jthis, bool copy);
				            NodeList(const NodeList &);
				        
					NodeList();
					virtual ~NodeList();
				}; // end class NodeList
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSImportRule : public java::lang::Object {
						public:
					            CSSImportRule(jobject _jthis, bool copy);
					            CSSImportRule(const CSSImportRule &);
					        
						CSSImportRule();
						virtual ~CSSImportRule();
					}; // end class CSSImportRule
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSStyleRule : public java::lang::Object {
						public:
					            CSSStyleRule(jobject _jthis, bool copy);
					            CSSStyleRule(const CSSStyleRule &);
					        
						CSSStyleRule();
						virtual ~CSSStyleRule();
					}; // end class CSSStyleRule
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class ElementCSSInlineStyle : public java::lang::Object {
						public:
					            ElementCSSInlineStyle(jobject _jthis, bool copy);
					            ElementCSSInlineStyle(const ElementCSSInlineStyle &);
					        
						ElementCSSInlineStyle();
						virtual ~ElementCSSInlineStyle();
					}; // end class ElementCSSInlineStyle
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					
					class EventTarget : public java::lang::Object {
						public:
					            EventTarget(jobject _jthis, bool copy);
					            EventTarget(const EventTarget &);
					        
						EventTarget();
						virtual ~EventTarget();
					}; // end class EventTarget
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLBaseElement : public java::lang::Object {
						public:
					            HTMLBaseElement(jobject _jthis, bool copy);
					            HTMLBaseElement(const HTMLBaseElement &);
					        
						HTMLBaseElement();
						virtual ~HTMLBaseElement();
					}; // end class HTMLBaseElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLDocument : public java::lang::Object {
						public:
					            HTMLDocument(jobject _jthis, bool copy);
					            HTMLDocument(const HTMLDocument &);
					        
						HTMLDocument();
						virtual ~HTMLDocument();
					}; // end class HTMLDocument
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLHeadElement : public java::lang::Object {
						public:
					            HTMLHeadElement(jobject _jthis, bool copy);
					            HTMLHeadElement(const HTMLHeadElement &);
					        
						HTMLHeadElement();
						virtual ~HTMLHeadElement();
					}; // end class HTMLHeadElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLLabelElement : public java::lang::Object {
						public:
					            HTMLLabelElement(jobject _jthis, bool copy);
					            HTMLLabelElement(const HTMLLabelElement &);
					        
						HTMLLabelElement();
						virtual ~HTMLLabelElement();
					}; // end class HTMLLabelElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLObjectElement : public java::lang::Object {
						public:
					            HTMLObjectElement(jobject _jthis, bool copy);
					            HTMLObjectElement(const HTMLObjectElement &);
					        
						HTMLObjectElement();
						virtual ~HTMLObjectElement();
					}; // end class HTMLObjectElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLOptGroupElement : public java::lang::Object {
						public:
					            HTMLOptGroupElement(jobject _jthis, bool copy);
					            HTMLOptGroupElement(const HTMLOptGroupElement &);
					        
						HTMLOptGroupElement();
						virtual ~HTMLOptGroupElement();
					}; // end class HTMLOptGroupElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLStyleElement : public java::lang::Object {
						public:
					            HTMLStyleElement(jobject _jthis, bool copy);
					            HTMLStyleElement(const HTMLStyleElement &);
					        
						HTMLStyleElement();
						virtual ~HTMLStyleElement();
					}; // end class HTMLStyleElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLTitleElement : public java::lang::Object {
						public:
					            HTMLTitleElement(jobject _jthis, bool copy);
					            HTMLTitleElement(const HTMLTitleElement &);
					        
						HTMLTitleElement();
						virtual ~HTMLTitleElement();
					}; // end class HTMLTitleElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace traversal{
					
					class NodeIterator : public java::lang::Object {
						public:
					            NodeIterator(jobject _jthis, bool copy);
					            NodeIterator(const NodeIterator &);
					        
						NodeIterator();
						virtual ~NodeIterator();
					}; // end class NodeIterator
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace traversal

	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					
					class XPathNamespace : public java::lang::Object {
						public:
					            XPathNamespace(jobject _jthis, bool copy);
					            XPathNamespace(const XPathNamespace &);
					        
						XPathNamespace();
						virtual ~XPathNamespace();
					}; // end class XPathNamespace
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath

	namespace org{
		namespace xml{
			namespace sax{
				
				class ErrorHandler : public java::lang::Object {
					public:
				            ErrorHandler(jobject _jthis, bool copy);
				            ErrorHandler(const ErrorHandler &);
				        
					ErrorHandler();
					virtual ~ErrorHandler();
				}; // end class ErrorHandler
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				
				class SAXParseException : public SAXException {
					public:
				            SAXParseException(jobject _jthis, bool copy);
				            SAXParseException(const SAXParseException &);
				        
					SAXParseException(jstring string_0,Locator locator_1);
					SAXParseException(jstring string_0,Locator locator_1,java::lang::Exception exception_2);
					SAXParseException(jstring string_0,jstring string_1,jstring string_2,jint int_3,jint int_4,java::lang::Exception exception_5);
					SAXParseException(jstring string_0,jstring string_1,jstring string_2,jint int_3,jint int_4);
					virtual ~SAXParseException();
					jint getColumnNumber();
					jstring getSystemId();
					jstring getPublicId();
					jstring toString();
					jint getLineNumber();
				}; // end class SAXParseException
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					
					class LexicalHandler : public java::lang::Object {
						public:
					            LexicalHandler(jobject _jthis, bool copy);
					            LexicalHandler(const LexicalHandler &);
					        
						LexicalHandler();
						virtual ~LexicalHandler();
					}; // end class LexicalHandler
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class NamespaceSupport : public java::lang::Object {
						public:
					            NamespaceSupport(jobject _jthis, bool copy);
					            NamespaceSupport(const NamespaceSupport &);
					        
						NamespaceSupport();
						virtual ~NamespaceSupport();
						java::util::Enumeration getPrefixes();
						java::util::Enumeration getPrefixes(jstring string_0);
						void setNamespaceDeclUris(jboolean boolean_0);
						jboolean isNamespaceDeclUris();
						jobjectArray processName(jstring string_0,jobjectArray stringArray_1,jboolean boolean_2);
						jstring getPrefix(jstring string_0);
						jstring getURI(jstring string_0);
						void pushContext();
						jboolean declarePrefix(jstring string_0,jstring string_1);
						void popContext();
						java::util::Enumeration getDeclaredPrefixes();
						void reset();
					}; // end class NamespaceSupport
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace crcl{
		namespace utils{
			
			class SimServerOuterStub : public java::lang::Object {
				public:
			            SimServerOuterStub(jobject _jthis, bool copy);
			            SimServerOuterStub(const SimServerOuterStub &);
			        
				SimServerOuterStub();
				SimServerOuterStub(jboolean boolean_0,jboolean boolean_1,jboolean boolean_2,jboolean boolean_3,jboolean boolean_4,jboolean boolean_5,jboolean boolean_6,jboolean boolean_7,jboolean boolean_8,jboolean boolean_9);
				virtual ~SimServerOuterStub();
				void updateConnectedClients(jint int_0);
				jboolean isValidateXMLSelected();
				jboolean isSendStatusWithoutRequestSelected();
				jboolean isAppendZeroSelected();
				jboolean isRandomPacketSelected();
				jboolean isReplaceStateSelected();
				jboolean isEditingStatus();
				void updateCycleCount(jint int_0);
				void updatePanels(jboolean boolean_0);
				void updateIsInitialized(jboolean boolean_0);
				void updateCurrentCommandType(jstring string_0);
				void updateEndEffector(jstring string_0);
				void updateToolChangerIsOpen(jboolean boolean_0);
				jboolean isInitializedSelected();
				void finishSetCurrentWaypoint(jint int_0);
				void updateLengthUnit(base::LengthUnitEnumType lengthUnitEnumType_0);
				void updateNumWaypoints(jint int_0);
				jboolean isDebugMoveDoneSelected();
				jboolean isDebugSendStatusSelected();
				jboolean isDebugReadCommandSelected();
				jboolean isReplaceXmlHeaderSelected();
				void showMessage(jstring string_0);
				void showDebugMessage(jstring string_0);
				jboolean isEXISelected();
			}; // end class SimServerOuterStub
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class SimServerOuter : public java::lang::Object {
				public:
			            SimServerOuter(jobject _jthis, bool copy);
			            SimServerOuter(const SimServerOuter &);
			        
				SimServerOuter();
				virtual ~SimServerOuter();
			}; // end class SimServerOuter
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class SimServerInner : public java::lang::Object {
				public:
			            SimServerInner(jobject _jthis, bool copy);
			            SimServerInner(const SimServerInner &);
			        
				SimServerInner(SimServerOuter simServerOuter_0);
				virtual ~SimServerInner();
				jdoubleArray getStraightMoveCommandedJointVals(base::PoseType poseType_0);
				void setStatus(base::CRCLStatusType cRCLStatusType_0);
				void closeServer();
				javax::xml::datatype::XMLGregorianCalendar getXMLGregorianCalendarNow();
				void goalPoseToCommandedPositions(base::PoseType poseType_0);
				jint getCurrentWaypoint();
				void setCurrentWaypoint(jint int_0);
				void printClientStates(java::io::PrintStream printStream_0);
				static void printAllClientStates(java::io::PrintStream printStream_0);
				void runAcceptClients();
				void updateConnectedClients();
				jdouble getCurTransSpeed();
				void setCurTransSpeed(jdouble double_0);
				jdouble getCommandedTransSpeed();
				void setCommandedTransSpeed(jdouble double_0);
				jdouble getCurTransAccel();
				void setCurTransAccel(jdouble double_0);
				jdouble getCommandedTransAccel();
				void setCommandedTransAccel(jdouble double_0);
				jdouble getCurRotSpeed();
				void setCurRotSpeed(jdouble double_0);
				jdouble getCommandedRotSpeed();
				void setCommandedRotSpeed(jdouble double_0);
				jdouble getCurRotAccel();
				void setCurRotAccel(jdouble double_0);
				jdouble getCommandedRotAccel();
				void setCommandedRotAccel(jdouble double_0);
				base::AngleUnitEnumType getAngleType();
				void setAngleType(base::AngleUnitEnumType angleUnitEnumType_0);
				base::PoseToleranceType getExpectedEndPoseTolerance();
				void setExpectedEndPoseTolerance(base::PoseToleranceType poseToleranceType_0);
				base::PoseToleranceType getExpectedIntermediatePoseTolerance();
				void setExpectedIntermediatePoseTolerance(base::PoseToleranceType poseToleranceType_0);
				void setLengthUnit(base::LengthUnitEnumType lengthUnitEnumType_0);
				java::util::List getWaypoints();
				void setWaypoints(java::util::List list_0);
				jstring getStatusXmlString();
				CRCLSocket getCheckerCRCLSocket();
				XpathUtils getXpu();
				void simulatedTeleportToPose(base::PoseType poseType_0);
				void setCommandedJointPosition(jdouble double_0,jint int_1);
				jdoubleArray getJointPositions();
				void setGoalPose(base::PoseType poseType_0);
				jboolean isFinishedMove();
				jboolean checkPose(base::PoseType poseType_0);
				jdouble getJointSpeedMax();
				void setJointSpeedMax(jdouble double_0);
				base::PoseType limitSpeedAccel(base::PoseType poseType_0,base::PoseType poseType_1);
				jlong getDelayMillis();
				void setPort(jint int_0);
				jdoubleArray getSeglengths();
				void setDelayMillis(jlong long_0);
				void setCmdSchema(jobjectArray fileArray_0);
				void setStatSchema(jobjectArray fileArray_0);
				SimRobotEnum getRobotType();
				void setRobotType(SimRobotEnum simRobotEnum_0);
				base::CommandStateEnumType getCommandState();
				void setMoveStraight(jboolean boolean_0);
				jboolean isMoveStraight();
				void setCommandState(base::CommandStateEnumType commandStateEnumType_0);
				void setJointPosition(jdouble double_0,jint int_1);
				void restartServer();
				base::CRCLStatusType getStatus();
				void reset();
				jint getPort();
			}; // end class SimServerInner
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class MultiLineStringJPanel : public javax::swing::JPanel {
				public:
			            MultiLineStringJPanel(jobject _jthis, bool copy);
			            MultiLineStringJPanel(const MultiLineStringJPanel &);
			        
				MultiLineStringJPanel();
				virtual ~MultiLineStringJPanel();
				static jstring editText(jstring string_0,java::awt::Frame frame_1,jstring string_2,jboolean boolean_3);
				static jstring editText(jstring string_0);
				static jboolean showText(jstring string_0,java::awt::Frame frame_1,jstring string_2,jboolean boolean_3);
				static jboolean showText(jstring string_0);
			}; // end class MultiLineStringJPanel
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class ObjTableJPanel : public javax::swing::JPanel {
				public:
			            ObjTableJPanel(jobject _jthis, bool copy);
			            ObjTableJPanel(const ObjTableJPanel &);
			        
				ObjTableJPanel();
				virtual ~ObjTableJPanel();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
				static java::util::List getClasses();
			}; // end class ObjTableJPanel
		} // end namespace crcl
	} // end namespace utils

	namespace pvjscript{
		
		class ProcessView : public java::lang::Object {
			public:
		            ProcessView(jobject _jthis, bool copy);
		            ProcessView(const ProcessView &);
		        
			ProcessView(jstring string_0);
			virtual ~ProcessView();
			java::io::OutputStream getOutputStream();
			void Start(ProcessView processView_0);
			void removePropertyChangeListener(jstring string_0,java::beans::PropertyChangeListener propertyChangeListener_1);
			jlong getStartTime();
			java::io::OutputStream getPipedOutput();
			jstring getCommand();
			java::io::File getDir();
			void setDir(java::io::File file_0);
			jobjectArray getEnvp();
			void setEnvp(jobjectArray stringArray_0);
			void setEnvp(int argc,const char **argv);
			void appendErr(jstring string_0);
			void appendDebug(jstring string_0,javax::swing::text::Style style_1);
			void appendOutPlusErr(jstring string_0,javax::swing::text::Style style_1);
			void appendOut(jstring string_0);
			javax::swing::text::Style getOutStyle();
			jstring getOut();
			javax::swing::text::Style getErrStyle();
			jstring getErr();
			javax::swing::text::DefaultStyledDocument getOutPlusErr();
			javax::swing::text::DefaultStyledDocument getOutPlusErrPlusDebug();
			void addPropertyChangeListener(java::beans::PropertyChangeListener propertyChangeListener_0);
			void setPipedOutput(java::io::OutputStream outputStream_0);
			jint waitFor();
			javax::swing::text::Style getBuiltinStyle();
			void setCommand(jstring string_0);
			javax::swing::text::Style getExternalStyle();
			jstring toString();
			void setOut(jstring string_0);
			void setErr(jstring string_0);
			jboolean isAlive();
			void close();
			jboolean isBuiltin();
		}; // end class ProcessView
	} // end namespace pvjscript

	namespace rcsdesign{
		
		class rcsDesign : public rcsDesignGui {
			public:
		            rcsDesign(jobject _jthis, bool copy);
		            rcsDesign(const rcsDesign &);
		        
			rcsDesign();
			virtual ~rcsDesign();
			void actionPerformed(java::awt::event::ActionEvent actionEvent_0);
			void itemStateChanged(java::awt::event::ItemEvent itemEvent_0);
			void textValueChanged(java::awt::event::TextEvent textEvent_0);
			void paint(java::awt::Graphics graphics_0);
			void CheckOutFile(java::io::File file_0);
			void adjustmentValueChanged(java::awt::event::AdjustmentEvent adjustmentEvent_0);
			jstring getAppletInfo();
			void CheckInFile(java::io::File file_0);
			void startShutdown();
			jboolean canShutdown();
			static void main(jobjectArray stringArray_0);
			static void main(int argc,const char **argv);
			void run();
			void init();
			void start();
			void stop();
			void destroy();
			void cleanup();
		}; // end class rcsDesign
	} // end namespace rcsdesign

	namespace rcs{
		namespace posemath{
			
			class PM_POSE : public PmPose {
				public:
			            PM_POSE(jobject _jthis, bool copy);
			            PM_POSE(const PM_POSE &);
			        
				PM_POSE(PmCartesian pmCartesian_0,PmRpy pmRpy_1);
				PM_POSE(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5,jdouble double_6);
				PM_POSE(PmHomogeneous pmHomogeneous_0);
				PM_POSE(PM_XYA pM_XYA_0);
				PM_POSE();
				PM_POSE(PmCartesian pmCartesian_0,PmQuaternion pmQuaternion_1);
				virtual ~PM_POSE();
				PM_POSE clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_POSE
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_CYLINDRICAL : public PmCylindrical {
				public:
			            PM_CYLINDRICAL(jobject _jthis, bool copy);
			            PM_CYLINDRICAL(const PM_CYLINDRICAL &);
			        
				PM_CYLINDRICAL(PM_CARTESIAN pM_CARTESIAN_0);
				PM_CYLINDRICAL();
				PM_CYLINDRICAL(jdouble double_0,jdouble double_1,jdouble double_2);
				virtual ~PM_CYLINDRICAL();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_CYLINDRICAL
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_CARTESIAN : public PmCartesian {
				public:
			            PM_CARTESIAN(jobject _jthis, bool copy);
			            PM_CARTESIAN(const PM_CARTESIAN &);
			        
				PM_CARTESIAN(PM_CYLINDRICAL pM_CYLINDRICAL_0);
				PM_CARTESIAN(PmCartesian pmCartesian_0);
				PM_CARTESIAN();
				PM_CARTESIAN(jdouble double_0,jdouble double_1,jdouble double_2);
				virtual ~PM_CARTESIAN();
				PM_CARTESIAN multiply(jdouble double_0);
				jdouble distFrom(PM_CARTESIAN pM_CARTESIAN_0);
				jdouble distFromXY(PM_CARTESIAN pM_CARTESIAN_0);
				PM_CARTESIAN add(PM_CARTESIAN pM_CARTESIAN_0);
				PM_CARTESIAN clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
				static PM_CARTESIAN valueOf(jstring string_0);
			}; // end class PM_CARTESIAN
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace nml{
			
			class MsgToTimeStamp : public java::lang::Object {
				public:
			            MsgToTimeStamp(jobject _jthis, bool copy);
			            MsgToTimeStamp(const MsgToTimeStamp &);
			        
				MsgToTimeStamp();
				virtual ~MsgToTimeStamp();
			}; // end class MsgToTimeStamp
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NonBlockingDatagramSocket : public java::net::DatagramSocket {
				public:
			            NonBlockingDatagramSocket(jobject _jthis, bool copy);
			            NonBlockingDatagramSocket(const NonBlockingDatagramSocket &);
			        
				virtual ~NonBlockingDatagramSocket();
				void receive(java::net::DatagramPacket datagramPacket_0);
				jboolean ready(jint int_0);
			}; // end class NonBlockingDatagramSocket
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLMessageDictionary : public java::lang::Object {
				public:
			            NMLMessageDictionary(jobject _jthis, bool copy);
			            NMLMessageDictionary(const NMLMessageDictionary &);
			        
				NMLMessageDictionary();
				virtual ~NMLMessageDictionary();
			}; // end class NMLMessageDictionary
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class XDRFormatConverter : public NMLFormatConverterBase {
				public:
			            XDRFormatConverter(jobject _jthis, bool copy);
			            XDRFormatConverter(const XDRFormatConverter &);
			        
				XDRFormatConverter();
				virtual ~XDRFormatConverter();
				void align(jint int_0);
				void waste(jint int_0);
				jstring toString();
				jfloat update(jfloat float_0);
				void update(jlongArray longArray_0,jint int_1);
				void update(jintArray intArray_0,jint int_1);
				jlong update(jlong long_0);
				void update(jshortArray shortArray_0,jint int_1);
				void update(jdoubleArray doubleArray_0,jint int_1);
				jdouble update(jdouble double_0);
				void update(jfloatArray floatArray_0,jint int_1);
				jchar update(jchar char_0);
				void update(jbyteArray byteArray_0,jint int_1);
				jbyte update(jbyte byte_0);
				jboolean update(jboolean boolean_0);
				void update(jcharArray charArray_0,jint int_1);
				jshort update(jshort short_0);
				jint update(jint int_0);
			}; // end class XDRFormatConverter
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class debugInfo : public java::lang::Object {
				public:
			            debugInfo(jobject _jthis, bool copy);
			            debugInfo(const debugInfo &);
			        
				debugInfo();
				virtual ~debugInfo();
			}; // end class debugInfo
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class PackedFileWriter : public java::lang::Object {
				public:
			            PackedFileWriter(jobject _jthis, bool copy);
			            PackedFileWriter(const PackedFileWriter &);
			        
				PackedFileWriter(NMLMessageDictionary nMLMessageDictionary_0,jboolean boolean_1);
				virtual ~PackedFileWriter();
				NMLmsg convertStringToMsg(jstring string_0);
				void WriteFile(java::io::File file_0,NMLmsg nMLmsg_1);
				void WriteFile(jstring string_0,NMLmsg nMLmsg_1);
			}; // end class PackedFileWriter
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NML_TEXT : public NMLmsg {
				public:
			            NML_TEXT(jobject _jthis, bool copy);
			            NML_TEXT(const NML_TEXT &);
			        
				NML_TEXT();
				virtual ~NML_TEXT();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class NML_TEXT
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NML_DISPLAY : public NMLmsg {
				public:
			            NML_DISPLAY(jobject _jthis, bool copy);
			            NML_DISPLAY(const NML_DISPLAY &);
			        
				NML_DISPLAY();
				virtual ~NML_DISPLAY();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class NML_DISPLAY
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NMLSingleVarLog : public java::lang::Object {
				public:
			            NMLSingleVarLog(jobject _jthis, bool copy);
			            NMLSingleVarLog(const NMLSingleVarLog &);
			        
				NMLSingleVarLog();
				virtual ~NMLSingleVarLog();
				jstring toString();
			}; // end class NMLSingleVarLog
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace utils{
			
			class CorrectedPipedOutputStream : public java::io::OutputStream {
				public:
			            CorrectedPipedOutputStream(jobject _jthis, bool copy);
			            CorrectedPipedOutputStream(const CorrectedPipedOutputStream &);
			        
				CorrectedPipedOutputStream();
				CorrectedPipedOutputStream(CorrectedPipedInputStreamInterface correctedPipedInputStreamInterface_0);
				virtual ~CorrectedPipedOutputStream();
				CorrectedPipeData get_pipe_data();
				void write(jbyteArray byteArray_0);
				void write(jint int_0);
				void write(jbyteArray byteArray_0,jint int_1,jint int_2);
				void close();
			}; // end class CorrectedPipedOutputStream
		} // end namespace rcs
	} // end namespace utils

	namespace rcs{
		namespace utils{
			
			class CorrectedPipedOutputStreamInterface : public java::lang::Object {
				public:
			            CorrectedPipedOutputStreamInterface(jobject _jthis, bool copy);
			            CorrectedPipedOutputStreamInterface(const CorrectedPipedOutputStreamInterface &);
			        
				CorrectedPipedOutputStreamInterface();
				virtual ~CorrectedPipedOutputStreamInterface();
			}; // end class CorrectedPipedOutputStreamInterface
		} // end namespace rcs
	} // end namespace utils

	namespace rcs{
		namespace utils{
			
			class CorrectedPipeData : public java::lang::Object {
				public:
			            CorrectedPipeData(jobject _jthis, bool copy);
			            CorrectedPipeData(const CorrectedPipeData &);
			        
				virtual ~CorrectedPipeData();
				void WaitForData();
				void PostNewData();
			}; // end class CorrectedPipeData
		} // end namespace rcs
	} // end namespace utils

	namespace rcs{
		namespace utils{
			
			class StackTracePrinter : public java::lang::Object {
				public:
			            StackTracePrinter(jobject _jthis, bool copy);
			            StackTracePrinter(const StackTracePrinter &);
			        
				StackTracePrinter();
				virtual ~StackTracePrinter();
				static jstring ThrowableTextToShortList(jstring string_0);
				static jstring ThrowableFileName(java::lang::Throwable throwable_0,jint int_1);
				static jint ThrowableToLine(java::lang::Throwable throwable_0,jint int_1);
				static jstring ThrowableToStackTraceString(java::lang::Throwable throwable_0);
				static jstring ThrowableTextToFileName(jstring string_0,jint int_1);
				static jint ThrowableTextToLine(jstring string_0,jint int_1);
				static jstring ThrowableToShortList(java::lang::Throwable throwable_0);
			}; // end class StackTracePrinter
		} // end namespace rcs
	} // end namespace utils

	namespace diagapplet{
		
		class diag_NB_UI_ConnectToAll_Status : public java::lang::Object {
			public:
		            diag_NB_UI_ConnectToAll_Status(jobject _jthis, bool copy);
		            diag_NB_UI_ConnectToAll_Status(const diag_NB_UI_ConnectToAll_Status &);
		        
			virtual ~diag_NB_UI_ConnectToAll_Status();
			jstring toString();
		}; // end class diag_NB_UI_ConnectToAll_Status
	} // end namespace diagapplet

	namespace diagapplet{
		namespace plotter{
			
			class PlotGraphJPanel : public javax::swing::JPanel {
				public:
			            PlotGraphJPanel(jobject _jthis, bool copy);
			            PlotGraphJPanel(const PlotGraphJPanel &);
			        
				PlotGraphJPanel();
				virtual ~PlotGraphJPanel();
				java::awt::image::BufferedImage getImage(java::awt::Dimension dimension_0);
				java::awt::image::BufferedImage getImage(jint int_0,jint int_1);
				java::awt::image::BufferedImage getImage();
				void paintAll(java::awt::Graphics graphics_0);
				void mousePressed(java::awt::event::MouseEvent mouseEvent_0);
				void mouseReleased(java::awt::event::MouseEvent mouseEvent_0);
				void mouseClicked(java::awt::event::MouseEvent mouseEvent_0);
				void mouseExited(java::awt::event::MouseEvent mouseEvent_0);
				void mouseEntered(java::awt::event::MouseEvent mouseEvent_0);
				void mouseMoved(java::awt::event::MouseEvent mouseEvent_0);
				void mouseDragged(java::awt::event::MouseEvent mouseEvent_0);
				void DebugPrint(jstring string_0);
				void ErrorPrint(jstring string_0);
				jboolean get_array_mode();
				void ZoomOut();
				void ZoomIn();
				void SetKeyListener(java::awt::event::KeyListener keyListener_0);
				void refresh();
				void AddPointToPlot(PlotData plotData_0,jdouble double_1,jdouble double_2,jboolean boolean_3,jdouble double_4,jdouble double_5);
				void AddPointToArrayPlot(PlotData plotData_0,jint int_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
				void AddPlot(PlotData plotData_0,jstring string_1);
				void AddPlot(PlotData plotData_0);
				void FitY();
				void FitToGraph();
				void ScrollRight();
				void setUseShortname(jboolean boolean_0);
				void SetReverseX(jboolean boolean_0);
				void set_point_size_limit(jint int_0);
				void SetOuterArea(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				void SetInnerArea(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				void ResetMinXToZero();
				void setMax_plots_to_show(jint int_0);
				void set_plot_group_number(jint int_0);
				void equalizeAxis();
				void set_array_mode(jboolean boolean_0);
				void setPlotOrder(jstring string_0);
				void RemovePlot(jstring string_0);
				void SaveOptions();
				void ClearAllData();
				void RemoveAllPlots();
				void CopySettings(PlotGraphJPanel plotGraphJPanel_0);
				void HandleResize();
				void setForced_Y_Grid(jdouble double_0);
				void setForced_X_Grid(jdouble double_0);
				void UpdateDisplay(jboolean boolean_0);
				jint getMax_plots_to_show();
				void LoadOptions();
				static jstring format_double(jdouble double_0);
				void Zoom(jdouble double_0);
				static void DebugPrint2(jstring string_0);
				jdouble getY_Grid();
				void setY_Grid(jdouble double_0);
				void paintCartesianGrid(java::awt::Graphics graphics_0);
				void paintDraggingRect(java::awt::Graphics graphics_0);
				void paintGraph(java::awt::Graphics graphics_0);
				PlotData GetPlot(jstring string_0);
				jint get_point_size_limit();
				jboolean isUseShortnama(jboolean boolean_0);
				jdouble getX_Grid();
				void setX_Grid(jdouble double_0);
				jboolean ColorTooClosePreviousPlot(java::awt::Color color_0,jlong long_1);
				jboolean ColorsTooClose(java::awt::Color color_0,java::awt::Color color_1,jlong long_2);
				void ResetColors();
				jstring toString();
			}; // end class PlotGraphJPanel
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		
		class diagPreserve : public java::lang::Object {
			public:
		            diagPreserve(jobject _jthis, bool copy);
		            diagPreserve(const diagPreserve &);
		        
			diagPreserve();
			virtual ~diagPreserve();
			void setHeight(jint int_0);
			void setWidth(jint int_0);
			jint getX();
			jint getY();
			jint getWidth();
			jint getHeight();
			void setX(jint int_0);
			void setY(jint int_0);
			jboolean is_connected();
			void set_recentNmlConfigFileVector(java::util::Vector vector_0);
			jboolean isAutomatically_Keep_and_Use_PlotSets();
			void setAutomatically_Keep_and_Use_PlotSets(jboolean boolean_0);
			void setAuto_connect_disconnect(jboolean boolean_0);
			void setSelectedTab(jint int_0);
			void setDefaultNMLConfigFile(jstring string_0);
			void setModulesVector(java::util::Vector vector_0);
			void setAuxBuffersVector(java::util::Vector vector_0);
			void setPlotSet(plotSetPreserve plotSetPreserve_0);
			void setWindow_state(jint int_0);
			jboolean get_connected();
			void setMoved(jboolean boolean_0);
			void setResized(jboolean boolean_0);
			java::util::Vector getRecentPlotSets();
			void setRecentPlotSets(java::util::Vector vector_0);
			java::util::Vector get_recentNmlConfigFileVector();
			void set_connected(jboolean boolean_0);
			void setSelectedAuxChannel(jstring string_0);
			plotSetPreserve getPlotSet();
			void setSelectedModule(jstring string_0);
			jstring getDefaultNMLConfigFile();
			jboolean isResized();
			jboolean isMoved();
			jint getWindow_state();
			jboolean isAuto_connect_disconnect();
			java::util::Vector getModulesVector();
			java::util::Vector getAuxBuffersVector();
			jstring getSelectedModule();
			jstring getSelectedAuxChannel();
			jint getSelectedTab();
		}; // end class diagPreserve
	} // end namespace diagapplet

	namespace diagapplet{
		namespace CodeGen{
			
			class StructureTypeInfo : public java::lang::Object {
				public:
			            StructureTypeInfo(jobject _jthis, bool copy);
			            StructureTypeInfo(const StructureTypeInfo &);
			        
				StructureTypeInfo();
				virtual ~StructureTypeInfo();
				static void DebugPrint(jstring string_0);
				static void ErrorPrint(jstring string_0);
				void startInfoTokens();
				STI_TokenizerInterface getInfoTokenizer();
				jstring getBaseClassExpandedPreFinalPassInfo(java::util::Hashtable hashtable_0,jboolean boolean_1);
				jint get_var_count_size();
				void setInfo(jstring string_0);
				void setPreFinalPassInfoToInfo();
				static void DebugPrint2(jstring string_0);
				jboolean infoContains(jstring string_0);
				jstring toString();
			}; // end class StructureTypeInfo
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenFrame : public java::awt::Frame {
				public:
			            CodeGenFrame(jobject _jthis, bool copy);
			            CodeGenFrame(const CodeGenFrame &);
			        
				CodeGenFrame(jstring string_0);
				virtual ~CodeGenFrame();
				void windowOpened(java::awt::event::WindowEvent windowEvent_0);
				void windowClosing(java::awt::event::WindowEvent windowEvent_0);
				void windowClosed(java::awt::event::WindowEvent windowEvent_0);
				void windowIconified(java::awt::event::WindowEvent windowEvent_0);
				void windowDeiconified(java::awt::event::WindowEvent windowEvent_0);
				void windowActivated(java::awt::event::WindowEvent windowEvent_0);
				void windowDeactivated(java::awt::event::WindowEvent windowEvent_0);
				void manual_resize(jint int_0,jint int_1);
			}; // end class CodeGenFrame
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class ServerInfo : public java::lang::Object {
				public:
			            ServerInfo(jobject _jthis, bool copy);
			            ServerInfo(const ServerInfo &);
			        
				ServerInfo(jstring string_0,jstring string_1);
				virtual ~ServerInfo();
				jstring toString();
			}; // end class ServerInfo
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace utils{
			
			class ImageJFrame : public javax::swing::JFrame {
				public:
			            ImageJFrame(jobject _jthis, bool copy);
			            ImageJFrame(const ImageJFrame &);
			        
				ImageJFrame();
				virtual ~ImageJFrame();
				void LoadImageFileVector(java::util::Vector vector_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class ImageJFrame
		} // end namespace diagapplet
	} // end namespace utils

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class View3DPlotJPanel : public javax::swing::JPanel {
						public:
					            View3DPlotJPanel(jobject _jthis, bool copy);
					            View3DPlotJPanel(const View3DPlotJPanel &);
					        
						View3DPlotJPanel();
						virtual ~View3DPlotJPanel();
						static jdouble getAutoScale(java::util::List list_0);
						void setDistScale(jdouble double_0);
						void setSingleTrack(Track track_0);
						void addTrack(Track track_0);
						void autoSetScale();
						View3DDragEnum getDragEnum();
						void setDragEnum(View3DDragEnum view3DDragEnum_0);
						jdouble getDistScale();
						jboolean isShowRotationFrames();
						void setShowRotationFrames(jboolean boolean_0);
						void setTracksList(java::util::List list_0);
						java::util::List getTracksList();
					}; // end class View3DPlotJPanel
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace com{
		namespace github{
			namespace wshackle{
				namespace poselist3dplot{
					
					class CsvParseOptionsJPanel : public javax::swing::JPanel {
						public:
					            CsvParseOptionsJPanel(jobject _jthis, bool copy);
					            CsvParseOptionsJPanel(const CsvParseOptionsJPanel &);
					        
						CsvParseOptionsJPanel();
						virtual ~CsvParseOptionsJPanel();
						void loadFileToTable(java::io::File file_0);
						static void LoadHeadingsToComboBoxModel(javax::swing::DefaultComboBoxModel defaultComboBoxModel_0,jobjectArray stringArray_1);
						jstring getDelimiter();
						void setDelimiter(jstring string_0);
						static jobjectArray headingsFromFile(java::io::File file_0,jstring string_1);
						static CsvParseOptions optionsFromFileHeadings(CsvParseOptions csvParseOptions_0,java::io::File file_1,jstring string_2);
						static CsvParseOptions optionsFromHeadings(CsvParseOptions csvParseOptions_0,jobjectArray stringArray_1);
						void parseHeadings(java::io::File file_0,jboolean boolean_1,jint int_2);
						CsvParseOptions getParseOptions();
						void setParseOptions(CsvParseOptions csvParseOptions_0);
						static CsvParseOptions showDialog(java::awt::Frame frame_0,java::io::File file_1);
						static CsvParseOptions showDialog(java::awt::Frame frame_0);
						static CsvParseOptions showDialog(java::awt::Frame frame_0,CsvParseOptions csvParseOptions_1);
						void setFile(java::io::File file_0);
						java::io::File getFile();
					}; // end class CsvParseOptionsJPanel
				} // end namespace com
			} // end namespace github
		} // end namespace wshackle
	} // end namespace poselist3dplot

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class BrentSolver : public AbstractUnivariateSolver {
								public:
							            BrentSolver(jobject _jthis, bool copy);
							            BrentSolver(const BrentSolver &);
							        
								BrentSolver();
								BrentSolver(jdouble double_0,jdouble double_1,jdouble double_2);
								BrentSolver(jdouble double_0,jdouble double_1);
								BrentSolver(jdouble double_0);
								virtual ~BrentSolver();
							}; // end class BrentSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class NewtonSolver : public AbstractDifferentiableUnivariateSolver {
								public:
							            NewtonSolver(jobject _jthis, bool copy);
							            NewtonSolver(const NewtonSolver &);
							        
								NewtonSolver(jdouble double_0);
								NewtonSolver();
								virtual ~NewtonSolver();
								jdouble solve(jint int_0,DifferentiableUnivariateFunction differentiableUnivariateFunction_1,jdouble double_2,jdouble double_3);
							}; // end class NewtonSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class LinearInterpolator : public java::lang::Object {
								public:
							            LinearInterpolator(jobject _jthis, bool copy);
							            LinearInterpolator(const LinearInterpolator &);
							        
								LinearInterpolator();
								virtual ~LinearInterpolator();
								polynomials::PolynomialSplineFunction interpolate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class LinearInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class TricubicFunction : public java::lang::Object {
								public:
							            TricubicFunction(jobject _jthis, bool copy);
							            TricubicFunction(const TricubicFunction &);
							        
								TricubicFunction(jdoubleArray doubleArray_0);
								virtual ~TricubicFunction();
								jdouble value(jdouble double_0,jdouble double_1,jdouble double_2);
							}; // end class TricubicFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class TricubicInterpolatingFunction : public java::lang::Object {
								public:
							            TricubicInterpolatingFunction(jobject _jthis, bool copy);
							            TricubicInterpolatingFunction(const TricubicInterpolatingFunction &);
							        
								virtual ~TricubicInterpolatingFunction();
								jboolean isValidPoint(jdouble double_0,jdouble double_1,jdouble double_2);
								jdouble value(jdouble double_0,jdouble double_1,jdouble double_2);
							}; // end class TricubicInterpolatingFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class MultivariateInterpolator : public java::lang::Object {
								public:
							            MultivariateInterpolator(jobject _jthis, bool copy);
							            MultivariateInterpolator(const MultivariateInterpolator &);
							        
								MultivariateInterpolator();
								virtual ~MultivariateInterpolator();
							}; // end class MultivariateInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class BicubicSplineFunction : public java::lang::Object {
								public:
							            BicubicSplineFunction(jobject _jthis, bool copy);
							            BicubicSplineFunction(const BicubicSplineFunction &);
							        
								BicubicSplineFunction(jdoubleArray doubleArray_0);
								BicubicSplineFunction(jdoubleArray doubleArray_0,jboolean boolean_1);
								virtual ~BicubicSplineFunction();
								BivariateFunction partialDerivativeX();
								BivariateFunction partialDerivativeY();
								BivariateFunction partialDerivativeXX();
								BivariateFunction partialDerivativeYY();
								BivariateFunction partialDerivativeXY();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class BicubicSplineFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class SmoothingPolynomialBicubicSplineInterpolator : public BicubicSplineInterpolator {
								public:
							            SmoothingPolynomialBicubicSplineInterpolator(jobject _jthis, bool copy);
							            SmoothingPolynomialBicubicSplineInterpolator(const SmoothingPolynomialBicubicSplineInterpolator &);
							        
								SmoothingPolynomialBicubicSplineInterpolator();
								SmoothingPolynomialBicubicSplineInterpolator(jint int_0,jint int_1);
								SmoothingPolynomialBicubicSplineInterpolator(jint int_0);
								virtual ~SmoothingPolynomialBicubicSplineInterpolator();
							}; // end class SmoothingPolynomialBicubicSplineInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class TricubicSplineInterpolatingFunction : public java::lang::Object {
								public:
							            TricubicSplineInterpolatingFunction(jobject _jthis, bool copy);
							            TricubicSplineInterpolatingFunction(const TricubicSplineInterpolatingFunction &);
							        
								virtual ~TricubicSplineInterpolatingFunction();
								jdouble value(jdouble double_0,jdouble double_1,jdouble double_2);
							}; // end class TricubicSplineInterpolatingFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class UnivariateMatrixFunction : public java::lang::Object {
							public:
						            UnivariateMatrixFunction(jobject _jthis, bool copy);
						            UnivariateMatrixFunction(const UnivariateMatrixFunction &);
						        
							UnivariateMatrixFunction();
							virtual ~UnivariateMatrixFunction();
						}; // end class UnivariateMatrixFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class ParametricUnivariateFunction : public java::lang::Object {
							public:
						            ParametricUnivariateFunction(jobject _jthis, bool copy);
						            ParametricUnivariateFunction(const ParametricUnivariateFunction &);
						        
							ParametricUnivariateFunction();
							virtual ~ParametricUnivariateFunction();
						}; // end class ParametricUnivariateFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class EulerStepInterpolator : public RungeKuttaStepInterpolator {
								public:
							            EulerStepInterpolator(jobject _jthis, bool copy);
							            EulerStepInterpolator(const EulerStepInterpolator &);
							        
								EulerStepInterpolator(EulerStepInterpolator eulerStepInterpolator_0);
								EulerStepInterpolator();
								virtual ~EulerStepInterpolator();
							}; // end class EulerStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							
							class StepNormalizerBounds : public java::lang::Enum {
								public:
							            StepNormalizerBounds(jobject _jthis, bool copy);
							            StepNormalizerBounds(const StepNormalizerBounds &);
							        
								virtual ~StepNormalizerBounds();
								jboolean lastIncluded();
								jboolean firstIncluded();
								static jobjectArray values();
								static StepNormalizerBounds valueOf(jstring string_0);
							}; // end class StepNormalizerBounds
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							
							class ConjugateGradientFormula : public java::lang::Enum {
								public:
							            ConjugateGradientFormula(jobject _jthis, bool copy);
							            ConjugateGradientFormula(const ConjugateGradientFormula &);
							        
								virtual ~ConjugateGradientFormula();
								static jobjectArray values();
								static ConjugateGradientFormula valueOf(jstring string_0);
							}; // end class ConjugateGradientFormula
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class MultivariateDifferentiableVectorMultiStartOptimizer : public BaseMultivariateVectorMultiStartOptimizer {
							public:
						            MultivariateDifferentiableVectorMultiStartOptimizer(jobject _jthis, bool copy);
						            MultivariateDifferentiableVectorMultiStartOptimizer(const MultivariateDifferentiableVectorMultiStartOptimizer &);
						        
							MultivariateDifferentiableVectorMultiStartOptimizer(MultivariateDifferentiableVectorOptimizer multivariateDifferentiableVectorOptimizer_0,jint int_1,random::RandomVectorGenerator randomVectorGenerator_2);
							virtual ~MultivariateDifferentiableVectorMultiStartOptimizer();
						}; // end class MultivariateDifferentiableVectorMultiStartOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								
								class NeighbourhoodSizeFunction : public java::lang::Object {
									public:
								            NeighbourhoodSizeFunction(jobject _jthis, bool copy);
								            NeighbourhoodSizeFunction(const NeighbourhoodSizeFunction &);
								        
									NeighbourhoodSizeFunction();
									virtual ~NeighbourhoodSizeFunction();
								}; // end class NeighbourhoodSizeFunction
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								
								class KohonenTrainingTask : public java::lang::Object {
									public:
								            KohonenTrainingTask(jobject _jthis, bool copy);
								            KohonenTrainingTask(const KohonenTrainingTask &);
								        
									KohonenTrainingTask(Network network_0,java::util::Iterator iterator_1,KohonenUpdateAction kohonenUpdateAction_2);
									virtual ~KohonenTrainingTask();
									void run();
								}; // end class KohonenTrainingTask
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							
							class Clusterable : public java::lang::Object {
								public:
							            Clusterable(jobject _jthis, bool copy);
							            Clusterable(const Clusterable &);
							        
								Clusterable();
								virtual ~Clusterable();
							}; // end class Clusterable
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							
							class CentroidCluster : public Cluster {
								public:
							            CentroidCluster(jobject _jthis, bool copy);
							            CentroidCluster(const CentroidCluster &);
							        
								CentroidCluster(Clusterable clusterable_0);
								virtual ~CentroidCluster();
								Clusterable getCenter();
							}; // end class CentroidCluster
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							
							class MultiKMeansPlusPlusClusterer : public Clusterer {
								public:
							            MultiKMeansPlusPlusClusterer(jobject _jthis, bool copy);
							            MultiKMeansPlusPlusClusterer(const MultiKMeansPlusPlusClusterer &);
							        
								MultiKMeansPlusPlusClusterer(KMeansPlusPlusClusterer kMeansPlusPlusClusterer_0,jint int_1,evaluation::ClusterEvaluator clusterEvaluator_2);
								MultiKMeansPlusPlusClusterer(KMeansPlusPlusClusterer kMeansPlusPlusClusterer_0,jint int_1);
								virtual ~MultiKMeansPlusPlusClusterer();
								KMeansPlusPlusClusterer getClusterer();
								jint getNumTrials();
								evaluation::ClusterEvaluator getClusterEvaluator();
								java::util::List cluster(java::util::Collection collection_0);
							}; // end class MultiKMeansPlusPlusClusterer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							
							class DoublePoint : public java::lang::Object {
								public:
							            DoublePoint(jobject _jthis, bool copy);
							            DoublePoint(const DoublePoint &);
							        
								DoublePoint(jdoubleArray doubleArray_0);
								DoublePoint(jintArray intArray_0);
								virtual ~DoublePoint();
								jdoubleArray getPoint();
								jstring toString();
								jint hashCode();
							}; // end class DoublePoint
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							
							class FuzzyKMeansClusterer : public Clusterer {
								public:
							            FuzzyKMeansClusterer(jobject _jthis, bool copy);
							            FuzzyKMeansClusterer(const FuzzyKMeansClusterer &);
							        
								FuzzyKMeansClusterer(jint int_0,jdouble double_1);
								FuzzyKMeansClusterer(jint int_0,jdouble double_1,jint int_2,distance::DistanceMeasure distanceMeasure_3);
								FuzzyKMeansClusterer(jint int_0,jdouble double_1,jint int_2,distance::DistanceMeasure distanceMeasure_3,jdouble double_4,random::RandomGenerator randomGenerator_5);
								virtual ~FuzzyKMeansClusterer();
								jdouble getObjectiveFunctionValue();
								java::util::List getClusters();
								jdouble getFuzziness();
								jdouble getEpsilon();
								linear::RealMatrix getMembershipMatrix();
								java::util::List getDataPoints();
								jint getMaxIterations();
								java::util::List cluster(java::util::Collection collection_0);
								jint getK();
								random::RandomGenerator getRandomGenerator();
							}; // end class FuzzyKMeansClusterer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ml
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class RandomData : public java::lang::Object {
							public:
						            RandomData(jobject _jthis, bool copy);
						            RandomData(const RandomData &);
						        
							RandomData();
							virtual ~RandomData();
						}; // end class RandomData
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class RandomDataGenerator : public java::lang::Object {
							public:
						            RandomDataGenerator(jobject _jthis, bool copy);
						            RandomDataGenerator(const RandomDataGenerator &);
						        
							RandomDataGenerator();
							RandomDataGenerator(RandomGenerator randomGenerator_0);
							virtual ~RandomDataGenerator();
							jlong nextLong(jlong long_0,jlong long_1);
							jdouble nextGaussian(jdouble double_0,jdouble double_1);
							jdouble nextT(jdouble double_0);
							RandomGenerator getRandomGenerator();
							jstring nextSecureHexString(jint int_0);
							jlong nextSecureLong(jlong long_0,jlong long_1);
							jlong nextPoisson(jdouble double_0);
							jdouble nextExponential(jdouble double_0);
							jdouble nextUniform(jdouble double_0,jdouble double_1);
							jdouble nextUniform(jdouble double_0,jdouble double_1,jboolean boolean_2);
							jdouble nextBeta(jdouble double_0,jdouble double_1);
							jint nextBinomial(jint int_0,jdouble double_1);
							jdouble nextCauchy(jdouble double_0,jdouble double_1);
							jdouble nextChiSquare(jdouble double_0);
							jdouble nextF(jdouble double_0,jdouble double_1);
							jdouble nextGamma(jdouble double_0,jdouble double_1);
							jint nextHypergeometric(jint int_0,jint int_1,jint int_2);
							jint nextPascal(jint int_0,jdouble double_1);
							jdouble nextWeibull(jdouble double_0,jdouble double_1);
							jint nextZipf(jint int_0,jdouble double_1);
							void reSeed(jlong long_0);
							void reSeed();
							void reSeedSecure();
							void reSeedSecure(jlong long_0);
							void setSecureAlgorithm(jstring string_0,jstring string_1);
							jintArray nextPermutation(jint int_0,jint int_1);
							jstring nextHexString(jint int_0);
							jint nextSecureInt(jint int_0,jint int_1);
							jint nextInt(jint int_0,jint int_1);
						}; // end class RandomDataGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class SobolSequenceGenerator : public java::lang::Object {
							public:
						            SobolSequenceGenerator(jobject _jthis, bool copy);
						            SobolSequenceGenerator(const SobolSequenceGenerator &);
						        
							SobolSequenceGenerator(jint int_0);
							SobolSequenceGenerator(jint int_0,java::io::InputStream inputStream_1);
							virtual ~SobolSequenceGenerator();
							jdoubleArray nextVector();
							jdoubleArray skipTo(jint int_0);
							jint getNextIndex();
						}; // end class SobolSequenceGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class JDKRandomGenerator : public java::util::Random {
							public:
						            JDKRandomGenerator(jobject _jthis, bool copy);
						            JDKRandomGenerator(const JDKRandomGenerator &);
						        
							JDKRandomGenerator();
							virtual ~JDKRandomGenerator();
							void setSeed(jint int_0);
							void setSeed(jintArray intArray_0);
						}; // end class JDKRandomGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class RandomGeneratorFactory : public java::lang::Object {
							public:
						            RandomGeneratorFactory(jobject _jthis, bool copy);
						            RandomGeneratorFactory(const RandomGeneratorFactory &);
						        
							virtual ~RandomGeneratorFactory();
							static jlong convertToLong(jintArray intArray_0);
							static RandomGenerator createRandomGenerator(java::util::Random random_0);
						}; // end class RandomGeneratorFactory
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class Well1024a : public AbstractWell {
							public:
						            Well1024a(jobject _jthis, bool copy);
						            Well1024a(const Well1024a &);
						        
							Well1024a(jlong long_0);
							Well1024a(jintArray intArray_0);
							Well1024a(jint int_0);
							Well1024a();
							virtual ~Well1024a();
						}; // end class Well1024a
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class ValueServer : public java::lang::Object {
							public:
						            ValueServer(jobject _jthis, bool copy);
						            ValueServer(const ValueServer &);
						        
							ValueServer(RandomDataImpl randomDataImpl_0);
							ValueServer(RandomGenerator randomGenerator_0);
							ValueServer();
							virtual ~ValueServer();
							jdouble getNext();
							EmpiricalDistribution getEmpiricalDistribution();
							void closeReplayFile();
							jdouble getMu();
							void setMu(jdouble double_0);
							void setSigma(jdouble double_0);
							void computeDistribution(jint int_0);
							void computeDistribution();
							java::net::URL getValuesFileURL();
							void setValuesFileURL(jstring string_0);
							void setValuesFileURL(java::net::URL uRL_0);
							void resetReplayFile();
							jdouble getSigma();
							void reSeed(jlong long_0);
							jint getMode();
							void setMode(jint int_0);
							jdoubleArray fill(jint int_0);
							void fill(jdoubleArray doubleArray_0);
						}; // end class ValueServer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class UncorrelatedRandomVectorGenerator : public java::lang::Object {
							public:
						            UncorrelatedRandomVectorGenerator(jobject _jthis, bool copy);
						            UncorrelatedRandomVectorGenerator(const UncorrelatedRandomVectorGenerator &);
						        
							UncorrelatedRandomVectorGenerator(jint int_0,NormalizedRandomGenerator normalizedRandomGenerator_1);
							UncorrelatedRandomVectorGenerator(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,NormalizedRandomGenerator normalizedRandomGenerator_2);
							virtual ~UncorrelatedRandomVectorGenerator();
							jdoubleArray nextVector();
						}; // end class UncorrelatedRandomVectorGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class Well44497a : public AbstractWell {
							public:
						            Well44497a(jobject _jthis, bool copy);
						            Well44497a(const Well44497a &);
						        
							Well44497a(jlong long_0);
							Well44497a(jintArray intArray_0);
							Well44497a(jint int_0);
							Well44497a();
							virtual ~Well44497a();
						}; // end class Well44497a
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class UniformRandomGenerator : public java::lang::Object {
							public:
						            UniformRandomGenerator(jobject _jthis, bool copy);
						            UniformRandomGenerator(const UniformRandomGenerator &);
						        
							UniformRandomGenerator(RandomGenerator randomGenerator_0);
							virtual ~UniformRandomGenerator();
							jdouble nextNormalizedDouble();
						}; // end class UniformRandomGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class SynchronizedRandomGenerator : public java::lang::Object {
							public:
						            SynchronizedRandomGenerator(jobject _jthis, bool copy);
						            SynchronizedRandomGenerator(const SynchronizedRandomGenerator &);
						        
							SynchronizedRandomGenerator(RandomGenerator randomGenerator_0);
							virtual ~SynchronizedRandomGenerator();
							void setSeed(jintArray intArray_0);
							void setSeed(jint int_0);
							void setSeed(jlong long_0);
							void nextBytes(jbyteArray byteArray_0);
							jlong nextLong();
							jboolean nextBoolean();
							jfloat nextFloat();
							jdouble nextGaussian();
							jdouble nextDouble();
							jint nextInt();
							jint nextInt(jint int_0);
						}; // end class SynchronizedRandomGenerator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class MersenneTwister : public BitsStreamGenerator {
							public:
						            MersenneTwister(jobject _jthis, bool copy);
						            MersenneTwister(const MersenneTwister &);
						        
							MersenneTwister();
							MersenneTwister(jint int_0);
							MersenneTwister(jintArray intArray_0);
							MersenneTwister(jlong long_0);
							virtual ~MersenneTwister();
							void setSeed(jintArray intArray_0);
							void setSeed(jlong long_0);
							void setSeed(jint int_0);
						}; // end class MersenneTwister
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace random{
						
						class Well512a : public AbstractWell {
							public:
						            Well512a(jobject _jthis, bool copy);
						            Well512a(const Well512a &);
						        
							Well512a(jlong long_0);
							Well512a(jintArray intArray_0);
							Well512a(jint int_0);
							Well512a();
							virtual ~Well512a();
						}; // end class Well512a
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace random

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							
							class ModelSpecificationException : public exception::MathIllegalArgumentException {
								public:
							            ModelSpecificationException(jobject _jthis, bool copy);
							            ModelSpecificationException(const ModelSpecificationException &);
							        
								virtual ~ModelSpecificationException();
							}; // end class ModelSpecificationException
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							
							class UpdatingMultipleLinearRegression : public java::lang::Object {
								public:
							            UpdatingMultipleLinearRegression(jobject _jthis, bool copy);
							            UpdatingMultipleLinearRegression(const UpdatingMultipleLinearRegression &);
							        
								UpdatingMultipleLinearRegression();
								virtual ~UpdatingMultipleLinearRegression();
							}; // end class UpdatingMultipleLinearRegression
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							
							class RegressionResults : public java::lang::Object {
								public:
							            RegressionResults(jobject _jthis, bool copy);
							            RegressionResults(const RegressionResults &);
							        
								virtual ~RegressionResults();
								jdouble getParameterEstimate(jint int_0);
								jdoubleArray getParameterEstimates();
								jdouble getStdErrorOfEstimate(jint int_0);
								jdoubleArray getStdErrorOfEstimates();
								jdouble getCovarianceOfParameters(jint int_0,jint int_1);
								jint getNumberOfParameters();
								jdouble getTotalSumSquares();
								jdouble getRegressionSumSquares();
								jdouble getErrorSumSquares();
								jboolean hasIntercept();
								jdouble getMeanSquareError();
								jdouble getRSquared();
								jdouble getAdjustedRSquared();
								jlong getN();
							}; // end class RegressionResults
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							
							class MillerUpdatingRegression : public java::lang::Object {
								public:
							            MillerUpdatingRegression(jobject _jthis, bool copy);
							            MillerUpdatingRegression(const MillerUpdatingRegression &);
							        
								MillerUpdatingRegression(jint int_0,jboolean boolean_1);
								MillerUpdatingRegression(jint int_0,jboolean boolean_1,jdouble double_2);
								virtual ~MillerUpdatingRegression();
								jboolean hasIntercept();
								void addObservation(jdoubleArray doubleArray_0,jdouble double_1);
								RegressionResults regress(jintArray intArray_0);
								RegressionResults regress(jint int_0);
								RegressionResults regress();
								jdoubleArray getPartialCorrelations(jint int_0);
								jdouble getDiagonalOfHatMatrix(jdoubleArray doubleArray_0);
								jintArray getOrderOfRegressors();
								jlong getN();
								void clear();
							}; // end class MillerUpdatingRegression
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class TTest : public java::lang::Object {
								public:
							            TTest(jobject _jthis, bool copy);
							            TTest(const TTest &);
							        
								TTest();
								virtual ~TTest();
								jdouble pairedT(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jboolean pairedTTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
								jdouble pairedTTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jdouble homoscedasticT(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jdouble homoscedasticT(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1);
								jdouble tTest(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1);
								jdouble tTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jboolean tTest(jdouble double_0,descriptive::StatisticalSummary statisticalSummary_1,jdouble double_2);
								jdouble tTest(jdouble double_0,descriptive::StatisticalSummary statisticalSummary_1);
								jboolean tTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
								jboolean tTest(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1,jdouble double_2);
								jdouble tTest(jdouble double_0,jdoubleArray doubleArray_1);
								jboolean tTest(jdouble double_0,jdoubleArray doubleArray_1,jdouble double_2);
								jdouble homoscedasticTTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jdouble homoscedasticTTest(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1);
								jboolean homoscedasticTTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
								jdouble t(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1);
								jdouble t(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jdouble t(jdouble double_0,descriptive::StatisticalSummary statisticalSummary_1);
								jdouble t(jdouble double_0,jdoubleArray doubleArray_1);
							}; // end class TTest
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class ChiSquareTest : public java::lang::Object {
								public:
							            ChiSquareTest(jobject _jthis, bool copy);
							            ChiSquareTest(const ChiSquareTest &);
							        
								ChiSquareTest();
								virtual ~ChiSquareTest();
								jdouble chiSquare(jdoubleArray doubleArray_0,jlongArray longArray_1);
								jdouble chiSquareTest(jdoubleArray doubleArray_0,jlongArray longArray_1);
								jboolean chiSquareTest(jdoubleArray doubleArray_0,jlongArray longArray_1,jdouble double_2);
								jdouble chiSquareDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1);
								jdouble chiSquareTestDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1);
								jboolean chiSquareTestDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1,jdouble double_2);
							}; // end class ChiSquareTest
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class GTest : public java::lang::Object {
								public:
							            GTest(jobject _jthis, bool copy);
							            GTest(const GTest &);
							        
								GTest();
								virtual ~GTest();
								jdouble gTestIntrinsic(jdoubleArray doubleArray_0,jlongArray longArray_1);
								jboolean gTest(jdoubleArray doubleArray_0,jlongArray longArray_1,jdouble double_2);
								jdouble gTest(jdoubleArray doubleArray_0,jlongArray longArray_1);
								jdouble gDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1);
								jdouble rootLogLikelihoodRatio(jlong long_0,jlong long_1,jlong long_2,jlong long_3);
								jdouble gTestDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1);
								jboolean gTestDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1,jdouble double_2);
								jdouble g(jdoubleArray doubleArray_0,jlongArray longArray_1);
							}; // end class GTest
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class AlternativeHypothesis : public java::lang::Enum {
								public:
							            AlternativeHypothesis(jobject _jthis, bool copy);
							            AlternativeHypothesis(const AlternativeHypothesis &);
							        
								virtual ~AlternativeHypothesis();
								static jobjectArray values();
								static AlternativeHypothesis valueOf(jstring string_0);
							}; // end class AlternativeHypothesis
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class BinomialTest : public java::lang::Object {
								public:
							            BinomialTest(jobject _jthis, bool copy);
							            BinomialTest(const BinomialTest &);
							        
								BinomialTest();
								virtual ~BinomialTest();
								jboolean binomialTest(jint int_0,jint int_1,jdouble double_2,AlternativeHypothesis alternativeHypothesis_3,jdouble double_4);
								jdouble binomialTest(jint int_0,jint int_1,jdouble double_2,AlternativeHypothesis alternativeHypothesis_3);
							}; // end class BinomialTest
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace summary{
								
								class SumOfLogs : public AbstractStorelessUnivariateStatistic {
									public:
								            SumOfLogs(jobject _jthis, bool copy);
								            SumOfLogs(const SumOfLogs &);
								        
									SumOfLogs(SumOfLogs sumOfLogs_0);
									SumOfLogs();
									virtual ~SumOfLogs();
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									SumOfLogs copy();
									static void copy(SumOfLogs sumOfLogs_0,SumOfLogs sumOfLogs_1);
									jdouble getResult();
								}; // end class SumOfLogs
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace summary

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace summary{
								
								class SumOfSquares : public AbstractStorelessUnivariateStatistic {
									public:
								            SumOfSquares(jobject _jthis, bool copy);
								            SumOfSquares(const SumOfSquares &);
								        
									SumOfSquares(SumOfSquares sumOfSquares_0);
									SumOfSquares();
									virtual ~SumOfSquares();
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									SumOfSquares copy();
									static void copy(SumOfSquares sumOfSquares_0,SumOfSquares sumOfSquares_1);
									jdouble getResult();
								}; // end class SumOfSquares
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace summary

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								
								class Min : public AbstractStorelessUnivariateStatistic {
									public:
								            Min(jobject _jthis, bool copy);
								            Min(const Min &);
								        
									Min();
									Min(Min min_0);
									virtual ~Min();
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									static void copy(Min min_0,Min min_1);
									Min copy();
									jdouble getResult();
								}; // end class Min
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								
								class Median : public Percentile {
									public:
								            Median(jobject _jthis, bool copy);
								            Median(const Median &);
								        
									Median(Median median_0);
									Median();
									virtual ~Median();
									Median withNaNStrategy(ranking::NaNStrategy naNStrategy_0);
									Median withEstimationType(Percentile::EstimationType estimationType_0);
									Median withKthSelector(util::KthSelector kthSelector_0);
								}; // end class Median
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class SynchronizedSummaryStatistics : public SummaryStatistics {
								public:
							            SynchronizedSummaryStatistics(jobject _jthis, bool copy);
							            SynchronizedSummaryStatistics(const SynchronizedSummaryStatistics &);
							        
								SynchronizedSummaryStatistics();
								SynchronizedSummaryStatistics(SynchronizedSummaryStatistics synchronizedSummaryStatistics_0);
								virtual ~SynchronizedSummaryStatistics();
								void addValue(jdouble double_0);
								jdouble getMax();
								jdouble getMin();
								jlong getN();
								jdouble getMean();
								jdouble getVariance();
								jdouble getStandardDeviation();
								StatisticalSummary getSummary();
								jdouble getSumsq();
								jdouble getQuadraticMean();
								jdouble getPopulationVariance();
								jdouble getGeometricMean();
								StorelessUnivariateStatistic getSumImpl();
								void setSumImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getSumsqImpl();
								void setSumsqImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getMinImpl();
								void setMinImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getMaxImpl();
								void setMaxImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getSumLogImpl();
								void setSumLogImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getGeoMeanImpl();
								void setGeoMeanImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getMeanImpl();
								void setMeanImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								StorelessUnivariateStatistic getVarianceImpl();
								void setVarianceImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
								jdouble getSum();
								jstring toString();
								jint hashCode();
								void clear();
								static void copy(SynchronizedSummaryStatistics synchronizedSummaryStatistics_0,SynchronizedSummaryStatistics synchronizedSummaryStatistics_1);
								SynchronizedSummaryStatistics copy();
							}; // end class SynchronizedSummaryStatistics
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class StatisticalSummary : public java::lang::Object {
								public:
							            StatisticalSummary(jobject _jthis, bool copy);
							            StatisticalSummary(const StatisticalSummary &);
							        
								StatisticalSummary();
								virtual ~StatisticalSummary();
							}; // end class StatisticalSummary
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						
						class Quaternion : public java::lang::Object {
							public:
						            Quaternion(jobject _jthis, bool copy);
						            Quaternion(const Quaternion &);
						        
							Quaternion(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
							Quaternion(jdouble double_0,jdoubleArray doubleArray_1);
							Quaternion(jdoubleArray doubleArray_0);
							virtual ~Quaternion();
							Quaternion getConjugate();
							jboolean isUnitQuaternion(jdouble double_0);
							jboolean isPureQuaternion(jdouble double_0);
							Quaternion getPositivePolarForm();
							jdouble getScalarPart();
							jdoubleArray getVectorPart();
							static Quaternion multiply(Quaternion quaternion_0,Quaternion quaternion_1);
							Quaternion multiply(Quaternion quaternion_0);
							Quaternion multiply(jdouble double_0);
							Quaternion subtract(Quaternion quaternion_0);
							static Quaternion subtract(Quaternion quaternion_0,Quaternion quaternion_1);
							jdouble getNorm();
							jdouble dotProduct(Quaternion quaternion_0);
							static jdouble dotProduct(Quaternion quaternion_0,Quaternion quaternion_1);
							Quaternion getInverse();
							jdouble getQ0();
							jdouble getQ1();
							jdouble getQ2();
							jdouble getQ3();
							static Quaternion add(Quaternion quaternion_0,Quaternion quaternion_1);
							Quaternion add(Quaternion quaternion_0);
							jboolean equals(Quaternion quaternion_0,jdouble double_1);
							jstring toString();
							jint hashCode();
							Quaternion normalize();
						}; // end class Quaternion
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace noderiv{
									
									class CMAESOptimizer : public MultivariateOptimizer {
										public:
									            CMAESOptimizer(jobject _jthis, bool copy);
									            CMAESOptimizer(const CMAESOptimizer &);
									        
										CMAESOptimizer(jint int_0,jdouble double_1,jboolean boolean_2,jint int_3,jint int_4,random::RandomGenerator randomGenerator_5,jboolean boolean_6,ConvergenceChecker convergenceChecker_7);
										virtual ~CMAESOptimizer();
										java::util::List getStatisticsSigmaHistory();
										java::util::List getStatisticsMeanHistory();
										java::util::List getStatisticsFitnessHistory();
										java::util::List getStatisticsDHistory();
										PointValuePair optimize(jobjectArray optimizationDataArray_0);
									}; // end class CMAESOptimizer
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace noderiv

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace univariate{
							
							class UnivariateObjectiveFunction : public java::lang::Object {
								public:
							            UnivariateObjectiveFunction(jobject _jthis, bool copy);
							            UnivariateObjectiveFunction(const UnivariateObjectiveFunction &);
							        
								UnivariateObjectiveFunction(analysis::UnivariateFunction univariateFunction_0);
								virtual ~UnivariateObjectiveFunction();
								analysis::UnivariateFunction getObjectiveFunction();
							}; // end class UnivariateObjectiveFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class UnboundedSolutionException : public exception::MathIllegalStateException {
								public:
							            UnboundedSolutionException(jobject _jthis, bool copy);
							            UnboundedSolutionException(const UnboundedSolutionException &);
							        
								UnboundedSolutionException();
								virtual ~UnboundedSolutionException();
							}; // end class UnboundedSolutionException
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class SimplexSolver : public LinearOptimizer {
								public:
							            SimplexSolver(jobject _jthis, bool copy);
							            SimplexSolver(const SimplexSolver &);
							        
								SimplexSolver(jdouble double_0);
								SimplexSolver();
								SimplexSolver(jdouble double_0,jint int_1);
								SimplexSolver(jdouble double_0,jint int_1,jdouble double_2);
								virtual ~SimplexSolver();
								PointValuePair doOptimize();
								PointValuePair optimize(jobjectArray optimizationDataArray_0);
							}; // end class SimplexSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class Relationship : public java::lang::Enum {
								public:
							            Relationship(jobject _jthis, bool copy);
							            Relationship(const Relationship &);
							        
								virtual ~Relationship();
								Relationship oppositeRelationship();
								jstring toString();
								static jobjectArray values();
								static Relationship valueOf(jstring string_0);
							}; // end class Relationship
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class SimpleBounds : public java::lang::Object {
							public:
						            SimpleBounds(jobject _jthis, bool copy);
						            SimpleBounds(const SimpleBounds &);
						        
							SimpleBounds(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							virtual ~SimpleBounds();
							jdoubleArray getLower();
							jdoubleArray getUpper();
							static SimpleBounds unbounded(jint int_0);
						}; // end class SimpleBounds
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class InitialGuess : public java::lang::Object {
							public:
						            InitialGuess(jobject _jthis, bool copy);
						            InitialGuess(const InitialGuess &);
						        
							InitialGuess(jdoubleArray doubleArray_0);
							virtual ~InitialGuess();
							jdoubleArray getInitialGuess();
						}; // end class InitialGuess
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class MaxIter : public java::lang::Object {
							public:
						            MaxIter(jobject _jthis, bool copy);
						            MaxIter(const MaxIter &);
						        
							MaxIter(jint int_0);
							virtual ~MaxIter();
							static MaxIter unlimited();
							jint getMaxIter();
						}; // end class MaxIter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class MaxEval : public java::lang::Object {
							public:
						            MaxEval(jobject _jthis, bool copy);
						            MaxEval(const MaxEval &);
						        
							MaxEval(jint int_0);
							virtual ~MaxEval();
							static MaxEval unlimited();
							jint getMaxEval();
						}; // end class MaxEval
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class SimplePointChecker : public AbstractConvergenceChecker {
							public:
						            SimplePointChecker(jobject _jthis, bool copy);
						            SimplePointChecker(const SimplePointChecker &);
						        
							SimplePointChecker(jdouble double_0,jdouble double_1,jint int_2);
							SimplePointChecker(jdouble double_0,jdouble double_1);
							virtual ~SimplePointChecker();
							jboolean converged(jint int_0,util::Pair pair_1,util::Pair pair_2);
						}; // end class SimplePointChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class SimpleVectorValueChecker : public AbstractConvergenceChecker {
							public:
						            SimpleVectorValueChecker(jobject _jthis, bool copy);
						            SimpleVectorValueChecker(const SimpleVectorValueChecker &);
						        
							SimpleVectorValueChecker(jdouble double_0,jdouble double_1,jint int_2);
							SimpleVectorValueChecker(jdouble double_0,jdouble double_1);
							virtual ~SimpleVectorValueChecker();
							jboolean converged(jint int_0,PointVectorValuePair pointVectorValuePair_1,PointVectorValuePair pointVectorValuePair_2);
						}; // end class SimpleVectorValueChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class PointVectorValuePair : public util::Pair {
							public:
						            PointVectorValuePair(jobject _jthis, bool copy);
						            PointVectorValuePair(const PointVectorValuePair &);
						        
							PointVectorValuePair(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jboolean boolean_2);
							PointVectorValuePair(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							virtual ~PointVectorValuePair();
							jdoubleArray getPoint();
							jdoubleArray getValueRef();
							jdoubleArray getPointRef();
							jdoubleArray getValue();
						}; // end class PointVectorValuePair
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class ProperFractionFormat : public FractionFormat {
							public:
						            ProperFractionFormat(jobject _jthis, bool copy);
						            ProperFractionFormat(const ProperFractionFormat &);
						        
							ProperFractionFormat();
							ProperFractionFormat(java::text::NumberFormat numberFormat_0);
							ProperFractionFormat(java::text::NumberFormat numberFormat_0,java::text::NumberFormat numberFormat_1,java::text::NumberFormat numberFormat_2);
							virtual ~ProperFractionFormat();
							void setWholeFormat(java::text::NumberFormat numberFormat_0);
							java::text::NumberFormat getWholeFormat();
							java::lang::StringBuffer format(Fraction fraction_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
							Fraction parse(jstring string_0,java::text::ParsePosition parsePosition_1);
						}; // end class ProperFractionFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace hull{
							
							class ConvexHullGenerator : public java::lang::Object {
								public:
							            ConvexHullGenerator(jobject _jthis, bool copy);
							            ConvexHullGenerator(const ConvexHullGenerator &);
							        
								ConvexHullGenerator();
								virtual ~ConvexHullGenerator();
							}; // end class ConvexHullGenerator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace hull

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace hull{
							
							class ConvexHull : public java::lang::Object {
								public:
							            ConvexHull(jobject _jthis, bool copy);
							            ConvexHull(const ConvexHull &);
							        
								ConvexHull();
								virtual ~ConvexHull();
							}; // end class ConvexHull
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace hull

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								
								class ArcsSet : public partitioning::AbstractRegion {
									public:
								            ArcsSet(jobject _jthis, bool copy);
								            ArcsSet(const ArcsSet &);
								        
									ArcsSet(jdouble double_0);
									ArcsSet(partitioning::BSPTree bSPTree_0,jdouble double_1);
									ArcsSet(jdouble double_0,jdouble double_1,jdouble double_2);
									ArcsSet(java::util::Collection collection_0,jdouble double_1);
									virtual ~ArcsSet();
									partitioning::Side side(Arc arc_0);
									ArcsSet buildNew(partitioning::BSPTree bSPTree_0);
									partitioning::BoundaryProjection projectToBoundary(Point point_0);
									ArcsSet::Split split(Arc arc_0);
									java::util::Iterator iterator();
									java::util::List asList();
								}; // end class ArcsSet
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								
								class S1Point : public java::lang::Object {
									public:
								            S1Point(jobject _jthis, bool copy);
								            S1Point(const S1Point &);
								        
									S1Point(jdouble double_0);
									virtual ~S1Point();
									jdouble distance(Point point_0);
									static jdouble distance(S1Point s1Point_0,S1Point s1Point_1);
									jdouble getAlpha();
									euclidean::twod::Vector2D getVector();
									jint hashCode();
									jboolean isNaN();
									Space getSpace();
								}; // end class S1Point
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								
								class LimitAngle : public java::lang::Object {
									public:
								            LimitAngle(jobject _jthis, bool copy);
								            LimitAngle(const LimitAngle &);
								        
									LimitAngle(S1Point s1Point_0,jboolean boolean_1,jdouble double_2);
									virtual ~LimitAngle();
									SubLimitAngle wholeHyperplane();
									LimitAngle copySelf();
									jboolean sameOrientationAs(partitioning::Hyperplane hyperplane_0);
									jdouble getTolerance();
									Point project(Point point_0);
									ArcsSet wholeSpace();
									LimitAngle getReverse();
									S1Point getLocation();
									jboolean isDirect();
									jdouble getOffset(Point point_0);
								}; // end class LimitAngle
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace spherical
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							
							class Localizable : public java::lang::Object {
								public:
							            Localizable(jobject _jthis, bool copy);
							            Localizable(const Localizable &);
							        
								Localizable();
								virtual ~Localizable();
							}; // end class Localizable
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							
							class ExceptionContextProvider : public java::lang::Object {
								public:
							            ExceptionContextProvider(jobject _jthis, bool copy);
							            ExceptionContextProvider(const ExceptionContextProvider &);
							        
								ExceptionContextProvider();
								virtual ~ExceptionContextProvider();
							}; // end class ExceptionContextProvider
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class Decimal64 : public java::lang::Number {
							public:
						            Decimal64(jobject _jthis, bool copy);
						            Decimal64(const Decimal64 &);
						        
							Decimal64(jdouble double_0);
							virtual ~Decimal64();
							Decimal64 multiply(Decimal64 decimal64_0);
							Decimal64 multiply(jint int_0);
							Decimal64 multiply(jdouble double_0);
							Decimal64 subtract(Decimal64 decimal64_0);
							Decimal64 subtract(jdouble double_0);
							Decimal64 reciprocal();
							Decimal64 rootN(jint int_0);
							Decimal64 acosh();
							Decimal64 asinh();
							Decimal64 atanh();
							Decimal64 linearCombination(jobjectArray decimal64Array_0,jobjectArray decimal64Array_1);
							Decimal64 linearCombination(jdouble double_0,Decimal64 decimal64_1,jdouble double_2,Decimal64 decimal64_3,jdouble double_4,Decimal64 decimal64_5,jdouble double_6,Decimal64 decimal64_7);
							Decimal64 linearCombination(jdouble double_0,Decimal64 decimal64_1,jdouble double_2,Decimal64 decimal64_3,jdouble double_4,Decimal64 decimal64_5);
							Decimal64 linearCombination(Decimal64 decimal64_0,Decimal64 decimal64_1,Decimal64 decimal64_2,Decimal64 decimal64_3,Decimal64 decimal64_4,Decimal64 decimal64_5,Decimal64 decimal64_6,Decimal64 decimal64_7);
							Decimal64 linearCombination(jdoubleArray doubleArray_0,jobjectArray decimal64Array_1);
							Decimal64 linearCombination(Decimal64 decimal64_0,Decimal64 decimal64_1,Decimal64 decimal64_2,Decimal64 decimal64_3);
							Decimal64 linearCombination(jdouble double_0,Decimal64 decimal64_1,jdouble double_2,Decimal64 decimal64_3);
							Decimal64 linearCombination(Decimal64 decimal64_0,Decimal64 decimal64_1,Decimal64 decimal64_2,Decimal64 decimal64_3,Decimal64 decimal64_4,Decimal64 decimal64_5);
							jdouble getReal();
							Decimal64 negate();
							Decimal64 add(jdouble double_0);
							Decimal64 add(Decimal64 decimal64_0);
							jstring toString();
							jint hashCode();
							Decimal64 abs();
							Decimal64 sin();
							Decimal64 cos();
							Decimal64 tan();
							Decimal64 atan2(Decimal64 decimal64_0);
							Decimal64 sqrt();
							Decimal64 log();
							Decimal64 log10();
							Decimal64 pow(jdouble double_0);
							Decimal64 pow(Decimal64 decimal64_0);
							Decimal64 pow(jint int_0);
							Decimal64 exp();
							jint compareTo(Decimal64 decimal64_0);
							jbyte byteValue();
							jshort shortValue();
							jint intValue();
							jlong longValue();
							jfloat floatValue();
							jdouble doubleValue();
							Field getField();
							jboolean isNaN();
							jboolean isInfinite();
							Decimal64 scalb(jint int_0);
							Decimal64 copySign(Decimal64 decimal64_0);
							Decimal64 copySign(jdouble double_0);
							Decimal64 signum();
							Decimal64 divide(jdouble double_0);
							Decimal64 divide(Decimal64 decimal64_0);
							Decimal64 remainder(Decimal64 decimal64_0);
							Decimal64 remainder(jdouble double_0);
							Decimal64 asin();
							Decimal64 acos();
							Decimal64 atan();
							Decimal64 cbrt();
							Decimal64 ceil();
							Decimal64 floor();
							Decimal64 rint();
							jlong round();
							Decimal64 sinh();
							Decimal64 cosh();
							Decimal64 tanh();
							Decimal64 hypot(Decimal64 decimal64_0);
							Decimal64 expm1();
							Decimal64 log1p();
						}; // end class Decimal64
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class MathUtils : public java::lang::Object {
							public:
						            MathUtils(jobject _jthis, bool copy);
						            MathUtils(const MathUtils &);
						        
							virtual ~MathUtils();
							static void checkFinite(jdouble double_0);
							static void checkFinite(jdoubleArray doubleArray_0);
							static jdouble normalizeAngle(jdouble double_0,jdouble double_1);
							static jint hash(jdouble double_0);
							static jint hash(jdoubleArray doubleArray_0);
							static jboolean equals(jdouble double_0,jdouble double_1);
							static jbyte copySign(jbyte byte_0,jbyte byte_1);
							static jshort copySign(jshort short_0,jshort short_1);
							static jlong copySign(jlong long_0,jlong long_1);
							static jint copySign(jint int_0,jint int_1);
							static jdouble reduce(jdouble double_0,jdouble double_1,jdouble double_2);
						}; // end class MathUtils
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class BigReal : public java::lang::Object {
							public:
						            BigReal(jobject _jthis, bool copy);
						            BigReal(const BigReal &);
						        
							BigReal(java::math::BigDecimal bigDecimal_0);
							BigReal(jcharArray charArray_0);
							BigReal(jcharArray charArray_0,jint int_1,jint int_2);
							BigReal(java::math::BigInteger bigInteger_0);
							BigReal(java::math::BigInteger bigInteger_0,jint int_1);
							BigReal(jlong long_0);
							BigReal(jstring string_0);
							BigReal(jint int_0);
							BigReal(jdouble double_0);
							virtual ~BigReal();
							BigReal multiply(BigReal bigReal_0);
							BigReal multiply(jint int_0);
							BigReal subtract(BigReal bigReal_0);
							jint getScale();
							void setScale(jint int_0);
							BigReal reciprocal();
							BigReal negate();
							java::math::RoundingMode getRoundingMode();
							void setRoundingMode(java::math::RoundingMode roundingMode_0);
							java::math::BigDecimal bigDecimalValue();
							BigReal add(BigReal bigReal_0);
							jint hashCode();
							jint compareTo(BigReal bigReal_0);
							jdouble doubleValue();
							Field getField();
							BigReal divide(BigReal bigReal_0);
						}; // end class BigReal
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class MathArrays : public java::lang::Object {
							public:
						            MathArrays(jobject _jthis, bool copy);
						            MathArrays(const MathArrays &);
						        
							virtual ~MathArrays();
							static jdoubleArray normalizeArray(jdoubleArray doubleArray_0,jdouble double_1);
							static void checkNotNaN(jdoubleArray doubleArray_0);
							static void checkPositive(jdoubleArray doubleArray_0);
							static void checkNonNegative(jlongArray longArray_0);
							static jdoubleArray ebeAdd(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jboolean isMonotonic(jobjectArray comparableArray_0,MathArrays::OrderDirection orderDirection_1,jboolean boolean_2);
							static jboolean isMonotonic(jdoubleArray doubleArray_0,MathArrays::OrderDirection orderDirection_1,jboolean boolean_2);
							static jdouble safeNorm(jdoubleArray doubleArray_0);
							static jdoubleArray convolve(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jintArray sequence(jint int_0,jint int_1,jint int_2);
							static jdouble distance(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jdouble distance(jintArray intArray_0,jintArray intArray_1);
							static jdouble linearCombination(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
							static jdouble linearCombination(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
							static jdouble linearCombination(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jdouble linearCombination(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5,jdouble double_6,jdouble double_7);
							static jboolean checkOrder(jdoubleArray doubleArray_0,MathArrays::OrderDirection orderDirection_1,jboolean boolean_2,jboolean boolean_3);
							static void checkOrder(jdoubleArray doubleArray_0,MathArrays::OrderDirection orderDirection_1,jboolean boolean_2);
							static void checkOrder(jdoubleArray doubleArray_0);
							static jdouble distanceInf(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jint distanceInf(jintArray intArray_0,jintArray intArray_1);
							static jdoubleArray ebeDivide(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jdoubleArray ebeMultiply(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jdouble distance1(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jint distance1(jintArray intArray_0,jintArray intArray_1);
							static jintArray natural(jint int_0);
							static jboolean verifyValues(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jint int_2,jint int_3);
							static jboolean verifyValues(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jint int_2,jint int_3,jboolean boolean_4);
							static jboolean verifyValues(jdoubleArray doubleArray_0,jint int_1,jint int_2,jboolean boolean_3);
							static jboolean verifyValues(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jboolean equalsIncludingNaN(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jboolean equalsIncludingNaN(jfloatArray floatArray_0,jfloatArray floatArray_1);
							static jdoubleArray ebeSubtract(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static void scaleInPlace(jdouble double_0,jdoubleArray doubleArray_1);
							static jboolean equals(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jboolean equals(jfloatArray floatArray_0,jfloatArray floatArray_1);
							static jintArray copyOf(jintArray intArray_0);
							static jdoubleArray copyOf(jdoubleArray doubleArray_0,jint int_1);
							static jintArray copyOf(jintArray intArray_0,jint int_1);
							static jdoubleArray copyOf(jdoubleArray doubleArray_0);
							static jdoubleArray copyOfRange(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static void shuffle(jintArray intArray_0);
							static void shuffle(jintArray intArray_0,random::RandomGenerator randomGenerator_1);
							static void shuffle(jintArray intArray_0,jint int_1,MathArrays::Position position_2);
							static void shuffle(jintArray intArray_0,jint int_1,MathArrays::Position position_2,random::RandomGenerator randomGenerator_3);
							static jdoubleArray scale(jdouble double_0,jdoubleArray doubleArray_1);
						}; // end class MathArrays
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace crcl{
		namespace base{
			
			class CRCLProgramType : public DataThingType {
				public:
			            CRCLProgramType(jobject _jthis, bool copy);
			            CRCLProgramType(const CRCLProgramType &);
			        
				CRCLProgramType();
				virtual ~CRCLProgramType();
				InitCanonType getInitCanon();
				void setInitCanon(InitCanonType initCanonType_0);
				java::util::List getMiddleCommand();
				EndCanonType getEndCanon();
				void setEndCanon(EndCanonType endCanonType_0);
			}; // end class CRCLProgramType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class VectorType : public DataThingType {
				public:
			            VectorType(jobject _jthis, bool copy);
			            VectorType(const VectorType &);
			        
				VectorType();
				virtual ~VectorType();
				java::math::BigDecimal getK();
				java::math::BigDecimal getI();
				java::math::BigDecimal getJ();
				void setK(java::math::BigDecimal bigDecimal_0);
				void setI(java::math::BigDecimal bigDecimal_0);
				void setJ(java::math::BigDecimal bigDecimal_0);
			}; // end class VectorType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetEndEffectorType : public MiddleCommandType {
				public:
			            SetEndEffectorType(jobject _jthis, bool copy);
			            SetEndEffectorType(const SetEndEffectorType &);
			        
				SetEndEffectorType();
				virtual ~SetEndEffectorType();
				java::math::BigDecimal getSetting();
				void setSetting(java::math::BigDecimal bigDecimal_0);
			}; // end class SetEndEffectorType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetTorqueUnitsType : public MiddleCommandType {
				public:
			            SetTorqueUnitsType(jobject _jthis, bool copy);
			            SetTorqueUnitsType(const SetTorqueUnitsType &);
			        
				SetTorqueUnitsType();
				virtual ~SetTorqueUnitsType();
				TorqueUnitEnumType getUnitName();
				void setUnitName(TorqueUnitEnumType torqueUnitEnumType_0);
			}; // end class SetTorqueUnitsType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class ConfigureJointReportType : public DataThingType {
				public:
			            ConfigureJointReportType(jobject _jthis, bool copy);
			            ConfigureJointReportType(const ConfigureJointReportType &);
			        
				ConfigureJointReportType();
				virtual ~ConfigureJointReportType();
				java::math::BigInteger getJointNumber();
				void setJointNumber(java::math::BigInteger bigInteger_0);
				jboolean isReportPosition();
				void setReportPosition(jboolean boolean_0);
				jboolean isReportTorqueOrForce();
				void setReportTorqueOrForce(jboolean boolean_0);
				jboolean isReportVelocity();
				void setReportVelocity(jboolean boolean_0);
			}; // end class ConfigureJointReportType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetRotAccelType : public MiddleCommandType {
				public:
			            SetRotAccelType(jobject _jthis, bool copy);
			            SetRotAccelType(const SetRotAccelType &);
			        
				SetRotAccelType();
				virtual ~SetRotAccelType();
				RotAccelType getRotAccel();
				void setRotAccel(RotAccelType rotAccelType_0);
			}; // end class SetRotAccelType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetAngleUnitsType : public MiddleCommandType {
				public:
			            SetAngleUnitsType(jobject _jthis, bool copy);
			            SetAngleUnitsType(const SetAngleUnitsType &);
			        
				SetAngleUnitsType();
				virtual ~SetAngleUnitsType();
				AngleUnitEnumType getUnitName();
				void setUnitName(AngleUnitEnumType angleUnitEnumType_0);
			}; // end class SetAngleUnitsType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class CommandStatusType : public DataThingType {
				public:
			            CommandStatusType(jobject _jthis, bool copy);
			            CommandStatusType(const CommandStatusType &);
			        
				CommandStatusType();
				virtual ~CommandStatusType();
				java::math::BigInteger getCommandID();
				void setCommandID(java::math::BigInteger bigInteger_0);
				CommandStateEnumType getCommandState();
				java::math::BigInteger getStatusID();
				void setStatusID(java::math::BigInteger bigInteger_0);
				void setCommandState(CommandStateEnumType commandStateEnumType_0);
			}; // end class CommandStatusType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class RotSpeedRelativeType : public RotSpeedType {
				public:
			            RotSpeedRelativeType(jobject _jthis, bool copy);
			            RotSpeedRelativeType(const RotSpeedRelativeType &);
			        
				RotSpeedRelativeType();
				virtual ~RotSpeedRelativeType();
				void setFraction(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getFraction();
			}; // end class RotSpeedRelativeType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class RotAccelAbsoluteType : public RotAccelType {
				public:
			            RotAccelAbsoluteType(jobject _jthis, bool copy);
			            RotAccelAbsoluteType(const RotAccelAbsoluteType &);
			        
				RotAccelAbsoluteType();
				virtual ~RotAccelAbsoluteType();
				java::math::BigDecimal getSetting();
				void setSetting(java::math::BigDecimal bigDecimal_0);
			}; // end class RotAccelAbsoluteType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetMotionCoordinationType : public MiddleCommandType {
				public:
			            SetMotionCoordinationType(jobject _jthis, bool copy);
			            SetMotionCoordinationType(const SetMotionCoordinationType &);
			        
				SetMotionCoordinationType();
				virtual ~SetMotionCoordinationType();
				jboolean isCoordinated();
				void setCoordinated(jboolean boolean_0);
			}; // end class SetMotionCoordinationType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class ActuateJointType : public DataThingType {
				public:
			            ActuateJointType(jobject _jthis, bool copy);
			            ActuateJointType(const ActuateJointType &);
			        
				ActuateJointType();
				virtual ~ActuateJointType();
				java::math::BigInteger getJointNumber();
				java::math::BigDecimal getJointPosition();
				void setJointNumber(java::math::BigInteger bigInteger_0);
				void setJointPosition(java::math::BigDecimal bigDecimal_0);
				JointDetailsType getJointDetails();
				void setJointDetails(JointDetailsType jointDetailsType_0);
			}; // end class ActuateJointType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class CompositeFileComparator : public AbstractFileComparator {
							public:
						            CompositeFileComparator(jobject _jthis, bool copy);
						            CompositeFileComparator(const CompositeFileComparator &);
						        
							CompositeFileComparator(jobjectArray comparatorArray_0);
							CompositeFileComparator(java::lang::Iterable iterable_0);
							virtual ~CompositeFileComparator();
							jstring toString();
							jint compare(java::io::File file_0,java::io::File file_1);
						}; // end class CompositeFileComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class CopyUtils : public java::lang::Object {
						public:
					            CopyUtils(jobject _jthis, bool copy);
					            CopyUtils(const CopyUtils &);
					        
						CopyUtils();
						virtual ~CopyUtils();
						static void copy(java::io::Reader reader_0,java::io::OutputStream outputStream_1);
						static void copy(java::io::InputStream inputStream_0,java::io::Writer writer_1,jstring string_2);
						static void copy(java::io::InputStream inputStream_0,java::io::Writer writer_1);
						static void copy(jstring string_0,java::io::OutputStream outputStream_1);
						static void copy(jstring string_0,java::io::Writer writer_1);
						static void copy(jbyteArray byteArray_0,java::io::OutputStream outputStream_1);
						static void copy(jbyteArray byteArray_0,java::io::Writer writer_1);
						static void copy(jbyteArray byteArray_0,java::io::Writer writer_1,jstring string_2);
						static jint copy(java::io::InputStream inputStream_0,java::io::OutputStream outputStream_1);
						static jint copy(java::io::Reader reader_0,java::io::Writer writer_1);
					}; // end class CopyUtils
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class FileDeleteStrategy : public java::lang::Object {
						public:
					            FileDeleteStrategy(jobject _jthis, bool copy);
					            FileDeleteStrategy(const FileDeleteStrategy &);
					        
						virtual ~FileDeleteStrategy();
						jboolean deleteQuietly(java::io::File file_0);
						jstring toString();
						void delete(java::io::File file_0);
					}; // end class FileDeleteStrategy
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class DelegateFileFilter : public AbstractFileFilter {
							public:
						            DelegateFileFilter(jobject _jthis, bool copy);
						            DelegateFileFilter(const DelegateFileFilter &);
						        
							DelegateFileFilter(java::io::FilenameFilter filenameFilter_0);
							DelegateFileFilter(java::io::FileFilter fileFilter_0);
							virtual ~DelegateFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0,jstring string_1);
							jboolean accept(java::io::File file_0);
						}; // end class DelegateFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class MagicNumberFileFilter : public AbstractFileFilter {
							public:
						            MagicNumberFileFilter(jobject _jthis, bool copy);
						            MagicNumberFileFilter(const MagicNumberFileFilter &);
						        
							MagicNumberFileFilter(jbyteArray byteArray_0,jlong long_1);
							MagicNumberFileFilter(jstring string_0,jlong long_1);
							MagicNumberFileFilter(jstring string_0);
							MagicNumberFileFilter(jbyteArray byteArray_0);
							virtual ~MagicNumberFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0);
						}; // end class MagicNumberFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class SuffixFileFilter : public AbstractFileFilter {
							public:
						            SuffixFileFilter(jobject _jthis, bool copy);
						            SuffixFileFilter(const SuffixFileFilter &);
						        
							SuffixFileFilter(java::util::List list_0,IOCase iOCase_1);
							SuffixFileFilter(java::util::List list_0);
							SuffixFileFilter(jobjectArray stringArray_0,IOCase iOCase_1);
							SuffixFileFilter(jstring string_0);
							SuffixFileFilter(jstring string_0,IOCase iOCase_1);
							SuffixFileFilter(jobjectArray stringArray_0);
							virtual ~SuffixFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0,jstring string_1);
							jboolean accept(java::io::File file_0);
						}; // end class SuffixFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class CloseShieldOutputStream : public ProxyOutputStream {
							public:
						            CloseShieldOutputStream(jobject _jthis, bool copy);
						            CloseShieldOutputStream(const CloseShieldOutputStream &);
						        
							CloseShieldOutputStream(java::io::OutputStream outputStream_0);
							virtual ~CloseShieldOutputStream();
							void close();
						}; // end class CloseShieldOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class DeferredFileOutputStream : public ThresholdingOutputStream {
							public:
						            DeferredFileOutputStream(jobject _jthis, bool copy);
						            DeferredFileOutputStream(const DeferredFileOutputStream &);
						        
							DeferredFileOutputStream(jint int_0,java::io::File file_1);
							DeferredFileOutputStream(jint int_0,jstring string_1,jstring string_2,java::io::File file_3);
							virtual ~DeferredFileOutputStream();
							jboolean isInMemory();
							void writeTo(java::io::OutputStream outputStream_0);
							jbyteArray getData();
							void close();
							java::io::File getFile();
						}; // end class DeferredFileOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class TaggedOutputStream : public ProxyOutputStream {
							public:
						            TaggedOutputStream(jobject _jthis, bool copy);
						            TaggedOutputStream(const TaggedOutputStream &);
						        
							TaggedOutputStream(java::io::OutputStream outputStream_0);
							virtual ~TaggedOutputStream();
							jboolean isCauseOf(java::lang::Exception exception_0);
							void throwIfCauseOf(java::lang::Exception exception_0);
						}; // end class TaggedOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace dom{
							
							class SaxToDomHandler : public org::xml::sax::helpers::DefaultHandler {
								public:
							            SaxToDomHandler(jobject _jthis, bool copy);
							            SaxToDomHandler(const SaxToDomHandler &);
							        
								SaxToDomHandler(org::w3c::dom::DOMImplementation dOMImplementation_0,jboolean boolean_1);
								virtual ~SaxToDomHandler();
								org::w3c::dom::Document getDocument();
								void startCDATA();
								void endCDATA();
								void startDTD(jstring string_0,jstring string_1,jstring string_2);
								void endDTD();
								void startEntity(jstring string_0);
								void endEntity(jstring string_0);
								void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
								void elementDecl(jstring string_0,jstring string_1);
								void externalEntityDecl(jstring string_0,jstring string_1,jstring string_2);
								void internalEntityDecl(jstring string_0,jstring string_1);
								void notationDecl(jstring string_0,jstring string_1,jstring string_2);
								void unparsedEntityDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
								void processingInstruction(jstring string_0,jstring string_1);
								void comment(jcharArray charArray_0,jint int_1,jint int_2);
								void characters(jcharArray charArray_0,jint int_1,jint int_2);
								void startPrefixMapping(jstring string_0,jstring string_1);
								void startElement(jstring string_0,jstring string_1,jstring string_2,org::xml::sax::Attributes attributes_3);
								void endElement(jstring string_0,jstring string_1,jstring string_2);
								org::w3c::dom::DocumentFragment getDocumentFragment();
							}; // end class SaxToDomHandler
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace dom

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							
							class SAXEncoderExtendedHandler : public SAXEncoder {
								public:
							            SAXEncoderExtendedHandler(jobject _jthis, bool copy);
							            SAXEncoderExtendedHandler(const SAXEncoderExtendedHandler &);
							        
								SAXEncoderExtendedHandler(EXIFactory eXIFactory_0);
								virtual ~SAXEncoderExtendedHandler();
								void startCDATA();
								void endCDATA();
								void startDTD(jstring string_0,jstring string_1,jstring string_2);
								void endDTD();
								void startEntity(jstring string_0);
								void endEntity(jstring string_0);
								void attributeDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
								void elementDecl(jstring string_0,jstring string_1);
								void externalEntityDecl(jstring string_0,jstring string_1,jstring string_2);
								void internalEntityDecl(jstring string_0,jstring string_1);
								void notationDecl(jstring string_0,jstring string_1,jstring string_2);
								void unparsedEntityDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
								void processingInstruction(jstring string_0,jstring string_1);
								void skippedEntity(jstring string_0);
								void comment(jcharArray charArray_0,jint int_1,jint int_2);
								void characters(jcharArray charArray_0,jint int_1,jint int_2);
								void startElement(jstring string_0,jstring string_1,jstring string_2,org::xml::sax::Attributes attributes_3);
								void startDocument();
							}; // end class SAXEncoderExtendedHandler
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							
							class SAXHandler : public org::xml::sax::ext::DefaultHandler2 {
								public:
							            SAXHandler(jobject _jthis, bool copy);
							            SAXHandler(const SAXHandler &);
							        
								SAXHandler(org::xml::sax::ContentHandler contentHandler_0);
								virtual ~SAXHandler();
								void endPrefixMapping(jstring string_0);
								void processingInstruction(jstring string_0,jstring string_1);
								void comment(jcharArray charArray_0,jint int_1,jint int_2);
								void characters(jcharArray charArray_0,jint int_1,jint int_2);
								void startPrefixMapping(jstring string_0,jstring string_1);
								void startElement(jstring string_0,jstring string_1,jstring string_2,org::xml::sax::Attributes attributes_3);
								void startDocument();
								void endDocument();
								void endElement(jstring string_0,jstring string_1,jstring string_2);
							}; // end class SAXHandler
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace stream{
							
							class StAXDecoder : public java::lang::Object {
								public:
							            StAXDecoder(jobject _jthis, bool copy);
							            StAXDecoder(const StAXDecoder &);
							        
								StAXDecoder(EXIFactory eXIFactory_0);
								virtual ~StAXDecoder();
								jint nextTag();
								jstring getElementText();
								jint getTextCharacters(jint int_0,jcharArray charArray_1,jint int_2,jint int_3);
								jcharArray getTextCharacters();
								jint getTextStart();
								jstring getPIData();
								jstring getPITarget();
								jstring getAttributeNamespace(jint int_0);
								jstring getAttributeType(jint int_0);
								jboolean isAttributeSpecified(jint int_0);
								jint getNamespaceCount();
								jstring getNamespacePrefix(jint int_0);
								jint getTextLength();
								jint getAttributeCount();
								jboolean isStartElement();
								jboolean isEndElement();
								jboolean isCharacters();
								javax::xml::namespace::NamespaceContext getNamespaceContext();
								jstring getVersion();
								void require(jint int_0,jstring string_1,jstring string_2);
								javax::xml::namespace::QName getAttributeName(jint int_0);
								jboolean hasText();
								jboolean hasName();
								jstring getText();
								jstring getPrefix();
								jstring getNamespaceURI();
								jstring getNamespaceURI(jstring string_0);
								jstring getNamespaceURI(jint int_0);
								jstring getLocalName();
								jstring getAttributePrefix(jint int_0);
								void setInputStream(java::io::InputStream inputStream_0);
								jstring getAttributeValue(jint int_0);
								jstring getAttributeValue(jstring string_0,jstring string_1);
								jint getEventType();
								jboolean isWhiteSpace();
								jstring getCharacterEncodingScheme();
								jboolean isStandalone();
								jboolean standaloneSet();
								jstring getAttributeLocalName(jint int_0);
								javax::xml::namespace::QName getName();
								jboolean hasNext();
								jint next();
								javax::xml::stream::Location getLocation();
								void close();
								jstring getEncoding();
							}; // end class StAXDecoder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace stream

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						
						class AttributeListSchemaInformed : public AbstractAttributeList {
							public:
						            AttributeListSchemaInformed(jobject _jthis, bool copy);
						            AttributeListSchemaInformed(const AttributeListSchemaInformed &);
						        
							AttributeListSchemaInformed(EXIFactory eXIFactory_0);
							virtual ~AttributeListSchemaInformed();
						}; // end class AttributeListSchemaInformed
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace cmd{
						
						class SchemaOption : public java::lang::Enum {
							public:
						            SchemaOption(jobject _jthis, bool copy);
						            SchemaOption(const SchemaOption &);
						        
							virtual ~SchemaOption();
							static jobjectArray values();
							static SchemaOption valueOf(jstring string_0);
						}; // end class SchemaOption
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace cmd

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class CodingMode : public java::lang::Enum {
						public:
					            CodingMode(jobject _jthis, bool copy);
					            CodingMode(const CodingMode &);
					        
						virtual ~CodingMode();
						jboolean usesDeflate();
						jboolean usesRechanneling();
						jint getDeflateLevel();
						void setDeflateLevel(jint int_0);
						static jobjectArray values();
						static CodingMode valueOf(jstring string_0);
					}; // end class CodingMode
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class Constants : public java::lang::Object {
						public:
					            Constants(jobject _jthis, bool copy);
					            Constants(const Constants &);
					        
						Constants();
						virtual ~Constants();
					}; // end class Constants
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						
						class GrammarContext : public java::lang::Object {
							public:
						            GrammarContext(jobject _jthis, bool copy);
						            GrammarContext(const GrammarContext &);
						        
							GrammarContext(jobjectArray grammarUriContextArray_0,jint int_1);
							virtual ~GrammarContext();
							GrammarUriContext getGrammarUriContext(jint int_0);
							GrammarUriContext getGrammarUriContext(jstring string_0);
							jint getNumberOfGrammarUriContexts();
							jint getNumberOfGrammarQNameContexts();
						}; // end class GrammarContext
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						
						class GrammarUriContext : public AbstractUriContext {
							public:
						            GrammarUriContext(jobject _jthis, bool copy);
						            GrammarUriContext(const GrammarUriContext &);
						        
							GrammarUriContext(jint int_0,jstring string_1,jobjectArray qNameContextArray_2);
							GrammarUriContext(jint int_0,jstring string_1,jobjectArray qNameContextArray_2,jobjectArray stringArray_3);
							virtual ~GrammarUriContext();
							jstring getPrefix(jint int_0);
							jstring getDefaultPrefix();
							QNameContext getQNameContext(jint int_0);
							QNameContext getQNameContext(jstring string_0);
							jint getNumberOfQNames();
							jint getNumberOfPrefixes();
							jint getPrefixID(jstring string_0);
						}; // end class GrammarUriContext
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						
						class UriContext : public java::lang::Object {
							public:
						            UriContext(jobject _jthis, bool copy);
						            UriContext(const UriContext &);
						        
							UriContext();
							virtual ~UriContext();
						}; // end class UriContext
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							
							class DocType : public java::lang::Object {
								public:
							            DocType(jobject _jthis, bool copy);
							            DocType(const DocType &);
							        
								DocType(jcharArray charArray_0,jcharArray charArray_1,jcharArray charArray_2,jcharArray charArray_3);
								virtual ~DocType();
							}; // end class DocType
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							
							class NamespaceDeclaration : public java::lang::Object {
								public:
							            NamespaceDeclaration(jobject _jthis, bool copy);
							            NamespaceDeclaration(const NamespaceDeclaration &);
							        
								NamespaceDeclaration(jstring string_0,jstring string_1);
								virtual ~NamespaceDeclaration();
								jint hashCode();
							}; // end class NamespaceDeclaration
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							
							class PreReadValue : public java::lang::Object {
								public:
							            PreReadValue(jobject _jthis, bool copy);
							            PreReadValue(const PreReadValue &);
							        
								PreReadValue(jobjectArray valueArray_0);
								virtual ~PreReadValue();
								values::Value getNextContantValue();
								jobjectArray getValues();
							}; // end class PreReadValue
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							
							class ProcessingInstruction : public java::lang::Object {
								public:
							            ProcessingInstruction(jobject _jthis, bool copy);
							            ProcessingInstruction(const ProcessingInstruction &);
							        
								ProcessingInstruction(jstring string_0,jstring string_1);
								virtual ~ProcessingInstruction();
							}; // end class ProcessingInstruction
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						namespace container{
							
							class ValueAndDatatype : public java::lang::Object {
								public:
							            ValueAndDatatype(jobject _jthis, bool copy);
							            ValueAndDatatype(const ValueAndDatatype &);
							        
								ValueAndDatatype(values::Value value_0,datatype::Datatype datatype_1);
								virtual ~ValueAndDatatype();
								jstring toString();
							}; // end class ValueAndDatatype
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace core
	} // end namespace container

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class EXIBodyEncoderInOrderSC : public EXIBodyEncoderInOrder {
							public:
						            EXIBodyEncoderInOrderSC(jobject _jthis, bool copy);
						            EXIBodyEncoderInOrderSC(const EXIBodyEncoderInOrderSC &);
						        
							EXIBodyEncoderInOrderSC(EXIFactory eXIFactory_0);
							virtual ~EXIBodyEncoderInOrderSC();
							void setErrorHandler(exceptions::ErrorHandler errorHandler_0);
							void encodeEndDocument();
							void encodeStartElement(jstring string_0,jstring string_1,jstring string_2);
							void encodeEndElement();
							void encodeAttribute(jstring string_0,jstring string_1,jstring string_2,values::Value value_3);
							void encodeAttribute(javax::xml::namespace::QName qName_0,values::Value value_1);
							void encodeNamespaceDeclaration(jstring string_0,jstring string_1);
							void encodeAttributeXsiNil(values::Value value_0,jstring string_1);
							void encodeStartDocument();
							void encodeAttributeXsiType(values::Value value_0,jstring string_1);
							void encodeCharacters(values::Value value_0);
							void encodeDocType(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
							void encodeEntityReference(jstring string_0);
							void encodeComment(jcharArray charArray_0,jint int_1,jint int_2);
							void encodeProcessingInstruction(jstring string_0,jstring string_1);
						}; // end class EXIBodyEncoderInOrderSC
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class EXIHeaderDecoder : public AbstractEXIHeader {
							public:
						            EXIHeaderDecoder(jobject _jthis, bool copy);
						            EXIHeaderDecoder(const EXIHeaderDecoder &);
						        
							EXIHeaderDecoder();
							virtual ~EXIHeaderDecoder();
							EXIFactory parse(io::channel::BitDecoderChannel bitDecoderChannel_0,EXIFactory eXIFactory_1);
						}; // end class EXIHeaderDecoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class BooleanDatatype : public AbstractDatatype {
							public:
						            BooleanDatatype(jobject _jthis, bool copy);
						            BooleanDatatype(const BooleanDatatype &);
						        
							BooleanDatatype(context::QNameContext qNameContext_0);
							virtual ~BooleanDatatype();
							jboolean isValid(values::Value value_0);
							jboolean isValidString(jstring string_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
							jboolean getBoolean();
						}; // end class BooleanDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class CodePointCharacterSet : public AbstractRestrictedCharacterSet {
								public:
							            CodePointCharacterSet(jobject _jthis, bool copy);
							            CodePointCharacterSet(const CodePointCharacterSet &);
							        
								CodePointCharacterSet(java::util::Set set_0);
								virtual ~CodePointCharacterSet();
							}; // end class CodePointCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class RestrictedCharacterSet : public java::lang::Object {
								public:
							            RestrictedCharacterSet(jobject _jthis, bool copy);
							            RestrictedCharacterSet(const RestrictedCharacterSet &);
							        
								RestrictedCharacterSet();
								virtual ~RestrictedCharacterSet();
							}; // end class RestrictedCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class XSDDateTimeCharacterSet : public AbstractRestrictedCharacterSet {
								public:
							            XSDDateTimeCharacterSet(jobject _jthis, bool copy);
							            XSDDateTimeCharacterSet(const XSDDateTimeCharacterSet &);
							        
								XSDDateTimeCharacterSet();
								virtual ~XSDDateTimeCharacterSet();
							}; // end class XSDDateTimeCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class StringTypeDecoder : public AbstractTypeDecoder {
							public:
						            StringTypeDecoder(jobject _jthis, bool copy);
						            StringTypeDecoder(const StringTypeDecoder &);
						        
							StringTypeDecoder();
							virtual ~StringTypeDecoder();
							values::Value readValue(datatype::Datatype datatype_0,context::QNameContext qNameContext_1,io::channel::DecoderChannel decoderChannel_2,datatype::strings::StringDecoder stringDecoder_3);
						}; // end class StringTypeDecoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class StringTypeEncoder : public AbstractTypeEncoder {
							public:
						            StringTypeEncoder(jobject _jthis, bool copy);
						            StringTypeEncoder(const StringTypeEncoder &);
						        
							StringTypeEncoder();
							virtual ~StringTypeEncoder();
							jboolean isValid(datatype::Datatype datatype_0,values::Value value_1);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,datatype::strings::StringEncoder stringEncoder_2);
						}; // end class StringTypeEncoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						
						class MethodsBag : public java::lang::Object {
							public:
						            MethodsBag(jobject _jthis, bool copy);
						            MethodsBag(const MethodsBag &);
						        
							MethodsBag();
							virtual ~MethodsBag();
							static jint getCodingLength(jint int_0);
							static jint getStringSize(jint int_0);
							static jint getStringSize(jlong long_0);
							static void itos(jint int_0,jint int_1,jcharArray charArray_2);
							static void itos(jlong long_0,jint int_1,jcharArray charArray_2);
							static void itosReverse(jlong long_0,jint int_1,jcharArray charArray_2);
							static jint itosReverse(jint int_0,jint int_1,jcharArray charArray_2);
							static jint numberOf7BitBlocksToRepresent(jlong long_0);
							static jint numberOf7BitBlocksToRepresent(jint int_0);
						}; // end class MethodsBag
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLAreaElementImpl : public HTMLElementImpl {
						public:
					            HTMLAreaElementImpl(jobject _jthis, bool copy);
					            HTMLAreaElementImpl(const HTMLAreaElementImpl &);
					        
						HTMLAreaElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLAreaElementImpl();
						jstring getAccessKey();
						void setAccessKey(jstring string_0);
						jstring getCoords();
						void setCoords(jstring string_0);
						jint getTabIndex();
						void setTabIndex(jint int_0);
						jstring getAlt();
						void setAlt(jstring string_0);
						void setShape(jstring string_0);
						jstring getShape();
						jboolean getNoHref();
						jstring getHref();
						void setHref(jstring string_0);
						void setNoHref(jboolean boolean_0);
						jstring getTarget();
						void setTarget(jstring string_0);
					}; // end class HTMLAreaElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLDListElementImpl : public HTMLElementImpl {
						public:
					            HTMLDListElementImpl(jobject _jthis, bool copy);
					            HTMLDListElementImpl(const HTMLDListElementImpl &);
					        
						HTMLDListElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLDListElementImpl();
						jboolean getCompact();
						void setCompact(jboolean boolean_0);
					}; // end class HTMLDListElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLHeadingElementImpl : public HTMLElementImpl {
						public:
					            HTMLHeadingElementImpl(jobject _jthis, bool copy);
					            HTMLHeadingElementImpl(const HTMLHeadingElementImpl &);
					        
						HTMLHeadingElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLHeadingElementImpl();
						jstring getAlign();
						void setAlign(jstring string_0);
					}; // end class HTMLHeadingElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLLegendElementImpl : public HTMLElementImpl {
						public:
					            HTMLLegendElementImpl(jobject _jthis, bool copy);
					            HTMLLegendElementImpl(const HTMLLegendElementImpl &);
					        
						HTMLLegendElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLLegendElementImpl();
						jstring getAccessKey();
						void setAccessKey(jstring string_0);
						jstring getAlign();
						void setAlign(jstring string_0);
					}; // end class HTMLLegendElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLLinkElementImpl : public HTMLElementImpl {
						public:
					            HTMLLinkElementImpl(jobject _jthis, bool copy);
					            HTMLLinkElementImpl(const HTMLLinkElementImpl &);
					        
						HTMLLinkElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLLinkElementImpl();
						jstring getCharset();
						void setCharset(jstring string_0);
						jstring getHreflang();
						void setHreflang(jstring string_0);
						jstring getRel();
						void setRel(jstring string_0);
						jstring getRev();
						void setRev(jstring string_0);
						jboolean getDisabled();
						void setDisabled(jboolean boolean_0);
						jstring getMedia();
						void setMedia(jstring string_0);
						void setType(jstring string_0);
						jstring getHref();
						void setHref(jstring string_0);
						jstring getType();
						jstring getTarget();
						void setTarget(jstring string_0);
					}; // end class HTMLLinkElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLMapElementImpl : public HTMLElementImpl {
						public:
					            HTMLMapElementImpl(jobject _jthis, bool copy);
					            HTMLMapElementImpl(const HTMLMapElementImpl &);
					        
						HTMLMapElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLMapElementImpl();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						w3c::dom::html::HTMLCollection getAreas();
						jstring getName();
						void setName(jstring string_0);
					}; // end class HTMLMapElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLMenuElementImpl : public HTMLElementImpl {
						public:
					            HTMLMenuElementImpl(jobject _jthis, bool copy);
					            HTMLMenuElementImpl(const HTMLMenuElementImpl &);
					        
						HTMLMenuElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLMenuElementImpl();
						jboolean getCompact();
						void setCompact(jboolean boolean_0);
					}; // end class HTMLMenuElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLMetaElementImpl : public HTMLElementImpl {
						public:
					            HTMLMetaElementImpl(jobject _jthis, bool copy);
					            HTMLMetaElementImpl(const HTMLMetaElementImpl &);
					        
						HTMLMetaElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLMetaElementImpl();
						void setScheme(jstring string_0);
						void setHttpEquiv(jstring string_0);
						jstring getHttpEquiv();
						void setContent(jstring string_0);
						jstring getName();
						void setName(jstring string_0);
						jstring getScheme();
						jstring getContent();
					}; // end class HTMLMetaElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLModElementImpl : public HTMLElementImpl {
						public:
					            HTMLModElementImpl(jobject _jthis, bool copy);
					            HTMLModElementImpl(const HTMLModElementImpl &);
					        
						HTMLModElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLModElementImpl();
						void setCite(jstring string_0);
						jstring getDateTime();
						void setDateTime(jstring string_0);
						jstring getCite();
					}; // end class HTMLModElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLOptGroupElementImpl : public HTMLElementImpl {
						public:
					            HTMLOptGroupElementImpl(jobject _jthis, bool copy);
					            HTMLOptGroupElementImpl(const HTMLOptGroupElementImpl &);
					        
						HTMLOptGroupElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLOptGroupElementImpl();
						jstring getLabel();
						void setLabel(jstring string_0);
						jboolean getDisabled();
						void setDisabled(jboolean boolean_0);
					}; // end class HTMLOptGroupElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLOptionElementImpl : public HTMLElementImpl {
						public:
					            HTMLOptionElementImpl(jobject _jthis, bool copy);
					            HTMLOptionElementImpl(const HTMLOptionElementImpl &);
					        
						HTMLOptionElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLOptionElementImpl();
						void setIndex(jint int_0);
						jstring getLabel();
						void setLabel(jstring string_0);
						jboolean getDisabled();
						void setDisabled(jboolean boolean_0);
						jint getIndex();
						void setSelected(jboolean boolean_0);
						jboolean getSelected();
						void setText(jstring string_0);
						jstring getText();
						void setDefaultSelected(jboolean boolean_0);
						jboolean getDefaultSelected();
						jstring getValue();
						void setValue(jstring string_0);
					}; // end class HTMLOptionElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLParagraphElementImpl : public HTMLElementImpl {
						public:
					            HTMLParagraphElementImpl(jobject _jthis, bool copy);
					            HTMLParagraphElementImpl(const HTMLParagraphElementImpl &);
					        
						HTMLParagraphElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLParagraphElementImpl();
						jstring getAlign();
						void setAlign(jstring string_0);
					}; // end class HTMLParagraphElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLParamElementImpl : public HTMLElementImpl {
						public:
					            HTMLParamElementImpl(jobject _jthis, bool copy);
					            HTMLParamElementImpl(const HTMLParamElementImpl &);
					        
						HTMLParamElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLParamElementImpl();
						void setValueType(jstring string_0);
						void setType(jstring string_0);
						jstring getValueType();
						jstring getName();
						jstring getValue();
						void setName(jstring string_0);
						void setValue(jstring string_0);
						jstring getType();
					}; // end class HTMLParamElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLPreElementImpl : public HTMLElementImpl {
						public:
					            HTMLPreElementImpl(jobject _jthis, bool copy);
					            HTMLPreElementImpl(const HTMLPreElementImpl &);
					        
						HTMLPreElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLPreElementImpl();
						void setWidth(jint int_0);
						jint getWidth();
					}; // end class HTMLPreElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLQuoteElementImpl : public HTMLElementImpl {
						public:
					            HTMLQuoteElementImpl(jobject _jthis, bool copy);
					            HTMLQuoteElementImpl(const HTMLQuoteElementImpl &);
					        
						HTMLQuoteElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLQuoteElementImpl();
						void setCite(jstring string_0);
						jstring getCite();
					}; // end class HTMLQuoteElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLScriptElementImpl : public HTMLElementImpl {
						public:
					            HTMLScriptElementImpl(jobject _jthis, bool copy);
					            HTMLScriptElementImpl(const HTMLScriptElementImpl &);
					        
						HTMLScriptElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLScriptElementImpl();
						void setEvent(jstring string_0);
						jstring getCharset();
						void setCharset(jstring string_0);
						jstring getSrc();
						void setSrc(jstring string_0);
						jstring getHtmlFor();
						void setHtmlFor(jstring string_0);
						void setType(jstring string_0);
						void setText(jstring string_0);
						jstring getText();
						jboolean getDefer();
						jstring getEvent();
						void setDefer(jboolean boolean_0);
						jstring getType();
					}; // end class HTMLScriptElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLSelectElementImpl : public HTMLElementImpl {
						public:
					            HTMLSelectElementImpl(jobject _jthis, bool copy);
					            HTMLSelectElementImpl(const HTMLSelectElementImpl &);
					        
						HTMLSelectElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLSelectElementImpl();
						void setSelectedIndex(jint int_0);
						w3c::dom::NodeList getChildNodes();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jint getTabIndex();
						void setTabIndex(jint int_0);
						void blur();
						void focus();
						jboolean getDisabled();
						void setDisabled(jboolean boolean_0);
						w3c::dom::html::HTMLCollection getOptions();
						jint getSelectedIndex();
						jboolean getMultiple();
						void setMultiple(jboolean boolean_0);
						void add(w3c::dom::html::HTMLElement hTMLElement_0,w3c::dom::html::HTMLElement hTMLElement_1);
						void remove(jint int_0);
						jint getLength();
						jstring getName();
						jstring getValue();
						void setName(jstring string_0);
						void setValue(jstring string_0);
						jstring getType();
						jint getSize();
						void setSize(jint int_0);
					}; // end class HTMLSelectElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLStyleElementImpl : public HTMLElementImpl {
						public:
					            HTMLStyleElementImpl(jobject _jthis, bool copy);
					            HTMLStyleElementImpl(const HTMLStyleElementImpl &);
					        
						HTMLStyleElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLStyleElementImpl();
						jboolean getDisabled();
						void setDisabled(jboolean boolean_0);
						jstring getMedia();
						void setMedia(jstring string_0);
						void setType(jstring string_0);
						jstring getType();
					}; // end class HTMLStyleElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLTableCaptionElementImpl : public HTMLElementImpl {
						public:
					            HTMLTableCaptionElementImpl(jobject _jthis, bool copy);
					            HTMLTableCaptionElementImpl(const HTMLTableCaptionElementImpl &);
					        
						HTMLTableCaptionElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLTableCaptionElementImpl();
						jstring getAlign();
						void setAlign(jstring string_0);
					}; // end class HTMLTableCaptionElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLTableCellElementImpl : public HTMLElementImpl {
						public:
					            HTMLTableCellElementImpl(jobject _jthis, bool copy);
					            HTMLTableCellElementImpl(const HTMLTableCellElementImpl &);
					        
						HTMLTableCellElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLTableCellElementImpl();
						jstring getHeaders();
						jstring getAlign();
						void setAlign(jstring string_0);
						void setHeight(jstring string_0);
						jstring getCh();
						void setCh(jstring string_0);
						jstring getChOff();
						void setChOff(jstring string_0);
						jstring getVAlign();
						void setVAlign(jstring string_0);
						void setWidth(jstring string_0);
						jstring getWidth();
						jstring getHeight();
						jint getCellIndex();
						jstring getAbbr();
						void setAbbr(jstring string_0);
						void setAxis(jstring string_0);
						jint getColSpan();
						void setColSpan(jint int_0);
						void setHeaders(jstring string_0);
						jboolean getNoWrap();
						void setNoWrap(jboolean boolean_0);
						jint getRowSpan();
						void setRowSpan(jint int_0);
						void setScope(jstring string_0);
						jstring getScope();
						jstring getBgColor();
						void setBgColor(jstring string_0);
						void setCellIndex(jint int_0);
						jstring getAxis();
					}; // end class HTMLTableCellElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLTableColElementImpl : public HTMLElementImpl {
						public:
					            HTMLTableColElementImpl(jobject _jthis, bool copy);
					            HTMLTableColElementImpl(const HTMLTableColElementImpl &);
					        
						HTMLTableColElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLTableColElementImpl();
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getCh();
						void setCh(jstring string_0);
						jstring getChOff();
						void setChOff(jstring string_0);
						jint getSpan();
						void setSpan(jint int_0);
						jstring getVAlign();
						void setVAlign(jstring string_0);
						void setWidth(jstring string_0);
						jstring getWidth();
					}; // end class HTMLTableColElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLTableElementImpl : public HTMLElementImpl {
						public:
					            HTMLTableElementImpl(jobject _jthis, bool copy);
					            HTMLTableElementImpl(const HTMLTableElementImpl &);
					        
						HTMLTableElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLTableElementImpl();
						void setFrame(jstring string_0);
						jstring getFrame();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getBorder();
						void setBorder(jstring string_0);
						void setWidth(jstring string_0);
						jstring getWidth();
						w3c::dom::html::HTMLTableCaptionElement getCaption();
						void setCaption(w3c::dom::html::HTMLTableCaptionElement hTMLTableCaptionElement_0);
						w3c::dom::html::HTMLTableSectionElement getTHead();
						void setTHead(w3c::dom::html::HTMLTableSectionElement hTMLTableSectionElement_0);
						w3c::dom::html::HTMLTableSectionElement getTFoot();
						void setTFoot(w3c::dom::html::HTMLTableSectionElement hTMLTableSectionElement_0);
						w3c::dom::html::HTMLCollection getTBodies();
						jstring getCellPadding();
						void setCellPadding(jstring string_0);
						jstring getCellSpacing();
						void setCellSpacing(jstring string_0);
						jstring getRules();
						void setRules(jstring string_0);
						void setSummary(jstring string_0);
						w3c::dom::html::HTMLElement createTHead();
						void deleteTHead();
						w3c::dom::html::HTMLElement createTFoot();
						void deleteTFoot();
						w3c::dom::html::HTMLElement createCaption();
						void deleteCaption();
						w3c::dom::html::HTMLElement insertRow(jint int_0);
						void deleteRow(jint int_0);
						w3c::dom::html::HTMLCollection getRows();
						jstring getSummary();
						jstring getBgColor();
						void setBgColor(jstring string_0);
					}; // end class HTMLTableElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLTableRowElementImpl : public HTMLElementImpl {
						public:
					            HTMLTableRowElementImpl(jobject _jthis, bool copy);
					            HTMLTableRowElementImpl(const HTMLTableRowElementImpl &);
					        
						HTMLTableRowElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLTableRowElementImpl();
						jint getRowIndex();
						void setRowIndex(jint int_0);
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getCh();
						void setCh(jstring string_0);
						jstring getChOff();
						void setChOff(jstring string_0);
						jstring getVAlign();
						void setVAlign(jstring string_0);
						jint getSectionRowIndex();
						jstring getBgColor();
						void setBgColor(jstring string_0);
						w3c::dom::html::HTMLCollection getCells();
						void setCells(w3c::dom::html::HTMLCollection hTMLCollection_0);
						w3c::dom::html::HTMLElement insertCell(jint int_0);
						void deleteCell(jint int_0);
						void setSectionRowIndex(jint int_0);
					}; // end class HTMLTableRowElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLTableSectionElementImpl : public HTMLElementImpl {
						public:
					            HTMLTableSectionElementImpl(jobject _jthis, bool copy);
					            HTMLTableSectionElementImpl(const HTMLTableSectionElementImpl &);
					        
						HTMLTableSectionElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLTableSectionElementImpl();
						w3c::dom::Node cloneNode(jboolean boolean_0);
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getCh();
						void setCh(jstring string_0);
						jstring getChOff();
						void setChOff(jstring string_0);
						jstring getVAlign();
						void setVAlign(jstring string_0);
						w3c::dom::html::HTMLElement insertRow(jint int_0);
						void deleteRow(jint int_0);
						w3c::dom::html::HTMLCollection getRows();
					}; // end class HTMLTableSectionElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLTextAreaElementImpl : public HTMLElementImpl {
						public:
					            HTMLTextAreaElementImpl(jobject _jthis, bool copy);
					            HTMLTextAreaElementImpl(const HTMLTextAreaElementImpl &);
					        
						HTMLTextAreaElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLTextAreaElementImpl();
						void setCols(jint int_0);
						void select();
						jstring getAccessKey();
						void setAccessKey(jstring string_0);
						jint getTabIndex();
						void setTabIndex(jint int_0);
						void blur();
						void focus();
						jboolean getDisabled();
						void setDisabled(jboolean boolean_0);
						void setDefaultValue(jstring string_0);
						jint getRows();
						void setRows(jint int_0);
						jboolean getReadOnly();
						jint getCols();
						jstring getName();
						jstring getValue();
						void setReadOnly(jboolean boolean_0);
						void setName(jstring string_0);
						void setValue(jstring string_0);
						jstring getType();
						jstring getDefaultValue();
					}; // end class HTMLTextAreaElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLUListElementImpl : public HTMLElementImpl {
						public:
					            HTMLUListElementImpl(jobject _jthis, bool copy);
					            HTMLUListElementImpl(const HTMLUListElementImpl &);
					        
						HTMLUListElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLUListElementImpl();
						jboolean getCompact();
						void setCompact(jboolean boolean_0);
						void setType(jstring string_0);
						jstring getType();
					}; // end class HTMLUListElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class NameNodeListImpl : public xerces::dom::DeepNodeListImpl {
						public:
					            NameNodeListImpl(jobject _jthis, bool copy);
					            NameNodeListImpl(const NameNodeListImpl &);
					        
						NameNodeListImpl(xerces::dom::NodeImpl nodeImpl_0,jstring string_1);
						virtual ~NameNodeListImpl();
					}; // end class NameNodeListImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLAElement : public java::lang::Object {
					public:
				            WMLAElement(jobject _jthis, bool copy);
				            WMLAElement(const WMLAElement &);
				        
					WMLAElement();
					virtual ~WMLAElement();
				}; // end class WMLAElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLAccessElement : public java::lang::Object {
					public:
				            WMLAccessElement(jobject _jthis, bool copy);
				            WMLAccessElement(const WMLAccessElement &);
				        
					WMLAccessElement();
					virtual ~WMLAccessElement();
				}; // end class WMLAccessElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLBElement : public java::lang::Object {
					public:
				            WMLBElement(jobject _jthis, bool copy);
				            WMLBElement(const WMLBElement &);
				        
					WMLBElement();
					virtual ~WMLBElement();
				}; // end class WMLBElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLBrElement : public java::lang::Object {
					public:
				            WMLBrElement(jobject _jthis, bool copy);
				            WMLBrElement(const WMLBrElement &);
				        
					WMLBrElement();
					virtual ~WMLBrElement();
				}; // end class WMLBrElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLGoElement : public java::lang::Object {
					public:
				            WMLGoElement(jobject _jthis, bool copy);
				            WMLGoElement(const WMLGoElement &);
				        
					WMLGoElement();
					virtual ~WMLGoElement();
				}; // end class WMLGoElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLOptgroupElement : public java::lang::Object {
					public:
				            WMLOptgroupElement(jobject _jthis, bool copy);
				            WMLOptgroupElement(const WMLOptgroupElement &);
				        
					WMLOptgroupElement();
					virtual ~WMLOptgroupElement();
				}; // end class WMLOptgroupElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLSmallElement : public java::lang::Object {
					public:
				            WMLSmallElement(jobject _jthis, bool copy);
				            WMLSmallElement(const WMLSmallElement &);
				        
					WMLSmallElement();
					virtual ~WMLSmallElement();
				}; // end class WMLSmallElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLWmlElement : public java::lang::Object {
					public:
				            WMLWmlElement(jobject _jthis, bool copy);
				            WMLWmlElement(const WMLWmlElement &);
				        
					WMLWmlElement();
					virtual ~WMLWmlElement();
				}; // end class WMLWmlElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLDOMImplementationImpl : public xerces::dom::DOMImplementationImpl {
						public:
					            WMLDOMImplementationImpl(jobject _jthis, bool copy);
					            WMLDOMImplementationImpl(const WMLDOMImplementationImpl &);
					        
						WMLDOMImplementationImpl();
						virtual ~WMLDOMImplementationImpl();
						static w3c::dom::DOMImplementation getDOMImplementation();
					}; // end class WMLDOMImplementationImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class NodeIteratorImpl : public java::lang::Object {
						public:
					            NodeIteratorImpl(jobject _jthis, bool copy);
					            NodeIteratorImpl(const NodeIteratorImpl &);
					        
						NodeIteratorImpl(DocumentImpl documentImpl_0,w3c::dom::Node node_1,jint int_2,w3c::dom::traversal::NodeFilter nodeFilter_3,jboolean boolean_4);
						virtual ~NodeIteratorImpl();
						w3c::dom::Node nextNode();
						w3c::dom::traversal::NodeFilter getFilter();
						void detach();
						jboolean getExpandEntityReferences();
						w3c::dom::Node previousNode();
						jint getWhatToShow();
						w3c::dom::Node getRoot();
						void removeNode(w3c::dom::Node node_0);
					}; // end class NodeIteratorImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class NodeListCache : public java::lang::Object {
						public:
					            NodeListCache(jobject _jthis, bool copy);
					            NodeListCache(const NodeListCache &);
					        
						virtual ~NodeListCache();
					}; // end class NodeListCache
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class PSVIAttrNSImpl : public AttrNSImpl {
						public:
					            PSVIAttrNSImpl(jobject _jthis, bool copy);
					            PSVIAttrNSImpl(const PSVIAttrNSImpl &);
					        
						PSVIAttrNSImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1,jstring string_2,jstring string_3);
						PSVIAttrNSImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1,jstring string_2);
						virtual ~PSVIAttrNSImpl();
						xs::XSAttributeDeclaration getAttributeDeclaration();
						xs::XSTypeDefinition getTypeDefinition();
						xs::ShortList getItemValueTypes();
						jstring getSchemaDefault();
						jstring getSchemaNormalizedValue();
						jboolean getIsSchemaSpecified();
						jshort getValidationAttempted();
						jshort getValidity();
						xs::StringList getErrorCodes();
						xs::StringList getErrorMessages();
						jstring getValidationContext();
						xs::XSSimpleTypeDefinition getMemberTypeDefinition();
						jshort getActualNormalizedValueType();
						xs::XSValue getSchemaValue();
						void setPSVI(xs::AttributePSVI attributePSVI_0);
					}; // end class PSVIAttrNSImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class PSVIElementNSImpl : public ElementNSImpl {
						public:
					            PSVIElementNSImpl(jobject _jthis, bool copy);
					            PSVIElementNSImpl(const PSVIElementNSImpl &);
					        
						PSVIElementNSImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1,jstring string_2,jstring string_3);
						PSVIElementNSImpl(CoreDocumentImpl coreDocumentImpl_0,jstring string_1,jstring string_2);
						virtual ~PSVIElementNSImpl();
						xs::XSElementDeclaration getElementDeclaration();
						xs::XSTypeDefinition getTypeDefinition();
						xs::ShortList getItemValueTypes();
						jstring getSchemaDefault();
						jstring getSchemaNormalizedValue();
						jboolean getIsSchemaSpecified();
						jshort getValidationAttempted();
						jshort getValidity();
						xs::StringList getErrorCodes();
						xs::StringList getErrorMessages();
						jstring getValidationContext();
						xs::XSSimpleTypeDefinition getMemberTypeDefinition();
						jshort getActualNormalizedValueType();
						xs::XSValue getSchemaValue();
						void setPSVI(xs::ElementPSVI elementPSVI_0);
						xs::XSModel getSchemaInformation();
						xs::XSNotationDeclaration getNotation();
						jboolean getNil();
					}; // end class PSVIElementNSImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace dom{
					
					class RangeImpl : public java::lang::Object {
						public:
					            RangeImpl(jobject _jthis, bool copy);
					            RangeImpl(const RangeImpl &);
					        
						RangeImpl(DocumentImpl documentImpl_0);
						virtual ~RangeImpl();
						jint getStartOffset();
						void detach();
						w3c::dom::Node getStartContainer();
						w3c::dom::Node getEndContainer();
						jint getEndOffset();
						jboolean getCollapsed();
						w3c::dom::Node getCommonAncestorContainer();
						void setStartBefore(w3c::dom::Node node_0);
						void setStartAfter(w3c::dom::Node node_0);
						void setEndBefore(w3c::dom::Node node_0);
						void setEndAfter(w3c::dom::Node node_0);
						void collapse(jboolean boolean_0);
						void selectNode(w3c::dom::Node node_0);
						void selectNodeContents(w3c::dom::Node node_0);
						jshort compareBoundaryPoints(jshort short_0,w3c::dom::ranges::Range range_1);
						void deleteContents();
						w3c::dom::DocumentFragment extractContents();
						w3c::dom::DocumentFragment cloneContents();
						void insertNode(w3c::dom::Node node_0);
						void surroundContents(w3c::dom::Node node_0);
						w3c::dom::ranges::Range cloneRange();
						void insertedNodeFromDOM(w3c::dom::Node node_0);
						void setStart(w3c::dom::Node node_0,jint int_1);
						void setEnd(w3c::dom::Node node_0,jint int_1);
						jstring toString();
					}; // end class RangeImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class RevalidationHandler : public java::lang::Object {
						public:
					            RevalidationHandler(jobject _jthis, bool copy);
					            RevalidationHandler(const RevalidationHandler &);
					        
						RevalidationHandler();
						virtual ~RevalidationHandler();
					}; // end class RevalidationHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XML11NSDocumentScannerImpl : public XML11DocumentScannerImpl {
						public:
					            XML11NSDocumentScannerImpl(jobject _jthis, bool copy);
					            XML11NSDocumentScannerImpl(const XML11NSDocumentScannerImpl &);
					        
						XML11NSDocumentScannerImpl();
						virtual ~XML11NSDocumentScannerImpl();
						void setDTDValidator(dtd::XMLDTDValidatorFilter xMLDTDValidatorFilter_0);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XML11NSDocumentScannerImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLEntityDescription : public java::lang::Object {
						public:
					            XMLEntityDescription(jobject _jthis, bool copy);
					            XMLEntityDescription(const XMLEntityDescription &);
					        
						XMLEntityDescription();
						virtual ~XMLEntityDescription();
					}; // end class XMLEntityDescription
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLErrorReporter : public java::lang::Object {
						public:
					            XMLErrorReporter(jobject _jthis, bool copy);
					            XMLErrorReporter(const XMLErrorReporter &);
					        
						XMLErrorReporter();
						virtual ~XMLErrorReporter();
						void setDocumentLocator(xni::XMLLocator xMLLocator_0);
						void setLocale(java::util::Locale locale_0);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						xni::parser::XMLErrorHandler getErrorHandler();
						java::util::Locale getLocale();
						jobjectArray getRecognizedFeatures();
						jobjectArray getRecognizedProperties();
						java::lang::Boolean getFeatureDefault(jstring string_0);
						util::MessageFormatter getMessageFormatter(jstring string_0);
						util::MessageFormatter removeMessageFormatter(jstring string_0);
						xml::sax::ErrorHandler getSAXErrorHandler();
						void putMessageFormatter(jstring string_0,util::MessageFormatter messageFormatter_1);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XMLErrorReporter
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLNSDocumentScannerImpl : public XMLDocumentScannerImpl {
						public:
					            XMLNSDocumentScannerImpl(jobject _jthis, bool copy);
					            XMLNSDocumentScannerImpl(const XMLNSDocumentScannerImpl &);
					        
						XMLNSDocumentScannerImpl();
						virtual ~XMLNSDocumentScannerImpl();
						void setDTDValidator(dtd::XMLDTDValidatorFilter xMLDTDValidatorFilter_0);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XMLNSDocumentScannerImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLVersionDetector : public java::lang::Object {
						public:
					            XMLVersionDetector(jobject _jthis, bool copy);
					            XMLVersionDetector(const XMLVersionDetector &);
					        
						XMLVersionDetector();
						virtual ~XMLVersionDetector();
						void startDocumentParsing(XMLEntityHandler xMLEntityHandler_0,jshort short_1);
						jshort determineDocVersion(xni::parser::XMLInputSource xMLInputSource_0);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
					}; // end class XMLVersionDetector
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class BalancedDTDGrammar : public DTDGrammar {
							public:
						            BalancedDTDGrammar(jobject _jthis, bool copy);
						            BalancedDTDGrammar(const BalancedDTDGrammar &);
						        
							BalancedDTDGrammar(util::SymbolTable symbolTable_0,XMLDTDDescription xMLDTDDescription_1);
							virtual ~BalancedDTDGrammar();
							virtual void endDTD(xni::Augmentations augmentations_0);
							virtual void element(jstring string_0,xni::Augmentations augmentations_1);
							virtual void startContentModel(jstring string_0,xni::Augmentations augmentations_1);
							virtual void startGroup(xni::Augmentations augmentations_0);
							virtual void pcdata(xni::Augmentations augmentations_0);
							virtual void endGroup(xni::Augmentations augmentations_0);
							virtual void occurrence(jshort short_0,xni::Augmentations augmentations_1);
							virtual void separator(jshort short_0,xni::Augmentations augmentations_1);
						}; // end class BalancedDTDGrammar
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XML11DTDProcessor : public XMLDTDLoader {
							public:
						            XML11DTDProcessor(jobject _jthis, bool copy);
						            XML11DTDProcessor(const XML11DTDProcessor &);
						        
							XML11DTDProcessor();
							XML11DTDProcessor(util::SymbolTable symbolTable_0);
							XML11DTDProcessor(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
							virtual ~XML11DTDProcessor();
						}; // end class XML11DTDProcessor
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XML11NSDTDValidator : public XML11DTDValidator {
							public:
						            XML11NSDTDValidator(jobject _jthis, bool copy);
						            XML11NSDTDValidator(const XML11NSDTDValidator &);
						        
							XML11NSDTDValidator();
							virtual ~XML11NSDTDValidator();
						}; // end class XML11NSDTDValidator
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLDTDDescription : public util::XMLResourceIdentifierImpl {
							public:
						            XMLDTDDescription(jobject _jthis, bool copy);
						            XMLDTDDescription(const XMLDTDDescription &);
						        
							XMLDTDDescription(xni::XMLResourceIdentifier xMLResourceIdentifier_0,jstring string_1);
							XMLDTDDescription(xni::parser::XMLInputSource xMLInputSource_0);
							XMLDTDDescription(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
							virtual ~XMLDTDDescription();
							jstring getGrammarType();
							jstring getRootName();
							void setRootName(jstring string_0);
							void setPossibleRoots(java::util::ArrayList arrayList_0);
							void setPossibleRoots(java::util::Vector vector_0);
							jint hashCode();
						}; // end class XMLDTDDescription
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class CMStateSet : public java::lang::Object {
								public:
							            CMStateSet(jobject _jthis, bool copy);
							            CMStateSet(const CMStateSet &);
							        
								CMStateSet(jint int_0);
								virtual ~CMStateSet();
								virtual void union(CMStateSet cMStateSet_0);
								virtual void intersection(CMStateSet cMStateSet_0);
								virtual void setBit(jint int_0);
								virtual void setTo(CMStateSet cMStateSet_0);
								virtual jboolean getBit(jint int_0);
								virtual void zeroBits();
								jstring toString();
								jint hashCode();
								virtual jboolean isEmpty();
							}; // end class CMStateSet
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class InvalidDatatypeFacetException : public DatatypeException {
							public:
						            InvalidDatatypeFacetException(jobject _jthis, bool copy);
						            InvalidDatatypeFacetException(const InvalidDatatypeFacetException &);
						        
							virtual ~InvalidDatatypeFacetException();
						}; // end class InvalidDatatypeFacetException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class ObjectFactory : public java::lang::Object {
							public:
						            ObjectFactory(jobject _jthis, bool copy);
						            ObjectFactory(const ObjectFactory &);
						        
							virtual ~ObjectFactory();
						}; // end class ObjectFactory
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class XSSimpleType : public java::lang::Object {
							public:
						            XSSimpleType(jobject _jthis, bool copy);
						            XSSimpleType(const XSSimpleType &);
						        
							XSSimpleType();
							virtual ~XSSimpleType();
						}; // end class XSSimpleType
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class StringDatatypeValidator : public java::lang::Object {
								public:
							            StringDatatypeValidator(jobject _jthis, bool copy);
							            StringDatatypeValidator(const StringDatatypeValidator &);
							        
								StringDatatypeValidator();
								virtual ~StringDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class StringDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class XML11NMTOKENDatatypeValidator : public NMTOKENDatatypeValidator {
								public:
							            XML11NMTOKENDatatypeValidator(jobject _jthis, bool copy);
							            XML11NMTOKENDatatypeValidator(const XML11NMTOKENDatatypeValidator &);
							        
								XML11NMTOKENDatatypeValidator();
								virtual ~XML11NMTOKENDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class XML11NMTOKENDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace util{
							
							class HexBin : public java::lang::Object {
								public:
							            HexBin(jobject _jthis, bool copy);
							            HexBin(const HexBin &);
							        
								HexBin();
								virtual ~HexBin();
								static jbyteArray decode(jstring string_0);
								static jstring encode(jbyteArray byteArray_0);
							}; // end class HexBin
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class Base64BinaryDV : public TypeValidator {
								public:
							            Base64BinaryDV(jobject _jthis, bool copy);
							            Base64BinaryDV(const Base64BinaryDV &);
							        
								Base64BinaryDV();
								virtual ~Base64BinaryDV();
								jshort getAllowedFacets();
							}; // end class Base64BinaryDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class DayDV : public AbstractDateTimeDV {
								public:
							            DayDV(jobject _jthis, bool copy);
							            DayDV(const DayDV &);
							        
								DayDV();
								virtual ~DayDV();
							}; // end class DayDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class ListDV : public TypeValidator {
								public:
							            ListDV(jobject _jthis, bool copy);
							            ListDV(const ListDV &);
							        
								ListDV();
								virtual ~ListDV();
								jshort getAllowedFacets();
							}; // end class ListDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class SchemaDateTimeException : public java::lang::RuntimeException {
								public:
							            SchemaDateTimeException(jobject _jthis, bool copy);
							            SchemaDateTimeException(const SchemaDateTimeException &);
							        
								SchemaDateTimeException();
								SchemaDateTimeException(jstring string_0);
								virtual ~SchemaDateTimeException();
							}; // end class SchemaDateTimeException
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class UnionDV : public TypeValidator {
								public:
							            UnionDV(jobject _jthis, bool copy);
							            UnionDV(const UnionDV &);
							        
								UnionDV();
								virtual ~UnionDV();
								jshort getAllowedFacets();
							}; // end class UnionDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class XSSimpleTypeDelegate : public java::lang::Object {
								public:
							            XSSimpleTypeDelegate(jobject _jthis, bool copy);
							            XSSimpleTypeDelegate(const XSSimpleTypeDelegate &);
							        
								XSSimpleTypeDelegate(XSSimpleType xSSimpleType_0);
								virtual ~XSSimpleTypeDelegate();
								XSSimpleType getWrappedXSSimpleType();
								void validate(ValidationContext validationContext_0,ValidatedInfo validatedInfo_1);
								xs::XSNamespaceItem getNamespaceItem();
								jstring getNamespace();
								jshort getTypeCategory();
								xs::XSTypeDefinition getBaseType();
								jshort getFinal();
								jboolean getAnonymous();
								jboolean derivedFromType(xs::XSTypeDefinition xSTypeDefinition_0,jshort short_1);
								jboolean derivedFrom(jstring string_0,jstring string_1,jshort short_2);
								jshort getVariety();
								jboolean isDefinedFacet(jshort short_0);
								xs::XSObjectList getMultiValueFacets();
								xs::XSSimpleTypeDefinition getItemType();
								jstring getLexicalFacetValue(jshort short_0);
								xs::StringList getLexicalPattern();
								xs::XSSimpleTypeDefinition getPrimitiveType();
								jshort getBuiltInKind();
								xs::XSObjectList getMemberTypes();
								jshort getDefinedFacets();
								jshort getFixedFacets();
								jboolean isFixedFacet(jshort short_0);
								xs::StringList getLexicalEnumeration();
								jshort getOrdered();
								jboolean getFinite();
								jboolean getBounded();
								jboolean getNumeric();
								xs::XSObjectList getFacets();
								xs::XSObject getFacet(jint int_0);
								jshort getPrimitiveKind();
								void applyFacets(XSFacets xSFacets_0,jshort short_1,jshort short_2,ValidationContext validationContext_3);
								jboolean isIDType();
								jshort getWhitespace();
								jstring toString();
								jstring getName();
								xs::XSObjectList getAnnotations();
								jshort getType();
								jboolean isFinal(jshort short_0);
							}; // end class XSSimpleTypeDelegate
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						
						class ASCIIReader : public java::io::Reader {
							public:
						            ASCIIReader(jobject _jthis, bool copy);
						            ASCIIReader(const ASCIIReader &);
						        
							ASCIIReader(java::io::InputStream inputStream_0,jbyteArray byteArray_1,util::MessageFormatter messageFormatter_2,java::util::Locale locale_3);
							ASCIIReader(java::io::InputStream inputStream_0,jint int_1,util::MessageFormatter messageFormatter_2,java::util::Locale locale_3);
							ASCIIReader(java::io::InputStream inputStream_0,util::MessageFormatter messageFormatter_1,java::util::Locale locale_2);
							virtual ~ASCIIReader();
							jint read(jcharArray charArray_0,jint int_1,jint int_2);
							jint read();
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jboolean markSupported();
							void reset();
							jboolean ready();
						}; // end class ASCIIReader
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						
						class UCSReader : public java::io::Reader {
							public:
						            UCSReader(jobject _jthis, bool copy);
						            UCSReader(const UCSReader &);
						        
							UCSReader(java::io::InputStream inputStream_0,jbyteArray byteArray_1,jshort short_2);
							UCSReader(java::io::InputStream inputStream_0,jint int_1,jshort short_2);
							UCSReader(java::io::InputStream inputStream_0,jshort short_1);
							virtual ~UCSReader();
							jint read(jcharArray charArray_0,jint int_1,jint int_2);
							jint read();
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jboolean markSupported();
							void reset();
							jboolean ready();
						}; // end class UCSReader
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace msg{
						
						class XMLMessageFormatter : public java::lang::Object {
							public:
						            XMLMessageFormatter(jobject _jthis, bool copy);
						            XMLMessageFormatter(const XMLMessageFormatter &);
						        
							XMLMessageFormatter();
							virtual ~XMLMessageFormatter();
						}; // end class XMLMessageFormatter
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace msg

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						
						class XPath : public java::lang::Object {
							public:
						            XPath(jobject _jthis, bool copy);
						            XPath(const XPath &);
						        
							XPath(jstring string_0,util::SymbolTable symbolTable_1,xni::NamespaceContext namespaceContext_2);
							virtual ~XPath();
							jobjectArray getLocationPaths();
							XPath::LocationPath getLocationPath();
							static void main(jobjectArray stringArray_0);
							static void main(int argc,const char **argv);
							jstring toString();
						}; // end class XPath
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xpath

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class Match : public java::lang::Object {
								public:
							            Match(jobject _jthis, bool copy);
							            Match(const Match &);
							        
								Match();
								virtual ~Match();
								jint getBeginning(jint int_0);
								jint getNumberOfGroups();
								jstring getCapturedText(jint int_0);
								jint getEnd(jint int_0);
							}; // end class Match
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class ParseException : public java::lang::RuntimeException {
								public:
							            ParseException(jobject _jthis, bool copy);
							            ParseException(const ParseException &);
							        
								ParseException(jstring string_0,jint int_1);
								virtual ~ParseException();
								jint getLocation();
							}; // end class ParseException
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSElementDeclaration : public java::lang::Object {
						public:
					            XSElementDeclaration(jobject _jthis, bool copy);
					            XSElementDeclaration(const XSElementDeclaration &);
					        
						XSElementDeclaration();
						virtual ~XSElementDeclaration();
					}; // end class XSElementDeclaration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSException : public java::lang::RuntimeException {
						public:
					            XSException(jobject _jthis, bool copy);
					            XSException(const XSException &);
					        
						XSException(jshort short_0,jstring string_1);
						virtual ~XSException();
					}; // end class XSException
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSMultiValueFacet : public java::lang::Object {
						public:
					            XSMultiValueFacet(jobject _jthis, bool copy);
					            XSMultiValueFacet(const XSMultiValueFacet &);
					        
						XSMultiValueFacet();
						virtual ~XSMultiValueFacet();
					}; // end class XSMultiValueFacet
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSSimpleTypeDefinition : public java::lang::Object {
						public:
					            XSSimpleTypeDefinition(jobject _jthis, bool copy);
					            XSSimpleTypeDefinition(const XSSimpleTypeDefinition &);
					        
						XSSimpleTypeDefinition();
						virtual ~XSSimpleTypeDefinition();
					}; // end class XSSimpleTypeDefinition
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class ElementState : public java::lang::Object {
						public:
					            ElementState(jobject _jthis, bool copy);
					            ElementState(const ElementState &);
					        
						ElementState();
						virtual ~ElementState();
					}; // end class ElementState
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class Serializer : public java::lang::Object {
						public:
					            Serializer(jobject _jthis, bool copy);
					            Serializer(const Serializer &);
					        
						Serializer();
						virtual ~Serializer();
					}; // end class Serializer
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace javax{
		namespace xml{
			namespace datatype{
				
				class SecuritySupport : public java::lang::Object {
					public:
				            SecuritySupport(jobject _jthis, bool copy);
				            SecuritySupport(const SecuritySupport &);
				        
					virtual ~SecuritySupport();
				}; // end class SecuritySupport
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype

	namespace javax{
		namespace xml{
			namespace stream{
				
				class Location : public java::lang::Object {
					public:
				            Location(jobject _jthis, bool copy);
				            Location(const Location &);
				        
					Location();
					virtual ~Location();
				}; // end class Location
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				
				class StreamFilter : public java::lang::Object {
					public:
				            StreamFilter(jobject _jthis, bool copy);
				            StreamFilter(const StreamFilter &);
				        
					StreamFilter();
					virtual ~StreamFilter();
				}; // end class StreamFilter
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLStreamConstants : public java::lang::Object {
					public:
				            XMLStreamConstants(jobject _jthis, bool copy);
				            XMLStreamConstants(const XMLStreamConstants &);
				        
					XMLStreamConstants();
					virtual ~XMLStreamConstants();
				}; // end class XMLStreamConstants
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class EndDocument : public java::lang::Object {
						public:
					            EndDocument(jobject _jthis, bool copy);
					            EndDocument(const EndDocument &);
					        
						EndDocument();
						virtual ~EndDocument();
					}; // end class EndDocument
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class StartElement : public java::lang::Object {
						public:
					            StartElement(jobject _jthis, bool copy);
					            StartElement(const StartElement &);
					        
						StartElement();
						virtual ~StartElement();
					}; // end class StartElement
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace transform{
				
				class FactoryFinder : public java::lang::Object {
					public:
				            FactoryFinder(jobject _jthis, bool copy);
				            FactoryFinder(const FactoryFinder &);
				        
					virtual ~FactoryFinder();
				}; // end class FactoryFinder
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				
				class SourceLocator : public java::lang::Object {
					public:
				            SourceLocator(jobject _jthis, bool copy);
				            SourceLocator(const SourceLocator &);
				        
					SourceLocator();
					virtual ~SourceLocator();
				}; // end class SourceLocator
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				namespace dom{
					
					class DOMLocator : public java::lang::Object {
						public:
					            DOMLocator(jobject _jthis, bool copy);
					            DOMLocator(const DOMLocator &);
					        
						DOMLocator();
						virtual ~DOMLocator();
					}; // end class DOMLocator
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace dom

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathFactory : public java::lang::Object {
					public:
				            XPathFactory(jobject _jthis, bool copy);
				            XPathFactory(const XPathFactory &);
				        
					virtual ~XPathFactory();
					static XPathFactory newInstance(jstring string_0,jstring string_1,java::lang::ClassLoader classLoader_2);
					static XPathFactory newInstance();
					static XPathFactory newInstance(jstring string_0);
				}; // end class XPathFactory
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace org{
		namespace apache{
			namespace xmlcommons{
				
				class Version : public java::lang::Object {
					public:
				            Version(jobject _jthis, bool copy);
				            Version(const Version &);
				        
					Version();
					virtual ~Version();
					static jstring getVersionNum();
					static jstring getProduct();
					static jstring getVersion();
					static void main(jobjectArray stringArray_0);
					static void main(int argc,const char **argv);
				}; // end class Version
			} // end namespace org
		} // end namespace apache
	} // end namespace xmlcommons

	namespace org{
		namespace w3c{
			namespace dom{
				
				class Attr : public java::lang::Object {
					public:
				            Attr(jobject _jthis, bool copy);
				            Attr(const Attr &);
				        
					Attr();
					virtual ~Attr();
				}; // end class Attr
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class CDATASection : public java::lang::Object {
					public:
				            CDATASection(jobject _jthis, bool copy);
				            CDATASection(const CDATASection &);
				        
					CDATASection();
					virtual ~CDATASection();
				}; // end class CDATASection
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DOMImplementationSource : public java::lang::Object {
					public:
				            DOMImplementationSource(jobject _jthis, bool copy);
				            DOMImplementationSource(const DOMImplementationSource &);
				        
					DOMImplementationSource();
					virtual ~DOMImplementationSource();
				}; // end class DOMImplementationSource
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class Entity : public java::lang::Object {
					public:
				            Entity(jobject _jthis, bool copy);
				            Entity(const Entity &);
				        
					Entity();
					virtual ~Entity();
				}; // end class Entity
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class Text : public java::lang::Object {
					public:
				            Text(jobject _jthis, bool copy);
				            Text(const Text &);
				        
					Text();
					virtual ~Text();
				}; // end class Text
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class TypeInfo : public java::lang::Object {
					public:
				            TypeInfo(jobject _jthis, bool copy);
				            TypeInfo(const TypeInfo &);
				        
					TypeInfo();
					virtual ~TypeInfo();
				}; // end class TypeInfo
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSCharsetRule : public java::lang::Object {
						public:
					            CSSCharsetRule(jobject _jthis, bool copy);
					            CSSCharsetRule(const CSSCharsetRule &);
					        
						CSSCharsetRule();
						virtual ~CSSCharsetRule();
					}; // end class CSSCharsetRule
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSRule : public java::lang::Object {
						public:
					            CSSRule(jobject _jthis, bool copy);
					            CSSRule(const CSSRule &);
					        
						CSSRule();
						virtual ~CSSRule();
					}; // end class CSSRule
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSRuleList : public java::lang::Object {
						public:
					            CSSRuleList(jobject _jthis, bool copy);
					            CSSRuleList(const CSSRuleList &);
					        
						CSSRuleList();
						virtual ~CSSRuleList();
					}; // end class CSSRuleList
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class DOMImplementationCSS : public java::lang::Object {
						public:
					            DOMImplementationCSS(jobject _jthis, bool copy);
					            DOMImplementationCSS(const DOMImplementationCSS &);
					        
						DOMImplementationCSS();
						virtual ~DOMImplementationCSS();
					}; // end class DOMImplementationCSS
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					
					class EventException : public java::lang::RuntimeException {
						public:
					            EventException(jobject _jthis, bool copy);
					            EventException(const EventException &);
					        
						EventException(jshort short_0,jstring string_1);
						virtual ~EventException();
					}; // end class EventException
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLAreaElement : public java::lang::Object {
						public:
					            HTMLAreaElement(jobject _jthis, bool copy);
					            HTMLAreaElement(const HTMLAreaElement &);
					        
						HTMLAreaElement();
						virtual ~HTMLAreaElement();
					}; // end class HTMLAreaElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLDirectoryElement : public java::lang::Object {
						public:
					            HTMLDirectoryElement(jobject _jthis, bool copy);
					            HTMLDirectoryElement(const HTMLDirectoryElement &);
					        
						HTMLDirectoryElement();
						virtual ~HTMLDirectoryElement();
					}; // end class HTMLDirectoryElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLFrameSetElement : public java::lang::Object {
						public:
					            HTMLFrameSetElement(jobject _jthis, bool copy);
					            HTMLFrameSetElement(const HTMLFrameSetElement &);
					        
						HTMLFrameSetElement();
						virtual ~HTMLFrameSetElement();
					}; // end class HTMLFrameSetElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLIsIndexElement : public java::lang::Object {
						public:
					            HTMLIsIndexElement(jobject _jthis, bool copy);
					            HTMLIsIndexElement(const HTMLIsIndexElement &);
					        
						HTMLIsIndexElement();
						virtual ~HTMLIsIndexElement();
					}; // end class HTMLIsIndexElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLModElement : public java::lang::Object {
						public:
					            HTMLModElement(jobject _jthis, bool copy);
					            HTMLModElement(const HTMLModElement &);
					        
						HTMLModElement();
						virtual ~HTMLModElement();
					}; // end class HTMLModElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLQuoteElement : public java::lang::Object {
						public:
					            HTMLQuoteElement(jobject _jthis, bool copy);
					            HTMLQuoteElement(const HTMLQuoteElement &);
					        
						HTMLQuoteElement();
						virtual ~HTMLQuoteElement();
					}; // end class HTMLQuoteElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLTableRowElement : public java::lang::Object {
						public:
					            HTMLTableRowElement(jobject _jthis, bool copy);
					            HTMLTableRowElement(const HTMLTableRowElement &);
					        
						HTMLTableRowElement();
						virtual ~HTMLTableRowElement();
					}; // end class HTMLTableRowElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLTableSectionElement : public java::lang::Object {
						public:
					            HTMLTableSectionElement(jobject _jthis, bool copy);
					            HTMLTableSectionElement(const HTMLTableSectionElement &);
					        
						HTMLTableSectionElement();
						virtual ~HTMLTableSectionElement();
					}; // end class HTMLTableSectionElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSOutput : public java::lang::Object {
						public:
					            LSOutput(jobject _jthis, bool copy);
					            LSOutput(const LSOutput &);
					        
						LSOutput();
						virtual ~LSOutput();
					}; // end class LSOutput
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ranges{
					
					class Range : public java::lang::Object {
						public:
					            Range(jobject _jthis, bool copy);
					            Range(const Range &);
					        
						Range();
						virtual ~Range();
					}; // end class Range
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ranges

	namespace org{
		namespace w3c{
			namespace dom{
				namespace traversal{
					
					class NodeFilter : public java::lang::Object {
						public:
					            NodeFilter(jobject _jthis, bool copy);
					            NodeFilter(const NodeFilter &);
					        
						NodeFilter();
						virtual ~NodeFilter();
					}; // end class NodeFilter
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace traversal

	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					
					class XPathNSResolver : public java::lang::Object {
						public:
					            XPathNSResolver(jobject _jthis, bool copy);
					            XPathNSResolver(const XPathNSResolver &);
					        
						XPathNSResolver();
						virtual ~XPathNSResolver();
					}; // end class XPathNSResolver
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath

	namespace org{
		namespace xml{
			namespace sax{
				
				class EntityResolver : public java::lang::Object {
					public:
				            EntityResolver(jobject _jthis, bool copy);
				            EntityResolver(const EntityResolver &);
				        
					EntityResolver();
					virtual ~EntityResolver();
				}; // end class EntityResolver
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				
				class SAXNotSupportedException : public SAXException {
					public:
				            SAXNotSupportedException(jobject _jthis, bool copy);
				            SAXNotSupportedException(const SAXNotSupportedException &);
				        
					SAXNotSupportedException();
					SAXNotSupportedException(jstring string_0);
					virtual ~SAXNotSupportedException();
				}; // end class SAXNotSupportedException
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class XMLReaderFactory : public java::lang::Object {
						public:
					            XMLReaderFactory(jobject _jthis, bool copy);
					            XMLReaderFactory(const XMLReaderFactory &);
					        
						virtual ~XMLReaderFactory();
						static XMLReader createXMLReader(jstring string_0);
						static XMLReader createXMLReader();
					}; // end class XMLReaderFactory
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace rcsdesign{
		
		class rcsdesignFrame : public java::awt::Frame {
			public:
		            rcsdesignFrame(jobject _jthis, bool copy);
		            rcsdesignFrame(const rcsdesignFrame &);
		        
			rcsdesignFrame(jstring string_0);
			virtual ~rcsdesignFrame();
			void windowOpened(java::awt::event::WindowEvent windowEvent_0);
			void windowClosing(java::awt::event::WindowEvent windowEvent_0);
			void windowClosed(java::awt::event::WindowEvent windowEvent_0);
			void windowIconified(java::awt::event::WindowEvent windowEvent_0);
			void windowDeiconified(java::awt::event::WindowEvent windowEvent_0);
			void windowActivated(java::awt::event::WindowEvent windowEvent_0);
			void windowDeactivated(java::awt::event::WindowEvent windowEvent_0);
			void resizeInnerApplet();
		}; // end class rcsdesignFrame
	} // end namespace rcsdesign

	namespace rcs{
		namespace posemath{
			
			class testpm : public java::lang::Object {
				public:
			            testpm(jobject _jthis, bool copy);
			            testpm(const testpm &);
			        
				virtual ~testpm();
				static void testAssert(jboolean boolean_0,jstring string_1);
				static void testAssert(jboolean boolean_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class testpm
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace posemath{
			
			class PM_RPY : public PmRpy {
				public:
			            PM_RPY(jobject _jthis, bool copy);
			            PM_RPY(const PM_RPY &);
			        
				PM_RPY();
				PM_RPY(jdouble double_0,jdouble double_1,jdouble double_2);
				PM_RPY(PmQuaternion pmQuaternion_0);
				virtual ~PM_RPY();
				PM_RPY clone();
				void update(nml::NMLFormatConverter nMLFormatConverter_0);
			}; // end class PM_RPY
		} // end namespace rcs
	} // end namespace posemath

	namespace diagapplet{
		
		class PainterInterface : public java::lang::Object {
			public:
		            PainterInterface(jobject _jthis, bool copy);
		            PainterInterface(const PainterInterface &);
		        
			PainterInterface();
			virtual ~PainterInterface();
		}; // end class PainterInterface
	} // end namespace diagapplet

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenCommonInterface2 : public java::lang::Object {
				public:
			            CodeGenCommonInterface2(jobject _jthis, bool copy);
			            CodeGenCommonInterface2(const CodeGenCommonInterface2 &);
			        
				CodeGenCommonInterface2();
				virtual ~CodeGenCommonInterface2();
			}; // end class CodeGenCommonInterface2
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class STI_TokenizerInterface : public java::lang::Object {
				public:
			            STI_TokenizerInterface(jobject _jthis, bool copy);
			            STI_TokenizerInterface(const STI_TokenizerInterface &);
			        
				STI_TokenizerInterface();
				virtual ~STI_TokenizerInterface();
			}; // end class STI_TokenizerInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		
		class diag_update_interface : public java::lang::Object {
			public:
		            diag_update_interface(jobject _jthis, bool copy);
		            diag_update_interface(const diag_update_interface &);
		        
			diag_update_interface();
			virtual ~diag_update_interface();
		}; // end class diag_update_interface
	} // end namespace diagapplet

	namespace diagapplet{
		namespace utils{
			
			class FastListPanel : public java::awt::Panel {
				public:
			            FastListPanel(jobject _jthis, bool copy);
			            FastListPanel(const FastListPanel &);
			        
				FastListPanel(jint int_0,jint int_1,jboolean boolean_2,java::awt::Container container_3);
				virtual ~FastListPanel();
				jstring getItem(jint int_0);
				jint getItemCount();
				void select(jint int_0);
				void removeActionListener(java::awt::event::ActionListener actionListener_0);
				void addItemListener(java::awt::event::ItemListener itemListener_0);
				void removeItemListener(java::awt::event::ItemListener itemListener_0);
				java::awt::Dimension getPreferredSize();
				java::awt::Dimension getMinimumSize();
				void keyTyped(java::awt::event::KeyEvent keyEvent_0);
				void keyPressed(java::awt::event::KeyEvent keyEvent_0);
				void keyReleased(java::awt::event::KeyEvent keyEvent_0);
				void mousePressed(java::awt::event::MouseEvent mouseEvent_0);
				void mouseReleased(java::awt::event::MouseEvent mouseEvent_0);
				void mouseClicked(java::awt::event::MouseEvent mouseEvent_0);
				void mouseExited(java::awt::event::MouseEvent mouseEvent_0);
				void mouseEntered(java::awt::event::MouseEvent mouseEvent_0);
				jint countItems();
				void paint(java::awt::Graphics graphics_0);
				void addActionListener(java::awt::event::ActionListener actionListener_0);
				jboolean isSelected(jint int_0);
				static void DebugPrint(jstring string_0);
				static void ErrorPrint(jstring string_0);
				jintArray getSelectedIndexes();
				void makeVisible(jint int_0);
				jint getSelectedIndex();
				void replaceItem(jstring string_0,jint int_1);
				void replaceItem(jstring string_0,jint int_1,jint int_2);
				void deselect(jint int_0);
				jstring getSelectedItem();
				jint getSelectedVarNumber();
				jobjectArray getSelectedItems();
				jint getVarNumber(jint int_0);
				static void DebugPrint2(jstring string_0);
				void handleKeyEvent(java::awt::event::KeyEvent keyEvent_0);
				void AddOpenStructure(jstring string_0);
				jboolean IsOpenStructure(jstring string_0);
				void RemoveOpenStructure(jstring string_0);
				void add(jstring string_0,jint int_1,jint int_2);
				void add(jstring string_0);
				void add(jstring string_0,jint int_1);
				jstring toString();
				void clear();
				void removeAll();
			}; // end class FastListPanel
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class CountButton : public java::awt::Button {
				public:
			            CountButton(jobject _jthis, bool copy);
			            CountButton(const CountButton &);
			        
				CountButton(jstring string_0);
				virtual ~CountButton();
				void actionPerformed(java::awt::event::ActionEvent actionEvent_0);
				jint get_count();
				void set_count(jint int_0);
			}; // end class CountButton
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class URLLoadInfoPanelInterface : public java::lang::Object {
				public:
			            URLLoadInfoPanelInterface(jobject _jthis, bool copy);
			            URLLoadInfoPanelInterface(const URLLoadInfoPanelInterface &);
			        
				URLLoadInfoPanelInterface();
				virtual ~URLLoadInfoPanelInterface();
			}; // end class URLLoadInfoPanelInterface
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class JListFastListPanel : public java::lang::Object {
				public:
			            JListFastListPanel(jobject _jthis, bool copy);
			            JListFastListPanel(const JListFastListPanel &);
			        
				virtual ~JListFastListPanel();
				jstring getItem(jint int_0);
				jint getItemCount();
				void select(jint int_0);
				jint countItems();
				jboolean isSelected(jint int_0);
				jintArray getSelectedIndexes();
				jint getSelectedIndex();
				void replaceItem(jstring string_0,jint int_1,jint int_2);
				void replaceItem(jstring string_0,jint int_1);
				void deselect(jint int_0);
				jstring getSelectedItem();
				jint getSelectedVarNumber();
				jobjectArray getSelectedItems();
				jint getVarNumber(jint int_0);
				void add(jstring string_0,jint int_1);
				void add(jstring string_0);
				void add(jstring string_0,jint int_1,jint int_2);
				void clear();
				void removeAll();
			}; // end class JListFastListPanel
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class URLLoadInfoPanel : public java::awt::Panel {
				public:
			            URLLoadInfoPanel(jobject _jthis, bool copy);
			            URLLoadInfoPanel(const URLLoadInfoPanel &);
			        
				URLLoadInfoPanel(jint int_0,jint int_1);
				URLLoadInfoPanel();
				virtual ~URLLoadInfoPanel();
				java::awt::Dimension getPreferredSize();
				java::awt::Dimension getMinimumSize();
				void paint(java::awt::Graphics graphics_0);
				jint get_bytes_read();
				void set_URLname(jstring string_0);
				void inc_bytes_read(jint int_0);
				void set_content_length(jint int_0);
				jint get_content_length();
				void set_bytes_read(jint int_0);
				jstring get_URLname();
				void updateDisplay();
				void force_repaint(jint int_0);
				jstring toString();
			}; // end class URLLoadInfoPanel
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		namespace utils{
			
			class fullScreenJPanelClass : public javax::swing::JPanel {
				public:
			            fullScreenJPanelClass(jobject _jthis, bool copy);
			            fullScreenJPanelClass(const fullScreenJPanelClass &);
			        
				fullScreenJPanelClass();
				virtual ~fullScreenJPanelClass();
				void paintComponent(java::awt::Graphics graphics_0);
				void SetImage(java::awt::image::BufferedImage bufferedImage_0);
			}; // end class fullScreenJPanelClass
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		
		class modulePreserve : public java::lang::Object {
			public:
		            modulePreserve(jobject _jthis, bool copy);
		            modulePreserve(const modulePreserve &);
		        
			modulePreserve();
			virtual ~modulePreserve();
			void setPreviousCommands(java::util::Hashtable hashtable_0);
			void setLastSelectedCommandIndex(jint int_0);
			java::util::Hashtable getPreviousCommands();
			jint getLastSelectedCommandIndex();
			jstring getName();
			void setName(jstring string_0);
		}; // end class modulePreserve
	} // end namespace diagapplet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Atanh : public java::lang::Object {
								public:
							            Atanh(jobject _jthis, bool copy);
							            Atanh(const Atanh &);
							        
								Atanh();
								virtual ~Atanh();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Atanh
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Log : public java::lang::Object {
								public:
							            Log(jobject _jthis, bool copy);
							            Log(const Log &);
							        
								Log();
								virtual ~Log();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Log
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Tanh : public java::lang::Object {
								public:
							            Tanh(jobject _jthis, bool copy);
							            Tanh(const Tanh &);
							        
								Tanh();
								virtual ~Tanh();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Tanh
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Pow : public java::lang::Object {
								public:
							            Pow(jobject _jthis, bool copy);
							            Pow(const Pow &);
							        
								Pow();
								virtual ~Pow();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class Pow
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Asin : public java::lang::Object {
								public:
							            Asin(jobject _jthis, bool copy);
							            Asin(const Asin &);
							        
								Asin();
								virtual ~Asin();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Asin
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Exp : public java::lang::Object {
								public:
							            Exp(jobject _jthis, bool copy);
							            Exp(const Exp &);
							        
								Exp();
								virtual ~Exp();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Exp
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Signum : public java::lang::Object {
								public:
							            Signum(jobject _jthis, bool copy);
							            Signum(const Signum &);
							        
								Signum();
								virtual ~Signum();
								jdouble value(jdouble double_0);
							}; // end class Signum
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class LaguerreSolver : public AbstractPolynomialSolver {
								public:
							            LaguerreSolver(jobject _jthis, bool copy);
							            LaguerreSolver(const LaguerreSolver &);
							        
								LaguerreSolver();
								LaguerreSolver(jdouble double_0);
								LaguerreSolver(jdouble double_0,jdouble double_1);
								LaguerreSolver(jdouble double_0,jdouble double_1,jdouble double_2);
								virtual ~LaguerreSolver();
								jdouble laguerre(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
								jdouble doSolve();
								jobjectArray solveAllComplex(jdoubleArray doubleArray_0,jdouble double_1);
								jobjectArray solveAllComplex(jdoubleArray doubleArray_0,jdouble double_1,jint int_2);
								complex::Complex solveComplex(jdoubleArray doubleArray_0,jdouble double_1);
								complex::Complex solveComplex(jdoubleArray doubleArray_0,jdouble double_1,jint int_2);
							}; // end class LaguerreSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class FieldHermiteInterpolator : public java::lang::Object {
								public:
							            FieldHermiteInterpolator(jobject _jthis, bool copy);
							            FieldHermiteInterpolator(const FieldHermiteInterpolator &);
							        
								FieldHermiteInterpolator();
								virtual ~FieldHermiteInterpolator();
								jobjectArray value(FieldElement fieldElement_0);
							}; // end class FieldHermiteInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class TricubicInterpolator : public java::lang::Object {
								public:
							            TricubicInterpolator(jobject _jthis, bool copy);
							            TricubicInterpolator(const TricubicInterpolator &);
							        
								TricubicInterpolator();
								virtual ~TricubicInterpolator();
							}; // end class TricubicInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class BicubicFunction : public java::lang::Object {
								public:
							            BicubicFunction(jobject _jthis, bool copy);
							            BicubicFunction(const BicubicFunction &);
							        
								BicubicFunction(jdoubleArray doubleArray_0);
								virtual ~BicubicFunction();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class BicubicFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class BicubicInterpolatingFunction : public java::lang::Object {
								public:
							            BicubicInterpolatingFunction(jobject _jthis, bool copy);
							            BicubicInterpolatingFunction(const BicubicInterpolatingFunction &);
							        
								virtual ~BicubicInterpolatingFunction();
								jboolean isValidPoint(jdouble double_0,jdouble double_1);
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class BicubicInterpolatingFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class BicubicInterpolator : public java::lang::Object {
								public:
							            BicubicInterpolator(jobject _jthis, bool copy);
							            BicubicInterpolator(const BicubicInterpolator &);
							        
								BicubicInterpolator();
								virtual ~BicubicInterpolator();
							}; // end class BicubicInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class UnivariatePeriodicInterpolator : public java::lang::Object {
								public:
							            UnivariatePeriodicInterpolator(jobject _jthis, bool copy);
							            UnivariatePeriodicInterpolator(const UnivariatePeriodicInterpolator &);
							        
								UnivariatePeriodicInterpolator(UnivariateInterpolator univariateInterpolator_0,jdouble double_1,jint int_2);
								UnivariatePeriodicInterpolator(UnivariateInterpolator univariateInterpolator_0,jdouble double_1);
								virtual ~UnivariatePeriodicInterpolator();
								UnivariateFunction interpolate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class UnivariatePeriodicInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class MicrosphereInterpolator : public java::lang::Object {
								public:
							            MicrosphereInterpolator(jobject _jthis, bool copy);
							            MicrosphereInterpolator(const MicrosphereInterpolator &);
							        
								MicrosphereInterpolator(jint int_0,jint int_1);
								MicrosphereInterpolator();
								virtual ~MicrosphereInterpolator();
							}; // end class MicrosphereInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class BicubicSplineInterpolatingFunction : public java::lang::Object {
								public:
							            BicubicSplineInterpolatingFunction(jobject _jthis, bool copy);
							            BicubicSplineInterpolatingFunction(const BicubicSplineInterpolatingFunction &);
							        
								virtual ~BicubicSplineInterpolatingFunction();
								jdouble partialDerivativeX(jdouble double_0,jdouble double_1);
								jdouble partialDerivativeY(jdouble double_0,jdouble double_1);
								jdouble partialDerivativeXX(jdouble double_0,jdouble double_1);
								jdouble partialDerivativeYY(jdouble double_0,jdouble double_1);
								jdouble partialDerivativeXY(jdouble double_0,jdouble double_1);
								jboolean isValidPoint(jdouble double_0,jdouble double_1);
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class BicubicSplineInterpolatingFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class TricubicSplineFunction : public java::lang::Object {
								public:
							            TricubicSplineFunction(jobject _jthis, bool copy);
							            TricubicSplineFunction(const TricubicSplineFunction &);
							        
								TricubicSplineFunction(jdoubleArray doubleArray_0);
								virtual ~TricubicSplineFunction();
								jdouble value(jdouble double_0,jdouble double_1,jdouble double_2);
							}; // end class TricubicSplineFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class TrivariateGridInterpolator : public java::lang::Object {
								public:
							            TrivariateGridInterpolator(jobject _jthis, bool copy);
							            TrivariateGridInterpolator(const TrivariateGridInterpolator &);
							        
								TrivariateGridInterpolator();
								virtual ~TrivariateGridInterpolator();
							}; // end class TrivariateGridInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class TricubicSplineInterpolator : public java::lang::Object {
								public:
							            TricubicSplineInterpolator(jobject _jthis, bool copy);
							            TricubicSplineInterpolator(const TricubicSplineInterpolator &);
							        
								TricubicSplineInterpolator();
								virtual ~TricubicSplineInterpolator();
							}; // end class TricubicSplineInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class DividedDifferenceInterpolator : public java::lang::Object {
								public:
							            DividedDifferenceInterpolator(jobject _jthis, bool copy);
							            DividedDifferenceInterpolator(const DividedDifferenceInterpolator &);
							        
								DividedDifferenceInterpolator();
								virtual ~DividedDifferenceInterpolator();
								polynomials::PolynomialFunctionNewtonForm interpolate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class DividedDifferenceInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class HermiteInterpolator : public java::lang::Object {
								public:
							            HermiteInterpolator(jobject _jthis, bool copy);
							            HermiteInterpolator(const HermiteInterpolator &);
							        
								HermiteInterpolator();
								virtual ~HermiteInterpolator();
								jobjectArray getPolynomials();
								jobjectArray value(differentiation::DerivativeStructure derivativeStructure_0);
								jdoubleArray value(jdouble double_0);
							}; // end class HermiteInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class UnivariateInterpolator : public java::lang::Object {
								public:
							            UnivariateInterpolator(jobject _jthis, bool copy);
							            UnivariateInterpolator(const UnivariateInterpolator &);
							        
								UnivariateInterpolator();
								virtual ~UnivariateInterpolator();
							}; // end class UnivariateInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class BivariateGridInterpolator : public java::lang::Object {
								public:
							            BivariateGridInterpolator(jobject _jthis, bool copy);
							            BivariateGridInterpolator(const BivariateGridInterpolator &);
							        
								BivariateGridInterpolator();
								virtual ~BivariateGridInterpolator();
							}; // end class BivariateGridInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class TrivariateFunction : public java::lang::Object {
							public:
						            TrivariateFunction(jobject _jthis, bool copy);
						            TrivariateFunction(const TrivariateFunction &);
						        
							TrivariateFunction();
							virtual ~TrivariateFunction();
						}; // end class TrivariateFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class FunctionUtils : public java::lang::Object {
							public:
						            FunctionUtils(jobject _jthis, bool copy);
						            FunctionUtils(const FunctionUtils &);
						        
							virtual ~FunctionUtils();
							static differentiation::UnivariateDifferentiableFunction compose(jobjectArray univariateDifferentiableFunctionArray_0);
							static UnivariateFunction compose(jobjectArray univariateFunctionArray_0);
							static DifferentiableUnivariateFunction compose(jobjectArray differentiableUnivariateFunctionArray_0);
							static DifferentiableUnivariateFunction multiply(jobjectArray differentiableUnivariateFunctionArray_0);
							static differentiation::UnivariateDifferentiableFunction multiply(jobjectArray univariateDifferentiableFunctionArray_0);
							static UnivariateFunction multiply(jobjectArray univariateFunctionArray_0);
							static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(differentiation::UnivariateDifferentiableFunction univariateDifferentiableFunction_0);
							static differentiation::MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(DifferentiableMultivariateVectorFunction differentiableMultivariateVectorFunction_0);
							static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(differentiation::MultivariateDifferentiableVectorFunction multivariateDifferentiableVectorFunction_0);
							static UnivariateFunction fix2ndArgument(BivariateFunction bivariateFunction_0,jdouble double_1);
							static jdoubleArray sample(UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2,jint int_3);
							static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(differentiation::MultivariateDifferentiableFunction multivariateDifferentiableFunction_0);
							static differentiation::MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(DifferentiableMultivariateFunction differentiableMultivariateFunction_0);
							static differentiation::UnivariateDifferentiableFunction toUnivariateDifferential(DifferentiableUnivariateFunction differentiableUnivariateFunction_0);
							static UnivariateFunction fix1stArgument(BivariateFunction bivariateFunction_0,jdouble double_1);
							static MultivariateFunction collector(BivariateFunction bivariateFunction_0,jdouble double_1);
							static MultivariateFunction collector(BivariateFunction bivariateFunction_0,UnivariateFunction univariateFunction_1,jdouble double_2);
							static DifferentiableUnivariateFunction add(jobjectArray differentiableUnivariateFunctionArray_0);
							static differentiation::UnivariateDifferentiableFunction add(jobjectArray univariateDifferentiableFunctionArray_0);
							static UnivariateFunction add(jobjectArray univariateFunctionArray_0);
							static UnivariateFunction combine(BivariateFunction bivariateFunction_0,UnivariateFunction univariateFunction_1,UnivariateFunction univariateFunction_2);
						}; // end class FunctionUtils
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class DifferentiableMultivariateFunction : public java::lang::Object {
							public:
						            DifferentiableMultivariateFunction(jobject _jthis, bool copy);
						            DifferentiableMultivariateFunction(const DifferentiableMultivariateFunction &);
						        
							DifferentiableMultivariateFunction();
							virtual ~DifferentiableMultivariateFunction();
						}; // end class DifferentiableMultivariateFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class LutherStepInterpolator : public RungeKuttaStepInterpolator {
								public:
							            LutherStepInterpolator(jobject _jthis, bool copy);
							            LutherStepInterpolator(const LutherStepInterpolator &);
							        
								LutherStepInterpolator();
								LutherStepInterpolator(LutherStepInterpolator lutherStepInterpolator_0);
								virtual ~LutherStepInterpolator();
							}; // end class LutherStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class ThreeEighthesIntegrator : public RungeKuttaIntegrator {
								public:
							            ThreeEighthesIntegrator(jobject _jthis, bool copy);
							            ThreeEighthesIntegrator(const ThreeEighthesIntegrator &);
							        
								ThreeEighthesIntegrator(jdouble double_0);
								virtual ~ThreeEighthesIntegrator();
							}; // end class ThreeEighthesIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class GillStepInterpolator : public RungeKuttaStepInterpolator {
								public:
							            GillStepInterpolator(jobject _jthis, bool copy);
							            GillStepInterpolator(const GillStepInterpolator &);
							        
								GillStepInterpolator();
								GillStepInterpolator(GillStepInterpolator gillStepInterpolator_0);
								virtual ~GillStepInterpolator();
							}; // end class GillStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class LutherIntegrator : public RungeKuttaIntegrator {
								public:
							            LutherIntegrator(jobject _jthis, bool copy);
							            LutherIntegrator(const LutherIntegrator &);
							        
								LutherIntegrator(jdouble double_0);
								virtual ~LutherIntegrator();
							}; // end class LutherIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class DormandPrince853StepInterpolator : public RungeKuttaStepInterpolator {
								public:
							            DormandPrince853StepInterpolator(jobject _jthis, bool copy);
							            DormandPrince853StepInterpolator(const DormandPrince853StepInterpolator &);
							        
								DormandPrince853StepInterpolator(DormandPrince853StepInterpolator dormandPrince853StepInterpolator_0);
								DormandPrince853StepInterpolator();
								virtual ~DormandPrince853StepInterpolator();
								void readExternal(java::io::ObjectInput objectInput_0);
								void writeExternal(java::io::ObjectOutput objectOutput_0);
								void storeTime(jdouble double_0);
							}; // end class DormandPrince853StepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class GillIntegrator : public RungeKuttaIntegrator {
								public:
							            GillIntegrator(jobject _jthis, bool copy);
							            GillIntegrator(const GillIntegrator &);
							        
								GillIntegrator(jdouble double_0);
								virtual ~GillIntegrator();
							}; // end class GillIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class MidpointStepInterpolator : public RungeKuttaStepInterpolator {
								public:
							            MidpointStepInterpolator(jobject _jthis, bool copy);
							            MidpointStepInterpolator(const MidpointStepInterpolator &);
							        
								MidpointStepInterpolator(MidpointStepInterpolator midpointStepInterpolator_0);
								MidpointStepInterpolator();
								virtual ~MidpointStepInterpolator();
							}; // end class MidpointStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class GraggBulirschStoerIntegrator : public AdaptiveStepsizeIntegrator {
								public:
							            GraggBulirschStoerIntegrator(jobject _jthis, bool copy);
							            GraggBulirschStoerIntegrator(const GraggBulirschStoerIntegrator &);
							        
								GraggBulirschStoerIntegrator(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
								GraggBulirschStoerIntegrator(jdouble double_0,jdouble double_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3);
								virtual ~GraggBulirschStoerIntegrator();
								void addStepHandler(sampling::StepHandler stepHandler_0);
								void addEventHandler(events::EventHandler eventHandler_0,jdouble double_1,jdouble double_2,jint int_3,analysis::solvers::UnivariateSolver univariateSolver_4);
								void integrate(ExpandableStatefulODE expandableStatefulODE_0,jdouble double_1);
								void setStabilityCheck(jboolean boolean_0,jint int_1,jint int_2,jdouble double_3);
								void setControlFactors(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
								void setOrderControl(jint int_0,jdouble double_1,jdouble double_2);
								void setInterpolationControl(jboolean boolean_0,jint int_1);
							}; // end class GraggBulirschStoerIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class ThreeEighthesStepInterpolator : public RungeKuttaStepInterpolator {
								public:
							            ThreeEighthesStepInterpolator(jobject _jthis, bool copy);
							            ThreeEighthesStepInterpolator(const ThreeEighthesStepInterpolator &);
							        
								ThreeEighthesStepInterpolator(ThreeEighthesStepInterpolator threeEighthesStepInterpolator_0);
								ThreeEighthesStepInterpolator();
								virtual ~ThreeEighthesStepInterpolator();
							}; // end class ThreeEighthesStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class ODEIntegrator : public java::lang::Object {
							public:
						            ODEIntegrator(jobject _jthis, bool copy);
						            ODEIntegrator(const ODEIntegrator &);
						        
							ODEIntegrator();
							virtual ~ODEIntegrator();
						}; // end class ODEIntegrator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class FirstOrderDifferentialEquations : public java::lang::Object {
							public:
						            FirstOrderDifferentialEquations(jobject _jthis, bool copy);
						            FirstOrderDifferentialEquations(const FirstOrderDifferentialEquations &);
						        
							FirstOrderDifferentialEquations();
							virtual ~FirstOrderDifferentialEquations();
						}; // end class FirstOrderDifferentialEquations
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class SecondaryEquations : public java::lang::Object {
							public:
						            SecondaryEquations(jobject _jthis, bool copy);
						            SecondaryEquations(const SecondaryEquations &);
						        
							SecondaryEquations();
							virtual ~SecondaryEquations();
						}; // end class SecondaryEquations
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class Parameterizable : public java::lang::Object {
							public:
						            Parameterizable(jobject _jthis, bool copy);
						            Parameterizable(const Parameterizable &);
						        
							Parameterizable();
							virtual ~Parameterizable();
						}; // end class Parameterizable
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class ParameterizedODE : public java::lang::Object {
							public:
						            ParameterizedODE(jobject _jthis, bool copy);
						            ParameterizedODE(const ParameterizedODE &);
						        
							ParameterizedODE();
							virtual ~ParameterizedODE();
						}; // end class ParameterizedODE
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class MainStateJacobianProvider : public java::lang::Object {
							public:
						            MainStateJacobianProvider(jobject _jthis, bool copy);
						            MainStateJacobianProvider(const MainStateJacobianProvider &);
						        
							MainStateJacobianProvider();
							virtual ~MainStateJacobianProvider();
						}; // end class MainStateJacobianProvider
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class SecondOrderDifferentialEquations : public java::lang::Object {
							public:
						            SecondOrderDifferentialEquations(jobject _jthis, bool copy);
						            SecondOrderDifferentialEquations(const SecondOrderDifferentialEquations &);
						        
							SecondOrderDifferentialEquations();
							virtual ~SecondOrderDifferentialEquations();
						}; // end class SecondOrderDifferentialEquations
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class ParameterJacobianProvider : public java::lang::Object {
							public:
						            ParameterJacobianProvider(jobject _jthis, bool copy);
						            ParameterJacobianProvider(const ParameterJacobianProvider &);
						        
							ParameterJacobianProvider();
							virtual ~ParameterJacobianProvider();
						}; // end class ParameterJacobianProvider
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class ParameterizedWrapper : public java::lang::Object {
							public:
						            ParameterizedWrapper(jobject _jthis, bool copy);
						            ParameterizedWrapper(const ParameterizedWrapper &);
						        
							ParameterizedWrapper(FirstOrderDifferentialEquations firstOrderDifferentialEquations_0);
							virtual ~ParameterizedWrapper();
							jdouble getParameter(jstring string_0);
							jint getDimension();
							void computeDerivatives(jdouble double_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
							void setParameter(jstring string_0,jdouble double_1);
							java::util::Collection getParametersNames();
							jboolean isSupported(jstring string_0);
						}; // end class ParameterizedWrapper
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							
							class StepHandler : public java::lang::Object {
								public:
							            StepHandler(jobject _jthis, bool copy);
							            StepHandler(const StepHandler &);
							        
								StepHandler();
								virtual ~StepHandler();
							}; // end class StepHandler
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace general{
							
							class Preconditioner : public java::lang::Object {
								public:
							            Preconditioner(jobject _jthis, bool copy);
							            Preconditioner(const Preconditioner &);
							        
								Preconditioner();
								virtual ~Preconditioner();
							}; // end class Preconditioner
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace general

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								
								class LearningFactorFunction : public java::lang::Object {
									public:
								            LearningFactorFunction(jobject _jthis, bool copy);
								            LearningFactorFunction(const LearningFactorFunction &);
								        
									LearningFactorFunction();
									virtual ~LearningFactorFunction();
								}; // end class LearningFactorFunction
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								
								class KohonenUpdateAction : public java::lang::Object {
									public:
								            KohonenUpdateAction(jobject _jthis, bool copy);
								            KohonenUpdateAction(const KohonenUpdateAction &);
								        
									KohonenUpdateAction(distance::DistanceMeasure distanceMeasure_0,LearningFactorFunction learningFactorFunction_1,NeighbourhoodSizeFunction neighbourhoodSizeFunction_2);
									virtual ~KohonenUpdateAction();
									jlong getNumberOfCalls();
									void update(Network network_0,jdoubleArray doubleArray_1);
								}; // end class KohonenUpdateAction
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							
							class SimpleRegression : public java::lang::Object {
								public:
							            SimpleRegression(jobject _jthis, bool copy);
							            SimpleRegression(const SimpleRegression &);
							        
								SimpleRegression(jboolean boolean_0);
								SimpleRegression();
								virtual ~SimpleRegression();
								jdouble getTotalSumSquares();
								jdouble getRegressionSumSquares();
								jboolean hasIntercept();
								void addObservation(jdoubleArray doubleArray_0,jdouble double_1);
								RegressionResults regress();
								RegressionResults regress(jintArray intArray_0);
								jdouble getMeanSquareError();
								jlong getN();
								jdouble getSlopeStdErr();
								jdouble getSlopeConfidenceInterval(jdouble double_0);
								jdouble getSlopeConfidenceInterval();
								jdouble getSignificance();
								jdouble getInterceptStdErr();
								jdouble getIntercept();
								jdouble getSlope();
								jdouble getSumOfCrossProducts();
								jdouble getRSquare();
								void addData(jdouble double_0,jdouble double_1);
								jdouble getR();
								void removeData(jdouble double_0,jdouble double_1);
								jdouble getSumSquaredErrors();
								jdouble getXSumSquares();
								jdouble predict(jdouble double_0);
								void append(SimpleRegression simpleRegression_0);
								void clear();
							}; // end class SimpleRegression
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace regression{
							
							class GLSMultipleLinearRegression : public AbstractMultipleLinearRegression {
								public:
							            GLSMultipleLinearRegression(jobject _jthis, bool copy);
							            GLSMultipleLinearRegression(const GLSMultipleLinearRegression &);
							        
								GLSMultipleLinearRegression();
								virtual ~GLSMultipleLinearRegression();
							}; // end class GLSMultipleLinearRegression
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace regression

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class KolmogorovSmirnovTest : public java::lang::Object {
								public:
							            KolmogorovSmirnovTest(jobject _jthis, bool copy);
							            KolmogorovSmirnovTest(const KolmogorovSmirnovTest &);
							        
								KolmogorovSmirnovTest(random::RandomGenerator randomGenerator_0);
								KolmogorovSmirnovTest();
								virtual ~KolmogorovSmirnovTest();
								jdouble pelzGood(jdouble double_0,jint int_1);
								jdouble kolmogorovSmirnovStatistic(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jdouble kolmogorovSmirnovStatistic(distribution::RealDistribution realDistribution_0,jdoubleArray doubleArray_1);
								jdouble kolmogorovSmirnovTest(distribution::RealDistribution realDistribution_0,jdoubleArray doubleArray_1,jboolean boolean_2);
								jboolean kolmogorovSmirnovTest(distribution::RealDistribution realDistribution_0,jdoubleArray doubleArray_1,jdouble double_2);
								jdouble kolmogorovSmirnovTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jdouble kolmogorovSmirnovTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jboolean boolean_2);
								jdouble kolmogorovSmirnovTest(distribution::RealDistribution realDistribution_0,jdoubleArray doubleArray_1);
								jdouble cdf(jdouble double_0,jint int_1,jboolean boolean_2);
								jdouble cdf(jdouble double_0,jint int_1);
								jdouble cdfExact(jdouble double_0,jint int_1);
								jdouble ksSum(jdouble double_0,jdouble double_1,jint int_2);
								jdouble exactP(jdouble double_0,jint int_1,jint int_2,jboolean boolean_3);
								jdouble approximateP(jdouble double_0,jint int_1,jint int_2);
								jdouble monteCarloP(jdouble double_0,jint int_1,jint int_2,jboolean boolean_3,jint int_4);
							}; // end class KolmogorovSmirnovTest
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class TestUtils : public java::lang::Object {
								public:
							            TestUtils(jobject _jthis, bool copy);
							            TestUtils(const TestUtils &);
							        
								virtual ~TestUtils();
								static jdouble pairedT(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								static jdouble pairedTTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								static jboolean pairedTTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
								static jdouble homoscedasticT(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1);
								static jdouble homoscedasticT(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								static jboolean tTest(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1,jdouble double_2);
								static jboolean tTest(jdouble double_0,jdoubleArray doubleArray_1,jdouble double_2);
								static jboolean tTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
								static jdouble tTest(jdouble double_0,descriptive::StatisticalSummary statisticalSummary_1);
								static jboolean tTest(jdouble double_0,descriptive::StatisticalSummary statisticalSummary_1,jdouble double_2);
								static jdouble tTest(jdouble double_0,jdoubleArray doubleArray_1);
								static jdouble tTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								static jdouble tTest(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1);
								static jdouble homoscedasticTTest(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1);
								static jboolean homoscedasticTTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
								static jdouble homoscedasticTTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								static jdouble chiSquare(jdoubleArray doubleArray_0,jlongArray longArray_1);
								static jboolean chiSquareTest(jdoubleArray doubleArray_0,jlongArray longArray_1,jdouble double_2);
								static jdouble chiSquareTest(jdoubleArray doubleArray_0,jlongArray longArray_1);
								static jdouble gTestIntrinsic(jdoubleArray doubleArray_0,jlongArray longArray_1);
								static jdouble chiSquareDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1);
								static jboolean chiSquareTestDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1,jdouble double_2);
								static jdouble chiSquareTestDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1);
								static jboolean gTest(jdoubleArray doubleArray_0,jlongArray longArray_1,jdouble double_2);
								static jdouble gTest(jdoubleArray doubleArray_0,jlongArray longArray_1);
								static jdouble gDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1);
								static jdouble rootLogLikelihoodRatio(jlong long_0,jlong long_1,jlong long_2,jlong long_3);
								static jboolean gTestDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1,jdouble double_2);
								static jdouble gTestDataSetsComparison(jlongArray longArray_0,jlongArray longArray_1);
								static jdouble t(descriptive::StatisticalSummary statisticalSummary_0,descriptive::StatisticalSummary statisticalSummary_1);
								static jdouble t(jdouble double_0,descriptive::StatisticalSummary statisticalSummary_1);
								static jdouble t(jdouble double_0,jdoubleArray doubleArray_1);
								static jdouble t(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								static jdouble g(jdoubleArray doubleArray_0,jlongArray longArray_1);
								static jdouble kolmogorovSmirnovStatistic(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								static jdouble kolmogorovSmirnovStatistic(distribution::RealDistribution realDistribution_0,jdoubleArray doubleArray_1);
								static jdouble kolmogorovSmirnovTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								static jdouble kolmogorovSmirnovTest(distribution::RealDistribution realDistribution_0,jdoubleArray doubleArray_1,jboolean boolean_2);
								static jdouble kolmogorovSmirnovTest(distribution::RealDistribution realDistribution_0,jdoubleArray doubleArray_1);
								static jdouble kolmogorovSmirnovTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jboolean boolean_2);
								static jboolean kolmogorovSmirnovTest(distribution::RealDistribution realDistribution_0,jdoubleArray doubleArray_1,jdouble double_2);
								static jdouble exactP(jdouble double_0,jint int_1,jint int_2,jboolean boolean_3);
								static jdouble approximateP(jdouble double_0,jint int_1,jint int_2);
								static jdouble monteCarloP(jdouble double_0,jint int_1,jint int_2,jboolean boolean_3,jint int_4);
								static jdouble oneWayAnovaPValue(java::util::Collection collection_0);
								static jboolean oneWayAnovaTest(java::util::Collection collection_0,jdouble double_1);
								static jdouble oneWayAnovaFValue(java::util::Collection collection_0);
							}; // end class TestUtils
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class OneWayAnova : public java::lang::Object {
								public:
							            OneWayAnova(jobject _jthis, bool copy);
							            OneWayAnova(const OneWayAnova &);
							        
								OneWayAnova();
								virtual ~OneWayAnova();
								jdouble anovaFValue(java::util::Collection collection_0);
								jdouble anovaPValue(java::util::Collection collection_0);
								jdouble anovaPValue(java::util::Collection collection_0,jboolean boolean_1);
								jboolean anovaTest(java::util::Collection collection_0,jdouble double_1);
							}; // end class OneWayAnova
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class WilcoxonSignedRankTest : public java::lang::Object {
								public:
							            WilcoxonSignedRankTest(jobject _jthis, bool copy);
							            WilcoxonSignedRankTest(const WilcoxonSignedRankTest &);
							        
								WilcoxonSignedRankTest(ranking::NaNStrategy naNStrategy_0,ranking::TiesStrategy tiesStrategy_1);
								WilcoxonSignedRankTest();
								virtual ~WilcoxonSignedRankTest();
								jdouble wilcoxonSignedRank(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jdouble wilcoxonSignedRankTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jboolean boolean_2);
							}; // end class WilcoxonSignedRankTest
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace inference{
							
							class MannWhitneyUTest : public java::lang::Object {
								public:
							            MannWhitneyUTest(jobject _jthis, bool copy);
							            MannWhitneyUTest(const MannWhitneyUTest &);
							        
								MannWhitneyUTest();
								MannWhitneyUTest(ranking::NaNStrategy naNStrategy_0,ranking::TiesStrategy tiesStrategy_1);
								virtual ~MannWhitneyUTest();
								jdouble mannWhitneyUTest(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								jdouble mannWhitneyU(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							}; // end class MannWhitneyUTest
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace inference

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace summary{
								
								class Sum : public AbstractStorelessUnivariateStatistic {
									public:
								            Sum(jobject _jthis, bool copy);
								            Sum(const Sum &);
								        
									Sum();
									Sum(Sum sum_0);
									virtual ~Sum();
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jint int_2,jint int_3);
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									static void copy(Sum sum_0,Sum sum_1);
									Sum copy();
									jdouble getResult();
								}; // end class Sum
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace summary

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace summary{
								
								class Product : public AbstractStorelessUnivariateStatistic {
									public:
								            Product(jobject _jthis, bool copy);
								            Product(const Product &);
								        
									Product();
									Product(Product product_0);
									virtual ~Product();
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jint int_2,jint int_3);
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									static void copy(Product product_0,Product product_1);
									Product copy();
									jdouble getResult();
								}; // end class Product
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace summary

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								
								class Max : public AbstractStorelessUnivariateStatistic {
									public:
								            Max(jobject _jthis, bool copy);
								            Max(const Max &);
								        
									Max();
									Max(Max max_0);
									virtual ~Max();
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									static void copy(Max max_0,Max max_1);
									Max copy();
									jdouble getResult();
								}; // end class Max
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class Kurtosis : public AbstractStorelessUnivariateStatistic {
									public:
								            Kurtosis(jobject _jthis, bool copy);
								            Kurtosis(const Kurtosis &);
								        
									Kurtosis();
									Kurtosis(Kurtosis kurtosis_0);
									Kurtosis(FourthMoment fourthMoment_0);
									virtual ~Kurtosis();
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									Kurtosis copy();
									static void copy(Kurtosis kurtosis_0,Kurtosis kurtosis_1);
									jdouble getResult();
								}; // end class Kurtosis
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class Skewness : public AbstractStorelessUnivariateStatistic {
									public:
								            Skewness(jobject _jthis, bool copy);
								            Skewness(const Skewness &);
								        
									Skewness();
									Skewness(ThirdMoment thirdMoment_0);
									Skewness(Skewness skewness_0);
									virtual ~Skewness();
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									Skewness copy();
									static void copy(Skewness skewness_0,Skewness skewness_1);
									jdouble getResult();
								}; // end class Skewness
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class StatisticalSummaryValues : public java::lang::Object {
								public:
							            StatisticalSummaryValues(jobject _jthis, bool copy);
							            StatisticalSummaryValues(const StatisticalSummaryValues &);
							        
								StatisticalSummaryValues(jdouble double_0,jdouble double_1,jlong long_2,jdouble double_3,jdouble double_4,jdouble double_5);
								virtual ~StatisticalSummaryValues();
								jdouble getMax();
								jdouble getMin();
								jlong getN();
								jdouble getMean();
								jdouble getVariance();
								jdouble getStandardDeviation();
								jdouble getSum();
								jstring toString();
								jint hashCode();
							}; // end class StatisticalSummaryValues
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class StatisticalMultivariateSummary : public java::lang::Object {
								public:
							            StatisticalMultivariateSummary(jobject _jthis, bool copy);
							            StatisticalMultivariateSummary(const StatisticalMultivariateSummary &);
							        
								StatisticalMultivariateSummary();
								virtual ~StatisticalMultivariateSummary();
							}; // end class StatisticalMultivariateSummary
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							
							class DBSCANClusterer : public java::lang::Object {
								public:
							            DBSCANClusterer(jobject _jthis, bool copy);
							            DBSCANClusterer(const DBSCANClusterer &);
							        
								DBSCANClusterer(jdouble double_0,jint int_1);
								virtual ~DBSCANClusterer();
								java::util::List cluster(java::util::Collection collection_0);
								jdouble getEps();
								jint getMinPts();
							}; // end class DBSCANClusterer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							
							class EuclideanIntegerPoint : public java::lang::Object {
								public:
							            EuclideanIntegerPoint(jobject _jthis, bool copy);
							            EuclideanIntegerPoint(const EuclideanIntegerPoint &);
							        
								EuclideanIntegerPoint(jintArray intArray_0);
								virtual ~EuclideanIntegerPoint();
								jintArray getPoint();
								EuclideanIntegerPoint centroidOf(java::util::Collection collection_0);
								jdouble distanceFrom(EuclideanIntegerPoint euclideanIntegerPoint_0);
								jstring toString();
								jint hashCode();
							}; // end class EuclideanIntegerPoint
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							
							class Clusterable : public java::lang::Object {
								public:
							            Clusterable(jobject _jthis, bool copy);
							            Clusterable(const Clusterable &);
							        
								Clusterable();
								virtual ~Clusterable();
							}; // end class Clusterable
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							
							class Cluster : public java::lang::Object {
								public:
							            Cluster(jobject _jthis, bool copy);
							            Cluster(const Cluster &);
							        
								Cluster(Clusterable clusterable_0);
								virtual ~Cluster();
								Clusterable getCenter();
								java::util::List getPoints();
								void addPoint(Clusterable clusterable_0);
							}; // end class Cluster
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							
							class KendallsCorrelation : public java::lang::Object {
								public:
							            KendallsCorrelation(jobject _jthis, bool copy);
							            KendallsCorrelation(const KendallsCorrelation &);
							        
								KendallsCorrelation();
								KendallsCorrelation(linear::RealMatrix realMatrix_0);
								virtual ~KendallsCorrelation();
								linear::RealMatrix computeCorrelationMatrix(linear::RealMatrix realMatrix_0);
								jdouble correlation(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								linear::RealMatrix getCorrelationMatrix();
							}; // end class KendallsCorrelation
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							
							class StorelessBivariateCovariance : public java::lang::Object {
								public:
							            StorelessBivariateCovariance(jobject _jthis, bool copy);
							            StorelessBivariateCovariance(const StorelessBivariateCovariance &);
							        
								StorelessBivariateCovariance();
								StorelessBivariateCovariance(jboolean boolean_0);
								virtual ~StorelessBivariateCovariance();
								jdouble getN();
								void append(StorelessBivariateCovariance storelessBivariateCovariance_0);
								void increment(jdouble double_0,jdouble double_1);
								jdouble getResult();
							}; // end class StorelessBivariateCovariance
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							
							class SpearmansCorrelation : public java::lang::Object {
								public:
							            SpearmansCorrelation(jobject _jthis, bool copy);
							            SpearmansCorrelation(const SpearmansCorrelation &);
							        
								SpearmansCorrelation();
								SpearmansCorrelation(ranking::RankingAlgorithm rankingAlgorithm_0);
								SpearmansCorrelation(linear::RealMatrix realMatrix_0);
								SpearmansCorrelation(linear::RealMatrix realMatrix_0,ranking::RankingAlgorithm rankingAlgorithm_1);
								virtual ~SpearmansCorrelation();
								linear::RealMatrix computeCorrelationMatrix(linear::RealMatrix realMatrix_0);
								PearsonsCorrelation getRankCorrelation();
								jdouble correlation(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								linear::RealMatrix getCorrelationMatrix();
							}; // end class SpearmansCorrelation
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace ranking{
							
							class NaNStrategy : public java::lang::Enum {
								public:
							            NaNStrategy(jobject _jthis, bool copy);
							            NaNStrategy(const NaNStrategy &);
							        
								virtual ~NaNStrategy();
								static jobjectArray values();
								static NaNStrategy valueOf(jstring string_0);
							}; // end class NaNStrategy
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace ranking

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							
							class IntervalUtils : public java::lang::Object {
								public:
							            IntervalUtils(jobject _jthis, bool copy);
							            IntervalUtils(const IntervalUtils &);
							        
								virtual ~IntervalUtils();
								static ConfidenceInterval getClopperPearsonInterval(jint int_0,jint int_1,jdouble double_2);
								static ConfidenceInterval getNormalApproximationInterval(jint int_0,jint int_1,jdouble double_2);
								static ConfidenceInterval getWilsonScoreInterval(jint int_0,jint int_1,jdouble double_2);
								static ConfidenceInterval getAgrestiCoullInterval(jint int_0,jint int_1,jdouble double_2);
							}; // end class IntervalUtils
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							
							class AgrestiCoullInterval : public java::lang::Object {
								public:
							            AgrestiCoullInterval(jobject _jthis, bool copy);
							            AgrestiCoullInterval(const AgrestiCoullInterval &);
							        
								AgrestiCoullInterval();
								virtual ~AgrestiCoullInterval();
								ConfidenceInterval createInterval(jint int_0,jint int_1,jdouble double_2);
							}; // end class AgrestiCoullInterval
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							
							class WilsonScoreInterval : public java::lang::Object {
								public:
							            WilsonScoreInterval(jobject _jthis, bool copy);
							            WilsonScoreInterval(const WilsonScoreInterval &);
							        
								WilsonScoreInterval();
								virtual ~WilsonScoreInterval();
								ConfidenceInterval createInterval(jint int_0,jint int_1,jdouble double_2);
							}; // end class WilsonScoreInterval
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							
							class ConfidenceInterval : public java::lang::Object {
								public:
							            ConfidenceInterval(jobject _jthis, bool copy);
							            ConfidenceInterval(const ConfidenceInterval &);
							        
								ConfidenceInterval(jdouble double_0,jdouble double_1,jdouble double_2);
								virtual ~ConfidenceInterval();
								jdouble getLowerBound();
								jdouble getUpperBound();
								jdouble getConfidenceLevel();
								jstring toString();
							}; // end class ConfidenceInterval
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						
						class StatUtils : public java::lang::Object {
							public:
						            StatUtils(jobject _jthis, bool copy);
						            StatUtils(const StatUtils &);
						        
							virtual ~StatUtils();
							static jdouble meanDifference(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jdouble varianceDifference(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdouble double_2);
							static jdoubleArray mode(jdoubleArray doubleArray_0);
							static jdoubleArray mode(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdouble product(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdouble product(jdoubleArray doubleArray_0);
							static jdouble mean(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdouble mean(jdoubleArray doubleArray_0);
							static jdouble variance(jdoubleArray doubleArray_0,jdouble double_1);
							static jdouble variance(jdoubleArray doubleArray_0,jdouble double_1,jint int_2,jint int_3);
							static jdouble variance(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdouble variance(jdoubleArray doubleArray_0);
							static jdouble populationVariance(jdoubleArray doubleArray_0,jdouble double_1,jint int_2,jint int_3);
							static jdouble populationVariance(jdoubleArray doubleArray_0,jdouble double_1);
							static jdouble populationVariance(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdouble populationVariance(jdoubleArray doubleArray_0);
							static jdouble sumSq(jdoubleArray doubleArray_0);
							static jdouble sumSq(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdouble sumLog(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdouble sumLog(jdoubleArray doubleArray_0);
							static jdouble percentile(jdoubleArray doubleArray_0,jdouble double_1);
							static jdouble percentile(jdoubleArray doubleArray_0,jint int_1,jint int_2,jdouble double_3);
							static jdouble sumDifference(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							static jdouble geometricMean(jdoubleArray doubleArray_0);
							static jdouble geometricMean(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdouble min(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdouble min(jdoubleArray doubleArray_0);
							static jdouble max(jdoubleArray doubleArray_0);
							static jdouble max(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							static jdoubleArray normalize(jdoubleArray doubleArray_0);
							static jdouble sum(jdoubleArray doubleArray_0);
							static jdouble sum(jdoubleArray doubleArray_0,jint int_1,jint int_2);
						}; // end class StatUtils
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace stat

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						
						class Frequency : public java::lang::Object {
							public:
						            Frequency(jobject _jthis, bool copy);
						            Frequency(const Frequency &);
						        
							Frequency();
							Frequency(java::util::Comparator comparator_0);
							virtual ~Frequency();
							jlong getCumFreq(jint int_0);
							jlong getCumFreq(jlong long_0);
							jlong getCumFreq(jchar char_0);
							jlong getCumFreq(java::lang::Comparable comparable_0);
							jint getUniqueCount();
							jdouble getPct(jchar char_0);
							jdouble getPct(jlong long_0);
							jdouble getPct(jint int_0);
							jdouble getPct(java::lang::Comparable comparable_0);
							jdouble getCumPct(jint int_0);
							jdouble getCumPct(jlong long_0);
							jdouble getCumPct(jchar char_0);
							jdouble getCumPct(java::lang::Comparable comparable_0);
							java::util::Iterator valuesIterator();
							void addValue(jlong long_0);
							void addValue(java::lang::Comparable comparable_0);
							void addValue(jint int_0);
							void addValue(jchar char_0);
							jlong getCount(jchar char_0);
							jlong getCount(java::lang::Comparable comparable_0);
							jlong getCount(jint int_0);
							jlong getCount(jlong long_0);
							java::util::List getMode();
							void incrementValue(java::lang::Comparable comparable_0,jlong long_1);
							void incrementValue(jint int_0,jlong long_1);
							void incrementValue(jlong long_0,jlong long_1);
							void incrementValue(jchar char_0,jlong long_1);
							java::util::Iterator entrySetIterator();
							jlong getSumFreq();
							jstring toString();
							jint hashCode();
							void clear();
							void merge(Frequency frequency_0);
							void merge(java::util::Collection collection_0);
						}; // end class Frequency
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace stat

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class InvalidRepresentationException : public exception::MathIllegalArgumentException {
							public:
						            InvalidRepresentationException(jobject _jthis, bool copy);
						            InvalidRepresentationException(const InvalidRepresentationException &);
						        
							virtual ~InvalidRepresentationException();
						}; // end class InvalidRepresentationException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class UniformCrossover : public java::lang::Object {
							public:
						            UniformCrossover(jobject _jthis, bool copy);
						            UniformCrossover(const UniformCrossover &);
						        
							UniformCrossover(jdouble double_0);
							virtual ~UniformCrossover();
							jdouble getRatio();
							ChromosomePair crossover(Chromosome chromosome_0,Chromosome chromosome_1);
						}; // end class UniformCrossover
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class OnePointCrossover : public java::lang::Object {
							public:
						            OnePointCrossover(jobject _jthis, bool copy);
						            OnePointCrossover(const OnePointCrossover &);
						        
							OnePointCrossover();
							virtual ~OnePointCrossover();
							ChromosomePair crossover(Chromosome chromosome_0,Chromosome chromosome_1);
						}; // end class OnePointCrossover
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class BinaryChromosome : public AbstractListChromosome {
							public:
						            BinaryChromosome(jobject _jthis, bool copy);
						            BinaryChromosome(const BinaryChromosome &);
						        
							BinaryChromosome(java::util::List list_0);
							virtual ~BinaryChromosome();
							static java::util::List randomBinaryRepresentation(jint int_0);
						}; // end class BinaryChromosome
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class FixedElapsedTime : public java::lang::Object {
							public:
						            FixedElapsedTime(jobject _jthis, bool copy);
						            FixedElapsedTime(const FixedElapsedTime &);
						        
							FixedElapsedTime(jlong long_0);
							virtual ~FixedElapsedTime();
							jboolean isSatisfied(Population population_0);
						}; // end class FixedElapsedTime
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class OrderedCrossover : public java::lang::Object {
							public:
						            OrderedCrossover(jobject _jthis, bool copy);
						            OrderedCrossover(const OrderedCrossover &);
						        
							OrderedCrossover();
							virtual ~OrderedCrossover();
							ChromosomePair crossover(Chromosome chromosome_0,Chromosome chromosome_1);
						}; // end class OrderedCrossover
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class CycleCrossover : public java::lang::Object {
							public:
						            CycleCrossover(jobject _jthis, bool copy);
						            CycleCrossover(const CycleCrossover &);
						        
							CycleCrossover(jboolean boolean_0);
							CycleCrossover();
							virtual ~CycleCrossover();
							jboolean isRandomStart();
							ChromosomePair crossover(Chromosome chromosome_0,Chromosome chromosome_1);
						}; // end class CycleCrossover
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class RandomKey : public AbstractListChromosome {
							public:
						            RandomKey(jobject _jthis, bool copy);
						            RandomKey(const RandomKey &);
						        
							RandomKey(java::util::List list_0);
							RandomKey(jobjectArray doubleArray_0);
							virtual ~RandomKey();
							static java::util::List randomPermutation(jint int_0);
							static java::util::List identityPermutation(jint int_0);
							static java::util::List comparatorPermutation(java::util::List list_0,java::util::Comparator comparator_1);
							static java::util::List inducedPermutation(java::util::List list_0,java::util::List list_1);
							jstring toString();
							java::util::List decode(java::util::List list_0);
						}; // end class RandomKey
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class PermutationChromosome : public java::lang::Object {
							public:
						            PermutationChromosome(jobject _jthis, bool copy);
						            PermutationChromosome(const PermutationChromosome &);
						        
							PermutationChromosome();
							virtual ~PermutationChromosome();
						}; // end class PermutationChromosome
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class BinaryMutation : public java::lang::Object {
							public:
						            BinaryMutation(jobject _jthis, bool copy);
						            BinaryMutation(const BinaryMutation &);
						        
							BinaryMutation();
							virtual ~BinaryMutation();
							Chromosome mutate(Chromosome chromosome_0);
						}; // end class BinaryMutation
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class ElitisticListPopulation : public ListPopulation {
							public:
						            ElitisticListPopulation(jobject _jthis, bool copy);
						            ElitisticListPopulation(const ElitisticListPopulation &);
						        
							ElitisticListPopulation(jint int_0,jdouble double_1);
							ElitisticListPopulation(java::util::List list_0,jint int_1,jdouble double_2);
							virtual ~ElitisticListPopulation();
							void setElitismRate(jdouble double_0);
							jdouble getElitismRate();
							Population nextGeneration();
						}; // end class ElitisticListPopulation
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class SelectionPolicy : public java::lang::Object {
							public:
						            SelectionPolicy(jobject _jthis, bool copy);
						            SelectionPolicy(const SelectionPolicy &);
						        
							SelectionPolicy();
							virtual ~SelectionPolicy();
						}; // end class SelectionPolicy
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class TournamentSelection : public java::lang::Object {
							public:
						            TournamentSelection(jobject _jthis, bool copy);
						            TournamentSelection(const TournamentSelection &);
						        
							TournamentSelection(jint int_0);
							virtual ~TournamentSelection();
							ChromosomePair select(Population population_0);
							jint getArity();
							void setArity(jint int_0);
						}; // end class TournamentSelection
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class GeneticAlgorithm : public java::lang::Object {
							public:
						            GeneticAlgorithm(jobject _jthis, bool copy);
						            GeneticAlgorithm(const GeneticAlgorithm &);
						        
							GeneticAlgorithm(CrossoverPolicy crossoverPolicy_0,jdouble double_1,MutationPolicy mutationPolicy_2,jdouble double_3,SelectionPolicy selectionPolicy_4);
							virtual ~GeneticAlgorithm();
							jdouble getMutationRate();
							SelectionPolicy getSelectionPolicy();
							jint getGenerationsEvolved();
							MutationPolicy getMutationPolicy();
							static random::RandomGenerator getRandomGenerator();
							CrossoverPolicy getCrossoverPolicy();
							jdouble getCrossoverRate();
							static void setRandomGenerator(random::RandomGenerator randomGenerator_0);
							Population evolve(Population population_0,StoppingCondition stoppingCondition_1);
							Population nextGeneration(Population population_0);
						}; // end class GeneticAlgorithm
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class ChromosomePair : public java::lang::Object {
							public:
						            ChromosomePair(jobject _jthis, bool copy);
						            ChromosomePair(const ChromosomePair &);
						        
							ChromosomePair(Chromosome chromosome_0,Chromosome chromosome_1);
							virtual ~ChromosomePair();
							Chromosome getSecond();
							jstring toString();
							Chromosome getFirst();
						}; // end class ChromosomePair
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class CrossoverPolicy : public java::lang::Object {
							public:
						            CrossoverPolicy(jobject _jthis, bool copy);
						            CrossoverPolicy(const CrossoverPolicy &);
						        
							CrossoverPolicy();
							virtual ~CrossoverPolicy();
						}; // end class CrossoverPolicy
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class NPointCrossover : public java::lang::Object {
							public:
						            NPointCrossover(jobject _jthis, bool copy);
						            NPointCrossover(const NPointCrossover &);
						        
							NPointCrossover(jint int_0);
							virtual ~NPointCrossover();
							jint getCrossoverPoints();
							ChromosomePair crossover(Chromosome chromosome_0,Chromosome chromosome_1);
						}; // end class NPointCrossover
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class RandomKeyMutation : public java::lang::Object {
							public:
						            RandomKeyMutation(jobject _jthis, bool copy);
						            RandomKeyMutation(const RandomKeyMutation &);
						        
							RandomKeyMutation();
							virtual ~RandomKeyMutation();
							Chromosome mutate(Chromosome chromosome_0);
						}; // end class RandomKeyMutation
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class MutationPolicy : public java::lang::Object {
							public:
						            MutationPolicy(jobject _jthis, bool copy);
						            MutationPolicy(const MutationPolicy &);
						        
							MutationPolicy();
							virtual ~MutationPolicy();
						}; // end class MutationPolicy
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class Fitness : public java::lang::Object {
							public:
						            Fitness(jobject _jthis, bool copy);
						            Fitness(const Fitness &);
						        
							Fitness();
							virtual ~Fitness();
						}; // end class Fitness
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class Population : public java::lang::Object {
							public:
						            Population(jobject _jthis, bool copy);
						            Population(const Population &);
						        
							Population();
							virtual ~Population();
						}; // end class Population
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class StoppingCondition : public java::lang::Object {
							public:
						            StoppingCondition(jobject _jthis, bool copy);
						            StoppingCondition(const StoppingCondition &);
						        
							StoppingCondition();
							virtual ~StoppingCondition();
						}; // end class StoppingCondition
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace genetics{
						
						class FixedGenerationCount : public java::lang::Object {
							public:
						            FixedGenerationCount(jobject _jthis, bool copy);
						            FixedGenerationCount(const FixedGenerationCount &);
						        
							FixedGenerationCount(jint int_0);
							virtual ~FixedGenerationCount();
							jint getNumGenerations();
							jboolean isSatisfied(Population population_0);
						}; // end class FixedGenerationCount
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace genetics

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						
						class ComplexField : public java::lang::Object {
							public:
						            ComplexField(jobject _jthis, bool copy);
						            ComplexField(const ComplexField &);
						        
							virtual ~ComplexField();
							Complex getZero();
							Complex getOne();
							static ComplexField getInstance();
						}; // end class ComplexField
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						
						class Complex : public java::lang::Object {
							public:
						            Complex(jobject _jthis, bool copy);
						            Complex(const Complex &);
						        
							Complex(jdouble double_0,jdouble double_1);
							Complex(jdouble double_0);
							virtual ~Complex();
							Complex multiply(Complex complex_0);
							Complex multiply(jint int_0);
							Complex multiply(jdouble double_0);
							Complex subtract(jdouble double_0);
							Complex subtract(Complex complex_0);
							Complex reciprocal();
							jdouble getReal();
							Complex negate();
							jdouble getArgument();
							jdouble getImaginary();
							static jboolean equalsWithRelativeTolerance(Complex complex_0,Complex complex_1,jdouble double_2);
							Complex sqrt1z();
							java::util::List nthRoot(jint int_0);
							Complex conjugate();
							Complex add(jdouble double_0);
							Complex add(Complex complex_0);
							static jboolean equals(Complex complex_0,Complex complex_1,jint int_2);
							static jboolean equals(Complex complex_0,Complex complex_1);
							static jboolean equals(Complex complex_0,Complex complex_1,jdouble double_2);
							jstring toString();
							jint hashCode();
							jdouble abs();
							Complex sin();
							Complex cos();
							Complex tan();
							Complex sqrt();
							Complex log();
							Complex pow(Complex complex_0);
							Complex pow(jdouble double_0);
							Complex exp();
							static Complex valueOf(jdouble double_0);
							static Complex valueOf(jdouble double_0,jdouble double_1);
							ComplexField getField();
							jboolean isNaN();
							jboolean isInfinite();
							Complex divide(Complex complex_0);
							Complex divide(jdouble double_0);
							Complex asin();
							Complex acos();
							Complex atan();
							Complex sinh();
							Complex cosh();
							Complex tanh();
						}; // end class Complex
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace scalar{
								namespace gradient{
									
									class Preconditioner : public java::lang::Object {
										public:
									            Preconditioner(jobject _jthis, bool copy);
									            Preconditioner(const Preconditioner &);
									        
										Preconditioner();
										virtual ~Preconditioner();
									}; // end class Preconditioner
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace optim
			} // end namespace nonlinear
		} // end namespace scalar
	} // end namespace gradient

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class PivotSelectionRule : public java::lang::Enum {
								public:
							            PivotSelectionRule(jobject _jthis, bool copy);
							            PivotSelectionRule(const PivotSelectionRule &);
							        
								virtual ~PivotSelectionRule();
								static jobjectArray values();
								static PivotSelectionRule valueOf(jstring string_0);
							}; // end class PivotSelectionRule
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class SolutionCallback : public java::lang::Object {
								public:
							            SolutionCallback(jobject _jthis, bool copy);
							            SolutionCallback(const SolutionCallback &);
							        
								SolutionCallback();
								virtual ~SolutionCallback();
								jboolean isSolutionOptimal();
								PointValuePair getSolution();
							}; // end class SolutionCallback
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class ConvergenceChecker : public java::lang::Object {
							public:
						            ConvergenceChecker(jobject _jthis, bool copy);
						            ConvergenceChecker(const ConvergenceChecker &);
						        
							ConvergenceChecker();
							virtual ~ConvergenceChecker();
						}; // end class ConvergenceChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class EnumeratedRealDistribution : public AbstractRealDistribution {
							public:
						            EnumeratedRealDistribution(jobject _jthis, bool copy);
						            EnumeratedRealDistribution(const EnumeratedRealDistribution &);
						        
							EnumeratedRealDistribution(random::RandomGenerator randomGenerator_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
							EnumeratedRealDistribution(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							virtual ~EnumeratedRealDistribution();
							jdouble probability(jdouble double_0);
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble sample();
						}; // end class EnumeratedRealDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class EnumeratedIntegerDistribution : public AbstractIntegerDistribution {
							public:
						            EnumeratedIntegerDistribution(jobject _jthis, bool copy);
						            EnumeratedIntegerDistribution(const EnumeratedIntegerDistribution &);
						        
							EnumeratedIntegerDistribution(random::RandomGenerator randomGenerator_0,jintArray intArray_1,jdoubleArray doubleArray_2);
							EnumeratedIntegerDistribution(jintArray intArray_0,jdoubleArray doubleArray_1);
							virtual ~EnumeratedIntegerDistribution();
							jdouble probability(jint int_0);
							jdouble cumulativeProbability(jint int_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jint getSupportLowerBound();
							jint getSupportUpperBound();
							jboolean isSupportConnected();
							jint sample();
						}; // end class EnumeratedIntegerDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class ConstantRealDistribution : public AbstractRealDistribution {
							public:
						            ConstantRealDistribution(jobject _jthis, bool copy);
						            ConstantRealDistribution(const ConstantRealDistribution &);
						        
							ConstantRealDistribution(jdouble double_0);
							virtual ~ConstantRealDistribution();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							void reseedRandomGenerator(jlong long_0);
							jdouble sample();
						}; // end class ConstantRealDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class GammaDistribution : public AbstractRealDistribution {
							public:
						            GammaDistribution(jobject _jthis, bool copy);
						            GammaDistribution(const GammaDistribution &);
						        
							GammaDistribution(jdouble double_0,jdouble double_1);
							GammaDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							GammaDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							GammaDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							virtual ~GammaDistribution();
							jdouble getShape();
							jdouble getAlpha();
							jdouble getScale();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble sample();
							jdouble logDensity(jdouble double_0);
							jdouble getBeta();
						}; // end class GammaDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class TDistribution : public AbstractRealDistribution {
							public:
						            TDistribution(jobject _jthis, bool copy);
						            TDistribution(const TDistribution &);
						        
							TDistribution(jdouble double_0);
							TDistribution(jdouble double_0,jdouble double_1);
							TDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1);
							TDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							virtual ~TDistribution();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble logDensity(jdouble double_0);
							jdouble getDegreesOfFreedom();
						}; // end class TDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class LogisticDistribution : public AbstractRealDistribution {
							public:
						            LogisticDistribution(jobject _jthis, bool copy);
						            LogisticDistribution(const LogisticDistribution &);
						        
							LogisticDistribution(jdouble double_0,jdouble double_1);
							LogisticDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							virtual ~LogisticDistribution();
							jdouble getScale();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble getLocation();
						}; // end class LogisticDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class LaplaceDistribution : public AbstractRealDistribution {
							public:
						            LaplaceDistribution(jobject _jthis, bool copy);
						            LaplaceDistribution(const LaplaceDistribution &);
						        
							LaplaceDistribution(jdouble double_0,jdouble double_1);
							LaplaceDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							virtual ~LaplaceDistribution();
							jdouble getScale();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble getLocation();
						}; // end class LaplaceDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class UniformIntegerDistribution : public AbstractIntegerDistribution {
							public:
						            UniformIntegerDistribution(jobject _jthis, bool copy);
						            UniformIntegerDistribution(const UniformIntegerDistribution &);
						        
							UniformIntegerDistribution(random::RandomGenerator randomGenerator_0,jint int_1,jint int_2);
							UniformIntegerDistribution(jint int_0,jint int_1);
							virtual ~UniformIntegerDistribution();
							jdouble probability(jint int_0);
							jdouble cumulativeProbability(jint int_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jint getSupportLowerBound();
							jint getSupportUpperBound();
							jboolean isSupportConnected();
							jint sample();
						}; // end class UniformIntegerDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class HypergeometricDistribution : public AbstractIntegerDistribution {
							public:
						            HypergeometricDistribution(jobject _jthis, bool copy);
						            HypergeometricDistribution(const HypergeometricDistribution &);
						        
							HypergeometricDistribution(random::RandomGenerator randomGenerator_0,jint int_1,jint int_2,jint int_3);
							HypergeometricDistribution(jint int_0,jint int_1,jint int_2);
							virtual ~HypergeometricDistribution();
							jint getPopulationSize();
							jdouble probability(jint int_0);
							jdouble cumulativeProbability(jint int_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jint getSupportLowerBound();
							jint getSupportUpperBound();
							jboolean isSupportConnected();
							jdouble logProbability(jint int_0);
							jint getSampleSize();
							jint getNumberOfSuccesses();
							jdouble upperCumulativeProbability(jint int_0);
						}; // end class HypergeometricDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class MultivariateNormalDistribution : public AbstractMultivariateRealDistribution {
							public:
						            MultivariateNormalDistribution(jobject _jthis, bool copy);
						            MultivariateNormalDistribution(const MultivariateNormalDistribution &);
						        
							virtual ~MultivariateNormalDistribution();
							linear::RealMatrix getCovariances();
							jdouble density(jdoubleArray doubleArray_0);
							jdoubleArray sample();
							jdoubleArray getStandardDeviations();
							jdoubleArray getMeans();
						}; // end class MultivariateNormalDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class MixtureMultivariateNormalDistribution : public MixtureMultivariateRealDistribution {
							public:
						            MixtureMultivariateNormalDistribution(jobject _jthis, bool copy);
						            MixtureMultivariateNormalDistribution(const MixtureMultivariateNormalDistribution &);
						        
							MixtureMultivariateNormalDistribution(random::RandomGenerator randomGenerator_0,java::util::List list_1);
							MixtureMultivariateNormalDistribution(java::util::List list_0);
							virtual ~MixtureMultivariateNormalDistribution();
						}; // end class MixtureMultivariateNormalDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class MultivariateRealDistribution : public java::lang::Object {
							public:
						            MultivariateRealDistribution(jobject _jthis, bool copy);
						            MultivariateRealDistribution(const MultivariateRealDistribution &);
						        
							MultivariateRealDistribution();
							virtual ~MultivariateRealDistribution();
						}; // end class MultivariateRealDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class NakagamiDistribution : public AbstractRealDistribution {
							public:
						            NakagamiDistribution(jobject _jthis, bool copy);
						            NakagamiDistribution(const NakagamiDistribution &);
						        
							NakagamiDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							NakagamiDistribution(jdouble double_0,jdouble double_1);
							NakagamiDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							virtual ~NakagamiDistribution();
							jdouble getShape();
							jdouble getScale();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
						}; // end class NakagamiDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class IntegerDistribution : public java::lang::Object {
							public:
						            IntegerDistribution(jobject _jthis, bool copy);
						            IntegerDistribution(const IntegerDistribution &);
						        
							IntegerDistribution();
							virtual ~IntegerDistribution();
						}; // end class IntegerDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class FastHadamardTransformer : public java::lang::Object {
							public:
						            FastHadamardTransformer(jobject _jthis, bool copy);
						            FastHadamardTransformer(const FastHadamardTransformer &);
						        
							FastHadamardTransformer();
							virtual ~FastHadamardTransformer();
							jintArray transform(jintArray intArray_0);
							jdoubleArray transform(analysis::UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2,jint int_3,TransformType transformType_4);
							jdoubleArray transform(jdoubleArray doubleArray_0,TransformType transformType_1);
						}; // end class FastHadamardTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class TransformUtils : public java::lang::Object {
							public:
						            TransformUtils(jobject _jthis, bool copy);
						            TransformUtils(const TransformUtils &);
						        
							virtual ~TransformUtils();
							static jint exactLog2(jint int_0);
							static jdoubleArray scaleArray(jdoubleArray doubleArray_0,jdouble double_1);
							static jobjectArray scaleArray(jobjectArray complexArray_0,jdouble double_1);
						}; // end class TransformUtils
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class DftNormalization : public java::lang::Enum {
							public:
						            DftNormalization(jobject _jthis, bool copy);
						            DftNormalization(const DftNormalization &);
						        
							virtual ~DftNormalization();
							static jobjectArray values();
							static DftNormalization valueOf(jstring string_0);
						}; // end class DftNormalization
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class FastFourierTransformer : public java::lang::Object {
							public:
						            FastFourierTransformer(jobject _jthis, bool copy);
						            FastFourierTransformer(const FastFourierTransformer &);
						        
							FastFourierTransformer(DftNormalization dftNormalization_0);
							virtual ~FastFourierTransformer();
							jobjectArray transform(jdoubleArray doubleArray_0,TransformType transformType_1);
							jobjectArray transform(jobjectArray complexArray_0,TransformType transformType_1);
							jobjectArray transform(analysis::UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2,jint int_3,TransformType transformType_4);
						}; // end class FastFourierTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class RealTransformer : public java::lang::Object {
							public:
						            RealTransformer(jobject _jthis, bool copy);
						            RealTransformer(const RealTransformer &);
						        
							RealTransformer();
							virtual ~RealTransformer();
						}; // end class RealTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class FastSineTransformer : public java::lang::Object {
							public:
						            FastSineTransformer(jobject _jthis, bool copy);
						            FastSineTransformer(const FastSineTransformer &);
						        
							FastSineTransformer(DstNormalization dstNormalization_0);
							virtual ~FastSineTransformer();
							jdoubleArray transform(analysis::UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2,jint int_3,TransformType transformType_4);
							jdoubleArray transform(jdoubleArray doubleArray_0,TransformType transformType_1);
						}; // end class FastSineTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class DstNormalization : public java::lang::Enum {
							public:
						            DstNormalization(jobject _jthis, bool copy);
						            DstNormalization(const DstNormalization &);
						        
							virtual ~DstNormalization();
							static jobjectArray values();
							static DstNormalization valueOf(jstring string_0);
						}; // end class DstNormalization
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								
								class Line : public java::lang::Object {
									public:
								            Line(jobject _jthis, bool copy);
								            Line(const Line &);
								        
									Line(Vector2D vector2D_0,jdouble double_1,jdouble double_2);
									Line(Line line_0);
									Line(Vector2D vector2D_0,jdouble double_1);
									Line(Vector2D vector2D_0,Vector2D vector2D_1);
									Line(Vector2D vector2D_0,Vector2D vector2D_1,jdouble double_2);
									virtual ~Line();
									Vector2D getPointAt(oned::Vector1D vector1D_0,jdouble double_1);
									void revertSelf();
									jboolean isParallelTo(Line line_0);
									void translateToPoint(Vector2D vector2D_0);
									jdouble getOriginOffset();
									void setOriginOffset(jdouble double_0);
									Vector2D intersection(Line line_0);
									jdouble distance(Vector2D vector2D_0);
									static partitioning::Transform getTransform(java::awt::geom::AffineTransform affineTransform_0);
									jdouble getAngle();
									void setAngle(jdouble double_0);
									SubLine wholeHyperplane();
									Line copySelf();
									jboolean sameOrientationAs(partitioning::Hyperplane hyperplane_0);
									jdouble getTolerance();
									oned::Vector1D toSubSpace(Vector vector_0);
									oned::Vector1D toSubSpace(Point point_0);
									Point project(Point point_0);
									Vector2D toSpace(Vector vector_0);
									Vector2D toSpace(Point point_0);
									PolygonsSet wholeSpace();
									Line getReverse();
									jboolean contains(Vector2D vector2D_0);
									void reset(Vector2D vector2D_0,Vector2D vector2D_1);
									void reset(Vector2D vector2D_0,jdouble double_1);
									jdouble getOffset(Vector vector_0);
									jdouble getOffset(Point point_0);
									jdouble getOffset(Line line_0);
								}; // end class Line
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								
								class Segment : public java::lang::Object {
									public:
								            Segment(jobject _jthis, bool copy);
								            Segment(const Segment &);
								        
									Segment(Vector2D vector2D_0,Vector2D vector2D_1,Line line_2);
									virtual ~Segment();
									jdouble distance(Vector2D vector2D_0);
									Vector2D getStart();
									Vector2D getEnd();
									Line getLine();
								}; // end class Segment
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								
								class Euclidean2D : public java::lang::Object {
									public:
								            Euclidean2D(jobject _jthis, bool copy);
								            Euclidean2D(const Euclidean2D &);
								        
									virtual ~Euclidean2D();
									jint getDimension();
									oned::Euclidean1D getSubSpace();
									static Euclidean2D getInstance();
								}; // end class Euclidean2D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								
								class NestedLoops : public java::lang::Object {
									public:
								            NestedLoops(jobject _jthis, bool copy);
								            NestedLoops(const NestedLoops &);
								        
									NestedLoops(jdouble double_0);
									virtual ~NestedLoops();
									void correctOrientation();
									void add(jobjectArray vector2DArray_0);
								}; // end class NestedLoops
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								
								class OrientedPoint : public java::lang::Object {
									public:
								            OrientedPoint(jobject _jthis, bool copy);
								            OrientedPoint(const OrientedPoint &);
								        
									OrientedPoint(Vector1D vector1D_0,jboolean boolean_1);
									OrientedPoint(Vector1D vector1D_0,jboolean boolean_1,jdouble double_2);
									virtual ~OrientedPoint();
									void revertSelf();
									SubOrientedPoint wholeHyperplane();
									OrientedPoint copySelf();
									jboolean sameOrientationAs(partitioning::Hyperplane hyperplane_0);
									jdouble getTolerance();
									Point project(Point point_0);
									IntervalsSet wholeSpace();
									Vector1D getLocation();
									jboolean isDirect();
									jdouble getOffset(Vector vector_0);
									jdouble getOffset(Point point_0);
								}; // end class OrientedPoint
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								
								class Vector1DFormat : public VectorFormat {
									public:
								            Vector1DFormat(jobject _jthis, bool copy);
								            Vector1DFormat(const Vector1DFormat &);
								        
									Vector1DFormat(jstring string_0,jstring string_1,java::text::NumberFormat numberFormat_2);
									Vector1DFormat(jstring string_0,jstring string_1);
									Vector1DFormat(java::text::NumberFormat numberFormat_0);
									Vector1DFormat();
									virtual ~Vector1DFormat();
									java::lang::StringBuffer format(Vector vector_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
									static Vector1DFormat getInstance(java::util::Locale locale_0);
									static Vector1DFormat getInstance();
									Vector1D parse(jstring string_0,java::text::ParsePosition parsePosition_1);
									Vector1D parse(jstring string_0);
								}; // end class Vector1DFormat
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								
								class IntervalsSet : public partitioning::AbstractRegion {
									public:
								            IntervalsSet(jobject _jthis, bool copy);
								            IntervalsSet(const IntervalsSet &);
								        
									IntervalsSet(jdouble double_0,jdouble double_1);
									IntervalsSet();
									IntervalsSet(partitioning::BSPTree bSPTree_0,jdouble double_1);
									IntervalsSet(java::util::Collection collection_0,jdouble double_1);
									IntervalsSet(jdouble double_0);
									IntervalsSet(jdouble double_0,jdouble double_1,jdouble double_2);
									IntervalsSet(java::util::Collection collection_0);
									IntervalsSet(partitioning::BSPTree bSPTree_0);
									virtual ~IntervalsSet();
									IntervalsSet buildNew(partitioning::BSPTree bSPTree_0);
									jdouble getInf();
									jdouble getSup();
									partitioning::BoundaryProjection projectToBoundary(Point point_0);
									java::util::Iterator iterator();
									java::util::List asList();
								}; // end class IntervalsSet
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								
								class Euclidean1D : public java::lang::Object {
									public:
								            Euclidean1D(jobject _jthis, bool copy);
								            Euclidean1D(const Euclidean1D &);
								        
									virtual ~Euclidean1D();
									jint getDimension();
									Space getSubSpace();
									static Euclidean1D getInstance();
								}; // end class Euclidean1D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace oned{
								
								class SubOrientedPoint : public partitioning::AbstractSubHyperplane {
									public:
								            SubOrientedPoint(jobject _jthis, bool copy);
								            SubOrientedPoint(const SubOrientedPoint &);
								        
									SubOrientedPoint(partitioning::Hyperplane hyperplane_0,partitioning::Region region_1);
									virtual ~SubOrientedPoint();
									partitioning::Side side(partitioning::Hyperplane hyperplane_0);
									jboolean isEmpty();
									partitioning::SubHyperplane::SplitSubHyperplane split(partitioning::Hyperplane hyperplane_0);
									jdouble getSize();
								}; // end class SubOrientedPoint
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace oned

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace utilities{
								
								class OrderedTuple : public java::lang::Object {
									public:
								            OrderedTuple(jobject _jthis, bool copy);
								            OrderedTuple(const OrderedTuple &);
								        
									OrderedTuple(jdoubleArray doubleArray_0);
									virtual ~OrderedTuple();
									jdoubleArray getComponents();
									jint hashCode();
									jint compareTo(OrderedTuple orderedTuple_0);
								}; // end class OrderedTuple
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace utilities

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class BoundaryAttribute : public java::lang::Object {
								public:
							            BoundaryAttribute(jobject _jthis, bool copy);
							            BoundaryAttribute(const BoundaryAttribute &);
							        
								BoundaryAttribute(SubHyperplane subHyperplane_0,SubHyperplane subHyperplane_1);
								virtual ~BoundaryAttribute();
								SubHyperplane getPlusOutside();
								SubHyperplane getPlusInside();
								NodesSet getSplitters();
							}; // end class BoundaryAttribute
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class Characterization : public java::lang::Object {
								public:
							            Characterization(jobject _jthis, bool copy);
							            Characterization(const Characterization &);
							        
								Characterization(BSPTree bSPTree_0,SubHyperplane subHyperplane_1);
								virtual ~Characterization();
								jboolean touchOutside();
								NodesSet getOutsideSplitters();
								jboolean touchInside();
								SubHyperplane outsideTouching();
								NodesSet getInsideSplitters();
								SubHyperplane insideTouching();
							}; // end class Characterization
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class NodesSet : public java::lang::Object {
								public:
							            NodesSet(jobject _jthis, bool copy);
							            NodesSet(const NodesSet &);
							        
								NodesSet();
								virtual ~NodesSet();
								void add(BSPTree bSPTree_0);
								java::util::Iterator iterator();
								void addAll(java::lang::Iterable iterable_0);
							}; // end class NodesSet
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class Embedding : public java::lang::Object {
								public:
							            Embedding(jobject _jthis, bool copy);
							            Embedding(const Embedding &);
							        
								Embedding();
								virtual ~Embedding();
							}; // end class Embedding
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class BoundaryBuilder : public java::lang::Object {
								public:
							            BoundaryBuilder(jobject _jthis, bool copy);
							            BoundaryBuilder(const BoundaryBuilder &);
							        
								virtual ~BoundaryBuilder();
								BSPTreeVisitor::Order visitOrder(BSPTree bSPTree_0);
								void visitInternalNode(BSPTree bSPTree_0);
								void visitLeafNode(BSPTree bSPTree_0);
							}; // end class BoundaryBuilder
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class Region : public java::lang::Object {
								public:
							            Region(jobject _jthis, bool copy);
							            Region(const Region &);
							        
								Region();
								virtual ~Region();
							}; // end class Region
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class Side : public java::lang::Enum {
								public:
							            Side(jobject _jthis, bool copy);
							            Side(const Side &);
							        
								virtual ~Side();
								static jobjectArray values();
								static Side valueOf(jstring string_0);
							}; // end class Side
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class SubHyperplane : public java::lang::Object {
								public:
							            SubHyperplane(jobject _jthis, bool copy);
							            SubHyperplane(const SubHyperplane &);
							        
								SubHyperplane();
								virtual ~SubHyperplane();
							}; // end class SubHyperplane
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class DefaultRealMatrixChangingVisitor : public java::lang::Object {
							public:
						            DefaultRealMatrixChangingVisitor(jobject _jthis, bool copy);
						            DefaultRealMatrixChangingVisitor(const DefaultRealMatrixChangingVisitor &);
						        
							DefaultRealMatrixChangingVisitor();
							virtual ~DefaultRealMatrixChangingVisitor();
							jdouble end();
							jdouble visit(jint int_0,jint int_1,jdouble double_2);
							void start(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
						}; // end class DefaultRealMatrixChangingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class SchurTransformer : public java::lang::Object {
							public:
						            SchurTransformer(jobject _jthis, bool copy);
						            SchurTransformer(const SchurTransformer &);
						        
							SchurTransformer(RealMatrix realMatrix_0);
							virtual ~SchurTransformer();
							RealMatrix getPT();
							RealMatrix getP();
							RealMatrix getT();
						}; // end class SchurTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class ArrayFieldVector : public java::lang::Object {
							public:
						            ArrayFieldVector(jobject _jthis, bool copy);
						            ArrayFieldVector(const ArrayFieldVector &);
						        
							ArrayFieldVector(Field field_0,jobjectArray fieldElementArray_1,jint int_2,jint int_3);
							ArrayFieldVector(jobjectArray fieldElementArray_0,jint int_1,jint int_2);
							ArrayFieldVector(jobjectArray fieldElementArray_0,jboolean boolean_1);
							ArrayFieldVector(Field field_0,jobjectArray fieldElementArray_1,jboolean boolean_2);
							ArrayFieldVector(FieldVector fieldVector_0);
							ArrayFieldVector(Field field_0,jobjectArray fieldElementArray_1);
							ArrayFieldVector(jobjectArray fieldElementArray_0);
							ArrayFieldVector(ArrayFieldVector arrayFieldVector_0);
							ArrayFieldVector(jobjectArray fieldElementArray_0,FieldVector fieldVector_1);
							ArrayFieldVector(jobjectArray fieldElementArray_0,jobjectArray fieldElementArray_1);
							ArrayFieldVector(Field field_0,jobjectArray fieldElementArray_1,jobjectArray fieldElementArray_2);
							ArrayFieldVector(jint int_0,FieldElement fieldElement_1);
							ArrayFieldVector(Field field_0,jint int_1);
							ArrayFieldVector(Field field_0);
							ArrayFieldVector(ArrayFieldVector arrayFieldVector_0,jboolean boolean_1);
							ArrayFieldVector(ArrayFieldVector arrayFieldVector_0,ArrayFieldVector arrayFieldVector_1);
							ArrayFieldVector(FieldVector fieldVector_0,FieldVector fieldVector_1);
							ArrayFieldVector(ArrayFieldVector arrayFieldVector_0,jobjectArray fieldElementArray_1);
							ArrayFieldVector(FieldVector fieldVector_0,jobjectArray fieldElementArray_1);
							ArrayFieldVector(jobjectArray fieldElementArray_0,ArrayFieldVector arrayFieldVector_1);
							virtual ~ArrayFieldVector();
							void setEntry(jint int_0,FieldElement fieldElement_1);
							jobjectArray getData();
							ArrayFieldVector subtract(ArrayFieldVector arrayFieldVector_0);
							FieldVector subtract(FieldVector fieldVector_0);
							jint getDimension();
							FieldElement walkInOptimizedOrder(FieldVectorChangingVisitor fieldVectorChangingVisitor_0,jint int_1,jint int_2);
							FieldElement walkInOptimizedOrder(FieldVectorChangingVisitor fieldVectorChangingVisitor_0);
							FieldElement walkInOptimizedOrder(FieldVectorPreservingVisitor fieldVectorPreservingVisitor_0);
							FieldElement walkInOptimizedOrder(FieldVectorPreservingVisitor fieldVectorPreservingVisitor_0,jint int_1,jint int_2);
							jobjectArray getDataRef();
							FieldElement dotProduct(ArrayFieldVector arrayFieldVector_0);
							FieldElement dotProduct(FieldVector fieldVector_0);
							FieldVector getSubVector(jint int_0,jint int_1);
							void setSubVector(jint int_0,FieldVector fieldVector_1);
							FieldVector mapAdd(FieldElement fieldElement_0);
							FieldVector mapAddToSelf(FieldElement fieldElement_0);
							ArrayFieldVector ebeDivide(ArrayFieldVector arrayFieldVector_0);
							FieldVector ebeDivide(FieldVector fieldVector_0);
							FieldVector ebeMultiply(FieldVector fieldVector_0);
							ArrayFieldVector ebeMultiply(ArrayFieldVector arrayFieldVector_0);
							FieldVector mapMultiply(FieldElement fieldElement_0);
							FieldVector mapMultiplyToSelf(FieldElement fieldElement_0);
							FieldVector mapSubtract(FieldElement fieldElement_0);
							FieldVector mapSubtractToSelf(FieldElement fieldElement_0);
							FieldVector mapDivide(FieldElement fieldElement_0);
							FieldVector mapDivideToSelf(FieldElement fieldElement_0);
							FieldMatrix outerProduct(ArrayFieldVector arrayFieldVector_0);
							FieldMatrix outerProduct(FieldVector fieldVector_0);
							ArrayFieldVector projection(ArrayFieldVector arrayFieldVector_0);
							FieldVector projection(FieldVector fieldVector_0);
							FieldElement walkInDefaultOrder(FieldVectorChangingVisitor fieldVectorChangingVisitor_0);
							FieldElement walkInDefaultOrder(FieldVectorPreservingVisitor fieldVectorPreservingVisitor_0,jint int_1,jint int_2);
							FieldElement walkInDefaultOrder(FieldVectorPreservingVisitor fieldVectorPreservingVisitor_0);
							FieldElement walkInDefaultOrder(FieldVectorChangingVisitor fieldVectorChangingVisitor_0,jint int_1,jint int_2);
							FieldVector mapInv();
							FieldVector mapInvToSelf();
							ArrayFieldVector add(ArrayFieldVector arrayFieldVector_0);
							FieldVector add(FieldVector fieldVector_0);
							ArrayFieldVector append(ArrayFieldVector arrayFieldVector_0);
							FieldVector append(FieldVector fieldVector_0);
							FieldVector append(FieldElement fieldElement_0);
							jint hashCode();
							jobjectArray toArray();
							Field getField();
							FieldVector copy();
							void set(FieldElement fieldElement_0);
							void set(jint int_0,ArrayFieldVector arrayFieldVector_1);
							FieldElement getEntry(jint int_0);
						}; // end class ArrayFieldVector
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class RealMatrixFormat : public java::lang::Object {
							public:
						            RealMatrixFormat(jobject _jthis, bool copy);
						            RealMatrixFormat(const RealMatrixFormat &);
						        
							RealMatrixFormat();
							RealMatrixFormat(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jstring string_5);
							RealMatrixFormat(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jstring string_5,java::text::NumberFormat numberFormat_6);
							RealMatrixFormat(java::text::NumberFormat numberFormat_0);
							virtual ~RealMatrixFormat();
							java::text::NumberFormat getFormat();
							jstring getPrefix();
							jstring getSuffix();
							jstring getRowPrefix();
							jstring getRowSuffix();
							jstring getRowSeparator();
							jstring getColumnSeparator();
							jstring format(RealMatrix realMatrix_0);
							java::lang::StringBuffer format(RealMatrix realMatrix_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
							static RealMatrixFormat getInstance(java::util::Locale locale_0);
							static RealMatrixFormat getInstance();
							RealMatrix parse(jstring string_0);
							RealMatrix parse(jstring string_0,java::text::ParsePosition parsePosition_1);
							static jobjectArray getAvailableLocales();
						}; // end class RealMatrixFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							
							class ArgUtils : public java::lang::Object {
								public:
							            ArgUtils(jobject _jthis, bool copy);
							            ArgUtils(const ArgUtils &);
							        
								virtual ~ArgUtils();
							}; // end class ArgUtils
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							
							class LocalizedFormats : public java::lang::Enum {
								public:
							            LocalizedFormats(jobject _jthis, bool copy);
							            LocalizedFormats(const LocalizedFormats &);
							        
								virtual ~LocalizedFormats();
								jstring getSourceString();
								jstring getLocalizedString(java::util::Locale locale_0);
								static jobjectArray values();
								static LocalizedFormats valueOf(jstring string_0);
							}; // end class LocalizedFormats
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MathInternalError : public MathIllegalStateException {
							public:
						            MathInternalError(jobject _jthis, bool copy);
						            MathInternalError(const MathInternalError &);
						        
							MathInternalError();
							MathInternalError(java::lang::Throwable throwable_0);
							virtual ~MathInternalError();
						}; // end class MathInternalError
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NotFiniteNumberException : public MathIllegalNumberException {
							public:
						            NotFiniteNumberException(jobject _jthis, bool copy);
						            NotFiniteNumberException(const NotFiniteNumberException &);
						        
							virtual ~NotFiniteNumberException();
						}; // end class NotFiniteNumberException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class ZeroException : public MathIllegalNumberException {
							public:
						            ZeroException(jobject _jthis, bool copy);
						            ZeroException(const ZeroException &);
						        
							ZeroException();
							virtual ~ZeroException();
						}; // end class ZeroException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NoBracketingException : public MathIllegalArgumentException {
							public:
						            NoBracketingException(jobject _jthis, bool copy);
						            NoBracketingException(const NoBracketingException &);
						        
							NoBracketingException(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
							virtual ~NoBracketingException();
							jdouble getLo();
							jdouble getHi();
							jdouble getFLo();
							jdouble getFHi();
						}; // end class NoBracketingException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NotANumberException : public MathIllegalNumberException {
							public:
						            NotANumberException(jobject _jthis, bool copy);
						            NotANumberException(const NotANumberException &);
						        
							NotANumberException();
							virtual ~NotANumberException();
						}; // end class NotANumberException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NonMonotonicSequenceException : public MathIllegalNumberException {
							public:
						            NonMonotonicSequenceException(jobject _jthis, bool copy);
						            NonMonotonicSequenceException(const NonMonotonicSequenceException &);
						        
							NonMonotonicSequenceException(java::lang::Number number_0,java::lang::Number number_1,jint int_2,util::MathArrays::OrderDirection orderDirection_3,jboolean boolean_4);
							NonMonotonicSequenceException(java::lang::Number number_0,java::lang::Number number_1,jint int_2);
							virtual ~NonMonotonicSequenceException();
							jint getIndex();
							util::MathArrays::OrderDirection getDirection();
							jboolean getStrict();
							java::lang::Number getPrevious();
						}; // end class NonMonotonicSequenceException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MathUnsupportedOperationException : public java::lang::UnsupportedOperationException {
							public:
						            MathUnsupportedOperationException(jobject _jthis, bool copy);
						            MathUnsupportedOperationException(const MathUnsupportedOperationException &);
						        
							MathUnsupportedOperationException();
							virtual ~MathUnsupportedOperationException();
							jstring getMessage();
							jstring getLocalizedMessage();
							util::ExceptionContext getContext();
						}; // end class MathUnsupportedOperationException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class OutOfRangeException : public MathIllegalNumberException {
							public:
						            OutOfRangeException(jobject _jthis, bool copy);
						            OutOfRangeException(const OutOfRangeException &);
						        
							OutOfRangeException(util::Localizable localizable_0,java::lang::Number number_1,java::lang::Number number_2,java::lang::Number number_3);
							OutOfRangeException(java::lang::Number number_0,java::lang::Number number_1,java::lang::Number number_2);
							virtual ~OutOfRangeException();
							java::lang::Number getLo();
							java::lang::Number getHi();
						}; // end class OutOfRangeException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NotPositiveException : public NumberIsTooSmallException {
							public:
						            NotPositiveException(jobject _jthis, bool copy);
						            NotPositiveException(const NotPositiveException &);
						        
							NotPositiveException(java::lang::Number number_0);
							NotPositiveException(util::Localizable localizable_0,java::lang::Number number_1);
							virtual ~NotPositiveException();
						}; // end class NotPositiveException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NotStrictlyPositiveException : public NumberIsTooSmallException {
							public:
						            NotStrictlyPositiveException(jobject _jthis, bool copy);
						            NotStrictlyPositiveException(const NotStrictlyPositiveException &);
						        
							NotStrictlyPositiveException(java::lang::Number number_0);
							NotStrictlyPositiveException(util::Localizable localizable_0,java::lang::Number number_1);
							virtual ~NotStrictlyPositiveException();
						}; // end class NotStrictlyPositiveException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MathArithmeticException : public java::lang::ArithmeticException {
							public:
						            MathArithmeticException(jobject _jthis, bool copy);
						            MathArithmeticException(const MathArithmeticException &);
						        
							MathArithmeticException();
							virtual ~MathArithmeticException();
							jstring getMessage();
							jstring getLocalizedMessage();
							util::ExceptionContext getContext();
						}; // end class MathArithmeticException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NumberIsTooLargeException : public MathIllegalNumberException {
							public:
						            NumberIsTooLargeException(jobject _jthis, bool copy);
						            NumberIsTooLargeException(const NumberIsTooLargeException &);
						        
							NumberIsTooLargeException(util::Localizable localizable_0,java::lang::Number number_1,java::lang::Number number_2,jboolean boolean_3);
							NumberIsTooLargeException(java::lang::Number number_0,java::lang::Number number_1,jboolean boolean_2);
							virtual ~NumberIsTooLargeException();
							java::lang::Number getMax();
							jboolean getBoundIsAllowed();
						}; // end class NumberIsTooLargeException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class TooManyIterationsException : public MaxCountExceededException {
							public:
						            TooManyIterationsException(jobject _jthis, bool copy);
						            TooManyIterationsException(const TooManyIterationsException &);
						        
							TooManyIterationsException(java::lang::Number number_0);
							virtual ~TooManyIterationsException();
						}; // end class TooManyIterationsException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class TooManyEvaluationsException : public MaxCountExceededException {
							public:
						            TooManyEvaluationsException(jobject _jthis, bool copy);
						            TooManyEvaluationsException(const TooManyEvaluationsException &);
						        
							TooManyEvaluationsException(java::lang::Number number_0);
							virtual ~TooManyEvaluationsException();
						}; // end class TooManyEvaluationsException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NoDataException : public MathIllegalArgumentException {
							public:
						            NoDataException(jobject _jthis, bool copy);
						            NoDataException(const NoDataException &);
						        
							NoDataException();
							NoDataException(util::Localizable localizable_0);
							virtual ~NoDataException();
						}; // end class NoDataException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class NullArgumentException : public MathIllegalArgumentException {
							public:
						            NullArgumentException(jobject _jthis, bool copy);
						            NullArgumentException(const NullArgumentException &);
						        
							NullArgumentException();
							virtual ~NullArgumentException();
						}; // end class NullArgumentException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class ContinuedFraction : public java::lang::Object {
							public:
						            ContinuedFraction(jobject _jthis, bool copy);
						            ContinuedFraction(const ContinuedFraction &);
						        
							virtual ~ContinuedFraction();
							jdouble evaluate(jdouble double_0,jint int_1);
							jdouble evaluate(jdouble double_0,jdouble double_1);
							jdouble evaluate(jdouble double_0,jdouble double_1,jint int_2);
							jdouble evaluate(jdouble double_0);
						}; // end class ContinuedFraction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class CombinatoricsUtils : public java::lang::Object {
							public:
						            CombinatoricsUtils(jobject _jthis, bool copy);
						            CombinatoricsUtils(const CombinatoricsUtils &);
						        
							virtual ~CombinatoricsUtils();
							static void checkBinomial(jint int_0,jint int_1);
							static jlong stirlingS2(jint int_0,jint int_1);
							static jdouble factorialLog(jint int_0);
							static jdouble binomialCoefficientDouble(jint int_0,jint int_1);
							static jdouble binomialCoefficientLog(jint int_0,jint int_1);
							static jdouble factorialDouble(jint int_0);
							static jlong factorial(jint int_0);
							static jlong binomialCoefficient(jint int_0,jint int_1);
							static java::util::Iterator combinationsIterator(jint int_0,jint int_1);
						}; // end class CombinatoricsUtils
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class RandomPivotingStrategy : public java::lang::Object {
							public:
						            RandomPivotingStrategy(jobject _jthis, bool copy);
						            RandomPivotingStrategy(const RandomPivotingStrategy &);
						        
							RandomPivotingStrategy(random::RandomGenerator randomGenerator_0);
							virtual ~RandomPivotingStrategy();
							jint pivotIndex(jdoubleArray doubleArray_0,jint int_1,jint int_2);
						}; // end class RandomPivotingStrategy
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class BigRealField : public java::lang::Object {
							public:
						            BigRealField(jobject _jthis, bool copy);
						            BigRealField(const BigRealField &);
						        
							virtual ~BigRealField();
							BigReal getZero();
							BigReal getOne();
							static BigRealField getInstance();
						}; // end class BigRealField
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class ArithmeticUtils : public java::lang::Object {
							public:
						            ArithmeticUtils(jobject _jthis, bool copy);
						            ArithmeticUtils(const ArithmeticUtils &);
						        
							virtual ~ArithmeticUtils();
							static jint mulAndCheck(jint int_0,jint int_1);
							static jlong mulAndCheck(jlong long_0,jlong long_1);
							static jlong addAndCheck(jlong long_0,jlong long_1);
							static jint addAndCheck(jint int_0,jint int_1);
							static jint subAndCheck(jint int_0,jint int_1);
							static jlong subAndCheck(jlong long_0,jlong long_1);
							static jboolean isPowerOfTwo(jlong long_0);
							static jlong stirlingS2(jint int_0,jint int_1);
							static jlong gcd(jlong long_0,jlong long_1);
							static jint gcd(jint int_0,jint int_1);
							static jdouble factorialLog(jint int_0);
							static jint lcm(jint int_0,jint int_1);
							static jlong lcm(jlong long_0,jlong long_1);
							static jdouble binomialCoefficientDouble(jint int_0,jint int_1);
							static jdouble binomialCoefficientLog(jint int_0,jint int_1);
							static jdouble factorialDouble(jint int_0);
							static jlong factorial(jint int_0);
							static jlong binomialCoefficient(jint int_0,jint int_1);
							static java::math::BigInteger pow(java::math::BigInteger bigInteger_0,java::math::BigInteger bigInteger_1);
							static jint pow(jint int_0,jlong long_1);
							static jint pow(jint int_0,jint int_1);
							static jlong pow(jlong long_0,jint int_1);
							static jlong pow(jlong long_0,jlong long_1);
							static java::math::BigInteger pow(java::math::BigInteger bigInteger_0,jint int_1);
							static java::math::BigInteger pow(java::math::BigInteger bigInteger_0,jlong long_1);
						}; // end class ArithmeticUtils
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class ResizableDoubleArray : public java::lang::Object {
							public:
						            ResizableDoubleArray(jobject _jthis, bool copy);
						            ResizableDoubleArray(const ResizableDoubleArray &);
						        
							ResizableDoubleArray(jint int_0,jdouble double_1);
							ResizableDoubleArray(jint int_0,jfloat float_1,jfloat float_2);
							ResizableDoubleArray(jint int_0,jdouble double_1,jdouble double_2);
							ResizableDoubleArray(jint int_0,jfloat float_1,jfloat float_2,jint int_3);
							ResizableDoubleArray(jint int_0,jfloat float_1);
							ResizableDoubleArray(jdoubleArray doubleArray_0);
							ResizableDoubleArray(jint int_0);
							ResizableDoubleArray(ResizableDoubleArray resizableDoubleArray_0);
							ResizableDoubleArray(jint int_0,jdouble double_1,jdouble double_2,ResizableDoubleArray::ExpansionMode expansionMode_3,jdoubleArray doubleArray_4);
							ResizableDoubleArray();
							virtual ~ResizableDoubleArray();
							jdouble getElement(jint int_0);
							jdouble addElementRolling(jdouble double_0);
							void discardMostRecentElements(jint int_0);
							jdouble substituteMostRecentElement(jdouble double_0);
							jint getNumElements();
							void discardFrontElements(jint int_0);
							jdoubleArray getElements();
							void addElements(jdoubleArray doubleArray_0);
							void setElement(jint int_0,jdouble double_1);
							void contract();
							jfloat getContractionCriteria();
							jdouble getContractionCriterion();
							jfloat getExpansionFactor();
							jint getExpansionMode();
							jint getCapacity();
							jdoubleArray getInternalValues();
							void setContractionCriteria(jfloat float_0);
							void setExpansionFactor(jfloat float_0);
							void setExpansionMode(ResizableDoubleArray::ExpansionMode expansionMode_0);
							void setExpansionMode(jint int_0);
							void setNumElements(jint int_0);
							jint hashCode();
							void clear();
							void addElement(jdouble double_0);
							jint start();
							jdouble compute(MathArrays::Function function_0);
							ResizableDoubleArray copy();
							static void copy(ResizableDoubleArray resizableDoubleArray_0,ResizableDoubleArray resizableDoubleArray_1);
						}; // end class ResizableDoubleArray
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class OpenIntToDoubleHashMap : public java::lang::Object {
							public:
						            OpenIntToDoubleHashMap(jobject _jthis, bool copy);
						            OpenIntToDoubleHashMap(const OpenIntToDoubleHashMap &);
						        
							OpenIntToDoubleHashMap();
							OpenIntToDoubleHashMap(jint int_0);
							OpenIntToDoubleHashMap(OpenIntToDoubleHashMap openIntToDoubleHashMap_0);
							OpenIntToDoubleHashMap(jdouble double_0);
							OpenIntToDoubleHashMap(jint int_0,jdouble double_1);
							virtual ~OpenIntToDoubleHashMap();
							jdouble remove(jint int_0);
							jdouble get(jint int_0);
							jdouble put(jint int_0,jdouble double_1);
							jint size();
							OpenIntToDoubleHashMap::Iterator iterator();
							jboolean containsKey(jint int_0);
						}; // end class OpenIntToDoubleHashMap
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class DefaultTransformer : public java::lang::Object {
							public:
						            DefaultTransformer(jobject _jthis, bool copy);
						            DefaultTransformer(const DefaultTransformer &);
						        
							DefaultTransformer();
							virtual ~DefaultTransformer();
							jint hashCode();
						}; // end class DefaultTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						
						class IterationManager : public java::lang::Object {
							public:
						            IterationManager(jobject _jthis, bool copy);
						            IterationManager(const IterationManager &);
						        
							IterationManager(jint int_0);
							virtual ~IterationManager();
							jint getIterations();
							jint getMaxIterations();
							void incrementIterationCount();
							void addIterationListener(IterationListener iterationListener_0);
							void resetIterationCount();
							void fireInitializationEvent(IterationEvent iterationEvent_0);
							void fireTerminationEvent(IterationEvent iterationEvent_0);
							void fireIterationStartedEvent(IterationEvent iterationEvent_0);
							void fireIterationPerformedEvent(IterationEvent iterationEvent_0);
							void removeIterationListener(IterationListener iterationListener_0);
						}; // end class IterationManager
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace util

	namespace crcl{
		namespace base{
			
			class TransSpeedAbsoluteType : public TransSpeedType {
				public:
			            TransSpeedAbsoluteType(jobject _jthis, bool copy);
			            TransSpeedAbsoluteType(const TransSpeedAbsoluteType &);
			        
				TransSpeedAbsoluteType();
				virtual ~TransSpeedAbsoluteType();
				java::math::BigDecimal getSetting();
				void setSetting(java::math::BigDecimal bigDecimal_0);
			}; // end class TransSpeedAbsoluteType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class PoseToleranceType : public DataThingType {
				public:
			            PoseToleranceType(jobject _jthis, bool copy);
			            PoseToleranceType(const PoseToleranceType &);
			        
				PoseToleranceType();
				virtual ~PoseToleranceType();
				java::math::BigDecimal getZAxisTolerance();
				void setZAxisTolerance(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getXPointTolerance();
				void setXPointTolerance(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getYPointTolerance();
				void setYPointTolerance(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getZPointTolerance();
				void setZPointTolerance(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getXAxisTolerance();
				void setXAxisTolerance(java::math::BigDecimal bigDecimal_0);
			}; // end class PoseToleranceType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class StopMotionType : public MiddleCommandType {
				public:
			            StopMotionType(jobject _jthis, bool copy);
			            StopMotionType(const StopMotionType &);
			        
				StopMotionType();
				virtual ~StopMotionType();
				StopConditionEnumType getStopCondition();
				void setStopCondition(StopConditionEnumType stopConditionEnumType_0);
			}; // end class StopMotionType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class ConfigureJointReportsType : public MiddleCommandType {
				public:
			            ConfigureJointReportsType(jobject _jthis, bool copy);
			            ConfigureJointReportsType(const ConfigureJointReportsType &);
			        
				ConfigureJointReportsType();
				virtual ~ConfigureJointReportsType();
				jboolean isResetAll();
				void setResetAll(jboolean boolean_0);
				java::util::List getConfigureJointReport();
			}; // end class ConfigureJointReportsType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class CRCLCommandInstanceType : public DataThingType {
				public:
			            CRCLCommandInstanceType(jobject _jthis, bool copy);
			            CRCLCommandInstanceType(const CRCLCommandInstanceType &);
			        
				CRCLCommandInstanceType();
				virtual ~CRCLCommandInstanceType();
				CRCLCommandType getCRCLCommand();
				void setCRCLCommand(CRCLCommandType cRCLCommandType_0);
			}; // end class CRCLCommandInstanceType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetRotSpeedType : public MiddleCommandType {
				public:
			            SetRotSpeedType(jobject _jthis, bool copy);
			            SetRotSpeedType(const SetRotSpeedType &);
			        
				SetRotSpeedType();
				virtual ~SetRotSpeedType();
				RotSpeedType getRotSpeed();
				void setRotSpeed(RotSpeedType rotSpeedType_0);
			}; // end class SetRotSpeedType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class ParallelGripperStatusType : public GripperStatusType {
				public:
			            ParallelGripperStatusType(jobject _jthis, bool copy);
			            ParallelGripperStatusType(const ParallelGripperStatusType &);
			        
				ParallelGripperStatusType();
				virtual ~ParallelGripperStatusType();
				java::math::BigDecimal getSeparation();
				void setSeparation(java::math::BigDecimal bigDecimal_0);
			}; // end class ParallelGripperStatusType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class LengthUnitEnumType : public java::lang::Enum {
				public:
			            LengthUnitEnumType(jobject _jthis, bool copy);
			            LengthUnitEnumType(const LengthUnitEnumType &);
			        
				virtual ~LengthUnitEnumType();
				static LengthUnitEnumType fromValue(jstring string_0);
				jstring value();
				static jobjectArray values();
				static LengthUnitEnumType valueOf(jstring string_0);
			}; // end class LengthUnitEnumType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class SetEndEffectorParametersType : public MiddleCommandType {
				public:
			            SetEndEffectorParametersType(jobject _jthis, bool copy);
			            SetEndEffectorParametersType(const SetEndEffectorParametersType &);
			        
				SetEndEffectorParametersType();
				virtual ~SetEndEffectorParametersType();
				java::util::List getParameterSetting();
			}; // end class SetEndEffectorParametersType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class ThreeFingerGripperStatusType : public GripperStatusType {
				public:
			            ThreeFingerGripperStatusType(jobject _jthis, bool copy);
			            ThreeFingerGripperStatusType(const ThreeFingerGripperStatusType &);
			        
				ThreeFingerGripperStatusType();
				virtual ~ThreeFingerGripperStatusType();
				java::math::BigDecimal getFinger1Position();
				void setFinger1Position(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getFinger2Position();
				void setFinger2Position(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getFinger1Force();
				java::math::BigDecimal getFinger3Position();
				void setFinger3Position(java::math::BigDecimal bigDecimal_0);
				void setFinger1Force(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getFinger2Force();
				void setFinger2Force(java::math::BigDecimal bigDecimal_0);
				java::math::BigDecimal getFinger3Force();
				void setFinger3Force(java::math::BigDecimal bigDecimal_0);
			}; // end class ThreeFingerGripperStatusType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class ExtensionFileComparator : public AbstractFileComparator {
							public:
						            ExtensionFileComparator(jobject _jthis, bool copy);
						            ExtensionFileComparator(const ExtensionFileComparator &);
						        
							ExtensionFileComparator();
							ExtensionFileComparator(IOCase iOCase_0);
							virtual ~ExtensionFileComparator();
							jstring toString();
							jint compare(java::io::File file_0,java::io::File file_1);
						}; // end class ExtensionFileComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class DirectoryWalker : public java::lang::Object {
						public:
					            DirectoryWalker(jobject _jthis, bool copy);
					            DirectoryWalker(const DirectoryWalker &);
					        
						virtual ~DirectoryWalker();
					}; // end class DirectoryWalker
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class FileExistsException : public java::io::IOException {
						public:
					            FileExistsException(jobject _jthis, bool copy);
					            FileExistsException(const FileExistsException &);
					        
						FileExistsException();
						FileExistsException(jstring string_0);
						FileExistsException(java::io::File file_0);
						virtual ~FileExistsException();
					}; // end class FileExistsException
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class DirectoryFileFilter : public AbstractFileFilter {
							public:
						            DirectoryFileFilter(jobject _jthis, bool copy);
						            DirectoryFileFilter(const DirectoryFileFilter &);
						        
							virtual ~DirectoryFileFilter();
							jboolean accept(java::io::File file_0);
						}; // end class DirectoryFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class NameFileFilter : public AbstractFileFilter {
							public:
						            NameFileFilter(jobject _jthis, bool copy);
						            NameFileFilter(const NameFileFilter &);
						        
							NameFileFilter(java::util::List list_0,IOCase iOCase_1);
							NameFileFilter(java::util::List list_0);
							NameFileFilter(jobjectArray stringArray_0,IOCase iOCase_1);
							NameFileFilter(jstring string_0);
							NameFileFilter(jstring string_0,IOCase iOCase_1);
							NameFileFilter(jobjectArray stringArray_0);
							virtual ~NameFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0,jstring string_1);
							jboolean accept(java::io::File file_0);
						}; // end class NameFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class ClosedOutputStream : public java::io::OutputStream {
							public:
						            ClosedOutputStream(jobject _jthis, bool copy);
						            ClosedOutputStream(const ClosedOutputStream &);
						        
							ClosedOutputStream();
							virtual ~ClosedOutputStream();
							void write(jint int_0);
						}; // end class ClosedOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class DemuxOutputStream : public java::io::OutputStream {
							public:
						            DemuxOutputStream(jobject _jthis, bool copy);
						            DemuxOutputStream(const DemuxOutputStream &);
						        
							DemuxOutputStream();
							virtual ~DemuxOutputStream();
							java::io::OutputStream bindStream(java::io::OutputStream outputStream_0);
							void write(jint int_0);
							void flush();
							void close();
						}; // end class DemuxOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class LockableFileWriter : public java::io::Writer {
							public:
						            LockableFileWriter(jobject _jthis, bool copy);
						            LockableFileWriter(const LockableFileWriter &);
						        
							LockableFileWriter(java::io::File file_0,jstring string_1);
							LockableFileWriter(java::io::File file_0,java::nio::charset::Charset charset_1,jboolean boolean_2,jstring string_3);
							LockableFileWriter(java::io::File file_0,jstring string_1,jboolean boolean_2,jstring string_3);
							LockableFileWriter(jstring string_0);
							LockableFileWriter(jstring string_0,jboolean boolean_1);
							LockableFileWriter(jstring string_0,jboolean boolean_1,jstring string_2);
							LockableFileWriter(java::io::File file_0);
							LockableFileWriter(java::io::File file_0,java::nio::charset::Charset charset_1);
							LockableFileWriter(java::io::File file_0,jboolean boolean_1,jstring string_2);
							LockableFileWriter(java::io::File file_0,jboolean boolean_1);
							virtual ~LockableFileWriter();
							void write(jcharArray charArray_0);
							void write(jcharArray charArray_0,jint int_1,jint int_2);
							void write(jstring string_0);
							void write(jint int_0);
							void write(jstring string_0,jint int_1,jint int_2);
							void flush();
							void close();
						}; // end class LockableFileWriter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class TaggedIOException : public IOExceptionWithCause {
						public:
					            TaggedIOException(jobject _jthis, bool copy);
					            TaggedIOException(const TaggedIOException &);
					        
						TaggedIOException(java::io::IOException iOException_0,java::io::Serializable serializable_1);
						virtual ~TaggedIOException();
						java::io::Serializable getTag();
						java::io::IOException getCause();
					}; // end class TaggedIOException
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace dom{
							
							class DOMWriter : public java::lang::Object {
								public:
							            DOMWriter(jobject _jthis, bool copy);
							            DOMWriter(const DOMWriter &);
							        
								DOMWriter(EXIFactory eXIFactory_0);
								virtual ~DOMWriter();
								void setOutput(java::io::OutputStream outputStream_0);
								void encodeFragment(org::w3c::dom::DocumentFragment documentFragment_0);
								void encode(org::w3c::dom::Document document_0);
								void encode(org::w3c::dom::Node node_0);
							}; // end class DOMWriter
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace dom

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							
							class EXIResult : public javax::xml::transform::sax::SAXResult {
								public:
							            EXIResult(jobject _jthis, bool copy);
							            EXIResult(const EXIResult &);
							        
								EXIResult(EXIFactory eXIFactory_0);
								EXIResult();
								virtual ~EXIResult();
								void setOutputStream(java::io::OutputStream outputStream_0);
							}; // end class EXIResult
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							
							class EXISource : public javax::xml::transform::sax::SAXSource {
								public:
							            EXISource(jobject _jthis, bool copy);
							            EXISource(const EXISource &);
							        
								EXISource();
								EXISource(EXIFactory eXIFactory_0);
								virtual ~EXISource();
							}; // end class EXISource
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace sax{
							
							class SAXDecoder : public java::lang::Object {
								public:
							            SAXDecoder(jobject _jthis, bool copy);
							            SAXDecoder(const SAXDecoder &);
							        
								SAXDecoder(EXIFactory eXIFactory_0);
								virtual ~SAXDecoder();
								org::xml::sax::ContentHandler getContentHandler();
								jboolean getFeature(jstring string_0);
								void setFeature(jstring string_0,jboolean boolean_1);
								void setEntityResolver(org::xml::sax::EntityResolver entityResolver_0);
								org::xml::sax::EntityResolver getEntityResolver();
								void setDTDHandler(org::xml::sax::DTDHandler dTDHandler_0);
								org::xml::sax::DTDHandler getDTDHandler();
								void setContentHandler(org::xml::sax::ContentHandler contentHandler_0);
								org::xml::sax::ErrorHandler getErrorHandler();
								void setErrorHandler(org::xml::sax::ErrorHandler errorHandler_0);
								void parse(jstring string_0);
								void parse(org::xml::sax::InputSource inputSource_0);
							}; // end class SAXDecoder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace sax

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace stream{
							
							class EmptyLocation : public java::lang::Object {
								public:
							            EmptyLocation(jobject _jthis, bool copy);
							            EmptyLocation(const EmptyLocation &);
							        
								virtual ~EmptyLocation();
								jint getCharacterOffset();
								jint getColumnNumber();
								jstring getSystemId();
								jstring getPublicId();
								static EmptyLocation getInstance();
								jint getLineNumber();
							}; // end class EmptyLocation
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace stream

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace stream{
							
							class StAXEncoder : public java::lang::Object {
								public:
							            StAXEncoder(jobject _jthis, bool copy);
							            StAXEncoder(const StAXEncoder &);
							        
								StAXEncoder(EXIFactory eXIFactory_0);
								virtual ~StAXEncoder();
								void setPrefix(jstring string_0,jstring string_1);
								javax::xml::namespace::NamespaceContext getNamespaceContext();
								void writeStartElement(jstring string_0);
								void writeStartElement(jstring string_0,jstring string_1,jstring string_2);
								void writeStartElement(jstring string_0,jstring string_1);
								void writeEmptyElement(jstring string_0);
								void writeEmptyElement(jstring string_0,jstring string_1);
								void writeEmptyElement(jstring string_0,jstring string_1,jstring string_2);
								void writeEndElement();
								void writeEndDocument();
								void writeAttribute(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
								void writeAttribute(jstring string_0,jstring string_1,jstring string_2);
								void writeAttribute(jstring string_0,jstring string_1);
								void writeNamespace(jstring string_0,jstring string_1);
								void writeDefaultNamespace(jstring string_0);
								void writeComment(jstring string_0);
								void writeProcessingInstruction(jstring string_0,jstring string_1);
								void writeProcessingInstruction(jstring string_0);
								void writeCData(jstring string_0);
								void writeDTD(jstring string_0);
								void writeEntityRef(jstring string_0);
								void writeStartDocument(jstring string_0,jstring string_1);
								void writeStartDocument();
								void writeStartDocument(jstring string_0);
								void writeCharacters(jcharArray charArray_0,jint int_1,jint int_2);
								void writeCharacters(jstring string_0);
								void setDefaultNamespace(jstring string_0);
								void setNamespaceContext(javax::xml::namespace::NamespaceContext namespaceContext_0);
								jstring getPrefix(jstring string_0);
								void setOutputStream(java::io::OutputStream outputStream_0);
								void encode(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
								void encode(javax::xml::stream::XMLEventReader xMLEventReader_0);
								void flush();
								void close();
							}; // end class StAXEncoder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace stream

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						
						class AttributeFactory : public java::lang::Object {
							public:
						            AttributeFactory(jobject _jthis, bool copy);
						            AttributeFactory(const AttributeFactory &);
						        
							virtual ~AttributeFactory();
							AttributeList createAttributeListInstance(EXIFactory eXIFactory_0);
							static AttributeFactory newInstance();
						}; // end class AttributeFactory
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						
						class AttributeList : public java::lang::Object {
							public:
						            AttributeList(jobject _jthis, bool copy);
						            AttributeList(const AttributeList &);
						        
							AttributeList();
							virtual ~AttributeList();
						}; // end class AttributeList
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace attributes{
						
						class AttributeListSchemaLess : public AbstractAttributeList {
							public:
						            AttributeListSchemaLess(jobject _jthis, bool copy);
						            AttributeListSchemaLess(const AttributeListSchemaLess &);
						        
							AttributeListSchemaLess(EXIFactory eXIFactory_0);
							virtual ~AttributeListSchemaLess();
						}; // end class AttributeListSchemaLess
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace attributes

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace cmd{
						
						class CmdOption : public java::lang::Enum {
							public:
						            CmdOption(jobject _jthis, bool copy);
						            CmdOption(const CmdOption &);
						        
							virtual ~CmdOption();
							static jobjectArray values();
							static CmdOption valueOf(jstring string_0);
						}; // end class CmdOption
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace cmd

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace cmd{
						
						class EXIficientCMD : public java::lang::Object {
							public:
						            EXIficientCMD(jobject _jthis, bool copy);
						            EXIficientCMD(const EXIficientCMD &);
						        
							EXIficientCMD();
							virtual ~EXIficientCMD();
							static void main(jobjectArray stringArray_0);
							static void main(int argc,const char **argv);
						}; // end class EXIficientCMD
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace cmd

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace context{
						
						class QNameContext : public java::lang::Object {
							public:
						            QNameContext(jobject _jthis, bool copy);
						            QNameContext(const QNameContext &);
						        
							QNameContext(jint int_0,jint int_1,javax::xml::namespace::QName qName_2,jint int_3);
							virtual ~QNameContext();
							javax::xml::namespace::QName getQName();
							jstring getDefaultQNameAsString();
							jstring getDefaultPrefix();
							jint getQNameID();
							jint getLocalNameID();
							jstring getLocalName();
							void setGlobalStartElement(grammars::event::StartElement startElement_0);
							grammars::event::StartElement getGlobalStartElement();
							void setGlobalAttribute(grammars::event::Attribute attribute_0);
							grammars::event::Attribute getGlobalAttribute();
							void setTypeGrammar(grammars::grammar::SchemaInformedFirstStartTagGrammar schemaInformedFirstStartTagGrammar_0);
							grammars::grammar::SchemaInformedFirstStartTagGrammar getTypeGrammar();
							jint getNamespaceUriID();
							jstring getNamespaceUri();
							jstring toString();
							virtual jint hashCode();
						}; // end class QNameContext
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace context

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class EXIBodyDecoderInOrderSC : public EXIBodyDecoderInOrder {
							public:
						            EXIBodyDecoderInOrderSC(jobject _jthis, bool copy);
						            EXIBodyDecoderInOrderSC(const EXIBodyDecoderInOrderSC &);
						        
							EXIBodyDecoderInOrderSC(EXIFactory eXIFactory_0);
							virtual ~EXIBodyDecoderInOrderSC();
							void decodeEndDocument();
							context::QNameContext decodeStartElement();
							jstring getElementQNameAsString();
							void decodeStartSelfContainedFragment();
							context::QNameContext decodeAttributeXsiNil();
							context::QNameContext decodeAttributeXsiType();
							context::QNameContext decodeAttribute();
							jstring getAttributePrefix();
							jstring getAttributeQNameAsString();
							values::Value decodeCharacters();
							jstring getElementPrefix();
							void decodeStartDocument();
							context::QNameContext decodeEndElement();
							values::Value getAttributeValue();
							container::NamespaceDeclaration decodeNamespaceDeclaration();
							java::util::List getDeclaredPrefixDeclarations();
							container::DocType decodeDocType();
							jcharArray decodeEntityReference();
							jcharArray decodeComment();
							container::ProcessingInstruction decodeProcessingInstruction();
							grammars::event::EventType next();
						}; // end class EXIBodyDecoderInOrderSC
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace core{
						
						class EXIBodyDecoderReordered : public AbstractEXIBodyDecoder {
							public:
						            EXIBodyDecoderReordered(jobject _jthis, bool copy);
						            EXIBodyDecoderReordered(const EXIBodyDecoderReordered &);
						        
							EXIBodyDecoderReordered(EXIFactory eXIFactory_0);
							virtual ~EXIBodyDecoderReordered();
							void decodeEndDocument();
							context::QNameContext decodeStartElement();
							jstring getElementQNameAsString();
							context::QNameContext decodeAttributeXsiNil();
							context::QNameContext decodeAttributeXsiType();
							context::QNameContext decodeAttribute();
							values::Value decodeCharacters();
							void setInputStream(java::io::InputStream inputStream_0);
							void setInputChannel(io::channel::DecoderChannel decoderChannel_0);
							jstring getElementPrefix();
							void updateInputStream(java::io::InputStream inputStream_0);
							void updateInputChannel(io::channel::DecoderChannel decoderChannel_0);
							void decodeStartDocument();
							context::QNameContext decodeEndElement();
							container::NamespaceDeclaration decodeNamespaceDeclaration();
							java::util::List getDeclaredPrefixDeclarations();
							container::DocType decodeDocType();
							jcharArray decodeEntityReference();
							jcharArray decodeComment();
							container::ProcessingInstruction decodeProcessingInstruction();
							values::Value decodeCharactersGeneric();
							values::Value decodeCharactersGenericUndeclared();
							io::channel::DecoderChannel getNextChannel();
							grammars::event::EventType next();
						}; // end class EXIBodyDecoderReordered
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace core

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class BinaryBase64Datatype : public AbstractBinaryDatatype {
							public:
						            BinaryBase64Datatype(jobject _jthis, bool copy);
						            BinaryBase64Datatype(const BinaryBase64Datatype &);
						        
							BinaryBase64Datatype(context::QNameContext qNameContext_0);
							virtual ~BinaryBase64Datatype();
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
						}; // end class BinaryBase64Datatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class BooleanFacetDatatype : public AbstractDatatype {
							public:
						            BooleanFacetDatatype(jobject _jthis, bool copy);
						            BooleanFacetDatatype(const BooleanFacetDatatype &);
						        
							BooleanFacetDatatype(context::QNameContext qNameContext_0);
							virtual ~BooleanFacetDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
						}; // end class BooleanFacetDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class XSDBase64CharacterSet : public AbstractRestrictedCharacterSet {
								public:
							            XSDBase64CharacterSet(jobject _jthis, bool copy);
							            XSDBase64CharacterSet(const XSDBase64CharacterSet &);
							        
								XSDBase64CharacterSet();
								virtual ~XSDBase64CharacterSet();
							}; // end class XSDBase64CharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class XSDDecimalCharacterSet : public AbstractRestrictedCharacterSet {
								public:
							            XSDDecimalCharacterSet(jobject _jthis, bool copy);
							            XSDDecimalCharacterSet(const XSDDecimalCharacterSet &);
							        
								XSDDecimalCharacterSet();
								virtual ~XSDDecimalCharacterSet();
							}; // end class XSDDecimalCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class XSDHexBinaryCharacterSet : public AbstractRestrictedCharacterSet {
								public:
							            XSDHexBinaryCharacterSet(jobject _jthis, bool copy);
							            XSDHexBinaryCharacterSet(const XSDHexBinaryCharacterSet &);
							        
								XSDHexBinaryCharacterSet();
								virtual ~XSDHexBinaryCharacterSet();
							}; // end class XSDHexBinaryCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace charset{
							
							class XSDStringCharacterSet : public AbstractRestrictedCharacterSet {
								public:
							            XSDStringCharacterSet(jobject _jthis, bool copy);
							            XSDStringCharacterSet(const XSDStringCharacterSet &);
							        
								XSDStringCharacterSet();
								virtual ~XSDStringCharacterSet();
							}; // end class XSDStringCharacterSet
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace charset

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class DatatypeID : public java::lang::Enum {
							public:
						            DatatypeID(jobject _jthis, bool copy);
						            DatatypeID(const DatatypeID &);
						        
							virtual ~DatatypeID();
							static jobjectArray values();
							static DatatypeID valueOf(jstring string_0);
						}; // end class DatatypeID
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class DatetimeDatatype : public AbstractDatatype {
							public:
						            DatetimeDatatype(jobject _jthis, bool copy);
						            DatetimeDatatype(const DatetimeDatatype &);
						        
							DatetimeDatatype(types::DateTimeType dateTimeType_0,context::QNameContext qNameContext_1);
							virtual ~DatetimeDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
							types::DateTimeType getDatetimeType();
						}; // end class DatetimeDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class EnumerationDatatype : public AbstractDatatype {
							public:
						            EnumerationDatatype(jobject _jthis, bool copy);
						            EnumerationDatatype(const EnumerationDatatype &);
						        
							EnumerationDatatype(jobjectArray valueArray_0,Datatype datatype_1,context::QNameContext qNameContext_2);
							virtual ~EnumerationDatatype();
							jboolean isValid(values::Value value_0);
							values::Value getEnumValue(jint int_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
							jint getCodingLength();
							Datatype getEnumValueDatatype();
							jint getEnumerationSize();
						}; // end class EnumerationDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class ListDatatype : public AbstractDatatype {
							public:
						            ListDatatype(jobject _jthis, bool copy);
						            ListDatatype(const ListDatatype &);
						        
							ListDatatype(Datatype datatype_0,context::QNameContext qNameContext_1);
							virtual ~ListDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
							Datatype getListDatatype();
						}; // end class ListDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						
						class RestrictedCharacterSetDatatype : public AbstractDatatype {
							public:
						            RestrictedCharacterSetDatatype(jobject _jthis, bool copy);
						            RestrictedCharacterSetDatatype(const RestrictedCharacterSetDatatype &);
						        
							RestrictedCharacterSetDatatype(charset::RestrictedCharacterSet restrictedCharacterSet_0,context::QNameContext qNameContext_1);
							virtual ~RestrictedCharacterSetDatatype();
							jboolean isValid(values::Value value_0);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,strings::StringEncoder stringEncoder_2);
							DatatypeID getDatatypeID();
							values::Value readValue(context::QNameContext qNameContext_0,io::channel::DecoderChannel decoderChannel_1,strings::StringDecoder stringDecoder_2);
							charset::RestrictedCharacterSet getRestrictedCharacterSet();
						}; // end class RestrictedCharacterSetDatatype
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace datatype

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							
							class BoundedStringDecoderImpl : public StringDecoderImpl {
								public:
							            BoundedStringDecoderImpl(jobject _jthis, bool copy);
							            BoundedStringDecoderImpl(const BoundedStringDecoderImpl &);
							        
								BoundedStringDecoderImpl(jboolean boolean_0,jint int_1,jint int_2);
								virtual ~BoundedStringDecoderImpl();
								void addValue(context::QNameContext qNameContext_0,values::StringValue stringValue_1);
								void clear();
							}; // end class BoundedStringDecoderImpl
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace datatype{
						namespace strings{
							
							class StringCoder : public java::lang::Object {
								public:
							            StringCoder(jobject _jthis, bool copy);
							            StringCoder(const StringCoder &);
							        
								StringCoder();
								virtual ~StringCoder();
							}; // end class StringCoder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace datatype
	} // end namespace strings

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class DecodingOptions : public java::lang::Object {
						public:
					            DecodingOptions(jobject _jthis, bool copy);
					            DecodingOptions(const DecodingOptions &);
					        
						virtual ~DecodingOptions();
						static DecodingOptions createDefault();
						jboolean isOptionEnabled(jstring string_0);
						void setOption(jstring string_0);
						jboolean unsetOption(jstring string_0);
						jstring toString();
						jint hashCode();
					}; // end class DecodingOptions
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace exceptions{
						
						class ErrorHandler : public java::lang::Object {
							public:
						            ErrorHandler(jobject _jthis, bool copy);
						            ErrorHandler(const ErrorHandler &);
						        
							ErrorHandler();
							virtual ~ErrorHandler();
						}; // end class ErrorHandler
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace exceptions

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace exceptions{
						
						class UnsupportedOption : public EXIException {
							public:
						            UnsupportedOption(jobject _jthis, bool copy);
						            UnsupportedOption(const UnsupportedOption &);
						        
							UnsupportedOption(jstring string_0);
							virtual ~UnsupportedOption();
						}; // end class UnsupportedOption
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace exceptions

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace exceptions{
						
						class XMLParsingException : public EXIException {
							public:
						            XMLParsingException(jobject _jthis, bool copy);
						            XMLParsingException(const XMLParsingException &);
						        
							XMLParsingException(jstring string_0);
							virtual ~XMLParsingException();
						}; // end class XMLParsingException
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace exceptions

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class EXIBodyEncoder : public java::lang::Object {
						public:
					            EXIBodyEncoder(jobject _jthis, bool copy);
					            EXIBodyEncoder(const EXIBodyEncoder &);
					        
						EXIBodyEncoder();
						virtual ~EXIBodyEncoder();
					}; // end class EXIBodyEncoder
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class EXIStreamDecoder : public java::lang::Object {
						public:
					            EXIStreamDecoder(jobject _jthis, bool copy);
					            EXIStreamDecoder(const EXIStreamDecoder &);
					        
						EXIStreamDecoder(EXIFactory eXIFactory_0);
						virtual ~EXIStreamDecoder();
						EXIBodyDecoder getBodyOnlyDecoder(java::io::InputStream inputStream_0);
						EXIBodyDecoder decodeHeader(java::io::InputStream inputStream_0);
					}; // end class EXIStreamDecoder
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					
					class FidelityOptions : public java::lang::Object {
						public:
					            FidelityOptions(jobject _jthis, bool copy);
					            FidelityOptions(const FidelityOptions &);
					        
						virtual ~FidelityOptions();
						static FidelityOptions createDefault();
						static FidelityOptions createStrict();
						static FidelityOptions createAll();
						void setFidelity(jstring string_0,jboolean boolean_1);
						jboolean isFidelityEnabled(jstring string_0);
						jstring toString();
						jint hashCode();
						virtual jboolean isStrict();
					}; // end class FidelityOptions
				} // end namespace com
			} // end namespace siemens
		} // end namespace ct
	} // end namespace exi

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class Attribute : public AbstractDatatypeEvent {
								public:
							            Attribute(jobject _jthis, bool copy);
							            Attribute(const Attribute &);
							        
								Attribute(context::QNameContext qNameContext_0,datatype::Datatype datatype_1);
								Attribute(context::QNameContext qNameContext_0);
								virtual ~Attribute();
								javax::xml::namespace::QName getQName();
								context::QNameContext getQNameContext();
								jstring toString();
								jint hashCode();
							}; // end class Attribute
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class Characters : public AbstractDatatypeEvent {
								public:
							            Characters(jobject _jthis, bool copy);
							            Characters(const Characters &);
							        
								Characters(datatype::Datatype datatype_0);
								virtual ~Characters();
							}; // end class Characters
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class CharactersGeneric : public AbstractDatatypeEvent {
								public:
							            CharactersGeneric(jobject _jthis, bool copy);
							            CharactersGeneric(const CharactersGeneric &);
							        
								CharactersGeneric();
								virtual ~CharactersGeneric();
							}; // end class CharactersGeneric
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class DatatypeEvent : public java::lang::Object {
								public:
							            DatatypeEvent(jobject _jthis, bool copy);
							            DatatypeEvent(const DatatypeEvent &);
							        
								DatatypeEvent();
								virtual ~DatatypeEvent();
							}; // end class DatatypeEvent
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class EndDocument : public AbstractEvent {
								public:
							            EndDocument(jobject _jthis, bool copy);
							            EndDocument(const EndDocument &);
							        
								EndDocument();
								virtual ~EndDocument();
							}; // end class EndDocument
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace grammars{
						namespace event{
							
							class EntityReference : public AbstractEvent {
								public:
							            EntityReference(jobject _jthis, bool copy);
							            EntityReference(const EntityReference &);
							        
								EntityReference();
								virtual ~EntityReference();
							}; // end class EntityReference
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace grammars
	} // end namespace event

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						
						class FragmentUtilities : public java::lang::Object {
							public:
						            FragmentUtilities(jobject _jthis, bool copy);
						            FragmentUtilities(const FragmentUtilities &);
						        
							FragmentUtilities();
							virtual ~FragmentUtilities();
							static java::io::InputStream getSurroundingRootInputStream(java::io::InputStream inputStream_0);
						}; // end class FragmentUtilities
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						namespace xml{
							
							class QNameUtilities : public java::lang::Object {
								public:
							            QNameUtilities(jobject _jthis, bool copy);
							            QNameUtilities(const QNameUtilities &);
							        
								QNameUtilities();
								virtual ~QNameUtilities();
								static jstring getLocalPart(jstring string_0);
								static jstring getPrefixPart(jstring string_0);
								static jstring getQualifiedName(jstring string_0,jstring string_1);
								static jstring getClassName(javax::xml::namespace::QName qName_0);
							}; // end class QNameUtilities
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace util
	} // end namespace xml

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLBaseElementImpl : public HTMLElementImpl {
						public:
					            HTMLBaseElementImpl(jobject _jthis, bool copy);
					            HTMLBaseElementImpl(const HTMLBaseElementImpl &);
					        
						HTMLBaseElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLBaseElementImpl();
						jstring getHref();
						void setHref(jstring string_0);
						jstring getTarget();
						void setTarget(jstring string_0);
					}; // end class HTMLBaseElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLDirectoryElementImpl : public HTMLElementImpl {
						public:
					            HTMLDirectoryElementImpl(jobject _jthis, bool copy);
					            HTMLDirectoryElementImpl(const HTMLDirectoryElementImpl &);
					        
						HTMLDirectoryElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLDirectoryElementImpl();
						jboolean getCompact();
						void setCompact(jboolean boolean_0);
					}; // end class HTMLDirectoryElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLFrameElementImpl : public HTMLElementImpl {
						public:
					            HTMLFrameElementImpl(jobject _jthis, bool copy);
					            HTMLFrameElementImpl(const HTMLFrameElementImpl &);
					        
						HTMLFrameElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLFrameElementImpl();
						jstring getLongDesc();
						void setLongDesc(jstring string_0);
						jstring getSrc();
						void setSrc(jstring string_0);
						jboolean getNoResize();
						void setNoResize(jboolean boolean_0);
						jstring getFrameBorder();
						void setFrameBorder(jstring string_0);
						jstring getMarginHeight();
						void setMarginHeight(jstring string_0);
						jstring getMarginWidth();
						void setMarginWidth(jstring string_0);
						jstring getScrolling();
						void setScrolling(jstring string_0);
						jstring getName();
						void setName(jstring string_0);
					}; // end class HTMLFrameElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLInputElementImpl : public HTMLElementImpl {
						public:
					            HTMLInputElementImpl(jobject _jthis, bool copy);
					            HTMLInputElementImpl(const HTMLInputElementImpl &);
					        
						HTMLInputElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLInputElementImpl();
						void select();
						jstring getAccessKey();
						void setAccessKey(jstring string_0);
						jint getTabIndex();
						void setTabIndex(jint int_0);
						void blur();
						void focus();
						jstring getAlign();
						void setAlign(jstring string_0);
						jstring getAlt();
						void setAlt(jstring string_0);
						jstring getSrc();
						void setSrc(jstring string_0);
						jstring getUseMap();
						void setUseMap(jstring string_0);
						jboolean getDisabled();
						void setDisabled(jboolean boolean_0);
						void setDefaultValue(jstring string_0);
						jboolean getDefaultChecked();
						void setDefaultChecked(jboolean boolean_0);
						jstring getAccept();
						void setAccept(jstring string_0);
						jboolean getChecked();
						void setChecked(jboolean boolean_0);
						void click();
						jboolean getReadOnly();
						void setMaxLength(jint int_0);
						jint getMaxLength();
						jstring getName();
						jstring getValue();
						void setReadOnly(jboolean boolean_0);
						void setName(jstring string_0);
						void setValue(jstring string_0);
						jstring getType();
						jstring getDefaultValue();
						jstring getSize();
						void setSize(jstring string_0);
					}; // end class HTMLInputElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLDOMImplementation : public java::lang::Object {
					public:
				            WMLDOMImplementation(jobject _jthis, bool copy);
				            WMLDOMImplementation(const WMLDOMImplementation &);
				        
					WMLDOMImplementation();
					virtual ~WMLDOMImplementation();
				}; // end class WMLDOMImplementation
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLIElement : public java::lang::Object {
					public:
				            WMLIElement(jobject _jthis, bool copy);
				            WMLIElement(const WMLIElement &);
				        
					WMLIElement();
					virtual ~WMLIElement();
				}; // end class WMLIElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLPElement : public java::lang::Object {
					public:
				            WMLPElement(jobject _jthis, bool copy);
				            WMLPElement(const WMLPElement &);
				        
					WMLPElement();
					virtual ~WMLPElement();
				}; // end class WMLPElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLTableElement : public java::lang::Object {
					public:
				            WMLTableElement(jobject _jthis, bool copy);
				            WMLTableElement(const WMLTableElement &);
				        
					WMLTableElement();
					virtual ~WMLTableElement();
				}; // end class WMLTableElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLAccessElementImpl : public WMLElementImpl {
						public:
					            WMLAccessElementImpl(jobject _jthis, bool copy);
					            WMLAccessElementImpl(const WMLAccessElementImpl &);
					        
						WMLAccessElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLAccessElementImpl();
						void setDomain(jstring string_0);
						void setPath(jstring string_0);
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getDomain();
						jstring getId();
						jstring getPath();
						jstring getClassName();
					}; // end class WMLAccessElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLDocumentImpl : public xerces::dom::DocumentImpl {
						public:
					            WMLDocumentImpl(jobject _jthis, bool copy);
					            WMLDocumentImpl(const WMLDocumentImpl &);
					        
						WMLDocumentImpl(w3c::dom::DocumentType documentType_0);
						virtual ~WMLDocumentImpl();
						w3c::dom::Element createElement(jstring string_0);
					}; // end class WMLDocumentImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLIElementImpl : public WMLElementImpl {
						public:
					            WMLIElementImpl(jobject _jthis, bool copy);
					            WMLIElementImpl(const WMLIElementImpl &);
					        
						WMLIElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLIElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLIElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class DFAContentModel : public java::lang::Object {
								public:
							            DFAContentModel(jobject _jthis, bool copy);
							            DFAContentModel(const DFAContentModel &);
							        
								DFAContentModel(CMNode cMNode_0,jint int_1,jboolean boolean_2);
								virtual ~DFAContentModel();
								jint validate(jobjectArray qNameArray_0,jint int_1,jint int_2);
							}; // end class DFAContentModel
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class ValidationContext : public java::lang::Object {
							public:
						            ValidationContext(jobject _jthis, bool copy);
						            ValidationContext(const ValidationContext &);
						        
							ValidationContext();
							virtual ~ValidationContext();
						}; // end class ValidationContext
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class XSFacets : public java::lang::Object {
							public:
						            XSFacets(jobject _jthis, bool copy);
						            XSFacets(const XSFacets &);
						        
							XSFacets();
							virtual ~XSFacets();
							void reset();
						}; // end class XSFacets
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class ENTITYDatatypeValidator : public java::lang::Object {
								public:
							            ENTITYDatatypeValidator(jobject _jthis, bool copy);
							            ENTITYDatatypeValidator(const ENTITYDatatypeValidator &);
							        
								ENTITYDatatypeValidator();
								virtual ~ENTITYDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class ENTITYDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class ListDatatypeValidator : public java::lang::Object {
								public:
							            ListDatatypeValidator(jobject _jthis, bool copy);
							            ListDatatypeValidator(const ListDatatypeValidator &);
							        
								ListDatatypeValidator(DatatypeValidator datatypeValidator_0);
								virtual ~ListDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class ListDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class XML11IDDatatypeValidator : public IDDatatypeValidator {
								public:
							            XML11IDDatatypeValidator(jobject _jthis, bool copy);
							            XML11IDDatatypeValidator(const XML11IDDatatypeValidator &);
							        
								XML11IDDatatypeValidator();
								virtual ~XML11IDDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class XML11IDDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace util{
							
							class Base64 : public java::lang::Object {
								public:
							            Base64(jobject _jthis, bool copy);
							            Base64(const Base64 &);
							        
								Base64();
								virtual ~Base64();
								static jbyteArray decode(jstring string_0);
								static jstring encode(jbyteArray byteArray_0);
							}; // end class Base64
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class AnyAtomicDV : public TypeValidator {
								public:
							            AnyAtomicDV(jobject _jthis, bool copy);
							            AnyAtomicDV(const AnyAtomicDV &);
							        
								virtual ~AnyAtomicDV();
								jshort getAllowedFacets();
							}; // end class AnyAtomicDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class AnySimpleDV : public TypeValidator {
								public:
							            AnySimpleDV(jobject _jthis, bool copy);
							            AnySimpleDV(const AnySimpleDV &);
							        
								AnySimpleDV();
								virtual ~AnySimpleDV();
								jshort getAllowedFacets();
							}; // end class AnySimpleDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class AnyURIDV : public TypeValidator {
								public:
							            AnyURIDV(jobject _jthis, bool copy);
							            AnyURIDV(const AnyURIDV &);
							        
								AnyURIDV();
								virtual ~AnyURIDV();
								jshort getAllowedFacets();
							}; // end class AnyURIDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class BooleanDV : public TypeValidator {
								public:
							            BooleanDV(jobject _jthis, bool copy);
							            BooleanDV(const BooleanDV &);
							        
								BooleanDV();
								virtual ~BooleanDV();
								jshort getAllowedFacets();
							}; // end class BooleanDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class IDDV : public TypeValidator {
								public:
							            IDDV(jobject _jthis, bool copy);
							            IDDV(const IDDV &);
							        
								IDDV();
								virtual ~IDDV();
								jshort getAllowedFacets();
							}; // end class IDDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class PrecisionDecimalDV : public TypeValidator {
								public:
							            PrecisionDecimalDV(jobject _jthis, bool copy);
							            PrecisionDecimalDV(const PrecisionDecimalDV &);
							        
								virtual ~PrecisionDecimalDV();
								jshort getAllowedFacets();
							}; // end class PrecisionDecimalDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class StringDV : public TypeValidator {
								public:
							            StringDV(jobject _jthis, bool copy);
							            StringDV(const StringDV &);
							        
								StringDV();
								virtual ~StringDV();
								jshort getAllowedFacets();
							}; // end class StringDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class YearDV : public AbstractDateTimeDV {
								public:
							            YearDV(jobject _jthis, bool copy);
							            YearDV(const YearDV &);
							        
								YearDV();
								virtual ~YearDV();
							}; // end class YearDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class YearMonthDurationDV : public DurationDV {
								public:
							            YearMonthDurationDV(jobject _jthis, bool copy);
							            YearMonthDurationDV(const YearMonthDurationDV &);
							        
								virtual ~YearMonthDurationDV();
							}; // end class YearMonthDurationDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						
						class MalformedByteSequenceException : public java::io::CharConversionException {
							public:
						            MalformedByteSequenceException(jobject _jthis, bool copy);
						            MalformedByteSequenceException(const MalformedByteSequenceException &);
						        
							virtual ~MalformedByteSequenceException();
							jstring getDomain();
							jstring getKey();
							jstring getMessage();
						}; // end class MalformedByteSequenceException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace io{
						
						class UTF16Reader : public java::io::Reader {
							public:
						            UTF16Reader(jobject _jthis, bool copy);
						            UTF16Reader(const UTF16Reader &);
						        
							UTF16Reader(java::io::InputStream inputStream_0,jboolean boolean_1);
							UTF16Reader(java::io::InputStream inputStream_0,jboolean boolean_1,util::MessageFormatter messageFormatter_2,java::util::Locale locale_3);
							UTF16Reader(java::io::InputStream inputStream_0,jint int_1,jboolean boolean_2,util::MessageFormatter messageFormatter_3,java::util::Locale locale_4);
							UTF16Reader(java::io::InputStream inputStream_0,jbyteArray byteArray_1,jboolean boolean_2,util::MessageFormatter messageFormatter_3,java::util::Locale locale_4);
							virtual ~UTF16Reader();
							jint read();
							jint read(jcharArray charArray_0,jint int_1,jint int_2);
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jboolean markSupported();
							void reset();
							jboolean ready();
						}; // end class UTF16Reader
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace io

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class XSDFACM : public java::lang::Object {
								public:
							            XSDFACM(jobject _jthis, bool copy);
							            XSDFACM(const XSDFACM &);
							        
								XSDFACM(dtd::models::CMNode cMNode_0,jint int_1);
								virtual ~XSDFACM();
								jintArray occurenceInfo(jintArray intArray_0);
								jboolean isFinalState(jint int_0);
								jintArray startContentModel();
								java::util::Vector whatCanGoHere(jintArray intArray_0);
								jboolean endContentModel(jintArray intArray_0);
								jboolean isCompactedForUPA();
								jboolean checkUniqueParticleAttribution(SubstitutionGroupHandler substitutionGroupHandler_0);
								jstring getTermName(jint int_0);
							}; // end class XSDFACM
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class ElementImpl : public DefaultElement {
								public:
							            ElementImpl(jobject _jthis, bool copy);
							            ElementImpl(const ElementImpl &);
							        
								ElementImpl(jint int_0,jint int_1,jint int_2);
								ElementImpl(jint int_0,jint int_1);
								ElementImpl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jint int_4,jint int_5,jint int_6);
								ElementImpl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jint int_4,jint int_5);
								virtual ~ElementImpl();
								jstring getTagName();
								w3c::dom::Attr getAttributeNode(jstring string_0);
								jstring getAttributeNS(jstring string_0,jstring string_1);
								w3c::dom::Attr getAttributeNodeNS(jstring string_0,jstring string_1);
								jboolean hasAttribute(jstring string_0);
								jboolean hasAttributeNS(jstring string_0,jstring string_1);
								w3c::dom::Node getParentNode();
								w3c::dom::Node getFirstChild();
								w3c::dom::Node getLastChild();
								w3c::dom::Node getPreviousSibling();
								w3c::dom::Node getNextSibling();
								w3c::dom::Document getOwnerDocument();
								jboolean hasChildNodes();
								jboolean hasAttributes();
								void setAttribute(jstring string_0,jstring string_1);
								jstring getAttribute(jstring string_0);
								jint getCharacterOffset();
								jint getColumnNumber();
								jstring getSyntheticAnnotation();
								jstring getAnnotation();
								w3c::dom::NamedNodeMap getAttributes();
								jint getLineNumber();
							}; // end class ElementImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class SchemaDOMImplementation : public java::lang::Object {
								public:
							            SchemaDOMImplementation(jobject _jthis, bool copy);
							            SchemaDOMImplementation(const SchemaDOMImplementation &);
							        
								virtual ~SchemaDOMImplementation();
								jboolean hasFeature(jstring string_0,jstring string_1);
								w3c::dom::DocumentType createDocumentType(jstring string_0,jstring string_1,jstring string_2);
								static w3c::dom::DOMImplementation getDOMImplementation();
								w3c::dom::Document createDocument(jstring string_0,jstring string_1,w3c::dom::DocumentType documentType_2);
							}; // end class SchemaDOMImplementation
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class SchemaDOMParser : public DefaultXMLDocumentHandler {
								public:
							            SchemaDOMParser(jobject _jthis, bool copy);
							            SchemaDOMParser(const SchemaDOMParser &);
							        
								SchemaDOMParser(xni::parser::XMLParserConfiguration xMLParserConfiguration_0);
								virtual ~SchemaDOMParser();
								void resetNodePool();
								w3c::dom::Document getDocument();
								void startCDATA(xni::Augmentations augmentations_0);
								void endCDATA(xni::Augmentations augmentations_0);
								void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
								void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
								void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
								jboolean getFeature(jstring string_0);
								void setFeature(jstring string_0,jboolean boolean_1);
								void setEntityResolver(xni::parser::XMLEntityResolver xMLEntityResolver_0);
								void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
								void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
								void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
								void endDocument(xni::Augmentations augmentations_0);
								void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
								void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
								void reset();
								void parse(xni::parser::XMLInputSource xMLInputSource_0);
							}; // end class SchemaDOMParser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace opti{
							
							class TextImpl : public DefaultText {
								public:
							            TextImpl(jobject _jthis, bool copy);
							            TextImpl(const TextImpl &);
							        
								TextImpl(java::lang::StringBuffer stringBuffer_0,SchemaDOM schemaDOM_1,jint int_2,jint int_3);
								virtual ~TextImpl();
								jstring getNodeName();
								w3c::dom::Node getParentNode();
								w3c::dom::Node getPreviousSibling();
								w3c::dom::Node getNextSibling();
								jstring substringData(jint int_0,jint int_1);
								jstring getData();
								jint getLength();
							}; // end class TextImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace opti

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class LargeContainer : public Container {
								public:
							            LargeContainer(jobject _jthis, bool copy);
							            LargeContainer(const LargeContainer &);
							        
								virtual ~LargeContainer();
							}; // end class LargeContainer
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class OneAttr : public java::lang::Object {
								public:
							            OneAttr(jobject _jthis, bool copy);
							            OneAttr(const OneAttr &);
							        
								virtual ~OneAttr();
							}; // end class OneAttr
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class SchemaContentHandler : public java::lang::Object {
								public:
							            SchemaContentHandler(jobject _jthis, bool copy);
							            SchemaContentHandler(const SchemaContentHandler &);
							        
								SchemaContentHandler();
								virtual ~SchemaContentHandler();
								w3c::dom::Document getDocument();
								void setDocumentLocator(xml::sax::Locator locator_0);
								void endPrefixMapping(jstring string_0);
								void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
								void processingInstruction(jstring string_0,jstring string_1);
								void skippedEntity(jstring string_0);
								void characters(jcharArray charArray_0,jint int_1,jint int_2);
								void startPrefixMapping(jstring string_0,jstring string_1);
								void startElement(jstring string_0,jstring string_1,jstring string_2,xml::sax::Attributes attributes_3);
								void startDocument();
								void endDocument();
								void endElement(jstring string_0,jstring string_1,jstring string_2);
								void reset(opti::SchemaDOMParser schemaDOMParser_0,util::SymbolTable symbolTable_1,jboolean boolean_2,jboolean boolean_3);
							}; // end class SchemaContentHandler
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSAnnotationInfo : public java::lang::Object {
								public:
							            XSAnnotationInfo(jobject _jthis, bool copy);
							            XSAnnotationInfo(const XSAnnotationInfo &);
							        
								virtual ~XSAnnotationInfo();
							}; // end class XSAnnotationInfo
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSAttributeChecker : public java::lang::Object {
								public:
							            XSAttributeChecker(jobject _jthis, bool copy);
							            XSAttributeChecker(const XSAttributeChecker &);
							        
								XSAttributeChecker(XSDHandler xSDHandler_0);
								virtual ~XSAttributeChecker();
								void checkNonSchemaAttributes(XSGrammarBucket xSGrammarBucket_0);
								void resolveNamespace(w3c::dom::Element element_0,jobjectArray attrArray_1,SchemaNamespaceSupport schemaNamespaceSupport_2);
								static jstring normalize(jstring string_0,jshort short_1);
								void reset(util::SymbolTable symbolTable_0);
							}; // end class XSAttributeChecker
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDComplexTypeTraverser : public XSDAbstractParticleTraverser {
								public:
							            XSDComplexTypeTraverser(jobject _jthis, bool copy);
							            XSDComplexTypeTraverser(const XSDComplexTypeTraverser &);
							        
								virtual ~XSDComplexTypeTraverser();
							}; // end class XSDComplexTypeTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace traversers{
							
							class XSDSimpleTypeTraverser : public XSDAbstractTraverser {
								public:
							            XSDSimpleTypeTraverser(jobject _jthis, bool copy);
							            XSDSimpleTypeTraverser(const XSDSimpleTypeTraverser &);
							        
								virtual ~XSDSimpleTypeTraverser();
							}; // end class XSDSimpleTypeTraverser
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace traversers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class LSInputListImpl : public java::util::AbstractList {
								public:
							            LSInputListImpl(jobject _jthis, bool copy);
							            LSInputListImpl(const LSInputListImpl &);
							        
								LSInputListImpl(jobjectArray lSInputArray_0,jint int_1);
								virtual ~LSInputListImpl();
								w3c::dom::ls::LSInput item(jint int_0);
								jint getLength();
								jint size();
							}; // end class LSInputListImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class ObjectListImpl : public java::util::AbstractList {
								public:
							            ObjectListImpl(jobject _jthis, bool copy);
							            ObjectListImpl(const ObjectListImpl &);
							        
								virtual ~ObjectListImpl();
								jint getLength();
								jint size();
							}; // end class ObjectListImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class StringListImpl : public java::util::AbstractList {
								public:
							            StringListImpl(jobject _jthis, bool copy);
							            StringListImpl(const StringListImpl &);
							        
								StringListImpl(jobjectArray stringArray_0,jint int_1);
								StringListImpl(java::util::Vector vector_0);
								virtual ~StringListImpl();
								jstring item(jint int_0);
								jint getLength();
								jboolean contains(jstring string_0);
								jint size();
							}; // end class StringListImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class XIntPool : public java::lang::Object {
								public:
							            XIntPool(jobject _jthis, bool copy);
							            XIntPool(const XIntPool &);
							        
								XIntPool();
								virtual ~XIntPool();
								virtual XInt getXInt(jint int_0);
							}; // end class XIntPool
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class XSInputSource : public xni::parser::XMLInputSource {
								public:
							            XSInputSource(jobject _jthis, bool copy);
							            XSInputSource(const XSInputSource &);
							        
								XSInputSource(jobjectArray xSObjectArray_0);
								XSInputSource(jobjectArray schemaGrammarArray_0);
								virtual ~XSInputSource();
								void setComponents(jobjectArray xSObjectArray_0);
								jobjectArray getComponents();
								void setGrammars(jobjectArray schemaGrammarArray_0);
								jobjectArray getGrammars();
							}; // end class XSInputSource
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace util{
							
							class XSObjectListImpl : public java::util::AbstractList {
								public:
							            XSObjectListImpl(jobject _jthis, bool copy);
							            XSObjectListImpl(const XSObjectListImpl &);
							        
								XSObjectListImpl();
								XSObjectListImpl(jobjectArray xSObjectArray_0,jint int_1);
								virtual ~XSObjectListImpl();
								xs::XSObject item(jint int_0);
								void clearXSObjectList();
								void addXSObject(xs::XSObject xSObject_0);
								void addXSObject(jint int_0,xs::XSObject xSObject_1);
								jint getLength();
								jint size();
								java::util::Iterator iterator();
								java::util::ListIterator listIterator(jint int_0);
								java::util::ListIterator listIterator();
							}; // end class XSObjectListImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class DocumentBuilderImpl : public javax::xml::parsers::DocumentBuilder {
						public:
					            DocumentBuilderImpl(jobject _jthis, bool copy);
					            DocumentBuilderImpl(const DocumentBuilderImpl &);
					        
						virtual ~DocumentBuilderImpl();
						void setEntityResolver(xml::sax::EntityResolver entityResolver_0);
						w3c::dom::Document newDocument();
						void setErrorHandler(xml::sax::ErrorHandler errorHandler_0);
						w3c::dom::DOMImplementation getDOMImplementation();
						jboolean isNamespaceAware();
						javax::xml::validation::Schema getSchema();
						jboolean isValidating();
						jboolean isXIncludeAware();
						void reset();
						w3c::dom::Document parse(xml::sax::InputSource inputSource_0);
					}; // end class DocumentBuilderImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class SAXParserFactoryImpl : public javax::xml::parsers::SAXParserFactory {
						public:
					            SAXParserFactoryImpl(jobject _jthis, bool copy);
					            SAXParserFactoryImpl(const SAXParserFactoryImpl &);
					        
						SAXParserFactoryImpl();
						virtual ~SAXParserFactoryImpl();
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setSchema(javax::xml::validation::Schema schema_0);
						javax::xml::validation::Schema getSchema();
						void setXIncludeAware(jboolean boolean_0);
						javax::xml::parsers::SAXParser newSAXParser();
						jboolean isXIncludeAware();
					}; // end class SAXParserFactoryImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					
					class SchemaValidatorConfiguration : public java::lang::Object {
						public:
					            SchemaValidatorConfiguration(jobject _jthis, bool copy);
					            SchemaValidatorConfiguration(const SchemaValidatorConfiguration &);
					        
						SchemaValidatorConfiguration(xni::parser::XMLComponentManager xMLComponentManager_0,validation::XSGrammarPoolContainer xSGrammarPoolContainer_1,impl::validation::ValidationManager validationManager_2);
						virtual ~SchemaValidatorConfiguration();
						jboolean getFeature(jstring string_0);
					}; // end class SchemaValidatorConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace jaxp

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						
						class DatatypeFactoryImpl : public javax::xml::datatype::DatatypeFactory {
							public:
						            DatatypeFactoryImpl(jobject _jthis, bool copy);
						            DatatypeFactoryImpl(const DatatypeFactoryImpl &);
						        
							DatatypeFactoryImpl();
							virtual ~DatatypeFactoryImpl();
							javax::xml::datatype::XMLGregorianCalendar newXMLGregorianCalendar(java::math::BigInteger bigInteger_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5,java::math::BigDecimal bigDecimal_6,jint int_7);
							javax::xml::datatype::XMLGregorianCalendar newXMLGregorianCalendar(jstring string_0);
							javax::xml::datatype::XMLGregorianCalendar newXMLGregorianCalendar(java::util::GregorianCalendar gregorianCalendar_0);
							javax::xml::datatype::XMLGregorianCalendar newXMLGregorianCalendar(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5,jint int_6,jint int_7);
							javax::xml::datatype::XMLGregorianCalendar newXMLGregorianCalendar();
							javax::xml::datatype::Duration newDuration(jstring string_0);
							javax::xml::datatype::Duration newDuration(jlong long_0);
							javax::xml::datatype::Duration newDuration(jboolean boolean_0,java::math::BigInteger bigInteger_1,java::math::BigInteger bigInteger_2,java::math::BigInteger bigInteger_3,java::math::BigInteger bigInteger_4,java::math::BigInteger bigInteger_5,java::math::BigDecimal bigDecimal_6);
						}; // end class DatatypeFactoryImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace datatype{
						
						class SerializedXMLGregorianCalendar : public java::lang::Object {
							public:
						            SerializedXMLGregorianCalendar(jobject _jthis, bool copy);
						            SerializedXMLGregorianCalendar(const SerializedXMLGregorianCalendar &);
						        
							SerializedXMLGregorianCalendar(jstring string_0);
							virtual ~SerializedXMLGregorianCalendar();
						}; // end class SerializedXMLGregorianCalendar
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace datatype

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class DOMDocumentHandler : public java::lang::Object {
							public:
						            DOMDocumentHandler(jobject _jthis, bool copy);
						            DOMDocumentHandler(const DOMDocumentHandler &);
						        
							DOMDocumentHandler();
							virtual ~DOMDocumentHandler();
						}; // end class DOMDocumentHandler
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class DOMResultAugmentor : public java::lang::Object {
							public:
						            DOMResultAugmentor(jobject _jthis, bool copy);
						            DOMResultAugmentor(const DOMResultAugmentor &);
						        
							DOMResultAugmentor(DOMValidatorHelper dOMValidatorHelper_0);
							virtual ~DOMResultAugmentor();
							void setIgnoringCharacters(jboolean boolean_0);
							void setDOMResult(javax::xml::transform::dom::DOMResult dOMResult_0);
							void cdata(w3c::dom::CDATASection cDATASection_0);
							void startCDATA(xni::Augmentations augmentations_0);
							void endCDATA(xni::Augmentations augmentations_0);
							void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
							void processingInstruction(w3c::dom::ProcessingInstruction processingInstruction_0);
							void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void comment(w3c::dom::Comment comment_0);
							void characters(w3c::dom::Text text_0);
							void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
							void endDocument(xni::Augmentations augmentations_0);
							void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
							void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
							xni::parser::XMLDocumentSource getDocumentSource();
							void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void doctypeDecl(w3c::dom::DocumentType documentType_0);
							void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						}; // end class DOMResultAugmentor
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class DOMValidatorHelper : public java::lang::Object {
							public:
						            DOMValidatorHelper(jobject _jthis, bool copy);
						            DOMValidatorHelper(const DOMValidatorHelper &);
						        
							DOMValidatorHelper(XMLSchemaValidatorComponentManager xMLSchemaValidatorComponentManager_0);
							virtual ~DOMValidatorHelper();
							void validate(javax::xml::transform::Source source_0,javax::xml::transform::Result result_1);
							jboolean isEntityDeclared(jstring string_0);
							jboolean isEntityUnparsed(jstring string_0);
						}; // end class DOMValidatorHelper
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class StAXValidatorHelper : public java::lang::Object {
							public:
						            StAXValidatorHelper(jobject _jthis, bool copy);
						            StAXValidatorHelper(const StAXValidatorHelper &);
						        
							StAXValidatorHelper(XMLSchemaValidatorComponentManager xMLSchemaValidatorComponentManager_0);
							virtual ~StAXValidatorHelper();
							void validate(javax::xml::transform::Source source_0,javax::xml::transform::Result result_1);
							jboolean isEntityDeclared(jstring string_0);
							jboolean isEntityUnparsed(jstring string_0);
						}; // end class StAXValidatorHelper
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class ValidatorHandlerImpl : public javax::xml::validation::ValidatorHandler {
							public:
						            ValidatorHandlerImpl(jobject _jthis, bool copy);
						            ValidatorHandlerImpl(const ValidatorHandlerImpl &);
						        
							ValidatorHandlerImpl(XSGrammarPoolContainer xSGrammarPoolContainer_0);
							ValidatorHandlerImpl(XMLSchemaValidatorComponentManager xMLSchemaValidatorComponentManager_0);
							virtual ~ValidatorHandlerImpl();
							xml::sax::ContentHandler getContentHandler();
							void startCDATA(xni::Augmentations augmentations_0);
							void endCDATA(xni::Augmentations augmentations_0);
							void notationDecl(jstring string_0,jstring string_1,jstring string_2);
							void unparsedEntityDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
							void setDocumentLocator(xml::sax::Locator locator_0);
							void endPrefixMapping(jstring string_0);
							void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
							void processingInstruction(jstring string_0,jstring string_1);
							void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
							void skippedEntity(jstring string_0);
							void setResourceResolver(w3c::dom::ls::LSResourceResolver lSResourceResolver_0);
							w3c::dom::ls::LSResourceResolver getResourceResolver();
							void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void validate(javax::xml::transform::Source source_0,javax::xml::transform::Result result_1);
							jboolean getFeature(jstring string_0);
							void setFeature(jstring string_0,jboolean boolean_1);
							void setContentHandler(xml::sax::ContentHandler contentHandler_0);
							xml::sax::ErrorHandler getErrorHandler();
							void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void characters(jcharArray charArray_0,jint int_1,jint int_2);
							void setErrorHandler(xml::sax::ErrorHandler errorHandler_0);
							void startPrefixMapping(jstring string_0,jstring string_1);
							void startElement(jstring string_0,jstring string_1,jstring string_2,xml::sax::Attributes attributes_3);
							void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void startDocument();
							void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
							void endDocument(xni::Augmentations augmentations_0);
							void endDocument();
							void endElement(jstring string_0,jstring string_1,jstring string_2);
							void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
							void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
							xni::parser::XMLDocumentSource getDocumentSource();
							void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
							xs::ElementPSVI getElementPSVI();
							xs::AttributePSVI getAttributePSVI(jint int_0);
							xs::AttributePSVI getAttributePSVIByName(jstring string_0,jstring string_1);
							jboolean isEntityDeclared(jstring string_0);
							jboolean isEntityUnparsed(jstring string_0);
							javax::xml::validation::TypeInfoProvider getTypeInfoProvider();
						}; // end class ValidatorHandlerImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class XMLSchemaFactory : public javax::xml::validation::SchemaFactory {
							public:
						            XMLSchemaFactory(jobject _jthis, bool copy);
						            XMLSchemaFactory(const XMLSchemaFactory &);
						        
							XMLSchemaFactory();
							virtual ~XMLSchemaFactory();
							jboolean isSchemaLanguageSupported(jstring string_0);
							void setResourceResolver(w3c::dom::ls::LSResourceResolver lSResourceResolver_0);
							w3c::dom::ls::LSResourceResolver getResourceResolver();
							javax::xml::validation::Schema newSchema(xni::grammars::XMLGrammarPool xMLGrammarPool_0);
							javax::xml::validation::Schema newSchema(jobjectArray sourceArray_0);
							javax::xml::validation::Schema newSchema();
							jboolean getFeature(jstring string_0);
							void setFeature(jstring string_0,jboolean boolean_1);
							xml::sax::ErrorHandler getErrorHandler();
							void setErrorHandler(xml::sax::ErrorHandler errorHandler_0);
						}; // end class XMLSchemaFactory
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class SAXInputSource : public xni::parser::XMLInputSource {
						public:
					            SAXInputSource(jobject _jthis, bool copy);
					            SAXInputSource(const SAXInputSource &);
					        
						SAXInputSource(xml::sax::InputSource inputSource_0);
						SAXInputSource();
						SAXInputSource(xml::sax::XMLReader xMLReader_0,xml::sax::InputSource inputSource_1);
						virtual ~SAXInputSource();
						void setXMLReader(xml::sax::XMLReader xMLReader_0);
						void setCharacterStream(java::io::Reader reader_0);
						void setEncoding(jstring string_0);
						void setPublicId(jstring string_0);
						void setSystemId(jstring string_0);
						void setByteStream(java::io::InputStream inputStream_0);
						void setInputSource(xml::sax::InputSource inputSource_0);
						xml::sax::InputSource getInputSource();
						xml::sax::XMLReader getXMLReader();
					}; // end class SAXInputSource
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSAttributeUse : public java::lang::Object {
						public:
					            XSAttributeUse(jobject _jthis, bool copy);
					            XSAttributeUse(const XSAttributeUse &);
					        
						XSAttributeUse();
						virtual ~XSAttributeUse();
					}; // end class XSAttributeUse
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSLoader : public java::lang::Object {
						public:
					            XSLoader(jobject _jthis, bool copy);
					            XSLoader(const XSLoader &);
					        
						XSLoader();
						virtual ~XSLoader();
					}; // end class XSLoader
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSNotationDeclaration : public java::lang::Object {
						public:
					            XSNotationDeclaration(jobject _jthis, bool copy);
					            XSNotationDeclaration(const XSNotationDeclaration &);
					        
						XSNotationDeclaration();
						virtual ~XSNotationDeclaration();
					}; // end class XSNotationDeclaration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSWildcard : public java::lang::Object {
						public:
					            XSWildcard(jobject _jthis, bool copy);
					            XSWildcard(const XSWildcard &);
					        
						XSWildcard();
						virtual ~XSWildcard();
					}; // end class XSWildcard
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class HTMLdtd : public java::lang::Object {
						public:
					            HTMLdtd(jobject _jthis, bool copy);
					            HTMLdtd(const HTMLdtd &);
					        
						HTMLdtd();
						virtual ~HTMLdtd();
						static jstring fromChar(jint int_0);
						static jboolean isElementContent(jstring string_0);
						static jboolean isOptionalClosing(jstring string_0);
						static jboolean isClosing(jstring string_0,jstring string_1);
						static jint charFromName(jstring string_0);
						static jboolean isEmptyTag(jstring string_0);
						static jboolean isOnlyOpening(jstring string_0);
						static jboolean isBoolean(jstring string_0,jstring string_1);
						static jboolean isURI(jstring string_0,jstring string_1);
						static jboolean isPreserveSpace(jstring string_0);
					}; // end class HTMLdtd
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace javax{
		namespace xml{
			
			class XMLConstants : public java::lang::Object {
				public:
			            XMLConstants(jobject _jthis, bool copy);
			            XMLConstants(const XMLConstants &);
			        
				virtual ~XMLConstants();
			}; // end class XMLConstants
		} // end namespace javax
	} // end namespace xml

	namespace javax{
		namespace xml{
			namespace datatype{
				
				class FactoryFinder : public java::lang::Object {
					public:
				            FactoryFinder(jobject _jthis, bool copy);
				            FactoryFinder(const FactoryFinder &);
				        
					virtual ~FactoryFinder();
				}; // end class FactoryFinder
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype

	namespace javax{
		namespace xml{
			namespace parsers{
				
				class FilePathToURI : public java::lang::Object {
					public:
				            FilePathToURI(jobject _jthis, bool copy);
				            FilePathToURI(const FilePathToURI &);
				        
					virtual ~FilePathToURI();
					static jstring filepath2URI(jstring string_0);
				}; // end class FilePathToURI
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLEventWriter : public java::lang::Object {
					public:
				            XMLEventWriter(jobject _jthis, bool copy);
				            XMLEventWriter(const XMLEventWriter &);
				        
					XMLEventWriter();
					virtual ~XMLEventWriter();
				}; // end class XMLEventWriter
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLStreamWriter : public java::lang::Object {
					public:
				            XMLStreamWriter(jobject _jthis, bool copy);
				            XMLStreamWriter(const XMLStreamWriter &);
				        
					XMLStreamWriter();
					virtual ~XMLStreamWriter();
				}; // end class XMLStreamWriter
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class EntityReference : public java::lang::Object {
						public:
					            EntityReference(jobject _jthis, bool copy);
					            EntityReference(const EntityReference &);
					        
						EntityReference();
						virtual ~EntityReference();
					}; // end class EntityReference
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace util{
					
					class StreamReaderDelegate : public java::lang::Object {
						public:
					            StreamReaderDelegate(jobject _jthis, bool copy);
					            StreamReaderDelegate(const StreamReaderDelegate &);
					        
						StreamReaderDelegate();
						StreamReaderDelegate(XMLStreamReader xMLStreamReader_0);
						virtual ~StreamReaderDelegate();
						jint nextTag();
						jstring getElementText();
						jcharArray getTextCharacters();
						jint getTextCharacters(jint int_0,jcharArray charArray_1,jint int_2,jint int_3);
						jint getTextStart();
						jstring getPIData();
						jstring getPITarget();
						jstring getAttributeNamespace(jint int_0);
						jstring getAttributeType(jint int_0);
						jboolean isAttributeSpecified(jint int_0);
						jint getNamespaceCount();
						jstring getNamespacePrefix(jint int_0);
						jint getTextLength();
						jint getAttributeCount();
						jboolean isStartElement();
						jboolean isEndElement();
						jboolean isCharacters();
						namespace::NamespaceContext getNamespaceContext();
						jstring getVersion();
						void require(jint int_0,jstring string_1,jstring string_2);
						namespace::QName getAttributeName(jint int_0);
						jboolean hasText();
						jboolean hasName();
						jstring getText();
						jstring getPrefix();
						jstring getNamespaceURI(jint int_0);
						jstring getNamespaceURI(jstring string_0);
						jstring getNamespaceURI();
						jstring getLocalName();
						jstring getAttributePrefix(jint int_0);
						jstring getAttributeValue(jstring string_0,jstring string_1);
						jstring getAttributeValue(jint int_0);
						jint getEventType();
						jboolean isWhiteSpace();
						jstring getCharacterEncodingScheme();
						jboolean isStandalone();
						jboolean standaloneSet();
						jstring getAttributeLocalName(jint int_0);
						namespace::QName getName();
						jboolean hasNext();
						jint next();
						XMLStreamReader getParent();
						Location getLocation();
						void close();
						void setParent(XMLStreamReader xMLStreamReader_0);
						jstring getEncoding();
					}; // end class StreamReaderDelegate
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace util

	namespace javax{
		namespace xml{
			namespace transform{
				
				class Transformer : public java::lang::Object {
					public:
				            Transformer(jobject _jthis, bool copy);
				            Transformer(const Transformer &);
				        
					virtual ~Transformer();
					void reset();
				}; // end class Transformer
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				namespace dom{
					
					class DOMSource : public java::lang::Object {
						public:
					            DOMSource(jobject _jthis, bool copy);
					            DOMSource(const DOMSource &);
					        
						DOMSource();
						DOMSource(org::w3c::dom::Node node_0);
						DOMSource(org::w3c::dom::Node node_0,jstring string_1);
						virtual ~DOMSource();
						void setNode(org::w3c::dom::Node node_0);
						jstring getSystemId();
						void setSystemId(jstring string_0);
						org::w3c::dom::Node getNode();
					}; // end class DOMSource
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace dom

	namespace javax{
		namespace xml{
			namespace transform{
				namespace stream{
					
					class FilePathToURI : public java::lang::Object {
						public:
					            FilePathToURI(jobject _jthis, bool copy);
					            FilePathToURI(const FilePathToURI &);
					        
						virtual ~FilePathToURI();
						static jstring filepath2URI(jstring string_0);
					}; // end class FilePathToURI
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace validation{
				
				class SchemaFactoryFinder : public java::lang::Object {
					public:
				            SchemaFactoryFinder(jobject _jthis, bool copy);
				            SchemaFactoryFinder(const SchemaFactoryFinder &);
				        
					SchemaFactoryFinder(java::lang::ClassLoader classLoader_0);
					virtual ~SchemaFactoryFinder();
					SchemaFactory newFactory(jstring string_0);
				}; // end class SchemaFactoryFinder
			} // end namespace javax
		} // end namespace xml
	} // end namespace validation

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathFactoryConfigurationException : public XPathException {
					public:
				            XPathFactoryConfigurationException(jobject _jthis, bool copy);
				            XPathFactoryConfigurationException(const XPathFactoryConfigurationException &);
				        
					XPathFactoryConfigurationException(jstring string_0);
					XPathFactoryConfigurationException(java::lang::Throwable throwable_0);
					virtual ~XPathFactoryConfigurationException();
				}; // end class XPathFactoryConfigurationException
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathFunctionResolver : public java::lang::Object {
					public:
				            XPathFunctionResolver(jobject _jthis, bool copy);
				            XPathFunctionResolver(const XPathFunctionResolver &);
				        
					XPathFunctionResolver();
					virtual ~XPathFunctionResolver();
				}; // end class XPathFunctionResolver
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DOMConfiguration : public java::lang::Object {
					public:
				            DOMConfiguration(jobject _jthis, bool copy);
				            DOMConfiguration(const DOMConfiguration &);
				        
					DOMConfiguration();
					virtual ~DOMConfiguration();
				}; // end class DOMConfiguration
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DOMStringList : public java::lang::Object {
					public:
				            DOMStringList(jobject _jthis, bool copy);
				            DOMStringList(const DOMStringList &);
				        
					DOMStringList();
					virtual ~DOMStringList();
				}; // end class DOMStringList
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class NameList : public java::lang::Object {
					public:
				            NameList(jobject _jthis, bool copy);
				            NameList(const NameList &);
				        
					NameList();
					virtual ~NameList();
				}; // end class NameList
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class UserDataHandler : public java::lang::Object {
					public:
				            UserDataHandler(jobject _jthis, bool copy);
				            UserDataHandler(const UserDataHandler &);
				        
					UserDataHandler();
					virtual ~UserDataHandler();
				}; // end class UserDataHandler
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSFontFaceRule : public java::lang::Object {
						public:
					            CSSFontFaceRule(jobject _jthis, bool copy);
					            CSSFontFaceRule(const CSSFontFaceRule &);
					        
						CSSFontFaceRule();
						virtual ~CSSFontFaceRule();
					}; // end class CSSFontFaceRule
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSStyleDeclaration : public java::lang::Object {
						public:
					            CSSStyleDeclaration(jobject _jthis, bool copy);
					            CSSStyleDeclaration(const CSSStyleDeclaration &);
					        
						CSSStyleDeclaration();
						virtual ~CSSStyleDeclaration();
					}; // end class CSSStyleDeclaration
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class DocumentCSS : public java::lang::Object {
						public:
					            DocumentCSS(jobject _jthis, bool copy);
					            DocumentCSS(const DocumentCSS &);
					        
						DocumentCSS();
						virtual ~DocumentCSS();
					}; // end class DocumentCSS
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					
					class EventListener : public java::lang::Object {
						public:
					            EventListener(jobject _jthis, bool copy);
					            EventListener(const EventListener &);
					        
						EventListener();
						virtual ~EventListener();
					}; // end class EventListener
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLBRElement : public java::lang::Object {
						public:
					            HTMLBRElement(jobject _jthis, bool copy);
					            HTMLBRElement(const HTMLBRElement &);
					        
						HTMLBRElement();
						virtual ~HTMLBRElement();
					}; // end class HTMLBRElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLDivElement : public java::lang::Object {
						public:
					            HTMLDivElement(jobject _jthis, bool copy);
					            HTMLDivElement(const HTMLDivElement &);
					        
						HTMLDivElement();
						virtual ~HTMLDivElement();
					}; // end class HTMLDivElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLHRElement : public java::lang::Object {
						public:
					            HTMLHRElement(jobject _jthis, bool copy);
					            HTMLHRElement(const HTMLHRElement &);
					        
						HTMLHRElement();
						virtual ~HTMLHRElement();
					}; // end class HTMLHRElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLLIElement : public java::lang::Object {
						public:
					            HTMLLIElement(jobject _jthis, bool copy);
					            HTMLLIElement(const HTMLLIElement &);
					        
						HTMLLIElement();
						virtual ~HTMLLIElement();
					}; // end class HTMLLIElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLOListElement : public java::lang::Object {
						public:
					            HTMLOListElement(jobject _jthis, bool copy);
					            HTMLOListElement(const HTMLOListElement &);
					        
						HTMLOListElement();
						virtual ~HTMLOListElement();
					}; // end class HTMLOListElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLScriptElement : public java::lang::Object {
						public:
					            HTMLScriptElement(jobject _jthis, bool copy);
					            HTMLScriptElement(const HTMLScriptElement &);
					        
						HTMLScriptElement();
						virtual ~HTMLScriptElement();
					}; // end class HTMLScriptElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSLoadEvent : public java::lang::Object {
						public:
					            LSLoadEvent(jobject _jthis, bool copy);
					            LSLoadEvent(const LSLoadEvent &);
					        
						LSLoadEvent();
						virtual ~LSLoadEvent();
					}; // end class LSLoadEvent
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ranges{
					
					class DocumentRange : public java::lang::Object {
						public:
					            DocumentRange(jobject _jthis, bool copy);
					            DocumentRange(const DocumentRange &);
					        
						DocumentRange();
						virtual ~DocumentRange();
					}; // end class DocumentRange
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ranges

	namespace org{
		namespace w3c{
			namespace dom{
				namespace traversal{
					
					class DocumentTraversal : public java::lang::Object {
						public:
					            DocumentTraversal(jobject _jthis, bool copy);
					            DocumentTraversal(const DocumentTraversal &);
					        
						DocumentTraversal();
						virtual ~DocumentTraversal();
					}; // end class DocumentTraversal
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace traversal

	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					
					class XPathExpression : public java::lang::Object {
						public:
					            XPathExpression(jobject _jthis, bool copy);
					            XPathExpression(const XPathExpression &);
					        
						XPathExpression();
						virtual ~XPathExpression();
					}; // end class XPathExpression
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath

	namespace org{
		namespace xml{
			namespace sax{
				
				class DocumentHandler : public java::lang::Object {
					public:
				            DocumentHandler(jobject _jthis, bool copy);
				            DocumentHandler(const DocumentHandler &);
				        
					DocumentHandler();
					virtual ~DocumentHandler();
				}; // end class DocumentHandler
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					
					class DeclHandler : public java::lang::Object {
						public:
					            DeclHandler(jobject _jthis, bool copy);
					            DeclHandler(const DeclHandler &);
					        
						DeclHandler();
						virtual ~DeclHandler();
					}; // end class DeclHandler
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class ParserFactory : public java::lang::Object {
						public:
					            ParserFactory(jobject _jthis, bool copy);
					            ParserFactory(const ParserFactory &);
					        
						virtual ~ParserFactory();
						static Parser makeParser(jstring string_0);
						static Parser makeParser();
					}; // end class ParserFactory
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace crcl{
		namespace utils{
			
			class PendantClientOuter : public java::lang::Object {
				public:
			            PendantClientOuter(jobject _jthis, bool copy);
			            PendantClientOuter(const PendantClientOuter &);
			        
				PendantClientOuter();
				virtual ~PendantClientOuter();
			}; // end class PendantClientOuter
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class SideViewJPanel : public javax::swing::JPanel {
				public:
			            SideViewJPanel(jobject _jthis, bool copy);
			            SideViewJPanel(const SideViewJPanel &);
			        
				SideViewJPanel();
				virtual ~SideViewJPanel();
				jdoubleArray getSeglengths();
				SimRobotEnum getRobotType();
				void setRobotType(SimRobotEnum simRobotEnum_0);
				jdoubleArray getJointvals();
				void setJointvals(jdoubleArray doubleArray_0);
				void setSeglengths(jdoubleArray doubleArray_0);
			}; // end class SideViewJPanel
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class SimulatedKinematicsSimple : public java::lang::Object {
				public:
			            SimulatedKinematicsSimple(jobject _jthis, bool copy);
			            SimulatedKinematicsSimple(const SimulatedKinematicsSimple &);
			        
				SimulatedKinematicsSimple();
				virtual ~SimulatedKinematicsSimple();
				jdouble getScale();
				void setScale(jdouble double_0);
				base::PoseType jointsToPose(jdoubleArray doubleArray_0,base::PoseType poseType_1);
				base::PoseType jointsToPose(jdoubleArray doubleArray_0);
				jdoubleArray poseToJoints(jdoubleArray doubleArray_0,base::PoseType poseType_1);
				jdoubleArray getSeglengths();
				void setSeglengths(jdoubleArray doubleArray_0);
			}; // end class SimulatedKinematicsSimple
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class XpathQueryJFrame : public javax::swing::JFrame {
				public:
			            XpathQueryJFrame(jobject _jthis, bool copy);
			            XpathQueryJFrame(const XpathQueryJFrame &);
			        
				XpathQueryJFrame();
				virtual ~XpathQueryJFrame();
				void setResult(jstring string_0);
				jstring runQuery(jstring string_0,jstring string_1);
				void setQuery(jstring string_0);
				void Message(jstring string_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
				jstring getQuery();
				jstring getResult();
			}; // end class XpathQueryJFrame
		} // end namespace crcl
	} // end namespace utils

	namespace rcsdesign{
		
		class InnerAppletRepainter : public java::lang::Object {
			public:
		            InnerAppletRepainter(jobject _jthis, bool copy);
		            InnerAppletRepainter(const InnerAppletRepainter &);
		        
			virtual ~InnerAppletRepainter();
			void run();
			void start();
			void stop();
		}; // end class InnerAppletRepainter
	} // end namespace rcsdesign

	namespace rcs{
		namespace nml{
			
			class CMS_DATE : public java::lang::Object {
				public:
			            CMS_DATE(jobject _jthis, bool copy);
			            CMS_DATE(const CMS_DATE &);
			        
				CMS_DATE(jstring string_0);
				CMS_DATE();
				virtual ~CMS_DATE();
				void update_for_non_xml(NMLFormatConverter nMLFormatConverter_0);
				void setWithString(jstring string_0);
				jstring toString();
				void update(NMLFormatConverter nMLFormatConverter_0);
			}; // end class CMS_DATE
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class XMLFileReader : public java::lang::Object {
				public:
			            XMLFileReader(jobject _jthis, bool copy);
			            XMLFileReader(const XMLFileReader &);
			        
				XMLFileReader(NMLMessageDictionary nMLMessageDictionary_0);
				virtual ~XMLFileReader();
				jstring convertMsgToString(NMLmsg nMLmsg_0);
				void set_add_array_indexes_to_name(jboolean boolean_0);
				NMLmsg ReadFile(java::io::File file_0);
				NMLmsg ReadFile(jstring string_0);
			}; // end class XMLFileReader
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class NML_ENUM_INFO : public java::lang::Object {
				public:
			            NML_ENUM_INFO(jobject _jthis, bool copy);
			            NML_ENUM_INFO(const NML_ENUM_INFO &);
			        
				NML_ENUM_INFO();
				virtual ~NML_ENUM_INFO();
			}; // end class NML_ENUM_INFO
		} // end namespace rcs
	} // end namespace nml

	namespace rcs{
		namespace nml{
			
			class PackedFormatConverter : public NMLFormatConverterBase {
				public:
			            PackedFormatConverter(jobject _jthis, bool copy);
			            PackedFormatConverter(const PackedFormatConverter &);
			        
				PackedFormatConverter(jboolean boolean_0);
				virtual ~PackedFormatConverter();
				void start_updates();
				void align(jint int_0);
				void waste(jint int_0);
				void HandleErrorInUpdate(java::lang::Exception exception_0);
				jbyteArray convertMsgToRawData(NMLmsg nMLmsg_0);
				jstring toString();
				void update(jfloatArray floatArray_0,jint int_1);
				jfloat update(jfloat float_0);
				void update(jlongArray longArray_0,jint int_1);
				jlong update(jlong long_0);
				jdouble update(jdouble double_0);
				void update(jdoubleArray doubleArray_0,jint int_1);
				void update(jshortArray shortArray_0,jint int_1);
				jshort update(jshort short_0);
				void update(jcharArray charArray_0,jint int_1);
				jchar update(jchar char_0);
				void update(jbyteArray byteArray_0,jint int_1);
				jboolean update(jboolean boolean_0);
				void update(jintArray intArray_0,jint int_1);
				jint update(jint int_0);
				jbyte update(jbyte byte_0);
			}; // end class PackedFormatConverter
		} // end namespace rcs
	} // end namespace nml

	namespace diagapplet{
		namespace plotter{
			
			class PlotPoint : public java::lang::Object {
				public:
			            PlotPoint(jobject _jthis, bool copy);
			            PlotPoint(const PlotPoint &);
			        
				PlotPoint(jint int_0,jint int_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
				PlotPoint();
				virtual ~PlotPoint();
				jstring toString();
			}; // end class PlotPoint
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		namespace plotter{
			
			class PlotterCommon : public java::lang::Object {
				public:
			            PlotterCommon(jobject _jthis, bool copy);
			            PlotterCommon(const PlotterCommon &);
			        
				PlotterCommon();
				virtual ~PlotterCommon();
				static void DebugPrint(jstring string_0);
				static void ErrorPrint(jstring string_0);
				static java::awt::Color nextColor();
				static void DebugPrint2(jstring string_0);
				static java::awt::Color StringToColor(jstring string_0);
			}; // end class PlotterCommon
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		namespace plotter{
			
			class PlotLoader : public java::lang::Object {
				public:
			            PlotLoader(jobject _jthis, bool copy);
			            PlotLoader(const PlotLoader &);
			        
				PlotLoader(PlotGraphJPanel plotGraphJPanel_0);
				virtual ~PlotLoader();
				ParseOptions getParseOptions();
				void setParseOptions(ParseOptions parseOptions_0);
				static void setForcedLineFilterPattern(jstring string_0,jboolean boolean_1);
				static void lock_value_for_plot_versus_line_number(jboolean boolean_0,jboolean boolean_1);
				static void setFieldSeparator(jstring string_0);
				void Reload();
				void setFieldSelectPattern(jstring string_0);
				static void set_plot_verses_line_number(jboolean boolean_0);
				static void set_use_reverse_line_number(jboolean boolean_0);
				static void set_start_at_line_number(jint int_0);
				static void set_end_at_line_number(jint int_0);
				void set_load_info_panel(utils::URLLoadInfoPanelInterface uRLLoadInfoPanelInterface_0);
				java::util::List LoadURL(jstring string_0,javax::swing::ProgressMonitor progressMonitor_1);
				void setFieldSelectPatternEnabled(jboolean boolean_0);
				utils::URLLoadInfoPanelInterface get_load_info_panel();
				void set_options_hash_table(java::util::Hashtable hashtable_0);
				java::util::Hashtable get_options_hash_table();
				jint get_max_points_per_plot();
				void set_max_points_per_plot(jint int_0);
				java::util::Vector get_extra_pds_vector();
				void set_extra_pds_vector(java::util::Vector vector_0);
				void set_max_x(jdouble double_0);
				jdouble get_max_x();
				void set_min_x(jdouble double_0);
				jdouble get_min_x();
				void set_max_y(jdouble double_0);
				jdouble get_max_y();
				void set_min_y(jdouble double_0);
				jdouble get_min_y();
				static jstring getDateFormatString();
				static void setDateFormatString(jstring string_0);
				jstring getLineFilterPattern();
				void setLineFilterPattern(jstring string_0);
				jint getMax_lines_per_file();
				void setMax_lines_per_file(jint int_0);
				jstring getFieldSelectPattern();
				jboolean isFieldSelectPatternEnabled();
				PlotGraphJPanel getPlotGraphJPanel();
				void setPlotGraphJPanel(PlotGraphJPanel plotGraphJPanel_0);
			}; // end class PlotLoader
		} // end namespace diagapplet
	} // end namespace plotter

	namespace diagapplet{
		namespace CodeGen{
			
			class ChannelInfo : public java::lang::Object {
				public:
			            ChannelInfo(jobject _jthis, bool copy);
			            ChannelInfo(const ChannelInfo &);
			        
				ChannelInfo();
				virtual ~ChannelInfo();
			}; // end class ChannelInfo
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenTextFieldWrapper : public java::awt::TextField {
				public:
			            CodeGenTextFieldWrapper(jobject _jthis, bool copy);
			            CodeGenTextFieldWrapper(const CodeGenTextFieldWrapper &);
			        
				virtual ~CodeGenTextFieldWrapper();
			}; // end class CodeGenTextFieldWrapper
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenCommonInterface : public java::lang::Object {
				public:
			            CodeGenCommonInterface(jobject _jthis, bool copy);
			            CodeGenCommonInterface(const CodeGenCommonInterface &);
			        
				CodeGenCommonInterface();
				virtual ~CodeGenCommonInterface();
			}; // end class CodeGenCommonInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class Ada_Generator : public java::lang::Object {
				public:
			            Ada_Generator(jobject _jthis, bool copy);
			            Ada_Generator(const Ada_Generator &);
			        
				virtual ~Ada_Generator();
				static void GenerateAdaSpec(jobjectArray stringArray_0,CodeGenCommonInterface2 codeGenCommonInterface2_1,jstring string_2,java::util::Hashtable hashtable_3);
				static void GenerateAdaBody(jobjectArray stringArray_0,CodeGenCommonInterface2 codeGenCommonInterface2_1,jstring string_2,java::util::Hashtable hashtable_3);
			}; // end class Ada_Generator
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenCodeTextAreaInterface : public java::lang::Object {
				public:
			            CodeGenCodeTextAreaInterface(jobject _jthis, bool copy);
			            CodeGenCodeTextAreaInterface(const CodeGenCodeTextAreaInterface &);
			        
				CodeGenCodeTextAreaInterface();
				virtual ~CodeGenCodeTextAreaInterface();
			}; // end class CodeGenCodeTextAreaInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenTextAreaInterface : public java::lang::Object {
				public:
			            CodeGenTextAreaInterface(jobject _jthis, bool copy);
			            CodeGenTextAreaInterface(const CodeGenTextAreaInterface &);
			        
				CodeGenTextAreaInterface();
				virtual ~CodeGenTextAreaInterface();
			}; // end class CodeGenTextAreaInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class CodeGenCmdLine : public java::lang::Object {
				public:
			            CodeGenCmdLine(jobject _jthis, bool copy);
			            CodeGenCmdLine(const CodeGenCmdLine &);
			        
				CodeGenCmdLine();
				virtual ~CodeGenCmdLine();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class CodeGenCmdLine
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class SplitInfoToken : public java::lang::Object {
				public:
			            SplitInfoToken(jobject _jthis, bool copy);
			            SplitInfoToken(const SplitInfoToken &);
			        
				SplitInfoToken(jstring string_0);
				virtual ~SplitInfoToken();
			}; // end class SplitInfoToken
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class DiagNMLMsgDict : public java::lang::Object {
				public:
			            DiagNMLMsgDict(jobject _jthis, bool copy);
			            DiagNMLMsgDict(const DiagNMLMsgDict &);
			        
				DiagNMLMsgDict();
				virtual ~DiagNMLMsgDict();
				jint formatMsg(rcs::nml::NMLFormatConverter nMLFormatConverter_0);
				void bytesNotUsed(jint int_0,jstring string_1,jboolean boolean_2);
				void tokensNotUsed(jint int_0,jstring string_1,jboolean boolean_2);
				void miscError(java::lang::Exception exception_0);
				void miscError();
				jlong getEstimatedSize(jint int_0);
				static void ErrorPrint(jstring string_0);
				jlong getMaxEstimatedSize();
				void SetModuleInfoObject(ModuleInfoInterface moduleInfoInterface_0);
				jint get_failed_count();
				jstring toString();
			}; // end class DiagNMLMsgDict
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class DiagNMLMsgDictCreatorInterface : public java::lang::Object {
				public:
			            DiagNMLMsgDictCreatorInterface(jobject _jthis, bool copy);
			            DiagNMLMsgDictCreatorInterface(const DiagNMLMsgDictCreatorInterface &);
			        
				DiagNMLMsgDictCreatorInterface();
				virtual ~DiagNMLMsgDictCreatorInterface();
			}; // end class DiagNMLMsgDictCreatorInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class ByteArrayObject : public java::lang::Object {
				public:
			            ByteArrayObject(jobject _jthis, bool copy);
			            ByteArrayObject(const ByteArrayObject &);
			        
				virtual ~ByteArrayObject();
			}; // end class ByteArrayObject
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class ModuleInfo : public java::lang::Object {
				public:
			            ModuleInfo(jobject _jthis, bool copy);
			            ModuleInfo(const ModuleInfo &);
			        
				ModuleInfo(DiagNMLMsgDictCreatorInterface diagNMLMsgDictCreatorInterface_0,rcs::nml::NMLConnectionCreatorInterface nMLConnectionCreatorInterface_1);
				virtual ~ModuleInfo();
				static void ClearStaticData();
				jint disconnect();
				rcs::nml::NMLConnectionCreatorInterface get_nml_creator();
				jstring RemoveStartingEndingSpace(jstring string_0);
				static rcs::nml::NMLFormatConvertErrCallbackInterface get_nml_format_err_callback();
				void SetNMLConfigFile(jstring string_0);
				java::util::Vector getAuxAvailableMessageFilters();
				java::util::Vector getAuxMessages();
				java::util::Hashtable get_conflict_m_structInfoHashTable();
				static void addExcludedIncludePattern(jstring string_0);
				void CheckIncludedFile(jstring string_0);
				rcs::nml::NMLConnectionInterface createExtraCommandChannel();
				void AddAuxInput(jstring string_0);
				static jlong doSimpleLongMath(jstring string_0);
				rcs::nml::NMLMessageDictionary get_stat_msg_dict();
				DiagNMLMsgDictInterface get_aux_diag_msg_write_dict();
				DiagNMLMsgDictInterface get_aux_diag_msg_read_dict();
				rcs::nml::NMLConnectionInterface createExtraStatusChannel();
				void AddAuxOutput(jstring string_0);
				static jint doArrayLengthMath(jstring string_0);
				jboolean isMathString(jstring string_0);
				jstring ReplaceDefinedValues(jstring string_0,jint int_1,java::util::Hashtable hashtable_2);
				void setHost(jstring string_0);
				void writeStat(jstring string_0);
				static jboolean is_check_errlog_flag_set();
				static jstring readErrlogData();
				jboolean IsAncestor(jstring string_0);
				jboolean get_created_from_header();
				static void AddExtraHeader(jstring string_0);
				rcs::nml::NMLMessageDictionary get_cmd_msg_dict();
				void AddAllAuxMessagesFromHeader();
				static jstring get_last_loading_module_string();
				void addAuxAvailableMessageFilter(jstring string_0);
				jstring getFormatFunction();
				jstring getSymbolLookup();
				void writeCmd(jstring string_0);
				jstring updateCmdData();
				jstring updateStatData();
				jint LoadInfo();
				jint LoadInfo(jstring string_0,jstring string_1);
				void AddHeader(jstring string_0);
				void AddAuxInputType(jstring string_0);
				jint LoadPredefinedTypes();
				jint LoadAuxTypes();
				jint LoadAuxTypeFile(jstring string_0);
				static void AddDCmdOption(jstring string_0);
				static void AddCmdLineDefaultValue(jstring string_0,jstring string_1);
				static void AddDefaultTypes();
				jint LoadPredefinedTypeFile(jstring string_0);
				void AddAllAuxMessages();
				jstring toString();
				jstring getName();
				jint connect();
			}; // end class ModuleInfo
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace utils{
			
			class FastListPanelItem : public java::lang::Object {
				public:
			            FastListPanelItem(jobject _jthis, bool copy);
			            FastListPanelItem(const FastListPanelItem &);
			        
				virtual ~FastListPanelItem();
				jstring toString();
			}; // end class FastListPanelItem
		} // end namespace diagapplet
	} // end namespace utils

	namespace diagapplet{
		
		class HierarchyDraw : public java::lang::Object {
			public:
		            HierarchyDraw(jobject _jthis, bool copy);
		            HierarchyDraw(const HierarchyDraw &);
		        
			HierarchyDraw(java::awt::Component component_0);
			virtual ~HierarchyDraw();
			java::awt::Dimension getPreferredSize();
			java::awt::Dimension getMinimumSize();
			void componentResized(java::awt::event::ComponentEvent componentEvent_0);
			void componentMoved(java::awt::event::ComponentEvent componentEvent_0);
			void componentShown(java::awt::event::ComponentEvent componentEvent_0);
			void componentHidden(java::awt::event::ComponentEvent componentEvent_0);
			void paint(java::awt::Graphics graphics_0);
			static void DebugPrint(jstring string_0);
			static void ErrorPrint(jstring string_0);
			jboolean UpdateDisplay(jboolean boolean_0);
			void paintHierarchy(java::awt::Graphics graphics_0);
			void FindAllParents(java::util::Hashtable hashtable_0,utils::URLLoadInfoPanelInterface uRLLoadInfoPanelInterface_1);
			jint computeMaxX();
			void monitored_repaint();
			jint computeMaxY();
			jstring getModulesListSelectedItem();
			utils::CountListInterface getCountList();
			void setCountList(utils::CountList countList_0);
			static void DebugPrint2(jstring string_0);
			CodeGen::ModuleInfo getModuleByPosition(jint int_0,jint int_1);
			void clear();
			jint print(java::awt::Graphics graphics_0,java::awt::print::PageFormat pageFormat_1,jint int_2);
			void print();
			void reset();
		}; // end class HierarchyDraw
	} // end namespace diagapplet

	namespace diagapplet{
		
		class CodeFileInfo : public java::lang::Object {
			public:
		            CodeFileInfo(jobject _jthis, bool copy);
		            CodeFileInfo(const CodeFileInfo &);
		        
			virtual ~CodeFileInfo();
		}; // end class CodeFileInfo
	} // end namespace diagapplet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Min : public java::lang::Object {
								public:
							            Min(jobject _jthis, bool copy);
							            Min(const Min &);
							        
								Min();
								virtual ~Min();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class Min
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Divide : public java::lang::Object {
								public:
							            Divide(jobject _jthis, bool copy);
							            Divide(const Divide &);
							        
								Divide();
								virtual ~Divide();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class Divide
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Identity : public java::lang::Object {
								public:
							            Identity(jobject _jthis, bool copy);
							            Identity(const Identity &);
							        
								Identity();
								virtual ~Identity();
								DifferentiableUnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Identity
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Minus : public java::lang::Object {
								public:
							            Minus(jobject _jthis, bool copy);
							            Minus(const Minus &);
							        
								Minus();
								virtual ~Minus();
								DifferentiableUnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Minus
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								
								class LegendreHighPrecisionRuleFactory : public BaseRuleFactory {
									public:
								            LegendreHighPrecisionRuleFactory(jobject _jthis, bool copy);
								            LegendreHighPrecisionRuleFactory(const LegendreHighPrecisionRuleFactory &);
								        
									LegendreHighPrecisionRuleFactory();
									virtual ~LegendreHighPrecisionRuleFactory();
								}; // end class LegendreHighPrecisionRuleFactory
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							
							class RombergIntegrator : public BaseAbstractUnivariateIntegrator {
								public:
							            RombergIntegrator(jobject _jthis, bool copy);
							            RombergIntegrator(const RombergIntegrator &);
							        
								RombergIntegrator(jdouble double_0,jdouble double_1,jint int_2,jint int_3);
								RombergIntegrator();
								RombergIntegrator(jint int_0,jint int_1);
								virtual ~RombergIntegrator();
							}; // end class RombergIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							
							class TrapezoidIntegrator : public BaseAbstractUnivariateIntegrator {
								public:
							            TrapezoidIntegrator(jobject _jthis, bool copy);
							            TrapezoidIntegrator(const TrapezoidIntegrator &);
							        
								TrapezoidIntegrator(jdouble double_0,jdouble double_1,jint int_2,jint int_3);
								TrapezoidIntegrator();
								TrapezoidIntegrator(jint int_0,jint int_1);
								virtual ~TrapezoidIntegrator();
							}; // end class TrapezoidIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							
							class SimpsonIntegrator : public BaseAbstractUnivariateIntegrator {
								public:
							            SimpsonIntegrator(jobject _jthis, bool copy);
							            SimpsonIntegrator(const SimpsonIntegrator &);
							        
								SimpsonIntegrator(jdouble double_0,jdouble double_1,jint int_2,jint int_3);
								SimpsonIntegrator();
								SimpsonIntegrator(jint int_0,jint int_1);
								virtual ~SimpsonIntegrator();
							}; // end class SimpsonIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace integration

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class MullerSolver : public AbstractUnivariateSolver {
								public:
							            MullerSolver(jobject _jthis, bool copy);
							            MullerSolver(const MullerSolver &);
							        
								MullerSolver();
								MullerSolver(jdouble double_0,jdouble double_1);
								MullerSolver(jdouble double_0);
								virtual ~MullerSolver();
							}; // end class MullerSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class BracketingNthOrderBrentSolver : public AbstractUnivariateSolver {
								public:
							            BracketingNthOrderBrentSolver(jobject _jthis, bool copy);
							            BracketingNthOrderBrentSolver(const BracketingNthOrderBrentSolver &);
							        
								BracketingNthOrderBrentSolver();
								BracketingNthOrderBrentSolver(jdouble double_0,jint int_1);
								BracketingNthOrderBrentSolver(jdouble double_0,jdouble double_1,jint int_2);
								BracketingNthOrderBrentSolver(jdouble double_0,jdouble double_1,jdouble double_2,jint int_3);
								virtual ~BracketingNthOrderBrentSolver();
								jdouble solve(jint int_0,UnivariateFunction univariateFunction_1,jdouble double_2,jdouble double_3,AllowedSolution allowedSolution_4);
								jdouble solve(jint int_0,UnivariateFunction univariateFunction_1,jdouble double_2,jdouble double_3,jdouble double_4,AllowedSolution allowedSolution_5);
								jint getMaximalOrder();
							}; // end class BracketingNthOrderBrentSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class BisectionSolver : public AbstractUnivariateSolver {
								public:
							            BisectionSolver(jobject _jthis, bool copy);
							            BisectionSolver(const BisectionSolver &);
							        
								BisectionSolver();
								BisectionSolver(jdouble double_0,jdouble double_1);
								BisectionSolver(jdouble double_0);
								virtual ~BisectionSolver();
							}; // end class BisectionSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class IllinoisSolver : public BaseSecantSolver {
								public:
							            IllinoisSolver(jobject _jthis, bool copy);
							            IllinoisSolver(const IllinoisSolver &);
							        
								IllinoisSolver(jdouble double_0,jdouble double_1,jdouble double_2);
								IllinoisSolver(jdouble double_0,jdouble double_1);
								IllinoisSolver(jdouble double_0);
								IllinoisSolver();
								virtual ~IllinoisSolver();
							}; // end class IllinoisSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class BracketedUnivariateSolver : public java::lang::Object {
								public:
							            BracketedUnivariateSolver(jobject _jthis, bool copy);
							            BracketedUnivariateSolver(const BracketedUnivariateSolver &);
							        
								BracketedUnivariateSolver();
								virtual ~BracketedUnivariateSolver();
							}; // end class BracketedUnivariateSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class RegulaFalsiSolver : public BaseSecantSolver {
								public:
							            RegulaFalsiSolver(jobject _jthis, bool copy);
							            RegulaFalsiSolver(const RegulaFalsiSolver &);
							        
								RegulaFalsiSolver(jdouble double_0,jdouble double_1,jdouble double_2);
								RegulaFalsiSolver(jdouble double_0,jdouble double_1);
								RegulaFalsiSolver(jdouble double_0);
								RegulaFalsiSolver();
								virtual ~RegulaFalsiSolver();
							}; // end class RegulaFalsiSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class UnivariateSolver : public java::lang::Object {
								public:
							            UnivariateSolver(jobject _jthis, bool copy);
							            UnivariateSolver(const UnivariateSolver &);
							        
								UnivariateSolver();
								virtual ~UnivariateSolver();
							}; // end class UnivariateSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class PolynomialSolver : public java::lang::Object {
								public:
							            PolynomialSolver(jobject _jthis, bool copy);
							            PolynomialSolver(const PolynomialSolver &);
							        
								PolynomialSolver();
								virtual ~PolynomialSolver();
							}; // end class PolynomialSolver
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class PiecewiseBicubicSplineInterpolator : public java::lang::Object {
								public:
							            PiecewiseBicubicSplineInterpolator(jobject _jthis, bool copy);
							            PiecewiseBicubicSplineInterpolator(const PiecewiseBicubicSplineInterpolator &);
							        
								PiecewiseBicubicSplineInterpolator();
								virtual ~PiecewiseBicubicSplineInterpolator();
							}; // end class PiecewiseBicubicSplineInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class MicrosphereInterpolatingFunction : public java::lang::Object {
								public:
							            MicrosphereInterpolatingFunction(jobject _jthis, bool copy);
							            MicrosphereInterpolatingFunction(const MicrosphereInterpolatingFunction &);
							        
								virtual ~MicrosphereInterpolatingFunction();
								jdouble value(jdoubleArray doubleArray_0);
							}; // end class MicrosphereInterpolatingFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class UnivariateVectorFunction : public java::lang::Object {
							public:
						            UnivariateVectorFunction(jobject _jthis, bool copy);
						            UnivariateVectorFunction(const UnivariateVectorFunction &);
						        
							UnivariateVectorFunction();
							virtual ~UnivariateVectorFunction();
						}; // end class UnivariateVectorFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class DifferentiableUnivariateFunction : public java::lang::Object {
							public:
						            DifferentiableUnivariateFunction(jobject _jthis, bool copy);
						            DifferentiableUnivariateFunction(const DifferentiableUnivariateFunction &);
						        
							DifferentiableUnivariateFunction();
							virtual ~DifferentiableUnivariateFunction();
						}; // end class DifferentiableUnivariateFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class GraggBulirschStoerStepInterpolator : public sampling::AbstractStepInterpolator {
								public:
							            GraggBulirschStoerStepInterpolator(jobject _jthis, bool copy);
							            GraggBulirschStoerStepInterpolator(const GraggBulirschStoerStepInterpolator &);
							        
								GraggBulirschStoerStepInterpolator(GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator_0);
								GraggBulirschStoerStepInterpolator();
								virtual ~GraggBulirschStoerStepInterpolator();
								void readExternal(java::io::ObjectInput objectInput_0);
								void writeExternal(java::io::ObjectOutput objectOutput_0);
								void computeCoefficients(jint int_0,jdouble double_1);
								jdouble estimateError(jdoubleArray doubleArray_0);
							}; // end class GraggBulirschStoerStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							
							class EventHandler : public java::lang::Object {
								public:
							            EventHandler(jobject _jthis, bool copy);
							            EventHandler(const EventHandler &);
							        
								EventHandler();
								virtual ~EventHandler();
							}; // end class EventHandler
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace sampling{
							
							class FixedStepHandler : public java::lang::Object {
								public:
							            FixedStepHandler(jobject _jthis, bool copy);
							            FixedStepHandler(const FixedStepHandler &);
							        
								FixedStepHandler();
								virtual ~FixedStepHandler();
							}; // end class FixedStepHandler
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace sampling

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								
								class LearningFactorFunctionFactory : public java::lang::Object {
									public:
								            LearningFactorFunctionFactory(jobject _jthis, bool copy);
								            LearningFactorFunctionFactory(const LearningFactorFunctionFactory &);
								        
									virtual ~LearningFactorFunctionFactory();
									static LearningFactorFunction exponentialDecay(jdouble double_0,jdouble double_1,jlong long_2);
									static LearningFactorFunction quasiSigmoidDecay(jdouble double_0,jdouble double_1,jlong long_2);
								}; // end class LearningFactorFunctionFactory
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								
								class PSquarePercentile : public AbstractStorelessUnivariateStatistic {
									public:
								            PSquarePercentile(jobject _jthis, bool copy);
								            PSquarePercentile(const PSquarePercentile &);
								        
									PSquarePercentile(jdouble double_0);
									virtual ~PSquarePercentile();
									jdouble quantile();
									static PSquarePercentile::PSquareMarkers newMarkers(java::util::List list_0,jdouble double_1);
									jlong getN();
									jstring toString();
									jint hashCode();
									void clear();
									void increment(jdouble double_0);
									StorelessUnivariateStatistic copy();
									jdouble getResult();
								}; // end class PSquarePercentile
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace rank

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class SemiVariance : public AbstractUnivariateStatistic {
									public:
								            SemiVariance(jobject _jthis, bool copy);
								            SemiVariance(const SemiVariance &);
								        
									SemiVariance();
									SemiVariance(jboolean boolean_0,SemiVariance::Direction direction_1);
									SemiVariance(SemiVariance semiVariance_0);
									SemiVariance(jboolean boolean_0);
									SemiVariance(SemiVariance::Direction direction_0);
									virtual ~SemiVariance();
									SemiVariance::Direction getVarianceDirection();
									void setVarianceDirection(SemiVariance::Direction direction_0);
									jdouble evaluate(jdoubleArray doubleArray_0,jdouble double_1,SemiVariance::Direction direction_2);
									jdouble evaluate(jdoubleArray doubleArray_0,jdouble double_1,SemiVariance::Direction direction_2,jboolean boolean_3,jint int_4,jint int_5);
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jdouble evaluate(jdoubleArray doubleArray_0,SemiVariance::Direction direction_1);
									jdouble evaluate(jdoubleArray doubleArray_0,jdouble double_1);
									jboolean isBiasCorrected();
									void setBiasCorrected(jboolean boolean_0);
									SemiVariance copy();
									static void copy(SemiVariance semiVariance_0,SemiVariance semiVariance_1);
								}; // end class SemiVariance
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class Mean : public AbstractStorelessUnivariateStatistic {
									public:
								            Mean(jobject _jthis, bool copy);
								            Mean(const Mean &);
								        
									Mean();
									Mean(Mean mean_0);
									Mean(FirstMoment firstMoment_0);
									virtual ~Mean();
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jint int_2,jint int_3);
									jdouble evaluate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									void clear();
									void increment(jdouble double_0);
									static void copy(Mean mean_0,Mean mean_1);
									Mean copy();
									jdouble getResult();
								}; // end class Mean
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class AggregateSummaryStatistics : public java::lang::Object {
								public:
							            AggregateSummaryStatistics(jobject _jthis, bool copy);
							            AggregateSummaryStatistics(const AggregateSummaryStatistics &);
							        
								AggregateSummaryStatistics();
								AggregateSummaryStatistics(SummaryStatistics summaryStatistics_0);
								AggregateSummaryStatistics(SummaryStatistics summaryStatistics_0,SummaryStatistics summaryStatistics_1);
								virtual ~AggregateSummaryStatistics();
								static StatisticalSummaryValues aggregate(java::util::Collection collection_0);
								SummaryStatistics createContributingStatistics();
								jdouble getMax();
								jdouble getMin();
								jlong getN();
								jdouble getMean();
								jdouble getVariance();
								jdouble getStandardDeviation();
								StatisticalSummary getSummary();
								jdouble getSumsq();
								jdouble getGeometricMean();
								jdouble getSumOfLogs();
								jdouble getSecondMoment();
								jdouble getSum();
							}; // end class AggregateSummaryStatistics
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							
							class SynchronizedMultivariateSummaryStatistics : public MultivariateSummaryStatistics {
								public:
							            SynchronizedMultivariateSummaryStatistics(jobject _jthis, bool copy);
							            SynchronizedMultivariateSummaryStatistics(const SynchronizedMultivariateSummaryStatistics &);
							        
								SynchronizedMultivariateSummaryStatistics(jint int_0,jboolean boolean_1);
								virtual ~SynchronizedMultivariateSummaryStatistics();
								void addValue(jdoubleArray doubleArray_0);
								jint getDimension();
								jdoubleArray getMax();
								jdoubleArray getMin();
								jlong getN();
								jdoubleArray getMean();
								jdoubleArray getStandardDeviation();
								jdoubleArray getGeometricMean();
								jobjectArray getSumImpl();
								void setSumImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getSumsqImpl();
								void setSumsqImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getMinImpl();
								void setMinImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getMaxImpl();
								void setMaxImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getSumLogImpl();
								void setSumLogImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getGeoMeanImpl();
								void setGeoMeanImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jobjectArray getMeanImpl();
								void setMeanImpl(jobjectArray storelessUnivariateStatisticArray_0);
								jdoubleArray getSum();
								jdoubleArray getSumSq();
								jdoubleArray getSumLog();
								linear::RealMatrix getCovariance();
								jstring toString();
								jint hashCode();
								void clear();
							}; // end class SynchronizedMultivariateSummaryStatistics
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace descriptive

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							
							class EuclideanDoublePoint : public java::lang::Object {
								public:
							            EuclideanDoublePoint(jobject _jthis, bool copy);
							            EuclideanDoublePoint(const EuclideanDoublePoint &);
							        
								EuclideanDoublePoint(jdoubleArray doubleArray_0);
								virtual ~EuclideanDoublePoint();
								jdoubleArray getPoint();
								EuclideanDoublePoint centroidOf(java::util::Collection collection_0);
								jdouble distanceFrom(EuclideanDoublePoint euclideanDoublePoint_0);
								jstring toString();
								jint hashCode();
							}; // end class EuclideanDoublePoint
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace clustering{
							
							class KMeansPlusPlusClusterer : public java::lang::Object {
								public:
							            KMeansPlusPlusClusterer(jobject _jthis, bool copy);
							            KMeansPlusPlusClusterer(const KMeansPlusPlusClusterer &);
							        
								KMeansPlusPlusClusterer(java::util::Random random_0);
								virtual ~KMeansPlusPlusClusterer();
								java::util::List cluster(java::util::Collection collection_0,jint int_1,jint int_2,jint int_3);
								java::util::List cluster(java::util::Collection collection_0,jint int_1,jint int_2);
							}; // end class KMeansPlusPlusClusterer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace clustering

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							
							class StorelessCovariance : public Covariance {
								public:
							            StorelessCovariance(jobject _jthis, bool copy);
							            StorelessCovariance(const StorelessCovariance &);
							        
								StorelessCovariance(jint int_0);
								StorelessCovariance(jint int_0,jboolean boolean_1);
								virtual ~StorelessCovariance();
								jint getN();
								linear::RealMatrix getCovarianceMatrix();
								jdouble getCovariance(jint int_0,jint int_1);
								void append(StorelessCovariance storelessCovariance_0);
								void increment(jdoubleArray doubleArray_0);
							}; // end class StorelessCovariance
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace correlation{
							
							class PearsonsCorrelation : public java::lang::Object {
								public:
							            PearsonsCorrelation(jobject _jthis, bool copy);
							            PearsonsCorrelation(const PearsonsCorrelation &);
							        
								PearsonsCorrelation();
								PearsonsCorrelation(linear::RealMatrix realMatrix_0);
								PearsonsCorrelation(Covariance covariance_0);
								PearsonsCorrelation(linear::RealMatrix realMatrix_0,jint int_1);
								virtual ~PearsonsCorrelation();
								linear::RealMatrix computeCorrelationMatrix(linear::RealMatrix realMatrix_0);
								jdouble correlation(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								linear::RealMatrix getCorrelationMatrix();
								linear::RealMatrix getCorrelationStandardErrors();
								linear::RealMatrix getCorrelationPValues();
								linear::RealMatrix covarianceToCorrelation(linear::RealMatrix realMatrix_0);
							}; // end class PearsonsCorrelation
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace correlation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace ranking{
							
							class TiesStrategy : public java::lang::Enum {
								public:
							            TiesStrategy(jobject _jthis, bool copy);
							            TiesStrategy(const TiesStrategy &);
							        
								virtual ~TiesStrategy();
								static jobjectArray values();
								static TiesStrategy valueOf(jstring string_0);
							}; // end class TiesStrategy
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace ranking

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace ranking{
							
							class RankingAlgorithm : public java::lang::Object {
								public:
							            RankingAlgorithm(jobject _jthis, bool copy);
							            RankingAlgorithm(const RankingAlgorithm &);
							        
								RankingAlgorithm();
								virtual ~RankingAlgorithm();
							}; // end class RankingAlgorithm
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace ranking

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							
							class NormalApproximationInterval : public java::lang::Object {
								public:
							            NormalApproximationInterval(jobject _jthis, bool copy);
							            NormalApproximationInterval(const NormalApproximationInterval &);
							        
								NormalApproximationInterval();
								virtual ~NormalApproximationInterval();
								ConfidenceInterval createInterval(jint int_0,jint int_1,jdouble double_2);
							}; // end class NormalApproximationInterval
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace interval{
							
							class ClopperPearsonInterval : public java::lang::Object {
								public:
							            ClopperPearsonInterval(jobject _jthis, bool copy);
							            ClopperPearsonInterval(const ClopperPearsonInterval &);
							        
								ClopperPearsonInterval();
								virtual ~ClopperPearsonInterval();
								ConfidenceInterval createInterval(jint int_0,jint int_1,jdouble double_2);
							}; // end class ClopperPearsonInterval
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace stat
	} // end namespace interval

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class LinearConstraint : public java::lang::Object {
								public:
							            LinearConstraint(jobject _jthis, bool copy);
							            LinearConstraint(const LinearConstraint &);
							        
								LinearConstraint(jdoubleArray doubleArray_0,Relationship relationship_1,jdouble double_2);
								LinearConstraint(linear::RealVector realVector_0,jdouble double_1,Relationship relationship_2,linear::RealVector realVector_3,jdouble double_4);
								LinearConstraint(jdoubleArray doubleArray_0,jdouble double_1,Relationship relationship_2,jdoubleArray doubleArray_3,jdouble double_4);
								LinearConstraint(linear::RealVector realVector_0,Relationship relationship_1,jdouble double_2);
								virtual ~LinearConstraint();
								linear::RealVector getCoefficients();
								Relationship getRelationship();
								jint hashCode();
								jdouble getValue();
							}; // end class LinearConstraint
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						
						class PointValuePair : public util::Pair {
							public:
						            PointValuePair(jobject _jthis, bool copy);
						            PointValuePair(const PointValuePair &);
						        
							PointValuePair(jdoubleArray doubleArray_0,jdouble double_1);
							PointValuePair(jdoubleArray doubleArray_0,jdouble double_1,jboolean boolean_2);
							virtual ~PointValuePair();
							jdoubleArray getPoint();
							jdoubleArray getPointRef();
						}; // end class PointValuePair
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optim

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class Fraction : public java::lang::Number {
							public:
						            Fraction(jobject _jthis, bool copy);
						            Fraction(const Fraction &);
						        
							Fraction(jdouble double_0);
							Fraction(jdouble double_0,jdouble double_1,jint int_2);
							Fraction(jint int_0);
							Fraction(jint int_0,jint int_1);
							Fraction(jdouble double_0,jint int_1);
							virtual ~Fraction();
							Fraction multiply(Fraction fraction_0);
							Fraction multiply(jint int_0);
							Fraction subtract(jint int_0);
							Fraction subtract(Fraction fraction_0);
							Fraction reciprocal();
							Fraction negate();
							static Fraction getReducedFraction(jint int_0,jint int_1);
							jint getDenominator();
							jint getNumerator();
							jdouble percentageValue();
							Fraction add(jint int_0);
							Fraction add(Fraction fraction_0);
							jstring toString();
							jint hashCode();
							Fraction abs();
							jint compareTo(Fraction fraction_0);
							jint intValue();
							jlong longValue();
							jfloat floatValue();
							jdouble doubleValue();
							FractionField getField();
							Fraction divide(Fraction fraction_0);
							Fraction divide(jint int_0);
						}; // end class Fraction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class ParetoDistribution : public AbstractRealDistribution {
							public:
						            ParetoDistribution(jobject _jthis, bool copy);
						            ParetoDistribution(const ParetoDistribution &);
						        
							ParetoDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							ParetoDistribution(jdouble double_0,jdouble double_1);
							ParetoDistribution();
							ParetoDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							ParetoDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							virtual ~ParetoDistribution();
							jdouble getShape();
							jdouble getScale();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0,jdouble double_1);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble sample();
							jdouble logDensity(jdouble double_0);
						}; // end class ParetoDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class ExponentialDistribution : public AbstractRealDistribution {
							public:
						            ExponentialDistribution(jobject _jthis, bool copy);
						            ExponentialDistribution(const ExponentialDistribution &);
						        
							ExponentialDistribution(jdouble double_0,jdouble double_1);
							ExponentialDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1);
							ExponentialDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							ExponentialDistribution(jdouble double_0);
							virtual ~ExponentialDistribution();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble sample();
							jdouble getMean();
							jdouble logDensity(jdouble double_0);
						}; // end class ExponentialDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class GeometricDistribution : public AbstractIntegerDistribution {
							public:
						            GeometricDistribution(jobject _jthis, bool copy);
						            GeometricDistribution(const GeometricDistribution &);
						        
							GeometricDistribution(jdouble double_0);
							GeometricDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1);
							virtual ~GeometricDistribution();
							jdouble getProbabilityOfSuccess();
							jdouble probability(jint int_0);
							jdouble cumulativeProbability(jint int_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jint getSupportLowerBound();
							jint getSupportUpperBound();
							jboolean isSupportConnected();
							jdouble logProbability(jint int_0);
						}; // end class GeometricDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class BetaDistribution : public AbstractRealDistribution {
							public:
						            BetaDistribution(jobject _jthis, bool copy);
						            BetaDistribution(const BetaDistribution &);
						        
							BetaDistribution(jdouble double_0,jdouble double_1);
							BetaDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							BetaDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							BetaDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							virtual ~BetaDistribution();
							jdouble getAlpha();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble logDensity(jdouble double_0);
							jdouble getBeta();
						}; // end class BetaDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class PascalDistribution : public AbstractIntegerDistribution {
							public:
						            PascalDistribution(jobject _jthis, bool copy);
						            PascalDistribution(const PascalDistribution &);
						        
							PascalDistribution(random::RandomGenerator randomGenerator_0,jint int_1,jdouble double_2);
							PascalDistribution(jint int_0,jdouble double_1);
							virtual ~PascalDistribution();
							jdouble getProbabilityOfSuccess();
							jdouble probability(jint int_0);
							jdouble cumulativeProbability(jint int_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jint getSupportLowerBound();
							jint getSupportUpperBound();
							jboolean isSupportConnected();
							jdouble logProbability(jint int_0);
							jint getNumberOfSuccesses();
						}; // end class PascalDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class NormalDistribution : public AbstractRealDistribution {
							public:
						            NormalDistribution(jobject _jthis, bool copy);
						            NormalDistribution(const NormalDistribution &);
						        
							NormalDistribution(jdouble double_0,jdouble double_1);
							NormalDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							NormalDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							NormalDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							NormalDistribution();
							virtual ~NormalDistribution();
							jdouble probability(jdouble double_0,jdouble double_1);
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0,jdouble double_1);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble sample();
							jdouble getMean();
							jdouble getStandardDeviation();
							jdouble logDensity(jdouble double_0);
						}; // end class NormalDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class SaddlePointExpansion : public java::lang::Object {
							public:
						            SaddlePointExpansion(jobject _jthis, bool copy);
						            SaddlePointExpansion(const SaddlePointExpansion &);
						        
							virtual ~SaddlePointExpansion();
						}; // end class SaddlePointExpansion
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class ZipfDistribution : public AbstractIntegerDistribution {
							public:
						            ZipfDistribution(jobject _jthis, bool copy);
						            ZipfDistribution(const ZipfDistribution &);
						        
							ZipfDistribution(random::RandomGenerator randomGenerator_0,jint int_1,jdouble double_2);
							ZipfDistribution(jint int_0,jdouble double_1);
							virtual ~ZipfDistribution();
							jint getNumberOfElements();
							jdouble probability(jint int_0);
							jdouble cumulativeProbability(jint int_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jint getSupportLowerBound();
							jint getSupportUpperBound();
							jboolean isSupportConnected();
							jdouble logProbability(jint int_0);
							jdouble getExponent();
						}; // end class ZipfDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class EnumeratedDistribution : public java::lang::Object {
							public:
						            EnumeratedDistribution(jobject _jthis, bool copy);
						            EnumeratedDistribution(const EnumeratedDistribution &);
						        
							EnumeratedDistribution(random::RandomGenerator randomGenerator_0,java::util::List list_1);
							EnumeratedDistribution(java::util::List list_0);
							virtual ~EnumeratedDistribution();
							java::util::List getPmf();
							void reseedRandomGenerator(jlong long_0);
						}; // end class EnumeratedDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class WeibullDistribution : public AbstractRealDistribution {
							public:
						            WeibullDistribution(jobject _jthis, bool copy);
						            WeibullDistribution(const WeibullDistribution &);
						        
							WeibullDistribution(jdouble double_0,jdouble double_1);
							WeibullDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							WeibullDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							WeibullDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							virtual ~WeibullDistribution();
							jdouble getShape();
							jdouble getScale();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble inverseCumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble logDensity(jdouble double_0);
						}; // end class WeibullDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class KolmogorovSmirnovDistribution : public java::lang::Object {
							public:
						            KolmogorovSmirnovDistribution(jobject _jthis, bool copy);
						            KolmogorovSmirnovDistribution(const KolmogorovSmirnovDistribution &);
						        
							KolmogorovSmirnovDistribution(jint int_0);
							virtual ~KolmogorovSmirnovDistribution();
							jdouble cdf(jdouble double_0,jboolean boolean_1);
							jdouble cdf(jdouble double_0);
							jdouble cdfExact(jdouble double_0);
						}; // end class KolmogorovSmirnovDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class FDistribution : public AbstractRealDistribution {
							public:
						            FDistribution(jobject _jthis, bool copy);
						            FDistribution(const FDistribution &);
						        
							FDistribution(jdouble double_0,jdouble double_1);
							FDistribution(jdouble double_0,jdouble double_1,jdouble double_2);
							FDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2);
							FDistribution(random::RandomGenerator randomGenerator_0,jdouble double_1,jdouble double_2,jdouble double_3);
							virtual ~FDistribution();
							jdouble getNumeratorDegreesOfFreedom();
							jdouble getDenominatorDegreesOfFreedom();
							jdouble density(jdouble double_0);
							jdouble cumulativeProbability(jdouble double_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jdouble getSupportLowerBound();
							jdouble getSupportUpperBound();
							jboolean isSupportLowerBoundInclusive();
							jboolean isSupportUpperBoundInclusive();
							jboolean isSupportConnected();
							jdouble logDensity(jdouble double_0);
						}; // end class FDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class BinomialDistribution : public AbstractIntegerDistribution {
							public:
						            BinomialDistribution(jobject _jthis, bool copy);
						            BinomialDistribution(const BinomialDistribution &);
						        
							BinomialDistribution(jint int_0,jdouble double_1);
							BinomialDistribution(random::RandomGenerator randomGenerator_0,jint int_1,jdouble double_2);
							virtual ~BinomialDistribution();
							jdouble getProbabilityOfSuccess();
							jint getNumberOfTrials();
							jdouble probability(jint int_0);
							jdouble cumulativeProbability(jint int_0);
							jdouble getNumericalMean();
							jdouble getNumericalVariance();
							jint getSupportLowerBound();
							jint getSupportUpperBound();
							jboolean isSupportConnected();
							jdouble logProbability(jint int_0);
						}; // end class BinomialDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace distribution{
						
						class RealDistribution : public java::lang::Object {
							public:
						            RealDistribution(jobject _jthis, bool copy);
						            RealDistribution(const RealDistribution &);
						        
							RealDistribution();
							virtual ~RealDistribution();
						}; // end class RealDistribution
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace distribution

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class FastCosineTransformer : public java::lang::Object {
							public:
						            FastCosineTransformer(jobject _jthis, bool copy);
						            FastCosineTransformer(const FastCosineTransformer &);
						        
							FastCosineTransformer(DctNormalization dctNormalization_0);
							virtual ~FastCosineTransformer();
							jdoubleArray transform(analysis::UnivariateFunction univariateFunction_0,jdouble double_1,jdouble double_2,jint int_3,TransformType transformType_4);
							jdoubleArray transform(jdoubleArray doubleArray_0,TransformType transformType_1);
						}; // end class FastCosineTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace transform{
						
						class DctNormalization : public java::lang::Enum {
							public:
						            DctNormalization(jobject _jthis, bool copy);
						            DctNormalization(const DctNormalization &);
						        
							virtual ~DctNormalization();
							static jobjectArray values();
							static DctNormalization valueOf(jstring string_0);
						}; // end class DctNormalization
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace transform

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							
							class BoundarySizeVisitor : public java::lang::Object {
								public:
							            BoundarySizeVisitor(jobject _jthis, bool copy);
							            BoundarySizeVisitor(const BoundarySizeVisitor &);
							        
								BoundarySizeVisitor();
								virtual ~BoundarySizeVisitor();
								BSPTreeVisitor::Order visitOrder(BSPTree bSPTree_0);
								void visitInternalNode(BSPTree bSPTree_0);
								void visitLeafNode(BSPTree bSPTree_0);
								jdouble getSize();
							}; // end class BoundarySizeVisitor
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace partitioning

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						
						class Vector : public java::lang::Object {
							public:
						            Vector(jobject _jthis, bool copy);
						            Vector(const Vector &);
						        
							Vector();
							virtual ~Vector();
						}; // end class Vector
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace geometry

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class TriDiagonalTransformer : public java::lang::Object {
							public:
						            TriDiagonalTransformer(jobject _jthis, bool copy);
						            TriDiagonalTransformer(const TriDiagonalTransformer &);
						        
							TriDiagonalTransformer(RealMatrix realMatrix_0);
							virtual ~TriDiagonalTransformer();
							RealMatrix getQ();
							RealMatrix getT();
							RealMatrix getQT();
						}; // end class TriDiagonalTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class DefaultIterativeLinearSolverEvent : public IterativeLinearSolverEvent {
							public:
						            DefaultIterativeLinearSolverEvent(jobject _jthis, bool copy);
						            DefaultIterativeLinearSolverEvent(const DefaultIterativeLinearSolverEvent &);
						        
							virtual ~DefaultIterativeLinearSolverEvent();
							RealVector getSolution();
							jboolean providesResidual();
							RealVector getRightHandSideVector();
							jdouble getNormOfResidual();
							RealVector getResidual();
						}; // end class DefaultIterativeLinearSolverEvent
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class HessenbergTransformer : public java::lang::Object {
							public:
						            HessenbergTransformer(jobject _jthis, bool copy);
						            HessenbergTransformer(const HessenbergTransformer &);
						        
							HessenbergTransformer(RealMatrix realMatrix_0);
							virtual ~HessenbergTransformer();
							RealMatrix getPT();
							RealMatrix getP();
							RealMatrix getH();
						}; // end class HessenbergTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class SparseFieldVector : public java::lang::Object {
							public:
						            SparseFieldVector(jobject _jthis, bool copy);
						            SparseFieldVector(const SparseFieldVector &);
						        
							SparseFieldVector(SparseFieldVector sparseFieldVector_0);
							SparseFieldVector(Field field_0,jint int_1,jint int_2);
							SparseFieldVector(Field field_0,jobjectArray fieldElementArray_1);
							SparseFieldVector(Field field_0);
							SparseFieldVector(Field field_0,jint int_1);
							virtual ~SparseFieldVector();
							void setEntry(jint int_0,FieldElement fieldElement_1);
							jobjectArray getData();
							FieldVector subtract(FieldVector fieldVector_0);
							SparseFieldVector subtract(SparseFieldVector sparseFieldVector_0);
							jint getDimension();
							FieldElement walkInOptimizedOrder(FieldVectorChangingVisitor fieldVectorChangingVisitor_0,jint int_1,jint int_2);
							FieldElement walkInOptimizedOrder(FieldVectorChangingVisitor fieldVectorChangingVisitor_0);
							FieldElement walkInOptimizedOrder(FieldVectorPreservingVisitor fieldVectorPreservingVisitor_0,jint int_1,jint int_2);
							FieldElement walkInOptimizedOrder(FieldVectorPreservingVisitor fieldVectorPreservingVisitor_0);
							FieldElement dotProduct(FieldVector fieldVector_0);
							FieldVector getSubVector(jint int_0,jint int_1);
							void setSubVector(jint int_0,FieldVector fieldVector_1);
							FieldVector mapAdd(FieldElement fieldElement_0);
							FieldVector mapAddToSelf(FieldElement fieldElement_0);
							FieldVector ebeDivide(FieldVector fieldVector_0);
							FieldVector ebeMultiply(FieldVector fieldVector_0);
							FieldVector mapMultiply(FieldElement fieldElement_0);
							FieldVector mapMultiplyToSelf(FieldElement fieldElement_0);
							FieldVector mapSubtract(FieldElement fieldElement_0);
							FieldVector mapSubtractToSelf(FieldElement fieldElement_0);
							FieldVector mapDivide(FieldElement fieldElement_0);
							FieldVector mapDivideToSelf(FieldElement fieldElement_0);
							FieldMatrix outerProduct(FieldVector fieldVector_0);
							FieldMatrix outerProduct(SparseFieldVector sparseFieldVector_0);
							FieldVector projection(FieldVector fieldVector_0);
							FieldElement walkInDefaultOrder(FieldVectorChangingVisitor fieldVectorChangingVisitor_0);
							FieldElement walkInDefaultOrder(FieldVectorPreservingVisitor fieldVectorPreservingVisitor_0,jint int_1,jint int_2);
							FieldElement walkInDefaultOrder(FieldVectorPreservingVisitor fieldVectorPreservingVisitor_0);
							FieldElement walkInDefaultOrder(FieldVectorChangingVisitor fieldVectorChangingVisitor_0,jint int_1,jint int_2);
							FieldVector mapInv();
							FieldVector mapInvToSelf();
							FieldVector add(SparseFieldVector sparseFieldVector_0);
							FieldVector add(FieldVector fieldVector_0);
							FieldVector append(SparseFieldVector sparseFieldVector_0);
							FieldVector append(FieldVector fieldVector_0);
							FieldVector append(FieldElement fieldElement_0);
							jint hashCode();
							jobjectArray toArray();
							Field getField();
							FieldVector copy();
							void set(FieldElement fieldElement_0);
							FieldElement getEntry(jint int_0);
						}; // end class SparseFieldVector
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class BiDiagonalTransformer : public java::lang::Object {
							public:
						            BiDiagonalTransformer(jobject _jthis, bool copy);
						            BiDiagonalTransformer(const BiDiagonalTransformer &);
						        
							BiDiagonalTransformer(RealMatrix realMatrix_0);
							virtual ~BiDiagonalTransformer();
							RealMatrix getV();
							RealMatrix getB();
							RealMatrix getU();
						}; // end class BiDiagonalTransformer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class SingularValueDecomposition : public java::lang::Object {
							public:
						            SingularValueDecomposition(jobject _jthis, bool copy);
						            SingularValueDecomposition(const SingularValueDecomposition &);
						        
							SingularValueDecomposition(RealMatrix realMatrix_0);
							virtual ~SingularValueDecomposition();
							RealMatrix getVT();
							RealMatrix getUT();
							jdoubleArray getSingularValues();
							jdouble getConditionNumber();
							jdouble getInverseConditionNumber();
							RealMatrix getS();
							jdouble getNorm();
							DecompositionSolver getSolver();
							RealMatrix getV();
							jint getRank();
							RealMatrix getU();
							RealMatrix getCovariance(jdouble double_0);
						}; // end class SingularValueDecomposition
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class MatrixUtils : public java::lang::Object {
							public:
						            MatrixUtils(jobject _jthis, bool copy);
						            MatrixUtils(const MatrixUtils &);
						        
							virtual ~MatrixUtils();
							static RealMatrix createRealDiagonalMatrix(jdoubleArray doubleArray_0);
							static jboolean isSymmetric(RealMatrix realMatrix_0,jdouble double_1);
							static FieldVector createFieldVector(jobjectArray fieldElementArray_0);
							static RealMatrix createRowRealMatrix(jdoubleArray doubleArray_0);
							static FieldMatrix createRowFieldMatrix(jobjectArray fieldElementArray_0);
							static FieldMatrix createColumnFieldMatrix(jobjectArray fieldElementArray_0);
							static void checkSymmetric(RealMatrix realMatrix_0,jdouble double_1);
							static Array2DRowRealMatrix fractionMatrixToRealMatrix(FieldMatrix fieldMatrix_0);
							static FieldMatrix createFieldMatrix(Field field_0,jint int_1,jint int_2);
							static FieldMatrix createFieldDiagonalMatrix(jobjectArray fieldElementArray_0);
							static void solveLowerTriangularSystem(RealMatrix realMatrix_0,RealVector realVector_1);
							static void solveUpperTriangularSystem(RealMatrix realMatrix_0,RealVector realVector_1);
							static RealMatrix blockInverse(RealMatrix realMatrix_0,jint int_1);
							static RealMatrix createRealIdentityMatrix(jint int_0);
							static void checkRowIndex(AnyMatrix anyMatrix_0,jint int_1);
							static void checkColumnIndex(AnyMatrix anyMatrix_0,jint int_1);
							static void checkAdditionCompatible(AnyMatrix anyMatrix_0,AnyMatrix anyMatrix_1);
							static void checkSubtractionCompatible(AnyMatrix anyMatrix_0,AnyMatrix anyMatrix_1);
							static void checkMultiplicationCompatible(AnyMatrix anyMatrix_0,AnyMatrix anyMatrix_1);
							static void checkMatrixIndex(AnyMatrix anyMatrix_0,jint int_1,jint int_2);
							static void checkSubMatrixIndex(AnyMatrix anyMatrix_0,jint int_1,jint int_2,jint int_3,jint int_4);
							static void checkSubMatrixIndex(AnyMatrix anyMatrix_0,jintArray intArray_1,jintArray intArray_2);
							static RealMatrix createRealMatrix(jint int_0,jint int_1);
							static RealMatrix inverse(RealMatrix realMatrix_0);
							static RealMatrix inverse(RealMatrix realMatrix_0,jdouble double_1);
							static RealMatrix createColumnRealMatrix(jdoubleArray doubleArray_0);
							static void serializeRealMatrix(RealMatrix realMatrix_0,java::io::ObjectOutputStream objectOutputStream_1);
							static void serializeRealVector(RealVector realVector_0,java::io::ObjectOutputStream objectOutputStream_1);
							static RealVector createRealVector(jdoubleArray doubleArray_0);
							static FieldMatrix createFieldIdentityMatrix(Field field_0,jint int_1);
							static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(FieldMatrix fieldMatrix_0);
						}; // end class MatrixUtils
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class NonPositiveDefiniteMatrixException : public exception::NumberIsTooSmallException {
							public:
						            NonPositiveDefiniteMatrixException(jobject _jthis, bool copy);
						            NonPositiveDefiniteMatrixException(const NonPositiveDefiniteMatrixException &);
						        
							NonPositiveDefiniteMatrixException(jdouble double_0,jint int_1,jdouble double_2);
							virtual ~NonPositiveDefiniteMatrixException();
							jint getRow();
							jint getColumn();
							jdouble getThreshold();
						}; // end class NonPositiveDefiniteMatrixException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class FieldVectorChangingVisitor : public java::lang::Object {
							public:
						            FieldVectorChangingVisitor(jobject _jthis, bool copy);
						            FieldVectorChangingVisitor(const FieldVectorChangingVisitor &);
						        
							FieldVectorChangingVisitor();
							virtual ~FieldVectorChangingVisitor();
						}; // end class FieldVectorChangingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class FieldVectorPreservingVisitor : public java::lang::Object {
							public:
						            FieldVectorPreservingVisitor(jobject _jthis, bool copy);
						            FieldVectorPreservingVisitor(const FieldVectorPreservingVisitor &);
						        
							FieldVectorPreservingVisitor();
							virtual ~FieldVectorPreservingVisitor();
						}; // end class FieldVectorPreservingVisitor
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class SparseFieldMatrix : public AbstractFieldMatrix {
							public:
						            SparseFieldMatrix(jobject _jthis, bool copy);
						            SparseFieldMatrix(const SparseFieldMatrix &);
						        
							SparseFieldMatrix(Field field_0,jint int_1,jint int_2);
							SparseFieldMatrix(Field field_0);
							SparseFieldMatrix(FieldMatrix fieldMatrix_0);
							SparseFieldMatrix(SparseFieldMatrix sparseFieldMatrix_0);
							virtual ~SparseFieldMatrix();
							void setEntry(jint int_0,jint int_1,FieldElement fieldElement_2);
							FieldMatrix createMatrix(jint int_0,jint int_1);
							void addToEntry(jint int_0,jint int_1,FieldElement fieldElement_2);
							void multiplyEntry(jint int_0,jint int_1,FieldElement fieldElement_2);
							jint getRowDimension();
							jint getColumnDimension();
							FieldMatrix copy();
							FieldElement getEntry(jint int_0,jint int_1);
						}; // end class SparseFieldMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class OpenMapRealVector : public SparseRealVector {
							public:
						            OpenMapRealVector(jobject _jthis, bool copy);
						            OpenMapRealVector(const OpenMapRealVector &);
						        
							OpenMapRealVector();
							OpenMapRealVector(jobjectArray doubleArray_0,jdouble double_1);
							OpenMapRealVector(OpenMapRealVector openMapRealVector_0);
							OpenMapRealVector(RealVector realVector_0);
							OpenMapRealVector(jint int_0,jint int_1,jdouble double_2);
							OpenMapRealVector(jint int_0,jdouble double_1);
							OpenMapRealVector(jdoubleArray doubleArray_0);
							OpenMapRealVector(jdoubleArray doubleArray_0,jdouble double_1);
							OpenMapRealVector(jobjectArray doubleArray_0);
							OpenMapRealVector(jint int_0,jint int_1);
							OpenMapRealVector(jint int_0);
							virtual ~OpenMapRealVector();
							void setEntry(jint int_0,jdouble double_1);
							jdouble getSparsity();
							RealVector subtract(RealVector realVector_0);
							OpenMapRealVector subtract(OpenMapRealVector openMapRealVector_0);
							jint getDimension();
							jdouble dotProduct(OpenMapRealVector openMapRealVector_0);
							OpenMapRealVector getSubVector(jint int_0,jint int_1);
							void setSubVector(jint int_0,RealVector realVector_1);
							OpenMapRealVector mapAdd(jdouble double_0);
							OpenMapRealVector mapAddToSelf(jdouble double_0);
							OpenMapRealVector ebeDivide(RealVector realVector_0);
							OpenMapRealVector ebeMultiply(RealVector realVector_0);
							jdouble getDistance(RealVector realVector_0);
							jdouble getDistance(OpenMapRealVector openMapRealVector_0);
							jdouble getL1Distance(OpenMapRealVector openMapRealVector_0);
							jdouble getL1Distance(RealVector realVector_0);
							jdouble getLInfDistance(RealVector realVector_0);
							OpenMapRealVector unitVector();
							void unitize();
							java::util::Iterator sparseIterator();
							RealVector add(RealVector realVector_0);
							OpenMapRealVector add(OpenMapRealVector openMapRealVector_0);
							OpenMapRealVector append(jdouble double_0);
							OpenMapRealVector append(RealVector realVector_0);
							OpenMapRealVector append(OpenMapRealVector openMapRealVector_0);
							jint hashCode();
							jdoubleArray toArray();
							jboolean isNaN();
							OpenMapRealVector copy();
							void set(jdouble double_0);
							jboolean isInfinite();
							jdouble getEntry(jint int_0);
						}; // end class OpenMapRealVector
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class SparseRealMatrix : public java::lang::Object {
							public:
						            SparseRealMatrix(jobject _jthis, bool copy);
						            SparseRealMatrix(const SparseRealMatrix &);
						        
							SparseRealMatrix();
							virtual ~SparseRealMatrix();
						}; // end class SparseRealMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class OpenMapRealMatrix : public AbstractRealMatrix {
							public:
						            OpenMapRealMatrix(jobject _jthis, bool copy);
						            OpenMapRealMatrix(const OpenMapRealMatrix &);
						        
							OpenMapRealMatrix(jint int_0,jint int_1);
							OpenMapRealMatrix(OpenMapRealMatrix openMapRealMatrix_0);
							virtual ~OpenMapRealMatrix();
							void setEntry(jint int_0,jint int_1,jdouble double_2);
							RealMatrix multiply(RealMatrix realMatrix_0);
							OpenMapRealMatrix multiply(OpenMapRealMatrix openMapRealMatrix_0);
							OpenMapRealMatrix subtract(RealMatrix realMatrix_0);
							OpenMapRealMatrix subtract(OpenMapRealMatrix openMapRealMatrix_0);
							OpenMapRealMatrix createMatrix(jint int_0,jint int_1);
							void addToEntry(jint int_0,jint int_1,jdouble double_2);
							void multiplyEntry(jint int_0,jint int_1,jdouble double_2);
							jint getRowDimension();
							jint getColumnDimension();
							OpenMapRealMatrix add(OpenMapRealMatrix openMapRealMatrix_0);
							OpenMapRealMatrix copy();
							jdouble getEntry(jint int_0,jint int_1);
						}; // end class OpenMapRealMatrix
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace linear{
						
						class ArrayRealVector : public RealVector {
							public:
						            ArrayRealVector(jobject _jthis, bool copy);
						            ArrayRealVector(const ArrayRealVector &);
						        
							ArrayRealVector(jdoubleArray doubleArray_0,ArrayRealVector arrayRealVector_1);
							ArrayRealVector(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							ArrayRealVector(ArrayRealVector arrayRealVector_0);
							ArrayRealVector(RealVector realVector_0);
							ArrayRealVector(jobjectArray doubleArray_0,jint int_1,jint int_2);
							ArrayRealVector(RealVector realVector_0,ArrayRealVector arrayRealVector_1);
							ArrayRealVector(ArrayRealVector arrayRealVector_0,RealVector realVector_1);
							ArrayRealVector(ArrayRealVector arrayRealVector_0,ArrayRealVector arrayRealVector_1);
							ArrayRealVector(ArrayRealVector arrayRealVector_0,jboolean boolean_1);
							ArrayRealVector();
							ArrayRealVector(jint int_0,jdouble double_1);
							ArrayRealVector(jint int_0);
							ArrayRealVector(ArrayRealVector arrayRealVector_0,jdoubleArray doubleArray_1);
							ArrayRealVector(jobjectArray doubleArray_0);
							ArrayRealVector(jdoubleArray doubleArray_0,jint int_1,jint int_2);
							ArrayRealVector(jdoubleArray doubleArray_0,jboolean boolean_1);
							ArrayRealVector(jdoubleArray doubleArray_0);
							virtual ~ArrayRealVector();
							void setEntry(jint int_0,jdouble double_1);
							ArrayRealVector subtract(RealVector realVector_0);
							jint getDimension();
							void addToEntry(jint int_0,jdouble double_1);
							jdouble getNorm();
							jdouble walkInOptimizedOrder(RealVectorPreservingVisitor realVectorPreservingVisitor_0,jint int_1,jint int_2);
							jdouble walkInOptimizedOrder(RealVectorPreservingVisitor realVectorPreservingVisitor_0);
							jdouble walkInOptimizedOrder(RealVectorChangingVisitor realVectorChangingVisitor_0);
							jdouble walkInOptimizedOrder(RealVectorChangingVisitor realVectorChangingVisitor_0,jint int_1,jint int_2);
							jdoubleArray getDataRef();
							jdouble dotProduct(RealVector realVector_0);
							RealVector getSubVector(jint int_0,jint int_1);
							void setSubVector(jint int_0,RealVector realVector_1);
							void setSubVector(jint int_0,jdoubleArray doubleArray_1);
							RealVector mapAddToSelf(jdouble double_0);
							ArrayRealVector ebeDivide(RealVector realVector_0);
							ArrayRealVector ebeMultiply(RealVector realVector_0);
							jdouble getDistance(RealVector realVector_0);
							jdouble getL1Norm();
							jdouble getLInfNorm();
							jdouble getL1Distance(RealVector realVector_0);
							jdouble getLInfDistance(RealVector realVector_0);
							RealVector mapMultiplyToSelf(jdouble double_0);
							RealVector mapSubtractToSelf(jdouble double_0);
							RealVector mapDivideToSelf(jdouble double_0);
							RealMatrix outerProduct(RealVector realVector_0);
							ArrayRealVector mapToSelf(analysis::UnivariateFunction univariateFunction_0);
							ArrayRealVector combineToSelf(jdouble double_0,jdouble double_1,RealVector realVector_2);
							jdouble walkInDefaultOrder(RealVectorPreservingVisitor realVectorPreservingVisitor_0,jint int_1,jint int_2);
							jdouble walkInDefaultOrder(RealVectorChangingVisitor realVectorChangingVisitor_0,jint int_1,jint int_2);
							jdouble walkInDefaultOrder(RealVectorChangingVisitor realVectorChangingVisitor_0);
							jdouble walkInDefaultOrder(RealVectorPreservingVisitor realVectorPreservingVisitor_0);
							ArrayRealVector add(RealVector realVector_0);
							jstring toString();
							RealVector append(RealVector realVector_0);
							RealVector append(jdouble double_0);
							ArrayRealVector append(ArrayRealVector arrayRealVector_0);
							jint hashCode();
							jdoubleArray toArray();
							ArrayRealVector combine(jdouble double_0,jdouble double_1,RealVector realVector_2);
							jboolean isNaN();
							ArrayRealVector copy();
							void set(jdouble double_0);
							jboolean isInfinite();
							jdouble getEntry(jint int_0);
							ArrayRealVector map(analysis::UnivariateFunction univariateFunction_0);
						}; // end class ArrayRealVector
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						namespace util{
							
							class ExceptionContext : public java::lang::Object {
								public:
							            ExceptionContext(jobject _jthis, bool copy);
							            ExceptionContext(const ExceptionContext &);
							        
								ExceptionContext(java::lang::Throwable throwable_0);
								virtual ~ExceptionContext();
								java::lang::Throwable getThrowable();
								jstring getMessage(java::util::Locale locale_0,jstring string_1);
								jstring getMessage();
								jstring getMessage(java::util::Locale locale_0);
								jstring getLocalizedMessage();
								java::util::Set getKeys();
							}; // end class ExceptionContext
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace exception
	} // end namespace util

	namespace crcl{
		namespace base{
			
			class InitCanonType : public CRCLCommandType {
				public:
			            InitCanonType(jobject _jthis, bool copy);
			            InitCanonType(const InitCanonType &);
			        
				InitCanonType();
				virtual ~InitCanonType();
			}; // end class InitCanonType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class JointStatusesType : public DataThingType {
				public:
			            JointStatusesType(jobject _jthis, bool copy);
			            JointStatusesType(const JointStatusesType &);
			        
				JointStatusesType();
				virtual ~JointStatusesType();
				java::util::List getJointStatus();
			}; // end class JointStatusesType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class JointStatusType : public DataThingType {
				public:
			            JointStatusType(jobject _jthis, bool copy);
			            JointStatusType(const JointStatusType &);
			        
				JointStatusType();
				virtual ~JointStatusType();
				java::math::BigInteger getJointNumber();
				java::math::BigDecimal getJointPosition();
				java::math::BigDecimal getJointVelocity();
				java::math::BigDecimal getJointTorqueOrForce();
				void setJointNumber(java::math::BigInteger bigInteger_0);
				void setJointPosition(java::math::BigDecimal bigDecimal_0);
				void setJointVelocity(java::math::BigDecimal bigDecimal_0);
				void setJointTorqueOrForce(java::math::BigDecimal bigDecimal_0);
			}; // end class JointStatusType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class MoveThroughToType : public MiddleCommandType {
				public:
			            MoveThroughToType(jobject _jthis, bool copy);
			            MoveThroughToType(const MoveThroughToType &);
			        
				MoveThroughToType();
				virtual ~MoveThroughToType();
				void setMoveStraight(jboolean boolean_0);
				jboolean isMoveStraight();
				java::util::List getWaypoint();
				java::math::BigInteger getNumPositions();
				void setNumPositions(java::math::BigInteger bigInteger_0);
			}; // end class MoveThroughToType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class StopConditionEnumType : public java::lang::Enum {
				public:
			            StopConditionEnumType(jobject _jthis, bool copy);
			            StopConditionEnumType(const StopConditionEnumType &);
			        
				virtual ~StopConditionEnumType();
				static StopConditionEnumType fromValue(jstring string_0);
				jstring value();
				static jobjectArray values();
				static StopConditionEnumType valueOf(jstring string_0);
			}; // end class StopConditionEnumType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class DirectoryFileComparator : public AbstractFileComparator {
							public:
						            DirectoryFileComparator(jobject _jthis, bool copy);
						            DirectoryFileComparator(const DirectoryFileComparator &);
						        
							DirectoryFileComparator();
							virtual ~DirectoryFileComparator();
							jint compare(java::io::File file_0,java::io::File file_1);
						}; // end class DirectoryFileComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class CanReadFileFilter : public AbstractFileFilter {
							public:
						            CanReadFileFilter(jobject _jthis, bool copy);
						            CanReadFileFilter(const CanReadFileFilter &);
						        
							virtual ~CanReadFileFilter();
							jboolean accept(java::io::File file_0);
						}; // end class CanReadFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class OrFileFilter : public AbstractFileFilter {
							public:
						            OrFileFilter(jobject _jthis, bool copy);
						            OrFileFilter(const OrFileFilter &);
						        
							OrFileFilter();
							OrFileFilter(IOFileFilter iOFileFilter_0,IOFileFilter iOFileFilter_1);
							OrFileFilter(java::util::List list_0);
							virtual ~OrFileFilter();
							void addFileFilter(IOFileFilter iOFileFilter_0);
							java::util::List getFileFilters();
							jboolean removeFileFilter(IOFileFilter iOFileFilter_0);
							void setFileFilters(java::util::List list_0);
							jstring toString();
							jboolean accept(java::io::File file_0,jstring string_1);
							jboolean accept(java::io::File file_0);
						}; // end class OrFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class FilenameUtils : public java::lang::Object {
						public:
					            FilenameUtils(jobject _jthis, bool copy);
					            FilenameUtils(const FilenameUtils &);
					        
						FilenameUtils();
						virtual ~FilenameUtils();
						static jboolean directoryContains(jstring string_0,jstring string_1);
						static jstring getBaseName(jstring string_0);
						static jstring separatorsToSystem(jstring string_0);
						static jstring removeExtension(jstring string_0);
						static jboolean equalsOnSystem(jstring string_0,jstring string_1);
						static jboolean wildcardMatchOnSystem(jstring string_0,jstring string_1);
						static jboolean equalsNormalized(jstring string_0,jstring string_1);
						static jboolean isExtension(jstring string_0,java::util::Collection collection_1);
						static jboolean isExtension(jstring string_0,jobjectArray stringArray_1);
						static jboolean isExtension(jstring string_0,jstring string_1);
						static jstring separatorsToUnix(jstring string_0);
						static jstring getFullPath(jstring string_0);
						static jstring getFullPathNoEndSeparator(jstring string_0);
						static jint indexOfExtension(jstring string_0);
						static jstring getPrefix(jstring string_0);
						static jboolean wildcardMatch(jstring string_0,jstring string_1,IOCase iOCase_2);
						static jboolean wildcardMatch(jstring string_0,jstring string_1);
						static jstring getPathNoEndSeparator(jstring string_0);
						static jboolean equalsNormalizedOnSystem(jstring string_0,jstring string_1);
						static jstring separatorsToWindows(jstring string_0);
						static jint indexOfLastSeparator(jstring string_0);
						static jstring normalizeNoEndSeparator(jstring string_0,jboolean boolean_1);
						static jstring normalizeNoEndSeparator(jstring string_0);
						static jboolean equals(jstring string_0,jstring string_1);
						static jboolean equals(jstring string_0,jstring string_1,jboolean boolean_2,IOCase iOCase_3);
						static jstring getName(jstring string_0);
						static jstring concat(jstring string_0,jstring string_1);
						static jstring normalize(jstring string_0,jboolean boolean_1);
						static jstring normalize(jstring string_0);
						static jint getPrefixLength(jstring string_0);
						static jstring getPath(jstring string_0);
						static jstring getExtension(jstring string_0);
					}; // end class FilenameUtils
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class AutoCloseInputStream : public ProxyInputStream {
							public:
						            AutoCloseInputStream(jobject _jthis, bool copy);
						            AutoCloseInputStream(const AutoCloseInputStream &);
						        
							AutoCloseInputStream(java::io::InputStream inputStream_0);
							virtual ~AutoCloseInputStream();
							void close();
						}; // end class AutoCloseInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class BOMInputStream : public ProxyInputStream {
							public:
						            BOMInputStream(jobject _jthis, bool copy);
						            BOMInputStream(const BOMInputStream &);
						        
							BOMInputStream(java::io::InputStream inputStream_0);
							BOMInputStream(java::io::InputStream inputStream_0,jboolean boolean_1);
							BOMInputStream(java::io::InputStream inputStream_0,jobjectArray byteOrderMarkArray_1);
							BOMInputStream(java::io::InputStream inputStream_0,jboolean boolean_1,jobjectArray byteOrderMarkArray_2);
							virtual ~BOMInputStream();
							ByteOrderMark getBOM();
							jstring getBOMCharsetName();
							jboolean hasBOM();
							jboolean hasBOM(ByteOrderMark byteOrderMark_0);
							jint read();
							jint read(jbyteArray byteArray_0);
							jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
							void mark(jint int_0);
							jlong skip(jlong long_0);
							void reset();
						}; // end class BOMInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class BrokenInputStream : public java::io::InputStream {
							public:
						            BrokenInputStream(jobject _jthis, bool copy);
						            BrokenInputStream(const BrokenInputStream &);
						        
							BrokenInputStream(java::io::IOException iOException_0);
							BrokenInputStream();
							virtual ~BrokenInputStream();
							jint read();
							void close();
							jlong skip(jlong long_0);
							jint available();
							void reset();
						}; // end class BrokenInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class CharSequenceInputStream : public java::io::InputStream {
							public:
						            CharSequenceInputStream(jobject _jthis, bool copy);
						            CharSequenceInputStream(const CharSequenceInputStream &);
						        
							CharSequenceInputStream(java::lang::CharSequence charSequence_0,jstring string_1);
							CharSequenceInputStream(java::lang::CharSequence charSequence_0,java::nio::charset::Charset charset_1);
							CharSequenceInputStream(java::lang::CharSequence charSequence_0,jstring string_1,jint int_2);
							CharSequenceInputStream(java::lang::CharSequence charSequence_0,java::nio::charset::Charset charset_1,jint int_2);
							virtual ~CharSequenceInputStream();
							jint read();
							jint read(jbyteArray byteArray_0);
							jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jint available();
							jboolean markSupported();
							void reset();
						}; // end class CharSequenceInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class ClosedInputStream : public java::io::InputStream {
							public:
						            ClosedInputStream(jobject _jthis, bool copy);
						            ClosedInputStream(const ClosedInputStream &);
						        
							ClosedInputStream();
							virtual ~ClosedInputStream();
							jint read();
						}; // end class ClosedInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class CountingInputStream : public ProxyInputStream {
							public:
						            CountingInputStream(jobject _jthis, bool copy);
						            CountingInputStream(const CountingInputStream &);
						        
							CountingInputStream(java::io::InputStream inputStream_0);
							virtual ~CountingInputStream();
							jint getCount();
							jint resetCount();
							jlong getByteCount();
							jlong resetByteCount();
							jlong skip(jlong long_0);
						}; // end class CountingInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class DemuxInputStream : public java::io::InputStream {
							public:
						            DemuxInputStream(jobject _jthis, bool copy);
						            DemuxInputStream(const DemuxInputStream &);
						        
							DemuxInputStream();
							virtual ~DemuxInputStream();
							java::io::InputStream bindStream(java::io::InputStream inputStream_0);
							jint read();
							void close();
						}; // end class DemuxInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class NullInputStream : public java::io::InputStream {
							public:
						            NullInputStream(jobject _jthis, bool copy);
						            NullInputStream(const NullInputStream &);
						        
							NullInputStream(jlong long_0);
							NullInputStream(jlong long_0,jboolean boolean_1,jboolean boolean_2);
							virtual ~NullInputStream();
							jlong getPosition();
							jint read();
							jint read(jbyteArray byteArray_0);
							jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
							void close();
							jlong getSize();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jint available();
							jboolean markSupported();
							void reset();
						}; // end class NullInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class NullReader : public java::io::Reader {
							public:
						            NullReader(jobject _jthis, bool copy);
						            NullReader(const NullReader &);
						        
							NullReader(jlong long_0);
							NullReader(jlong long_0,jboolean boolean_1,jboolean boolean_2);
							virtual ~NullReader();
							jlong getPosition();
							jint read(jcharArray charArray_0,jint int_1,jint int_2);
							jint read(jcharArray charArray_0);
							jint read();
							void close();
							jlong getSize();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jboolean markSupported();
							void reset();
						}; // end class NullReader
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class ProxyReader : public java::io::FilterReader {
							public:
						            ProxyReader(jobject _jthis, bool copy);
						            ProxyReader(const ProxyReader &);
						        
							ProxyReader(java::io::Reader reader_0);
							virtual ~ProxyReader();
							jint read(jcharArray charArray_0,jint int_1,jint int_2);
							jint read(jcharArray charArray_0);
							jint read();
							jint read(java::nio::CharBuffer charBuffer_0);
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jboolean markSupported();
							void reset();
							jboolean ready();
						}; // end class ProxyReader
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class TaggedInputStream : public ProxyInputStream {
							public:
						            TaggedInputStream(jobject _jthis, bool copy);
						            TaggedInputStream(const TaggedInputStream &);
						        
							TaggedInputStream(java::io::InputStream inputStream_0);
							virtual ~TaggedInputStream();
							jboolean isCauseOf(java::lang::Throwable throwable_0);
							void throwIfCauseOf(java::lang::Throwable throwable_0);
						}; // end class TaggedInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class TailerListener : public java::lang::Object {
							public:
						            TailerListener(jobject _jthis, bool copy);
						            TailerListener(const TailerListener &);
						        
							TailerListener();
							virtual ~TailerListener();
						}; // end class TailerListener
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class TailerListenerAdapter : public java::lang::Object {
							public:
						            TailerListenerAdapter(jobject _jthis, bool copy);
						            TailerListenerAdapter(const TailerListenerAdapter &);
						        
							TailerListenerAdapter();
							virtual ~TailerListenerAdapter();
							void fileNotFound();
							void fileRotated();
							void init(Tailer tailer_0);
							void handle(jstring string_0);
							void handle(java::lang::Exception exception_0);
						}; // end class TailerListenerAdapter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class TeeInputStream : public ProxyInputStream {
							public:
						            TeeInputStream(jobject _jthis, bool copy);
						            TeeInputStream(const TeeInputStream &);
						        
							TeeInputStream(java::io::InputStream inputStream_0,java::io::OutputStream outputStream_1);
							TeeInputStream(java::io::InputStream inputStream_0,java::io::OutputStream outputStream_1,jboolean boolean_2);
							virtual ~TeeInputStream();
							jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
							jint read(jbyteArray byteArray_0);
							jint read();
							void close();
						}; // end class TeeInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class XmlStreamReaderException : public java::io::IOException {
							public:
						            XmlStreamReaderException(jobject _jthis, bool copy);
						            XmlStreamReaderException(const XmlStreamReaderException &);
						        
							XmlStreamReaderException(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jstring string_5);
							XmlStreamReaderException(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
							virtual ~XmlStreamReaderException();
							jstring getContentTypeMime();
							jstring getContentTypeEncoding();
							jstring getBomEncoding();
							jstring getXmlGuessEncoding();
							jstring getXmlEncoding();
						}; // end class XmlStreamReaderException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class IOCase : public java::lang::Object {
						public:
					            IOCase(jobject _jthis, bool copy);
					            IOCase(const IOCase &);
					        
						virtual ~IOCase();
						jint checkCompareTo(jstring string_0,jstring string_1);
						jboolean checkEndsWith(jstring string_0,jstring string_1);
						jboolean isCaseSensitive();
						jint checkIndexOf(jstring string_0,jint int_1,jstring string_2);
						jboolean checkEquals(jstring string_0,jstring string_1);
						jboolean checkStartsWith(jstring string_0,jstring string_1);
						jboolean checkRegionMatches(jstring string_0,jint int_1,jstring string_2);
						static IOCase forName(jstring string_0);
						jstring toString();
						jstring getName();
					}; // end class IOCase
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class IOUtils : public java::lang::Object {
						public:
					            IOUtils(jobject _jthis, bool copy);
					            IOUtils(const IOUtils &);
					        
						IOUtils();
						virtual ~IOUtils();
						static jboolean contentEqualsIgnoreEOL(java::io::Reader reader_0,java::io::Reader reader_1);
						static java::util::List readLines(java::io::Reader reader_0);
						static java::util::List readLines(java::io::InputStream inputStream_0,jstring string_1);
						static java::util::List readLines(java::io::InputStream inputStream_0);
						static java::util::List readLines(java::io::InputStream inputStream_0,java::nio::charset::Charset charset_1);
						static LineIterator lineIterator(java::io::InputStream inputStream_0,jstring string_1);
						static LineIterator lineIterator(java::io::InputStream inputStream_0,java::nio::charset::Charset charset_1);
						static LineIterator lineIterator(java::io::Reader reader_0);
						static void writeLines(java::util::Collection collection_0,jstring string_1,java::io::OutputStream outputStream_2,jstring string_3);
						static void writeLines(java::util::Collection collection_0,jstring string_1,java::io::Writer writer_2);
						static void writeLines(java::util::Collection collection_0,jstring string_1,java::io::OutputStream outputStream_2);
						static void writeLines(java::util::Collection collection_0,jstring string_1,java::io::OutputStream outputStream_2,java::nio::charset::Charset charset_3);
						static jlong copyLarge(java::io::InputStream inputStream_0,java::io::OutputStream outputStream_1,jlong long_2,jlong long_3);
						static jlong copyLarge(java::io::Reader reader_0,java::io::Writer writer_1);
						static jlong copyLarge(java::io::InputStream inputStream_0,java::io::OutputStream outputStream_1,jlong long_2,jlong long_3,jbyteArray byteArray_4);
						static jlong copyLarge(java::io::InputStream inputStream_0,java::io::OutputStream outputStream_1,jbyteArray byteArray_2);
						static jlong copyLarge(java::io::InputStream inputStream_0,java::io::OutputStream outputStream_1);
						static jlong copyLarge(java::io::Reader reader_0,java::io::Writer writer_1,jlong long_2,jlong long_3,jcharArray charArray_4);
						static jlong copyLarge(java::io::Reader reader_0,java::io::Writer writer_1,jlong long_2,jlong long_3);
						static jlong copyLarge(java::io::Reader reader_0,java::io::Writer writer_1,jcharArray charArray_2);
						static java::io::InputStream toBufferedInputStream(java::io::InputStream inputStream_0);
						static java::io::InputStream toInputStream(jstring string_0,jstring string_1);
						static java::io::InputStream toInputStream(jstring string_0,java::nio::charset::Charset charset_1);
						static java::io::InputStream toInputStream(jstring string_0);
						static java::io::InputStream toInputStream(java::lang::CharSequence charSequence_0,jstring string_1);
						static java::io::InputStream toInputStream(java::lang::CharSequence charSequence_0);
						static java::io::InputStream toInputStream(java::lang::CharSequence charSequence_0,java::nio::charset::Charset charset_1);
						static java::io::BufferedReader toBufferedReader(java::io::Reader reader_0);
						static void closeQuietly(java::io::Writer writer_0);
						static void closeQuietly(java::io::Reader reader_0);
						static void closeQuietly(java::io::OutputStream outputStream_0);
						static void closeQuietly(java::io::InputStream inputStream_0);
						static void closeQuietly(java::io::Closeable closeable_0);
						static void closeQuietly(java::net::Socket socket_0);
						static void closeQuietly(java::nio::channels::Selector selector_0);
						static void closeQuietly(java::net::ServerSocket serverSocket_0);
						static void skipFully(java::io::Reader reader_0,jlong long_1);
						static void skipFully(java::io::InputStream inputStream_0,jlong long_1);
						static jstring toString(java::net::URI uRI_0,java::nio::charset::Charset charset_1);
						static jstring toString(java::net::URI uRI_0);
						static jstring toString(java::io::Reader reader_0);
						static jstring toString(java::io::InputStream inputStream_0,jstring string_1);
						static jstring toString(java::io::InputStream inputStream_0,java::nio::charset::Charset charset_1);
						static jstring toString(java::io::InputStream inputStream_0);
						static jstring toString(jbyteArray byteArray_0,jstring string_1);
						static jstring toString(jbyteArray byteArray_0);
						static jstring toString(java::net::URL uRL_0,jstring string_1);
						static jstring toString(java::net::URI uRI_0,jstring string_1);
						static jstring toString(java::net::URL uRL_0);
						static jstring toString(java::net::URL uRL_0,java::nio::charset::Charset charset_1);
						static jboolean contentEquals(java::io::InputStream inputStream_0,java::io::InputStream inputStream_1);
						static jboolean contentEquals(java::io::Reader reader_0,java::io::Reader reader_1);
						static jcharArray toCharArray(java::io::Reader reader_0);
						static jcharArray toCharArray(java::io::InputStream inputStream_0,jstring string_1);
						static jcharArray toCharArray(java::io::InputStream inputStream_0,java::nio::charset::Charset charset_1);
						static jcharArray toCharArray(java::io::InputStream inputStream_0);
						static void write(jcharArray charArray_0,java::io::OutputStream outputStream_1);
						static void write(jcharArray charArray_0,java::io::OutputStream outputStream_1,java::nio::charset::Charset charset_2);
						static void write(java::lang::StringBuffer stringBuffer_0,java::io::OutputStream outputStream_1,jstring string_2);
						static void write(java::lang::StringBuffer stringBuffer_0,java::io::OutputStream outputStream_1);
						static void write(java::lang::StringBuffer stringBuffer_0,java::io::Writer writer_1);
						static void write(jbyteArray byteArray_0,java::io::OutputStream outputStream_1);
						static void write(jbyteArray byteArray_0,java::io::Writer writer_1);
						static void write(jbyteArray byteArray_0,java::io::Writer writer_1,java::nio::charset::Charset charset_2);
						static void write(jbyteArray byteArray_0,java::io::Writer writer_1,jstring string_2);
						static void write(jcharArray charArray_0,java::io::Writer writer_1);
						static void write(java::lang::CharSequence charSequence_0,java::io::OutputStream outputStream_1,jstring string_2);
						static void write(java::lang::CharSequence charSequence_0,java::io::OutputStream outputStream_1,java::nio::charset::Charset charset_2);
						static void write(java::lang::CharSequence charSequence_0,java::io::OutputStream outputStream_1);
						static void write(java::lang::CharSequence charSequence_0,java::io::Writer writer_1);
						static void write(jcharArray charArray_0,java::io::OutputStream outputStream_1,jstring string_2);
						static void write(jstring string_0,java::io::OutputStream outputStream_1,jstring string_2);
						static void write(jstring string_0,java::io::OutputStream outputStream_1,java::nio::charset::Charset charset_2);
						static void write(jstring string_0,java::io::OutputStream outputStream_1);
						static void write(jstring string_0,java::io::Writer writer_1);
						static jint read(java::io::Reader reader_0,jcharArray charArray_1,jint int_2,jint int_3);
						static jint read(java::io::InputStream inputStream_0,jbyteArray byteArray_1);
						static jint read(java::io::InputStream inputStream_0,jbyteArray byteArray_1,jint int_2,jint int_3);
						static jint read(java::io::Reader reader_0,jcharArray charArray_1);
						static void close(java::net::URLConnection uRLConnection_0);
						static void copy(java::io::Reader reader_0,java::io::OutputStream outputStream_1,java::nio::charset::Charset charset_2);
						static void copy(java::io::Reader reader_0,java::io::OutputStream outputStream_1);
						static void copy(java::io::Reader reader_0,java::io::OutputStream outputStream_1,jstring string_2);
						static jint copy(java::io::Reader reader_0,java::io::Writer writer_1);
						static jint copy(java::io::InputStream inputStream_0,java::io::OutputStream outputStream_1);
						static void copy(java::io::InputStream inputStream_0,java::io::Writer writer_1,java::nio::charset::Charset charset_2);
						static void copy(java::io::InputStream inputStream_0,java::io::Writer writer_1,jstring string_2);
						static void copy(java::io::InputStream inputStream_0,java::io::Writer writer_1);
						static jlong skip(java::io::InputStream inputStream_0,jlong long_1);
						static jlong skip(java::io::Reader reader_0,jlong long_1);
						static void readFully(java::io::Reader reader_0,jcharArray charArray_1,jint int_2,jint int_3);
						static void readFully(java::io::InputStream inputStream_0,jbyteArray byteArray_1,jint int_2,jint int_3);
						static void readFully(java::io::InputStream inputStream_0,jbyteArray byteArray_1);
						static void readFully(java::io::Reader reader_0,jcharArray charArray_1);
						static jbyteArray toByteArray(java::net::URLConnection uRLConnection_0);
						static jbyteArray toByteArray(java::net::URL uRL_0);
						static jbyteArray toByteArray(java::io::InputStream inputStream_0,jint int_1);
						static jbyteArray toByteArray(java::io::InputStream inputStream_0,jlong long_1);
						static jbyteArray toByteArray(java::io::Reader reader_0);
						static jbyteArray toByteArray(java::io::Reader reader_0,java::nio::charset::Charset charset_1);
						static jbyteArray toByteArray(java::io::Reader reader_0,jstring string_1);
						static jbyteArray toByteArray(java::io::InputStream inputStream_0);
						static jbyteArray toByteArray(jstring string_0);
						static jbyteArray toByteArray(java::net::URI uRI_0);
					}; // end class IOUtils
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class NullOutputStream : public java::io::OutputStream {
							public:
						            NullOutputStream(jobject _jthis, bool copy);
						            NullOutputStream(const NullOutputStream &);
						        
							NullOutputStream();
							virtual ~NullOutputStream();
							void write(jbyteArray byteArray_0,jint int_1,jint int_2);
							void write(jbyteArray byteArray_0);
							void write(jint int_0);
						}; // end class NullOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class NullWriter : public java::io::Writer {
							public:
						            NullWriter(jobject _jthis, bool copy);
						            NullWriter(const NullWriter &);
						        
							NullWriter();
							virtual ~NullWriter();
							java::io::Writer append(jchar char_0);
							java::io::Writer append(java::lang::CharSequence charSequence_0);
							java::io::Writer append(java::lang::CharSequence charSequence_0,jint int_1,jint int_2);
							void write(jstring string_0);
							void write(jcharArray charArray_0);
							void write(jint int_0);
							void write(jstring string_0,jint int_1,jint int_2);
							void write(jcharArray charArray_0,jint int_1,jint int_2);
							void flush();
							void close();
						}; // end class NullWriter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class StringBuilderWriter : public java::io::Writer {
							public:
						            StringBuilderWriter(jobject _jthis, bool copy);
						            StringBuilderWriter(const StringBuilderWriter &);
						        
							StringBuilderWriter();
							StringBuilderWriter(java::lang::StringBuilder stringBuilder_0);
							StringBuilderWriter(jint int_0);
							virtual ~StringBuilderWriter();
							java::lang::StringBuilder getBuilder();
							jstring toString();
							java::io::Writer append(java::lang::CharSequence charSequence_0);
							java::io::Writer append(jchar char_0);
							java::io::Writer append(java::lang::CharSequence charSequence_0,jint int_1,jint int_2);
							void write(jstring string_0);
							void write(jcharArray charArray_0,jint int_1,jint int_2);
							void flush();
							void close();
						}; // end class StringBuilderWriter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class TeeOutputStream : public ProxyOutputStream {
							public:
						            TeeOutputStream(jobject _jthis, bool copy);
						            TeeOutputStream(const TeeOutputStream &);
						        
							TeeOutputStream(java::io::OutputStream outputStream_0,java::io::OutputStream outputStream_1);
							virtual ~TeeOutputStream();
							void write(jint int_0);
							void write(jbyteArray byteArray_0,jint int_1,jint int_2);
							void write(jbyteArray byteArray_0);
							void flush();
							void close();
						}; // end class TeeOutputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace api{
						namespace dom{
							
							class DocumentFragmentBuilder : public java::lang::Object {
								public:
							            DocumentFragmentBuilder(jobject _jthis, bool copy);
							            DocumentFragmentBuilder(const DocumentFragmentBuilder &);
							        
								DocumentFragmentBuilder(javax::xml::parsers::DocumentBuilder documentBuilder_0);
								virtual ~DocumentFragmentBuilder();
								javax::xml::parsers::DocumentBuilder getDocumentBuilder();
								org::w3c::dom::DocumentFragment parse(java::io::InputStream inputStream_0);
							}; // end class DocumentFragmentBuilder
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace api
	} // end namespace dom

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							
							class ByteDecoderChannel : public AbstractDecoderChannel {
								public:
							            ByteDecoderChannel(jobject _jthis, bool copy);
							            ByteDecoderChannel(const ByteDecoderChannel &);
							        
								ByteDecoderChannel(java::io::InputStream inputStream_0);
								virtual ~ByteDecoderChannel();
								void align();
								jboolean decodeBoolean();
								jint decodeNBitUnsignedInteger(jint int_0);
								jbyteArray decodeBinary();
								jint decode();
								void skip(jlong long_0);
								java::io::InputStream getInputStream();
							}; // end class ByteDecoderChannel
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace io{
						namespace channel{
							
							class EncoderChannel : public java::lang::Object {
								public:
							            EncoderChannel(jobject _jthis, bool copy);
							            EncoderChannel(const EncoderChannel &);
							        
								EncoderChannel();
								virtual ~EncoderChannel();
							}; // end class EncoderChannel
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace io
	} // end namespace channel

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class BuiltIn : public java::lang::Object {
							public:
						            BuiltIn(jobject _jthis, bool copy);
						            BuiltIn(const BuiltIn &);
						        
							BuiltIn();
							virtual ~BuiltIn();
						}; // end class BuiltIn
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class IntegerType : public java::lang::Enum {
							public:
						            IntegerType(jobject _jthis, bool copy);
						            IntegerType(const IntegerType &);
						        
							virtual ~IntegerType();
							jboolean isUnsigned();
							static jobjectArray values();
							static IntegerType valueOf(jstring string_0);
						}; // end class IntegerType
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class TypeCoder : public java::lang::Object {
							public:
						            TypeCoder(jobject _jthis, bool copy);
						            TypeCoder(const TypeCoder &);
						        
							TypeCoder();
							virtual ~TypeCoder();
						}; // end class TypeCoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						
						class NoEntityResolver : public java::lang::Object {
							public:
						            NoEntityResolver(jobject _jthis, bool copy);
						            NoEntityResolver(const NoEntityResolver &);
						        
							NoEntityResolver();
							virtual ~NoEntityResolver();
							org::xml::sax::InputSource resolveEntity(jstring string_0,jstring string_1);
						}; // end class NoEntityResolver
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace util

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLHeadElementImpl : public HTMLElementImpl {
						public:
					            HTMLHeadElementImpl(jobject _jthis, bool copy);
					            HTMLHeadElementImpl(const HTMLHeadElementImpl &);
					        
						HTMLHeadElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLHeadElementImpl();
						void setProfile(jstring string_0);
						jstring getProfile();
					}; // end class HTMLHeadElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLLabelElementImpl : public HTMLElementImpl {
						public:
					            HTMLLabelElementImpl(jobject _jthis, bool copy);
					            HTMLLabelElementImpl(const HTMLLabelElementImpl &);
					        
						HTMLLabelElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLLabelElementImpl();
						jstring getAccessKey();
						void setAccessKey(jstring string_0);
						jstring getHtmlFor();
						void setHtmlFor(jstring string_0);
					}; // end class HTMLLabelElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLDoElement : public java::lang::Object {
					public:
				            WMLDoElement(jobject _jthis, bool copy);
				            WMLDoElement(const WMLDoElement &);
				        
					WMLDoElement();
					virtual ~WMLDoElement();
				}; // end class WMLDoElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLImgElement : public java::lang::Object {
					public:
				            WMLImgElement(jobject _jthis, bool copy);
				            WMLImgElement(const WMLImgElement &);
				        
					WMLImgElement();
					virtual ~WMLImgElement();
				}; // end class WMLImgElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLPostfieldElement : public java::lang::Object {
					public:
				            WMLPostfieldElement(jobject _jthis, bool copy);
				            WMLPostfieldElement(const WMLPostfieldElement &);
				        
					WMLPostfieldElement();
					virtual ~WMLPostfieldElement();
				}; // end class WMLPostfieldElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLTdElement : public java::lang::Object {
					public:
				            WMLTdElement(jobject _jthis, bool copy);
				            WMLTdElement(const WMLTdElement &);
				        
					WMLTdElement();
					virtual ~WMLTdElement();
				}; // end class WMLTdElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLAnchorElementImpl : public WMLElementImpl {
						public:
					            WMLAnchorElementImpl(jobject _jthis, bool copy);
					            WMLAnchorElementImpl(const WMLAnchorElementImpl &);
					        
						WMLAnchorElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLAnchorElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getTitle();
						void setTitle(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLAnchorElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLBElementImpl : public WMLElementImpl {
						public:
					            WMLBElementImpl(jobject _jthis, bool copy);
					            WMLBElementImpl(const WMLBElementImpl &);
					        
						WMLBElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLBElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLBElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLBigElementImpl : public WMLElementImpl {
						public:
					            WMLBigElementImpl(jobject _jthis, bool copy);
					            WMLBigElementImpl(const WMLBigElementImpl &);
					        
						WMLBigElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLBigElementImpl();
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getXmlLang();
						void setXmlLang(jstring string_0);
						jstring getId();
						jstring getClassName();
					}; // end class WMLBigElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLDTDValidatorFilter : public java::lang::Object {
							public:
						            XMLDTDValidatorFilter(jobject _jthis, bool copy);
						            XMLDTDValidatorFilter(const XMLDTDValidatorFilter &);
						        
							XMLDTDValidatorFilter();
							virtual ~XMLDTDValidatorFilter();
						}; // end class XMLDTDValidatorFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLEntityDecl : public java::lang::Object {
							public:
						            XMLEntityDecl(jobject _jthis, bool copy);
						            XMLEntityDecl(const XMLEntityDecl &);
						        
							XMLEntityDecl();
							virtual ~XMLEntityDecl();
							void setValues(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jstring string_5,jboolean boolean_6,jboolean boolean_7);
							void setValues(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jboolean boolean_5,jboolean boolean_6);
							void clear();
						}; // end class XMLEntityDecl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						
						class XMLSimpleType : public java::lang::Object {
							public:
						            XMLSimpleType(jobject _jthis, bool copy);
						            XMLSimpleType(const XMLSimpleType &);
						        
							XMLSimpleType();
							virtual ~XMLSimpleType();
							void setValues(XMLSimpleType xMLSimpleType_0);
							void setValues(jshort short_0,jstring string_1,jobjectArray stringArray_2,jboolean boolean_3,jshort short_4,jstring string_5,jstring string_6,dv::DatatypeValidator datatypeValidator_7);
							void clear();
						}; // end class XMLSimpleType
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class CMBinOp : public CMNode {
								public:
							            CMBinOp(jobject _jthis, bool copy);
							            CMBinOp(const CMBinOp &);
							        
								CMBinOp(jint int_0,CMNode cMNode_1,CMNode cMNode_2);
								virtual ~CMBinOp();
								jboolean isNullable();
							}; // end class CMBinOp
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class CMUniOp : public CMNode {
								public:
							            CMUniOp(jobject _jthis, bool copy);
							            CMUniOp(const CMUniOp &);
							        
								CMUniOp(jint int_0,CMNode cMNode_1);
								virtual ~CMUniOp();
								jboolean isNullable();
							}; // end class CMUniOp
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace models{
							
							class SimpleContentModel : public java::lang::Object {
								public:
							            SimpleContentModel(jobject _jthis, bool copy);
							            SimpleContentModel(const SimpleContentModel &);
							        
								SimpleContentModel(jshort short_0,xni::QName qName_1,xni::QName qName_2);
								virtual ~SimpleContentModel();
								jint validate(jobjectArray qNameArray_0,jint int_1,jint int_2);
							}; // end class SimpleContentModel
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						
						class ValidatedInfo : public java::lang::Object {
							public:
						            ValidatedInfo(jobject _jthis, bool copy);
						            ValidatedInfo(const ValidatedInfo &);
						        
							ValidatedInfo();
							virtual ~ValidatedInfo();
							jstring stringValue();
							xs::XSSimpleTypeDefinition getTypeDefinition();
							xs::XSObjectList getMemberTypeDefinitions();
							xs::XSSimpleTypeDefinition getMemberTypeDefinition();
							jstring getNormalizedValue();
							jshort getActualValueType();
							xs::ShortList getListValueTypes();
							static jboolean isComparable(ValidatedInfo validatedInfo_0,ValidatedInfo validatedInfo_1);
							void copyFrom(xs::XSValue xSValue_0);
							void reset();
						}; // end class ValidatedInfo
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace dv

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class NOTATIONDatatypeValidator : public java::lang::Object {
								public:
							            NOTATIONDatatypeValidator(jobject _jthis, bool copy);
							            NOTATIONDatatypeValidator(const NOTATIONDatatypeValidator &);
							        
								NOTATIONDatatypeValidator();
								virtual ~NOTATIONDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class NOTATIONDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace dtd{
							
							class XML11IDREFDatatypeValidator : public IDREFDatatypeValidator {
								public:
							            XML11IDREFDatatypeValidator(jobject _jthis, bool copy);
							            XML11IDREFDatatypeValidator(const XML11IDREFDatatypeValidator &);
							        
								XML11IDREFDatatypeValidator();
								virtual ~XML11IDREFDatatypeValidator();
								void validate(jstring string_0,ValidationContext validationContext_1);
							}; // end class XML11IDREFDatatypeValidator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace dtd

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace util{
							
							class ByteListImpl : public java::util::AbstractList {
								public:
							            ByteListImpl(jobject _jthis, bool copy);
							            ByteListImpl(const ByteListImpl &);
							        
								ByteListImpl(jbyteArray byteArray_0);
								virtual ~ByteListImpl();
								jbyte item(jint int_0);
								jint getLength();
								jboolean contains(jbyte byte_0);
								jint size();
								jbyteArray toByteArray();
							}; // end class ByteListImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class DateDV : public DateTimeDV {
								public:
							            DateDV(jobject _jthis, bool copy);
							            DateDV(const DateDV &);
							        
								DateDV();
								virtual ~DateDV();
							}; // end class DateDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class DayTimeDurationDV : public DurationDV {
								public:
							            DayTimeDurationDV(jobject _jthis, bool copy);
							            DayTimeDurationDV(const DayTimeDurationDV &);
							        
								virtual ~DayTimeDurationDV();
							}; // end class DayTimeDurationDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class DoubleDV : public TypeValidator {
								public:
							            DoubleDV(jobject _jthis, bool copy);
							            DoubleDV(const DoubleDV &);
							        
								DoubleDV();
								virtual ~DoubleDV();
								jshort getAllowedFacets();
							}; // end class DoubleDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class HexBinaryDV : public TypeValidator {
								public:
							            HexBinaryDV(jobject _jthis, bool copy);
							            HexBinaryDV(const HexBinaryDV &);
							        
								HexBinaryDV();
								virtual ~HexBinaryDV();
								jshort getAllowedFacets();
							}; // end class HexBinaryDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class IDREFDV : public TypeValidator {
								public:
							            IDREFDV(jobject _jthis, bool copy);
							            IDREFDV(const IDREFDV &);
							        
								IDREFDV();
								virtual ~IDREFDV();
								jshort getAllowedFacets();
							}; // end class IDREFDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class MonthDayDV : public AbstractDateTimeDV {
								public:
							            MonthDayDV(jobject _jthis, bool copy);
							            MonthDayDV(const MonthDayDV &);
							        
								MonthDayDV();
								virtual ~MonthDayDV();
							}; // end class MonthDayDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class SchemaDVFactoryImpl : public BaseSchemaDVFactory {
								public:
							            SchemaDVFactoryImpl(jobject _jthis, bool copy);
							            SchemaDVFactoryImpl(const SchemaDVFactoryImpl &);
							        
								SchemaDVFactoryImpl();
								virtual ~SchemaDVFactoryImpl();
								XSSimpleType getBuiltInType(jstring string_0);
								util::SymbolHash getBuiltInTypes();
							}; // end class SchemaDVFactoryImpl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class TimeDV : public AbstractDateTimeDV {
								public:
							            TimeDV(jobject _jthis, bool copy);
							            TimeDV(const TimeDV &);
							        
								TimeDV();
								virtual ~TimeDV();
							}; // end class TimeDV
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dv{
						namespace xs{
							
							class XSSimpleTypeDecl : public java::lang::Object {
								public:
							            XSSimpleTypeDecl(jobject _jthis, bool copy);
							            XSSimpleTypeDecl(const XSSimpleTypeDecl &);
							        
								XSSimpleTypeDecl();
								virtual ~XSSimpleTypeDecl();
								void validate(ValidationContext validationContext_0,ValidatedInfo validatedInfo_1);
								jboolean isDOMDerivedFrom(jstring string_0,jstring string_1,jint int_2);
								void setNamespaceItem(xs::XSNamespaceItem xSNamespaceItem_0);
								jstring getTypeNamespace();
								jboolean isDerivedFrom(jstring string_0,jstring string_1,jint int_2);
								xs::XSNamespaceItem getNamespaceItem();
								jstring getNamespace();
								jshort getTypeCategory();
								xs::XSTypeDefinition getBaseType();
								jshort getFinal();
								jboolean getAnonymous();
								jboolean derivedFromType(xs::XSTypeDefinition xSTypeDefinition_0,jshort short_1);
								jboolean derivedFrom(jstring string_0,jstring string_1,jshort short_2);
								jshort getVariety();
								jboolean isDefinedFacet(jshort short_0);
								xs::XSObjectList getMultiValueFacets();
								xs::XSSimpleTypeDefinition getItemType();
								jstring getLexicalFacetValue(jshort short_0);
								xs::StringList getLexicalPattern();
								xs::XSSimpleTypeDefinition getPrimitiveType();
								jshort getBuiltInKind();
								xs::XSObjectList getMemberTypes();
								jshort getDefinedFacets();
								jshort getFixedFacets();
								jboolean isFixedFacet(jshort short_0);
								xs::StringList getLexicalEnumeration();
								jshort getOrdered();
								jboolean getFinite();
								jboolean getBounded();
								jboolean getNumeric();
								xs::XSObjectList getFacets();
								xs::XSObject getFacet(jint int_0);
								jshort getPrimitiveKind();
								void applyFacets(XSFacets xSFacets_0,jshort short_1,jshort short_2,ValidationContext validationContext_3);
								jboolean isIDType();
								jshort getWhitespace();
								void setAnonymous(jboolean boolean_0);
								ValidatedInfo validateWithInfo(jstring string_0,ValidationContext validationContext_1,ValidatedInfo validatedInfo_2);
								xs::datatypes::ObjectList getActualEnumeration();
								xs::datatypes::ObjectList getEnumerationItemTypeList();
								xs::ShortList getEnumerationTypeList();
								jstring toString();
								jstring getName();
								jstring getTypeName();
								xs::XSObjectList getAnnotations();
								jshort getType();
								jboolean isFinal(jshort short_0);
								static jstring normalize(jstring string_0,jshort short_1);
								void reset();
							}; // end class XSSimpleTypeDecl
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dv
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class XSGrammarPoolContainer : public java::lang::Object {
							public:
						            XSGrammarPoolContainer(jobject _jthis, bool copy);
						            XSGrammarPoolContainer(const XSGrammarPoolContainer &);
						        
							XSGrammarPoolContainer();
							virtual ~XSGrammarPoolContainer();
						}; // end class XSGrammarPoolContainer
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class DOMASBuilderImpl : public DOMParserImpl {
						public:
					            DOMASBuilderImpl(jobject _jthis, bool copy);
					            DOMASBuilderImpl(const DOMASBuilderImpl &);
					        
						DOMASBuilderImpl();
						DOMASBuilderImpl(XMLGrammarCachingConfiguration xMLGrammarCachingConfiguration_0);
						DOMASBuilderImpl(util::SymbolTable symbolTable_0);
						DOMASBuilderImpl(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						virtual ~DOMASBuilderImpl();
						dom3::as::ASModel parseASURI(jstring string_0);
						dom3::as::ASModel getAbstractSchema();
						void setAbstractSchema(dom3::as::ASModel aSModel_0);
						dom3::as::ASModel parseASInputSource(w3c::dom::ls::LSInput lSInput_0);
					}; // end class DOMASBuilderImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class NonValidatingConfiguration : public BasicParserConfiguration {
						public:
					            NonValidatingConfiguration(jobject _jthis, bool copy);
					            NonValidatingConfiguration(const NonValidatingConfiguration &);
					        
						NonValidatingConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						NonValidatingConfiguration();
						NonValidatingConfiguration(util::SymbolTable symbolTable_0);
						NonValidatingConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						virtual ~NonValidatingConfiguration();
						void setLocale(java::util::Locale locale_0);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setInputSource(xni::parser::XMLInputSource xMLInputSource_0);
						void parse(xni::parser::XMLInputSource xMLInputSource_0);
						jboolean parse(jboolean boolean_0);
						void cleanup();
					}; // end class NonValidatingConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class SAXParser : public AbstractSAXParser {
						public:
					            SAXParser(jobject _jthis, bool copy);
					            SAXParser(const SAXParser &);
					        
						SAXParser(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						SAXParser(util::SymbolTable symbolTable_0);
						SAXParser();
						SAXParser(xni::parser::XMLParserConfiguration xMLParserConfiguration_0);
						virtual ~SAXParser();
					}; // end class SAXParser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class SecuritySupport : public java::lang::Object {
						public:
					            SecuritySupport(jobject _jthis, bool copy);
					            SecuritySupport(const SecuritySupport &);
					        
						virtual ~SecuritySupport();
					}; // end class SecuritySupport
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XML11Configurable : public java::lang::Object {
						public:
					            XML11Configurable(jobject _jthis, bool copy);
					            XML11Configurable(const XML11Configurable &);
					        
						XML11Configurable();
						virtual ~XML11Configurable();
					}; // end class XML11Configurable
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XMLDocumentParser : public AbstractXMLDocumentParser {
						public:
					            XMLDocumentParser(jobject _jthis, bool copy);
					            XMLDocumentParser(const XMLDocumentParser &);
					        
						XMLDocumentParser(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						XMLDocumentParser(util::SymbolTable symbolTable_0);
						XMLDocumentParser(xni::parser::XMLParserConfiguration xMLParserConfiguration_0);
						XMLDocumentParser();
						virtual ~XMLDocumentParser();
					}; // end class XMLDocumentParser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XMLGrammarCachingConfiguration : public XIncludeAwareParserConfiguration {
						public:
					            XMLGrammarCachingConfiguration(jobject _jthis, bool copy);
					            XMLGrammarCachingConfiguration(const XMLGrammarCachingConfiguration &);
					        
						XMLGrammarCachingConfiguration(util::SymbolTable symbolTable_0);
						XMLGrammarCachingConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1);
						XMLGrammarCachingConfiguration(util::SymbolTable symbolTable_0,xni::grammars::XMLGrammarPool xMLGrammarPool_1,xni::parser::XMLComponentManager xMLComponentManager_2);
						XMLGrammarCachingConfiguration();
						virtual ~XMLGrammarCachingConfiguration();
						void clearGrammarPool();
						xni::grammars::Grammar parseGrammar(jstring string_0,xni::parser::XMLInputSource xMLInputSource_1);
						xni::grammars::Grammar parseGrammar(jstring string_0,jstring string_1);
						void lockGrammarPool();
						void unlockGrammarPool();
					}; // end class XMLGrammarCachingConfiguration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace parsers{
					
					class XMLGrammarPreparser : public java::lang::Object {
						public:
					            XMLGrammarPreparser(jobject _jthis, bool copy);
					            XMLGrammarPreparser(const XMLGrammarPreparser &);
					        
						XMLGrammarPreparser();
						XMLGrammarPreparser(util::SymbolTable symbolTable_0);
						virtual ~XMLGrammarPreparser();
						void setLocale(java::util::Locale locale_0);
						xni::grammars::XMLGrammarLoader getLoader(jstring string_0);
						jboolean getFeature(jstring string_0,jstring string_1);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(xni::parser::XMLEntityResolver xMLEntityResolver_0);
						xni::parser::XMLEntityResolver getEntityResolver();
						xni::parser::XMLErrorHandler getErrorHandler();
						java::util::Locale getLocale();
						jboolean registerPreparser(jstring string_0,xni::grammars::XMLGrammarLoader xMLGrammarLoader_1);
						xni::grammars::Grammar preparseGrammar(jstring string_0,xni::parser::XMLInputSource xMLInputSource_1);
						void setGrammarPool(xni::grammars::XMLGrammarPool xMLGrammarPool_0);
						void setErrorHandler(xni::parser::XMLErrorHandler xMLErrorHandler_0);
						xni::grammars::XMLGrammarPool getGrammarPool();
					}; // end class XMLGrammarPreparser
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace parsers

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					
					class EmptyLocation : public java::lang::Object {
						public:
					            EmptyLocation(jobject _jthis, bool copy);
					            EmptyLocation(const EmptyLocation &);
					        
						virtual ~EmptyLocation();
						jint getCharacterOffset();
						jint getColumnNumber();
						jstring getSystemId();
						jstring getPublicId();
						static EmptyLocation getInstance();
						jint getLineNumber();
					}; // end class EmptyLocation
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace stax

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class CommentImpl : public XMLEventImpl {
							public:
						            CommentImpl(jobject _jthis, bool copy);
						            CommentImpl(const CommentImpl &);
						        
							CommentImpl(jstring string_0,javax::xml::stream::Location location_1);
							virtual ~CommentImpl();
							jstring getText();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
						}; // end class CommentImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class EndDocumentImpl : public XMLEventImpl {
							public:
						            EndDocumentImpl(jobject _jthis, bool copy);
						            EndDocumentImpl(const EndDocumentImpl &);
						        
							EndDocumentImpl(javax::xml::stream::Location location_0);
							virtual ~EndDocumentImpl();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
						}; // end class EndDocumentImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class EntityReferenceImpl : public XMLEventImpl {
							public:
						            EntityReferenceImpl(jobject _jthis, bool copy);
						            EntityReferenceImpl(const EntityReferenceImpl &);
						        
							EntityReferenceImpl(jstring string_0,javax::xml::stream::events::EntityDeclaration entityDeclaration_1,javax::xml::stream::Location location_2);
							EntityReferenceImpl(javax::xml::stream::events::EntityDeclaration entityDeclaration_0,javax::xml::stream::Location location_1);
							virtual ~EntityReferenceImpl();
							javax::xml::stream::events::EntityDeclaration getDeclaration();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
							jstring getName();
						}; // end class EntityReferenceImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class ProcessingInstructionImpl : public XMLEventImpl {
							public:
						            ProcessingInstructionImpl(jobject _jthis, bool copy);
						            ProcessingInstructionImpl(const ProcessingInstructionImpl &);
						        
							ProcessingInstructionImpl(jstring string_0,jstring string_1,javax::xml::stream::Location location_2);
							virtual ~ProcessingInstructionImpl();
							jstring getData();
							void writeAsEncodedUnicode(java::io::Writer writer_0);
							jstring getTarget();
						}; // end class ProcessingInstructionImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace stax{
					namespace events{
						
						class StartElementImpl : public ElementImpl {
							public:
						            StartElementImpl(jobject _jthis, bool copy);
						            StartElementImpl(const StartElementImpl &);
						        
							StartElementImpl(javax::xml::namespace::QName qName_0,java::util::Iterator iterator_1,java::util::Iterator iterator_2,javax::xml::namespace::NamespaceContext namespaceContext_3,javax::xml::stream::Location location_4);
							virtual ~StartElementImpl();
							javax::xml::stream::events::Attribute getAttributeByName(javax::xml::namespace::QName qName_0);
							javax::xml::namespace::NamespaceContext getNamespaceContext();
							jstring getNamespaceURI(jstring string_0);
							void writeAsEncodedUnicode(java::io::Writer writer_0);
							java::util::Iterator getAttributes();
						}; // end class StartElementImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace stax
	} // end namespace events

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class DOMEntityResolverWrapper : public java::lang::Object {
						public:
					            DOMEntityResolverWrapper(jobject _jthis, bool copy);
					            DOMEntityResolverWrapper(const DOMEntityResolverWrapper &);
					        
						DOMEntityResolverWrapper();
						DOMEntityResolverWrapper(w3c::dom::ls::LSResourceResolver lSResourceResolver_0);
						virtual ~DOMEntityResolverWrapper();
						xni::parser::XMLInputSource resolveEntity(xni::XMLResourceIdentifier xMLResourceIdentifier_0);
						void setEntityResolver(w3c::dom::ls::LSResourceResolver lSResourceResolver_0);
						w3c::dom::ls::LSResourceResolver getEntityResolver();
					}; // end class DOMEntityResolverWrapper
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class DOMInputSource : public xni::parser::XMLInputSource {
						public:
					            DOMInputSource(jobject _jthis, bool copy);
					            DOMInputSource(const DOMInputSource &);
					        
						DOMInputSource();
						DOMInputSource(w3c::dom::Node node_0,jstring string_1);
						DOMInputSource(w3c::dom::Node node_0);
						virtual ~DOMInputSource();
						void setNode(w3c::dom::Node node_0);
						w3c::dom::Node getNode();
					}; // end class DOMInputSource
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class DatatypeMessageFormatter : public java::lang::Object {
						public:
					            DatatypeMessageFormatter(jobject _jthis, bool copy);
					            DatatypeMessageFormatter(const DatatypeMessageFormatter &);
					        
						DatatypeMessageFormatter();
						virtual ~DatatypeMessageFormatter();
					}; // end class DatatypeMessageFormatter
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class EncodingMap : public java::lang::Object {
						public:
					            EncodingMap(jobject _jthis, bool copy);
					            EncodingMap(const EncodingMap &);
					        
						EncodingMap();
						virtual ~EncodingMap();
						static void putJava2IANAMapping(jstring string_0,jstring string_1);
						static jstring getJava2IANAMapping(jstring string_0);
						static void putIANA2JavaMapping(jstring string_0,jstring string_1);
						static jstring removeIANA2JavaMapping(jstring string_0);
						static jstring removeJava2IANAMapping(jstring string_0);
						static jstring getIANA2JavaMapping(jstring string_0);
					}; // end class EncodingMap
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class StAXInputSource : public xni::parser::XMLInputSource {
						public:
					            StAXInputSource(jobject _jthis, bool copy);
					            StAXInputSource(const StAXInputSource &);
					        
						StAXInputSource(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
						StAXInputSource(javax::xml::stream::XMLStreamReader xMLStreamReader_0,jboolean boolean_1);
						StAXInputSource(javax::xml::stream::XMLEventReader xMLEventReader_0);
						StAXInputSource(javax::xml::stream::XMLEventReader xMLEventReader_0,jboolean boolean_1);
						virtual ~StAXInputSource();
						jboolean shouldConsumeRemainingContent();
						javax::xml::stream::XMLStreamReader getXMLStreamReader();
						javax::xml::stream::XMLEventReader getXMLEventReader();
						void setSystemId(jstring string_0);
					}; // end class StAXInputSource
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSFacet : public java::lang::Object {
						public:
					            XSFacet(jobject _jthis, bool copy);
					            XSFacet(const XSFacet &);
					        
						XSFacet();
						virtual ~XSFacet();
					}; // end class XSFacet
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSNamedMap : public java::lang::Object {
						public:
					            XSNamedMap(jobject _jthis, bool copy);
					            XSNamedMap(const XSNamedMap &);
					        
						XSNamedMap();
						virtual ~XSNamedMap();
					}; // end class XSNamedMap
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSTerm : public java::lang::Object {
						public:
					            XSTerm(jobject _jthis, bool copy);
					            XSTerm(const XSTerm &);
					        
						XSTerm();
						virtual ~XSTerm();
					}; // end class XSTerm
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						
						class XSDecimal : public java::lang::Object {
							public:
						            XSDecimal(jobject _jthis, bool copy);
						            XSDecimal(const XSDecimal &);
						        
							XSDecimal();
							virtual ~XSDecimal();
						}; // end class XSDecimal
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						
						class XSDouble : public java::lang::Object {
							public:
						            XSDouble(jobject _jthis, bool copy);
						            XSDouble(const XSDouble &);
						        
							XSDouble();
							virtual ~XSDouble();
						}; // end class XSDouble
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class EncodingInfo : public java::lang::Object {
						public:
					            EncodingInfo(jobject _jthis, bool copy);
					            EncodingInfo(const EncodingInfo &);
					        
						EncodingInfo(jstring string_0,jstring string_1,jint int_2);
						virtual ~EncodingInfo();
						static void testJavaEncodingName(jstring string_0);
						jstring getIANAName();
						jboolean isPrintable(jchar char_0);
						java::io::Writer getWriter(java::io::OutputStream outputStream_0);
					}; // end class EncodingInfo
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class Encodings : public java::lang::Object {
						public:
					            Encodings(jobject _jthis, bool copy);
					            Encodings(const Encodings &);
					        
						Encodings();
						virtual ~Encodings();
					}; // end class Encodings
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class SerializerFactoryImpl : public SerializerFactory {
						public:
					            SerializerFactoryImpl(jobject _jthis, bool copy);
					            SerializerFactoryImpl(const SerializerFactoryImpl &);
					        
						virtual ~SerializerFactoryImpl();
						Serializer makeSerializer(java::io::Writer writer_0,OutputFormat outputFormat_1);
						Serializer makeSerializer(OutputFormat outputFormat_0);
						Serializer makeSerializer(java::io::OutputStream outputStream_0,OutputFormat outputFormat_1);
					}; // end class SerializerFactoryImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace org{
		namespace apache{
			namespace xml{
				namespace serialize{
					
					class TextSerializer : public BaseMarkupSerializer {
						public:
					            TextSerializer(jobject _jthis, bool copy);
					            TextSerializer(const TextSerializer &);
					        
						TextSerializer();
						virtual ~TextSerializer();
						void comment(jstring string_0);
						void comment(jcharArray charArray_0,jint int_1,jint int_2);
						void characters(jcharArray charArray_0,jint int_1,jint int_2);
						void startElement(jstring string_0,xml::sax::AttributeList attributeList_1);
						void startElement(jstring string_0,jstring string_1,jstring string_2,xml::sax::Attributes attributes_3);
						void endElement(jstring string_0,jstring string_1,jstring string_2);
						void endElement(jstring string_0);
						void setOutputFormat(OutputFormat outputFormat_0);
						void endElementIO(jstring string_0);
						void processingInstructionIO(jstring string_0,jstring string_1);
					}; // end class TextSerializer
				} // end namespace org
			} // end namespace apache
		} // end namespace xml
	} // end namespace serialize

	namespace javax{
		namespace xml{
			namespace datatype{
				
				class DatatypeConfigurationException : public java::lang::Exception {
					public:
				            DatatypeConfigurationException(jobject _jthis, bool copy);
				            DatatypeConfigurationException(const DatatypeConfigurationException &);
				        
					DatatypeConfigurationException(java::lang::Throwable throwable_0);
					DatatypeConfigurationException(jstring string_0,java::lang::Throwable throwable_1);
					DatatypeConfigurationException(jstring string_0);
					DatatypeConfigurationException();
					virtual ~DatatypeConfigurationException();
				}; // end class DatatypeConfigurationException
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype

	namespace javax{
		namespace xml{
			namespace stream{
				
				class SecuritySupport : public java::lang::Object {
					public:
				            SecuritySupport(jobject _jthis, bool copy);
				            SecuritySupport(const SecuritySupport &);
				        
					virtual ~SecuritySupport();
				}; // end class SecuritySupport
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLResolver : public java::lang::Object {
					public:
				            XMLResolver(jobject _jthis, bool copy);
				            XMLResolver(const XMLResolver &);
				        
					XMLResolver();
					virtual ~XMLResolver();
				}; // end class XMLResolver
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class DTD : public java::lang::Object {
						public:
					            DTD(jobject _jthis, bool copy);
					            DTD(const DTD &);
					        
						DTD();
						virtual ~DTD();
					}; // end class DTD
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class StartDocument : public java::lang::Object {
						public:
					            StartDocument(jobject _jthis, bool copy);
					            StartDocument(const StartDocument &);
					        
						StartDocument();
						virtual ~StartDocument();
					}; // end class StartDocument
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace transform{
				namespace stream{
					
					class StreamSource : public java::lang::Object {
						public:
					            StreamSource(jobject _jthis, bool copy);
					            StreamSource(const StreamSource &);
					        
						StreamSource();
						StreamSource(java::io::InputStream inputStream_0);
						StreamSource(java::io::InputStream inputStream_0,jstring string_1);
						StreamSource(java::io::Reader reader_0);
						StreamSource(java::io::File file_0);
						StreamSource(jstring string_0);
						StreamSource(java::io::Reader reader_0,jstring string_1);
						virtual ~StreamSource();
						void setInputStream(java::io::InputStream inputStream_0);
						jstring getSystemId();
						void setPublicId(jstring string_0);
						jstring getPublicId();
						void setSystemId(java::io::File file_0);
						void setSystemId(jstring string_0);
						java::io::Reader getReader();
						void setReader(java::io::Reader reader_0);
						java::io::InputStream getInputStream();
					}; // end class StreamSource
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathConstants : public java::lang::Object {
					public:
				            XPathConstants(jobject _jthis, bool copy);
				            XPathConstants(const XPathConstants &);
				        
					virtual ~XPathConstants();
				}; // end class XPathConstants
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathExpression : public java::lang::Object {
					public:
				            XPathExpression(jobject _jthis, bool copy);
				            XPathExpression(const XPathExpression &);
				        
					XPathExpression();
					virtual ~XPathExpression();
				}; // end class XPathExpression
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace org{
		namespace w3c{
			namespace dom{
				
				class Comment : public java::lang::Object {
					public:
				            Comment(jobject _jthis, bool copy);
				            Comment(const Comment &);
				        
					Comment();
					virtual ~Comment();
				}; // end class Comment
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DOMLocator : public java::lang::Object {
					public:
				            DOMLocator(jobject _jthis, bool copy);
				            DOMLocator(const DOMLocator &);
				        
					DOMLocator();
					virtual ~DOMLocator();
				}; // end class DOMLocator
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class EntityReference : public java::lang::Object {
					public:
				            EntityReference(jobject _jthis, bool copy);
				            EntityReference(const EntityReference &);
				        
					EntityReference();
					virtual ~EntityReference();
				}; // end class EntityReference
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSS2Properties : public java::lang::Object {
						public:
					            CSS2Properties(jobject _jthis, bool copy);
					            CSS2Properties(const CSS2Properties &);
					        
						CSS2Properties();
						virtual ~CSS2Properties();
					}; // end class CSS2Properties
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class RGBColor : public java::lang::Object {
						public:
					            RGBColor(jobject _jthis, bool copy);
					            RGBColor(const RGBColor &);
					        
						RGBColor();
						virtual ~RGBColor();
					}; // end class RGBColor
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					
					class MouseEvent : public java::lang::Object {
						public:
					            MouseEvent(jobject _jthis, bool copy);
					            MouseEvent(const MouseEvent &);
					        
						MouseEvent();
						virtual ~MouseEvent();
					}; // end class MouseEvent
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLBaseFontElement : public java::lang::Object {
						public:
					            HTMLBaseFontElement(jobject _jthis, bool copy);
					            HTMLBaseFontElement(const HTMLBaseFontElement &);
					        
						HTMLBaseFontElement();
						virtual ~HTMLBaseFontElement();
					}; // end class HTMLBaseFontElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLElement : public java::lang::Object {
						public:
					            HTMLElement(jobject _jthis, bool copy);
					            HTMLElement(const HTMLElement &);
					        
						HTMLElement();
						virtual ~HTMLElement();
					}; // end class HTMLElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLHeadingElement : public java::lang::Object {
						public:
					            HTMLHeadingElement(jobject _jthis, bool copy);
					            HTMLHeadingElement(const HTMLHeadingElement &);
					        
						HTMLHeadingElement();
						virtual ~HTMLHeadingElement();
					}; // end class HTMLHeadingElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLLegendElement : public java::lang::Object {
						public:
					            HTMLLegendElement(jobject _jthis, bool copy);
					            HTMLLegendElement(const HTMLLegendElement &);
					        
						HTMLLegendElement();
						virtual ~HTMLLegendElement();
					}; // end class HTMLLegendElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLSelectElement : public java::lang::Object {
						public:
					            HTMLSelectElement(jobject _jthis, bool copy);
					            HTMLSelectElement(const HTMLSelectElement &);
					        
						HTMLSelectElement();
						virtual ~HTMLSelectElement();
					}; // end class HTMLSelectElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLTextAreaElement : public java::lang::Object {
						public:
					            HTMLTextAreaElement(jobject _jthis, bool copy);
					            HTMLTextAreaElement(const HTMLTextAreaElement &);
					        
						HTMLTextAreaElement();
						virtual ~HTMLTextAreaElement();
					}; // end class HTMLTextAreaElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSParser : public java::lang::Object {
						public:
					            LSParser(jobject _jthis, bool copy);
					            LSParser(const LSParser &);
					        
						LSParser();
						virtual ~LSParser();
					}; // end class LSParser
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSParserFilter : public java::lang::Object {
						public:
					            LSParserFilter(jobject _jthis, bool copy);
					            LSParserFilter(const LSParserFilter &);
					        
						LSParserFilter();
						virtual ~LSParserFilter();
					}; // end class LSParserFilter
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					
					class DocumentStyle : public java::lang::Object {
						public:
					            DocumentStyle(jobject _jthis, bool copy);
					            DocumentStyle(const DocumentStyle &);
					        
						DocumentStyle();
						virtual ~DocumentStyle();
					}; // end class DocumentStyle
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets

	namespace org{
		namespace w3c{
			namespace dom{
				namespace traversal{
					
					class TreeWalker : public java::lang::Object {
						public:
					            TreeWalker(jobject _jthis, bool copy);
					            TreeWalker(const TreeWalker &);
					        
						TreeWalker();
						virtual ~TreeWalker();
					}; // end class TreeWalker
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace traversal

	namespace org{
		namespace w3c{
			namespace dom{
				namespace views{
					
					class AbstractView : public java::lang::Object {
						public:
					            AbstractView(jobject _jthis, bool copy);
					            AbstractView(const AbstractView &);
					        
						AbstractView();
						virtual ~AbstractView();
					}; // end class AbstractView
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace views

	namespace org{
		namespace xml{
			namespace sax{
				
				class AttributeList : public java::lang::Object {
					public:
				            AttributeList(jobject _jthis, bool copy);
				            AttributeList(const AttributeList &);
				        
					AttributeList();
					virtual ~AttributeList();
				}; // end class AttributeList
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				
				class InputSource : public java::lang::Object {
					public:
				            InputSource(jobject _jthis, bool copy);
				            InputSource(const InputSource &);
				        
					InputSource(jstring string_0);
					InputSource();
					InputSource(java::io::Reader reader_0);
					InputSource(java::io::InputStream inputStream_0);
					virtual ~InputSource();
					jstring getSystemId();
					void setCharacterStream(java::io::Reader reader_0);
					java::io::Reader getCharacterStream();
					void setEncoding(jstring string_0);
					void setPublicId(jstring string_0);
					jstring getPublicId();
					void setSystemId(jstring string_0);
					void setByteStream(java::io::InputStream inputStream_0);
					java::io::InputStream getByteStream();
					jstring getEncoding();
				}; // end class InputSource
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				
				class XMLReader : public java::lang::Object {
					public:
				            XMLReader(jobject _jthis, bool copy);
				            XMLReader(const XMLReader &);
				        
					XMLReader();
					virtual ~XMLReader();
				}; // end class XMLReader
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					
					class Attributes2 : public java::lang::Object {
						public:
					            Attributes2(jobject _jthis, bool copy);
					            Attributes2(const Attributes2 &);
					        
						Attributes2();
						virtual ~Attributes2();
					}; // end class Attributes2
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class AttributeListImpl : public java::lang::Object {
						public:
					            AttributeListImpl(jobject _jthis, bool copy);
					            AttributeListImpl(const AttributeListImpl &);
					        
						AttributeListImpl();
						AttributeListImpl(AttributeList attributeList_0);
						virtual ~AttributeListImpl();
						void removeAttribute(jstring string_0);
						void addAttribute(jstring string_0,jstring string_1,jstring string_2);
						void setAttributeList(AttributeList attributeList_0);
						jint getLength();
						void clear();
						jstring getName(jint int_0);
						jstring getValue(jint int_0);
						jstring getValue(jstring string_0);
						jstring getType(jstring string_0);
						jstring getType(jint int_0);
					}; // end class AttributeListImpl
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class ParserAdapter : public java::lang::Object {
						public:
					            ParserAdapter(jobject _jthis, bool copy);
					            ParserAdapter(const ParserAdapter &);
					        
						ParserAdapter(Parser parser_0);
						ParserAdapter();
						virtual ~ParserAdapter();
						ContentHandler getContentHandler();
						void setDocumentLocator(Locator locator_0);
						void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
						void processingInstruction(jstring string_0,jstring string_1);
						jboolean getFeature(jstring string_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setEntityResolver(EntityResolver entityResolver_0);
						EntityResolver getEntityResolver();
						void setDTDHandler(DTDHandler dTDHandler_0);
						DTDHandler getDTDHandler();
						void setContentHandler(ContentHandler contentHandler_0);
						ErrorHandler getErrorHandler();
						void characters(jcharArray charArray_0,jint int_1,jint int_2);
						void setErrorHandler(ErrorHandler errorHandler_0);
						void startElement(jstring string_0,AttributeList attributeList_1);
						void startDocument();
						void endDocument();
						void endElement(jstring string_0);
						void parse(jstring string_0);
						void parse(InputSource inputSource_0);
					}; // end class ParserAdapter
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace crcl{
		namespace utils{
			
			class TestInstance : public java::lang::Object {
				public:
			            TestInstance(jobject _jthis, bool copy);
			            TestInstance(const TestInstance &);
			        
				TestInstance();
				virtual ~TestInstance();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class TestInstance
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class SimServer : public javax::swing::JFrame {
				public:
			            SimServer(jobject _jthis, bool copy);
			            SimServer(const SimServer &);
			        
				SimServer();
				virtual ~SimServer();
				void updateConnectedClients(jint int_0);
				jboolean isValidateXMLSelected();
				jboolean isSendStatusWithoutRequestSelected();
				jboolean isAppendZeroSelected();
				jboolean isRandomPacketSelected();
				jboolean isReplaceStateSelected();
				jboolean isEditingStatus();
				void updateCycleCount(jint int_0);
				void updatePanels(jboolean boolean_0);
				void updateIsInitialized(jboolean boolean_0);
				void updateCurrentCommandType(jstring string_0);
				void updateEndEffector(jstring string_0);
				void updateToolChangerIsOpen(jboolean boolean_0);
				jboolean isInitializedSelected();
				void finishSetCurrentWaypoint(jint int_0);
				void updateLengthUnit(base::LengthUnitEnumType lengthUnitEnumType_0);
				void updateNumWaypoints(jint int_0);
				jboolean isDebugMoveDoneSelected();
				jboolean isDebugSendStatusSelected();
				jboolean isDebugReadCommandSelected();
				jboolean checkPose(base::PoseType poseType_0);
				jboolean isReplaceXmlHeaderSelected();
				void showMessage(java::lang::Throwable throwable_0);
				void showMessage(jstring string_0);
				void showDebugMessage(jstring string_0);
				jboolean isEXISelected();
				base::CommandStateEnumType getCommandState();
				void setCommandState(base::CommandStateEnumType commandStateEnumType_0);
				jboolean checkStatusValid(base::CRCLStatusType cRCLStatusType_0);
				jboolean isToolChangerOpen();
				void setToolChangerOpen(jboolean boolean_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class SimServer
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class CmdLineSimServer : public java::lang::Object {
				public:
			            CmdLineSimServer(jobject _jthis, bool copy);
			            CmdLineSimServer(const CmdLineSimServer &);
			        
				CmdLineSimServer();
				virtual ~CmdLineSimServer();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class CmdLineSimServer
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class AnnotatedPose : public rcs::posemath::PmPose {
				public:
			            AnnotatedPose(jobject _jthis, bool copy);
			            AnnotatedPose(const AnnotatedPose &);
			        
				AnnotatedPose(jlong long_0,java::math::BigInteger bigInteger_1,jstring string_2,rcs::posemath::PmCartesian pmCartesian_3,rcs::posemath::PmQuaternion pmQuaternion_4,base::CRCLStatusType cRCLStatusType_5);
				virtual ~AnnotatedPose();
				jlong getTime();
				java::math::BigInteger getCmdId();
				jstring getCommandName();
				rcs::posemath::PmCartesian getTran();
				base::CRCLStatusType getStatus();
				rcs::posemath::PmQuaternion getRot();
			}; // end class AnnotatedPose
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class CRCLSocket : public java::lang::Object {
				public:
			            CRCLSocket(jobject _jthis, bool copy);
			            CRCLSocket(const CRCLSocket &);
			        
				CRCLSocket(jstring string_0,jint int_1);
				CRCLSocket(java::net::Socket socket_0);
				virtual ~CRCLSocket();
				java::net::InetAddress getInetAddress();
				jboolean isConnected();
				jint getLocalPort();
				java::util::function::UnaryOperator getStatusStringInputFilter();
				void setStatusStringInputFilter(java::util::function::UnaryOperator unaryOperator_0);
				java::util::function::UnaryOperator getStatusStringOutputFilter();
				void setStatusStringOutputFilter(java::util::function::UnaryOperator unaryOperator_0);
				jboolean isJaxbFragment();
				void setJaxbFragment(jboolean boolean_0);
				jstring getLastStatusString();
				jstring getLastCommandString();
				javax::xml::validation::Schema getProgramSchema();
				void setProgramSchema(javax::xml::validation::Schema schema_0);
				javax::xml::validation::Schema getCmdSchema();
				void setCmdSchema(javax::xml::validation::Schema schema_0);
				javax::xml::validation::Schema getStatSchema();
				void setStatSchema(javax::xml::validation::Schema schema_0);
				jstring getReadInProgressString();
				jstring readUntilEndTag(jstring string_0,java::io::InputStream inputStream_1);
				base::CRCLCommandInstanceType stringToCommand(jstring string_0,jboolean boolean_1);
				base::CRCLCommandInstanceType readCommandFromStream(java::io::InputStream inputStream_0,jboolean boolean_1);
				base::CRCLProgramType stringToProgram(jstring string_0,jboolean boolean_1);
				base::CRCLCommandInstanceType readCommand(jboolean boolean_0);
				base::CRCLStatusType stringToStatus(jstring string_0,jboolean boolean_1);
				base::CRCLStatusType readStatusFromStream(java::io::InputStream inputStream_0,jboolean boolean_1);
				jboolean isEXIEnabled();
				jboolean isPrefixEXISizeEnabled();
				void setPrefixEXISizeEnabled(jboolean boolean_0);
				void setEXIEnabled(jboolean boolean_0);
				jbyteArray statusToEXI(base::CRCLStatusType cRCLStatusType_0);
				jbyteArray commandToEXI(base::CRCLCommandInstanceType cRCLCommandInstanceType_0);
				static jstring statToDebugString(base::CRCLStatusType cRCLStatusType_0);
				void writeEXIStatusToStream(java::io::OutputStream outputStream_0,base::CRCLStatusType cRCLStatusType_1);
				void writeEXICommandToStream(java::io::OutputStream outputStream_0,base::CRCLCommandInstanceType cRCLCommandInstanceType_1);
				base::CRCLStatusType exiToStatus(jbyteArray byteArray_0);
				base::CRCLCommandInstanceType exiToCommand(jbyteArray byteArray_0);
				base::CRCLStatusType readStatusFromEXIStream(java::io::InputStream inputStream_0);
				base::CRCLStatusType readStatusFromSaxSource(javax::xml::transform::sax::SAXSource sAXSource_0);
				base::CRCLCommandInstanceType readCommandFromEXIStream(java::io::InputStream inputStream_0);
				base::CRCLStatusType readStatus(jboolean boolean_0);
				jstring commandToString(base::CRCLCommandType cRCLCommandType_0,jboolean boolean_1);
				jstring commandToString(base::CRCLCommandInstanceType cRCLCommandInstanceType_0,jboolean boolean_1);
				jstring programToString(base::CRCLProgramType cRCLProgramType_0,jboolean boolean_1);
				jstring commandToPrettyString(base::CRCLCommandInstanceType cRCLCommandInstanceType_0,jboolean boolean_1);
				jstring commandToPrettyDocString(base::CRCLCommandInstanceType cRCLCommandInstanceType_0,jboolean boolean_1);
				jstring programToPrettyString(base::CRCLProgramType cRCLProgramType_0,jboolean boolean_1);
				jstring programToPrettyDocString(base::CRCLProgramType cRCLProgramType_0,jboolean boolean_1);
				void writeCommand(base::CRCLCommandInstanceType cRCLCommandInstanceType_0,jboolean boolean_1);
				void writeWithFill(jstring string_0);
				void writeProgram(base::CRCLProgramType cRCLProgramType_0,jboolean boolean_1);
				jboolean isReplaceHeader();
				void setReplaceHeader(jboolean boolean_0);
				jstring statusToString(base::CRCLStatusType cRCLStatusType_0,jboolean boolean_1);
				jstring statusToPrettyString(base::CRCLStatusType cRCLStatusType_0,jboolean boolean_1);
				static jobjectArray findSchemaFiles();
				static jobjectArray reorderStatSchemaFiles(jobjectArray fileArray_0);
				static java::util::List reorderStatSchemaFiles(java::util::List list_0);
				static javax::xml::validation::Schema filesToSchema(jobjectArray fileArray_0);
				static jobjectArray readStatSchemaFiles(java::io::File file_0);
				static void saveProgramSchemaFiles(java::io::File file_0,jobjectArray fileArray_1);
				static void saveStatSchemaFiles(java::io::File file_0,jobjectArray fileArray_1);
				static jobjectArray reorderCommandSchemaFiles(jobjectArray fileArray_0);
				static java::util::List reorderCommandSchemaFiles(java::util::List list_0);
				static java::util::List reorderProgramSchemaFiles(java::util::List list_0);
				static jobjectArray reorderProgramSchemaFiles(jobjectArray fileArray_0);
				static jobjectArray readCmdSchemaFiles(java::io::File file_0);
				static jobjectArray readProgramSchemaFiles(java::io::File file_0);
				static void saveCmdSchemaFiles(java::io::File file_0,jobjectArray fileArray_1);
				void writeStatus(base::CRCLStatusType cRCLStatusType_0,jboolean boolean_1);
				void close();
				jint available();
				jint getPort();
			}; // end class CRCLSocket
		} // end namespace crcl
	} // end namespace utils

	namespace rcsdesign{
		
		class AlphabetizedList : public diagapplet::utils::CountList {
			public:
		            AlphabetizedList(jobject _jthis, bool copy);
		            AlphabetizedList(const AlphabetizedList &);
		        
			AlphabetizedList();
			AlphabetizedList(jint int_0,jboolean boolean_1);
			virtual ~AlphabetizedList();
			void add(jstring string_0);
		}; // end class AlphabetizedList
	} // end namespace rcsdesign

	namespace rcsdesign{
		
		class rcsdesignMainLoopInfo : public java::lang::Object {
			public:
		            rcsdesignMainLoopInfo(jobject _jthis, bool copy);
		            rcsdesignMainLoopInfo(const rcsdesignMainLoopInfo &);
		        
			rcsdesignMainLoopInfo(jstring string_0);
			virtual ~rcsdesignMainLoopInfo();
			java::util::Vector getModules();
			void addModule(jstring string_0);
			void clearModules();
			jstring toString();
		}; // end class rcsdesignMainLoopInfo
	} // end namespace rcsdesign

	namespace rcsdesign{
		
		class rcsDesignWriter : public rcsDesignWriterInfo {
			public:
		            rcsDesignWriter(jobject _jthis, bool copy);
		            rcsDesignWriter(const rcsDesignWriter &);
		        
			virtual ~rcsDesignWriter();
			void PrintBuffersHashtable();
			void PrintServersHashtable();
			void PrintMainLoopsHashtable();
			void PrintModulesHashtable();
			void UpdateFile(FileTypeInfo fileTypeInfo_0);
		}; // end class rcsDesignWriter
	} // end namespace rcsdesign

	namespace rcs{
		namespace posemath{
			
			class Posemath : public java::lang::Object {
				public:
			            Posemath(jobject _jthis, bool copy);
			            Posemath(const Posemath &);
			        
				Posemath();
				virtual ~Posemath();
				static java::util::List csvToListF(java::io::File file_0,jint int_1);
				static jdouble pmCartCartDot(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static jint pmCartCylConvert(PmCartesian pmCartesian_0,PmCylindrical pmCylindrical_1);
				static jint pmCylCylSub(PmCylindrical pmCylindrical_0,PmCylindrical pmCylindrical_1,PmCylindrical pmCylindrical_2);
				static jint pmLinePoint(PmLine pmLine_0,jdouble double_1,PmPose pmPose_2);
				static jint pmQuatZyzConvert(PmQuaternion pmQuaternion_0,PmEulerZyz pmEulerZyz_1);
				static java::util::List csvToPoseList(jstring string_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5,jint int_6);
				static PM_CARTESIAN point_on_line(PM_CARTESIAN pM_CARTESIAN_0,PM_CARTESIAN pM_CARTESIAN_1,PM_CARTESIAN pM_CARTESIAN_2);
				static PmCartesian point_on_line(PM_LINE pM_LINE_0,PmCartesian pmCartesian_1);
				static PM_CARTESIAN point_on_line(PM_LINE pM_LINE_0,PM_CARTESIAN pM_CARTESIAN_1);
				static PM_CARTESIAN point_on_line_segment(PM_CARTESIAN pM_CARTESIAN_0,PM_CARTESIAN pM_CARTESIAN_1,PM_CARTESIAN pM_CARTESIAN_2);
				static PM_CARTESIAN intersection(PM_LINE pM_LINE_0,PM_LINE pM_LINE_1);
				static PM_CIRCLE fitCircle2D_XY(java::util::List list_0);
				static PM_CARTESIAN multiply(PM_XYA pM_XYA_0,PM_CARTESIAN pM_CARTESIAN_1);
				static PM_POSE multiply(PM_POSE pM_POSE_0,PM_POSE pM_POSE_1);
				static PM_CARTESIAN multiply(PM_POSE pM_POSE_0,PM_CARTESIAN pM_CARTESIAN_1);
				static jobjectArray multiply(PM_XYA pM_XYA_0,jobjectArray pM_CARTESIANArray_1);
				static PM_CARTESIAN multiply(PM_ROTATION_MATRIX pM_ROTATION_MATRIX_0,PM_CARTESIAN pM_CARTESIAN_1);
				static PM_QUATERNION multiply(PM_QUATERNION pM_QUATERNION_0,jdouble double_1);
				static PM_QUATERNION multiply(jdouble double_0,PM_QUATERNION pM_QUATERNION_1);
				static java::util::ArrayList multiply(PM_XYA pM_XYA_0,java::util::List list_1);
				static PM_CARTESIAN multiply(PmQuaternion pmQuaternion_0,PM_CARTESIAN pM_CARTESIAN_1);
				static PM_ROTATION_MATRIX multiply(PM_ROTATION_MATRIX pM_ROTATION_MATRIX_0,PM_ROTATION_MATRIX pM_ROTATION_MATRIX_1);
				static PM_QUATERNION multiply(PM_QUATERNION pM_QUATERNION_0,PM_QUATERNION pM_QUATERNION_1);
				static jobjectArray multiply(PM_POSE pM_POSE_0,jobjectArray pM_CARTESIANArray_1);
				static PM_XYA multiply(PM_XYA pM_XYA_0,PM_XYA pM_XYA_1);
				static PM_CYLINDRICAL multiply(PM_CYLINDRICAL pM_CYLINDRICAL_0,jdouble double_1);
				static PM_CYLINDRICAL multiply(jdouble double_0,PM_CYLINDRICAL pM_CYLINDRICAL_1);
				static PmCartesian multiply(PmCartesian pmCartesian_0,jdouble double_1);
				static PM_CARTESIAN multiply(PM_CARTESIAN pM_CARTESIAN_0,jdouble double_1);
				static PM_CARTESIAN multiply(jdouble double_0,PM_CARTESIAN pM_CARTESIAN_1);
				static PmRotationVector multiply(jdouble double_0,PM_ROTATION_VECTOR pM_ROTATION_VECTOR_1);
				static PM_ROTATION_VECTOR multiply(PM_ROTATION_VECTOR pM_ROTATION_VECTOR_0,jdouble double_1);
				static PmCartesian multiply(jdouble double_0,PmCartesian pmCartesian_1);
				static java::util::List prePostMultiplyList(java::util::List list_0,PM_POSE pM_POSE_1,PM_POSE pM_POSE_2);
				static void printCorrelationShifts(jstring string_0,jint int_1,jstring string_2,jint int_3,jdouble double_4,jdouble double_5,jdouble double_6,java::io::PrintStream printStream_7);
				static jint pmCylCartConvert(PmCylindrical pmCylindrical_0,PmCartesian pmCartesian_1);
				static jdouble mag(PM_CARTESIAN pM_CARTESIAN_0);
				static jdouble mag(PmCartesian pmCartesian_0);
				static jdouble mag(PM_CYLINDRICAL pM_CYLINDRICAL_0);
				static jdouble mag(PM_QUATERNION pM_QUATERNION_0);
				static PM_LINE fitLine(java::util::List list_0);
				static PM_CARTESIAN weightedAvg(PM_CARTESIAN pM_CARTESIAN_0,jdouble double_1,PM_CARTESIAN pM_CARTESIAN_2,jdouble double_3);
				static PM_POSE weightedAvg(PM_POSE pM_POSE_0,jdouble double_1,PM_POSE pM_POSE_2,jdouble double_3);
				static jint pmRotNorm(PmRotationVector pmRotationVector_0,PmRotationVector pmRotationVector_1);
				static jint pmRotQuatConvert(PmRotationVector pmRotationVector_0,PmQuaternion pmQuaternion_1);
				static jint pmQuatQuatMult(PmQuaternion pmQuaternion_0,PmQuaternion pmQuaternion_1,PmQuaternion pmQuaternion_2);
				static PM_CARTESIAN subtract(PM_CARTESIAN pM_CARTESIAN_0,PM_CARTESIAN pM_CARTESIAN_1);
				static PmCartesian subtract(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static jboolean pmCartCartCompare(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static jint pmSphCartConvert(PmSpherical pmSpherical_0,PmCartesian pmCartesian_1);
				static jboolean pmCylCylCompare(PmCylindrical pmCylindrical_0,PmCylindrical pmCylindrical_1);
				static PM_CARTESIAN inv(PM_CARTESIAN pM_CARTESIAN_0);
				static PM_CYLINDRICAL inv(PM_CYLINDRICAL pM_CYLINDRICAL_0);
				static PM_QUATERNION inv(PM_QUATERNION pM_QUATERNION_0);
				static PM_XYA inv(PM_XYA pM_XYA_0);
				static PM_POSE inv(PM_POSE pM_POSE_0);
				static PM_HOMOGENEOUS inv(PM_HOMOGENEOUS pM_HOMOGENEOUS_0);
				static jint pmRotMatConvert(PmRotationVector pmRotationVector_0,PmRotationMatrix pmRotationMatrix_1);
				static jint pmMatMatMult(PmRotationMatrix pmRotationMatrix_0,PmRotationMatrix pmRotationMatrix_1,PmRotationMatrix pmRotationMatrix_2);
				static jint pmMatRotConvert(PmRotationMatrix pmRotationMatrix_0,PmRotationVector pmRotationVector_1);
				static jint pmRpyQuatConvert(PmRpy pmRpy_0,PmQuaternion pmQuaternion_1);
				static jint pmMatQuatConvert(PmRotationMatrix pmRotationMatrix_0,PmQuaternion pmQuaternion_1);
				static jint pmQuatNorm(PmQuaternion pmQuaternion_0,PmQuaternion pmQuaternion_1);
				static jboolean pmQuatQuatCompare(PmQuaternion pmQuaternion_0,PmQuaternion pmQuaternion_1);
				static jint pmMatInv(PmRotationMatrix pmRotationMatrix_0,PmRotationMatrix pmRotationMatrix_1);
				static jint pmMatCartMult(PmRotationMatrix pmRotationMatrix_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				static jdouble disp(PM_CARTESIAN pM_CARTESIAN_0,PM_CARTESIAN pM_CARTESIAN_1);
				static jdouble mean(java::util::List list_0);
				static jdouble mean(jdoubleArray doubleArray_0);
				static jdouble mean(jobjectArray doubleArray_0);
				static jdouble stddev(jdoubleArray doubleArray_0);
				static jdouble stddev(java::util::List list_0);
				static jdouble stddev(jobjectArray doubleArray_0);
				static void writeTimeAndPoseList(java::util::List list_0,java::util::List list_1,java::io::PrintStream printStream_2);
				static void csvSync(java::io::File file_0,java::io::File file_1,java::io::PrintStream printStream_2);
				static void writeTimeAndPoseListS(java::util::List list_0,java::util::List list_1,jstring string_2);
				static jdouble shiftedSumOfProducts(java::util::List list_0,java::util::List list_1,jdouble double_2);
				static PM_POSE getCk2Pose();
				static jint pmCirclePoint(PmCircle pmCircle_0,jdouble double_1,PmPose pmPose_2);
				static java::util::List csvWithTimeToPoseList(jstring string_0,java::util::List list_1,jint int_2,jint int_3,jint int_4,jint int_5,jint int_6,jint int_7,jint int_8);
				static PM_CARTESIAN centroid(jobjectArray pM_CARTESIANArray_0);
				static PM_CARTESIAN centroid(java::util::List list_0);
				static jdouble dot(PM_CYLINDRICAL pM_CYLINDRICAL_0,PM_CYLINDRICAL pM_CYLINDRICAL_1);
				static jdouble dot(PM_CARTESIAN pM_CARTESIAN_0,PM_CARTESIAN pM_CARTESIAN_1);
				static jdouble dot(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static PM_CYLINDRICAL norm(PM_CYLINDRICAL pM_CYLINDRICAL_0);
				static PM_CARTESIAN norm(PM_CARTESIAN pM_CARTESIAN_0);
				static PM_QUATERNION norm(PM_QUATERNION pM_QUATERNION_0);
				static PM_ROTATION_VECTOR norm(PM_ROTATION_VECTOR pM_ROTATION_VECTOR_0);
				static jint pmCartSphConvert(PmCartesian pmCartesian_0,PmSpherical pmSpherical_1);
				static jint pmMatRpyConvert(PmRotationMatrix pmRotationMatrix_0,PmRpy pmRpy_1);
				static jint pmRpyMatConvert(PmRpy pmRpy_0,PmRotationMatrix pmRotationMatrix_1);
				static java::util::List fitLines(java::util::List list_0,jdouble double_1,jint int_2);
				static jint pmPoseHomConvert(PmPose pmPose_0,PmHomogeneous pmHomogeneous_1);
				static jboolean pmMatIsNorm(PmRotationMatrix pmRotationMatrix_0);
				static jdouble dist_from_line(PM_LINE pM_LINE_0,PM_CARTESIAN pM_CARTESIAN_1);
				static jint pmPoseInv(PmPose pmPose_0,PmPose pmPose_1);
				static java::util::List poseListPoseListMultiply(java::util::List list_0,java::util::List list_1);
				static java::util::List poseListInv(java::util::List list_0);
				static java::util::List csvWithTimeToPoseListF(java::io::File file_0,java::util::List list_1,jint int_2,jint int_3,jint int_4,jint int_5,jint int_6,jint int_7,jint int_8);
				static java::util::List poseListToRpyList(java::util::List list_0);
				static jint pmZyzRotConvert(PmEulerZyz pmEulerZyz_0,PmRotationVector pmRotationVector_1);
				static jint pmZyzQuatConvert(PmEulerZyz pmEulerZyz_0,PmQuaternion pmQuaternion_1);
				static jint pmZyzMatConvert(PmEulerZyz pmEulerZyz_0,PmRotationMatrix pmRotationMatrix_1);
				static java::util::List poseListRandom(jint int_0,jdouble double_1,jdouble double_2);
				static java::util::List splitToLines(java::util::List list_0,jint int_1,jdoubleArray doubleArray_2,jintArray intArray_3);
				static PmCartesian pmCartCentroid(jobjectArray pmCartesianArray_0);
				static PmCartesian pmCartCentroid(java::util::List list_0);
				static jboolean pmPosePoseCompare(PmPose pmPose_0,PmPose pmPose_1);
				static jint pmQuatZyxConvert(PmQuaternion pmQuaternion_0,PmEulerZyx pmEulerZyx_1);
				static jint pmMatZyzConvert(PmRotationMatrix pmRotationMatrix_0,PmEulerZyz pmEulerZyz_1);
				static jint pmMatZyxConvert(PmRotationMatrix pmRotationMatrix_0,PmEulerZyx pmEulerZyx_1);
				static jint pmQuatMatConvert(PmQuaternion pmQuaternion_0,PmRotationMatrix pmRotationMatrix_1);
				static java::util::List poseListChk(PM_POSE pM_POSE_0,java::util::List list_1,PM_POSE pM_POSE_2,java::util::List list_3);
				static jdouble distFromPath(PM_CARTESIAN pM_CARTESIAN_0,jobjectArray pM_CARTESIANArray_1);
				static jdouble maxA(jdoubleArray doubleArray_0);
				static jint pmRotRpyConvert(PmRotationVector pmRotationVector_0,PmRpy pmRpy_1);
				static jint pmQuatRotConvert(PmQuaternion pmQuaternion_0,PmRotationVector pmRotationVector_1);
				static jboolean IS_FUZZ(jdouble double_0,jdouble double_1);
				static PM_CARTESIAN cross(PM_CARTESIAN pM_CARTESIAN_0,PM_CARTESIAN pM_CARTESIAN_1);
				static PM_CYLINDRICAL cross(PM_CYLINDRICAL pM_CYLINDRICAL_0,PM_CYLINDRICAL pM_CYLINDRICAL_1);
				static PmCartesian cross(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static PM_POSE toPose(PM_HOMOGENEOUS pM_HOMOGENEOUS_0);
				static jint pmAxisAngleQuatConvert(jint int_0,jdouble double_1,PmQuaternion pmQuaternion_2);
				static jdouble pmSqrt(jdouble double_0);
				static jdouble pmSq(jdouble double_0);
				static PM_QUATERNION toQuat(PM_EULER_ZYX pM_EULER_ZYX_0);
				static PM_QUATERNION toQuat(PM_ROTATION_MATRIX pM_ROTATION_MATRIX_0);
				static PM_QUATERNION toQuat(PM_ROTATION_VECTOR pM_ROTATION_VECTOR_0);
				static PmQuaternion toQuat(PmRotationVector pmRotationVector_0);
				static PmQuaternion toQuat(PmRotationMatrix pmRotationMatrix_0);
				static PmQuaternion toQuat(PmRpy pmRpy_0);
				static PM_QUATERNION toQuat(PM_RPY pM_RPY_0);
				static PM_QUATERNION toQuat(PM_EULER_ZYZ pM_EULER_ZYZ_0);
				static jboolean pmClose(jdouble double_0,jdouble double_1,jdouble double_2);
				static PM_SPHERICAL toSph(PM_CYLINDRICAL pM_CYLINDRICAL_0);
				static PM_SPHERICAL toSph(PM_CARTESIAN pM_CARTESIAN_0);
				static PM_CARTESIAN toCart(PM_SPHERICAL pM_SPHERICAL_0);
				static PM_CARTESIAN toCart(PM_CYLINDRICAL pM_CYLINDRICAL_0);
				static PM_CYLINDRICAL toCyl(PM_SPHERICAL pM_SPHERICAL_0);
				static jint pmSphCylConvert(PmSpherical pmSpherical_0,PmCylindrical pmCylindrical_1);
				static jint pmCylSphConvert(PmCylindrical pmCylindrical_0,PmSpherical pmSpherical_1);
				static jdoubleArray computeLineFitErrors(PM_LINE pM_LINE_0,java::util::List list_1);
				static void findStillTimes(jobjectArray stringArray_0);
				static void findStillTimes(int argc,const char **argv);
				static jint pmZyxQuatConvert(PmEulerZyx pmEulerZyx_0,PmQuaternion pmQuaternion_1);
				static jint pmZyxMatConvert(PmEulerZyx pmEulerZyx_0,PmRotationMatrix pmRotationMatrix_1);
				static jint pmZyxZyzConvert(PmEulerZyx pmEulerZyx_0,PmEulerZyz pmEulerZyz_1);
				static jint pmZyzRpyConvert(PmEulerZyz pmEulerZyz_0,PmRpy pmRpy_1);
				static jint pmZyxRotConvert(PmEulerZyx pmEulerZyx_0,PmRotationVector pmRotationVector_1);
				static jint pmQuatRpyConvert(PmQuaternion pmQuaternion_0,PmRpy pmRpy_1);
				static PM_CARTESIAN neg(PM_CARTESIAN pM_CARTESIAN_0);
				static PM_CYLINDRICAL neg(PM_CYLINDRICAL pM_CYLINDRICAL_0);
				static java::util::List csvToList(jstring string_0,jint int_1);
				static java::util::List csvToPoseListF(java::io::File file_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5,jint int_6);
				static jboolean in_line_segment(PM_LINE pM_LINE_0,PM_CARTESIAN pM_CARTESIAN_1,jdouble double_2);
				static jint pmHomPoseConvert(PmHomogeneous pmHomogeneous_0,PmPose pmPose_1);
				static PM_POSE getCk1Pose();
				static PM_RPY toRpy(PM_QUATERNION pM_QUATERNION_0);
				static PM_RPY toRpy(PmRotationMatrix pmRotationMatrix_0);
				static PmRpy toRpy(PmQuaternion pmQuaternion_0);
				static PmRotationMatrix toMat(PmRotationVector pmRotationVector_0);
				static PM_ROTATION_MATRIX toMat(PM_RPY pM_RPY_0);
				static PmRotationMatrix toMat(PmRpy pmRpy_0);
				static PM_ROTATION_MATRIX toMat(PM_ROTATION_VECTOR pM_ROTATION_VECTOR_0);
				static PM_ROTATION_MATRIX toMat(PM_QUATERNION pM_QUATERNION_0);
				static PM_ROTATION_VECTOR toRot(PM_RPY pM_RPY_0);
				static PmRotationVector toRot(PmRpy pmRpy_0);
				static PM_ROTATION_VECTOR toRot(PM_QUATERNION pM_QUATERNION_0);
				static PmRotationVector toRot(PmRotationMatrix pmRotationMatrix_0);
				static PmRotationVector toRot(PmQuaternion pmQuaternion_0);
				static jdoubleArray rpyListToMagArray(java::util::List list_0);
				static jint pmQuatCartMult(PmQuaternion pmQuaternion_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				static jint pmCircleInit(PmCircle pmCircle_0,PmPose pmPose_1,PmPose pmPose_2,PmCartesian pmCartesian_3,PmCartesian pmCartesian_4,jint int_5);
				static java::util::List findStillPoints(java::util::List list_0,java::util::List list_1,jdouble double_2,jint int_3,java::util::List list_4);
				static jint pmPoseCartMult(PmPose pmPose_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				static jint pmPosePoseMult(PmPose pmPose_0,PmPose pmPose_1,PmPose pmPose_2);
				static jint pmHomInv(PmHomogeneous pmHomogeneous_0,PmHomogeneous pmHomogeneous_1);
				static jint pmLineInit(PmLine pmLine_0,PmPose pmPose_1,PmPose pmPose_2);
				static jboolean isNorm(PM_CARTESIAN pM_CARTESIAN_0);
				static jboolean isNorm(PM_CYLINDRICAL pM_CYLINDRICAL_0);
				static jboolean isNorm(PM_ROTATION_MATRIX pM_ROTATION_MATRIX_0);
				static jboolean isNorm(PM_QUATERNION pM_QUATERNION_0);
				static jboolean isNorm(PM_ROTATION_VECTOR pM_ROTATION_VECTOR_0);
				static jint pmRotScalMult(PmRotationVector pmRotationVector_0,jdouble double_1,PmRotationVector pmRotationVector_2);
				static jint pmRotScalDiv(PmRotationVector pmRotationVector_0,jdouble double_1,PmRotationVector pmRotationVector_2);
				static jboolean pmRotIsNorm(PmRotationVector pmRotationVector_0);
				static jdouble pmQuatMag(PmQuaternion pmQuaternion_0);
				static jint pmMatNorm(PmRotationMatrix pmRotationMatrix_0,PmRotationMatrix pmRotationMatrix_1);
				static jboolean pmQuatIsNorm(PmQuaternion pmQuaternion_0);
				static jint pmQuatScalMult(PmQuaternion pmQuaternion_0,jdouble double_1,PmQuaternion pmQuaternion_2);
				static jint pmQuatScalDiv(PmQuaternion pmQuaternion_0,jdouble double_1,PmQuaternion pmQuaternion_2);
				static jdouble pmCylCylDot(PmCylindrical pmCylindrical_0,PmCylindrical pmCylindrical_1);
				static jdouble pmCylMag(PmCylindrical pmCylindrical_0);
				static jint pmCylCylCross(PmCylindrical pmCylindrical_0,PmCylindrical pmCylindrical_1,PmCylindrical pmCylindrical_2);
				static jint pmQuatInv(PmQuaternion pmQuaternion_0,PmQuaternion pmQuaternion_1);
				static jint pmQuatAxisAngleMult(PmQuaternion pmQuaternion_0,jint int_1,jdouble double_2,PmQuaternion pmQuaternion_3);
				static PmQuaternion pmQuatAxisAngleMult(PmQuaternion pmQuaternion_0,jint int_1,jdouble double_2);
				static jint pmCylNorm(PmCylindrical pmCylindrical_0,PmCylindrical pmCylindrical_1);
				static jint pmCylInv(PmCylindrical pmCylindrical_0,PmCylindrical pmCylindrical_1);
				static jboolean pmCylIsNorm(PmCylindrical pmCylindrical_0);
				static jint pmCylNeg(PmCylindrical pmCylindrical_0,PmCylindrical pmCylindrical_1);
				static jint pmCartInv(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static jint pmCartNorm(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static jint pmCylCylAdd(PmCylindrical pmCylindrical_0,PmCylindrical pmCylindrical_1,PmCylindrical pmCylindrical_2);
				static PM_CARTESIAN proj(PM_CARTESIAN pM_CARTESIAN_0,PM_CARTESIAN pM_CARTESIAN_1);
				static jint pmCartCartProj(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				static jint pmCartPlaneProj(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				static jint pmCartScalMult(PmCartesian pmCartesian_0,jdouble double_1,PmCartesian pmCartesian_2);
				static jint pmCartScalDiv(PmCartesian pmCartesian_0,jdouble double_1,PmCartesian pmCartesian_2);
				static jint pmCartNeg(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static jint pmCylScalMult(PmCylindrical pmCylindrical_0,jdouble double_1,PmCylindrical pmCylindrical_2);
				static jint pmCylScalDiv(PmCylindrical pmCylindrical_0,jdouble double_1,PmCylindrical pmCylindrical_2);
				static jboolean pmCartIsNorm(PmCartesian pmCartesian_0);
				static jint pmRpyRotConvert(PmRpy pmRpy_0,PmRotationVector pmRotationVector_1);
				static jint pmRpyZyzConvert(PmRpy pmRpy_0,PmEulerZyz pmEulerZyz_1);
				static jint pmRpyZyxConvert(PmRpy pmRpy_0,PmEulerZyx pmEulerZyx_1);
				static jint pmCartCartCross(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				static jdouble pmCartMag(PmCartesian pmCartesian_0);
				static jdouble pmCartCartDisp(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static jdoubleArray cartListToMagArray(java::util::List list_0);
				static jint pmZyxRpyConvert(PmEulerZyx pmEulerZyx_0,PmRpy pmRpy_1);
				static java::util::List poseListToCartList(java::util::List list_0);
				static jint pmCartCartSub(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				static PM_HOMOGENEOUS toHom(PM_POSE pM_POSE_0);
				static jint pmCartCartAdd(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1,PmCartesian pmCartesian_2);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
				static PmCartesian add(PmCartesian pmCartesian_0,PmCartesian pmCartesian_1);
				static PM_CARTESIAN add(PM_CARTESIAN pM_CARTESIAN_0,PM_CARTESIAN pM_CARTESIAN_1);
				static PM_QUATERNION divide(PM_QUATERNION pM_QUATERNION_0,jdouble double_1);
				static PM_CARTESIAN divide(PM_CARTESIAN pM_CARTESIAN_0,jdouble double_1);
				static PM_CYLINDRICAL divide(PM_CYLINDRICAL pM_CYLINDRICAL_0,jdouble double_1);
				static PM_ROTATION_VECTOR divide(PM_ROTATION_VECTOR pM_ROTATION_VECTOR_0,jdouble double_1);
			}; // end class Posemath
		} // end namespace rcs
	} // end namespace posemath

	namespace rcs{
		namespace utils{
			
			class URL_and_FileLoader : public java::lang::Object {
				public:
			            URL_and_FileLoader(jobject _jthis, bool copy);
			            URL_and_FileLoader(const URL_and_FileLoader &);
			        
				URL_and_FileLoader(jstring string_0);
				URL_and_FileLoader(java::io::InputStream inputStream_0);
				virtual ~URL_and_FileLoader();
				static jboolean CheckInSearchPath(jstring string_0);
				java::io::BufferedReader getBufferedReader();
				jboolean getUseCaches();
				void setUseCaches(jboolean boolean_0);
				static void AddToSearchPath(jstring string_0);
				static java::util::Vector get_SearchPath();
				jstring toString();
				jstring readLine();
				void close();
			}; // end class URL_and_FileLoader
		} // end namespace rcs
	} // end namespace utils

	namespace diagapplet{
		
		class diag_common : public java::lang::Object {
			public:
		            diag_common(jobject _jthis, bool copy);
		            diag_common(const diag_common &);
		        
			virtual ~diag_common();
			static jboolean get_interrupt_loading();
			static jboolean get_debug_mem();
			static void DebugPrint(jstring string_0);
			static void ErrorPrint(jstring string_0);
			static jboolean get_debug_on();
			static void PrintMemUsage(jstring string_0);
		}; // end class diag_common
	} // end namespace diagapplet

	namespace diagapplet{
		namespace CodeGen{
			
			class DiagNMLMsgDictInterface : public java::lang::Object {
				public:
			            DiagNMLMsgDictInterface(jobject _jthis, bool copy);
			            DiagNMLMsgDictInterface(const DiagNMLMsgDictInterface &);
			        
				DiagNMLMsgDictInterface();
				virtual ~DiagNMLMsgDictInterface();
			}; // end class DiagNMLMsgDictInterface
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		namespace CodeGen{
			
			class EnumTypeInfo : public java::lang::Object {
				public:
			            EnumTypeInfo(jobject _jthis, bool copy);
			            EnumTypeInfo(const EnumTypeInfo &);
			        
				EnumTypeInfo();
				virtual ~EnumTypeInfo();
				jstring toString();
			}; // end class EnumTypeInfo
		} // end namespace diagapplet
	} // end namespace CodeGen

	namespace diagapplet{
		
		class JPaintablePanel : public javax::swing::JPanel {
			public:
		            JPaintablePanel(jobject _jthis, bool copy);
		            JPaintablePanel(const JPaintablePanel &);
		        
			JPaintablePanel();
			virtual ~JPaintablePanel();
			void set_painter(PainterInterface painterInterface_0);
		}; // end class JPaintablePanel
	} // end namespace diagapplet

	namespace diagapplet{
		
		class CodeDisplayPanel : public java::awt::Panel {
			public:
		            CodeDisplayPanel(jobject _jthis, bool copy);
		            CodeDisplayPanel(const CodeDisplayPanel &);
		        
			CodeDisplayPanel();
			CodeDisplayPanel(jint int_0,jint int_1);
			virtual ~CodeDisplayPanel();
			void LoadCodeFile(jstring string_0);
			void setScrolly(jint int_0);
			void forced_update();
			void setScrollx(jint int_0);
			java::awt::Dimension getPreferredSize();
			java::awt::Dimension getMinimumSize();
			void mousePressed(java::awt::event::MouseEvent mouseEvent_0);
			void mouseReleased(java::awt::event::MouseEvent mouseEvent_0);
			void mouseClicked(java::awt::event::MouseEvent mouseEvent_0);
			void mouseExited(java::awt::event::MouseEvent mouseEvent_0);
			void mouseEntered(java::awt::event::MouseEvent mouseEvent_0);
			void paint(java::awt::Graphics graphics_0);
			void setLineNumber(jint int_0);
			void reset();
		}; // end class CodeDisplayPanel
	} // end namespace diagapplet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class UnivariateDifferentiableVectorFunction : public java::lang::Object {
								public:
							            UnivariateDifferentiableVectorFunction(jobject _jthis, bool copy);
							            UnivariateDifferentiableVectorFunction(const UnivariateDifferentiableVectorFunction &);
							        
								UnivariateDifferentiableVectorFunction();
								virtual ~UnivariateDifferentiableVectorFunction();
							}; // end class UnivariateDifferentiableVectorFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace differentiation{
							
							class UnivariateFunctionDifferentiator : public java::lang::Object {
								public:
							            UnivariateFunctionDifferentiator(jobject _jthis, bool copy);
							            UnivariateFunctionDifferentiator(const UnivariateFunctionDifferentiator &);
							        
								UnivariateFunctionDifferentiator();
								virtual ~UnivariateFunctionDifferentiator();
							}; // end class UnivariateFunctionDifferentiator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace differentiation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Sigmoid : public java::lang::Object {
								public:
							            Sigmoid(jobject _jthis, bool copy);
							            Sigmoid(const Sigmoid &);
							        
								Sigmoid();
								Sigmoid(jdouble double_0,jdouble double_1);
								virtual ~Sigmoid();
								UnivariateFunction derivative();
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
								jdouble value(jdouble double_0);
							}; // end class Sigmoid
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Atan2 : public java::lang::Object {
								public:
							            Atan2(jobject _jthis, bool copy);
							            Atan2(const Atan2 &);
							        
								Atan2();
								virtual ~Atan2();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class Atan2
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Sqrt : public java::lang::Object {
								public:
							            Sqrt(jobject _jthis, bool copy);
							            Sqrt(const Sqrt &);
							        
								Sqrt();
								virtual ~Sqrt();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Sqrt
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class StepFunction : public java::lang::Object {
								public:
							            StepFunction(jobject _jthis, bool copy);
							            StepFunction(const StepFunction &);
							        
								StepFunction(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								virtual ~StepFunction();
								jdouble value(jdouble double_0);
							}; // end class StepFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Power : public java::lang::Object {
								public:
							            Power(jobject _jthis, bool copy);
							            Power(const Power &);
							        
								Power(jdouble double_0);
								virtual ~Power();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Power
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Gaussian : public java::lang::Object {
								public:
							            Gaussian(jobject _jthis, bool copy);
							            Gaussian(const Gaussian &);
							        
								Gaussian(jdouble double_0,jdouble double_1,jdouble double_2);
								Gaussian();
								Gaussian(jdouble double_0,jdouble double_1);
								virtual ~Gaussian();
								UnivariateFunction derivative();
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
								jdouble value(jdouble double_0);
							}; // end class Gaussian
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Tan : public java::lang::Object {
								public:
							            Tan(jobject _jthis, bool copy);
							            Tan(const Tan &);
							        
								Tan();
								virtual ~Tan();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Tan
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Floor : public java::lang::Object {
								public:
							            Floor(jobject _jthis, bool copy);
							            Floor(const Floor &);
							        
								Floor();
								virtual ~Floor();
								jdouble value(jdouble double_0);
							}; // end class Floor
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Acosh : public java::lang::Object {
								public:
							            Acosh(jobject _jthis, bool copy);
							            Acosh(const Acosh &);
							        
								Acosh();
								virtual ~Acosh();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Acosh
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Cos : public java::lang::Object {
								public:
							            Cos(jobject _jthis, bool copy);
							            Cos(const Cos &);
							        
								Cos();
								virtual ~Cos();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Cos
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Add : public java::lang::Object {
								public:
							            Add(jobject _jthis, bool copy);
							            Add(const Add &);
							        
								Add();
								virtual ~Add();
								jdouble value(jdouble double_0,jdouble double_1);
							}; // end class Add
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Atan : public java::lang::Object {
								public:
							            Atan(jobject _jthis, bool copy);
							            Atan(const Atan &);
							        
								Atan();
								virtual ~Atan();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Atan
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace function{
							
							class Asinh : public java::lang::Object {
								public:
							            Asinh(jobject _jthis, bool copy);
							            Asinh(const Asinh &);
							        
								Asinh();
								virtual ~Asinh();
								UnivariateFunction derivative();
								jdouble value(jdouble double_0);
								differentiation::DerivativeStructure value(differentiation::DerivativeStructure derivativeStructure_0);
							}; // end class Asinh
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								
								class GaussIntegratorFactory : public java::lang::Object {
									public:
								            GaussIntegratorFactory(jobject _jthis, bool copy);
								            GaussIntegratorFactory(const GaussIntegratorFactory &);
								        
									GaussIntegratorFactory();
									virtual ~GaussIntegratorFactory();
									GaussIntegrator legendre(jint int_0,jdouble double_1,jdouble double_2);
									GaussIntegrator legendre(jint int_0);
									SymmetricGaussIntegrator hermite(jint int_0);
									GaussIntegrator legendreHighPrecision(jint int_0,jdouble double_1,jdouble double_2);
									GaussIntegrator legendreHighPrecision(jint int_0);
								}; // end class GaussIntegratorFactory
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace integration{
							namespace gauss{
								
								class SymmetricGaussIntegrator : public GaussIntegrator {
									public:
								            SymmetricGaussIntegrator(jobject _jthis, bool copy);
								            SymmetricGaussIntegrator(const SymmetricGaussIntegrator &);
								        
									SymmetricGaussIntegrator(util::Pair pair_0);
									SymmetricGaussIntegrator(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
									virtual ~SymmetricGaussIntegrator();
									jdouble integrate(UnivariateFunction univariateFunction_0);
								}; // end class SymmetricGaussIntegrator
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace analysis
		} // end namespace integration
	} // end namespace gauss

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace solvers{
							
							class MullerSolver2 : public AbstractUnivariateSolver {
								public:
							            MullerSolver2(jobject _jthis, bool copy);
							            MullerSolver2(const MullerSolver2 &);
							        
								MullerSolver2();
								MullerSolver2(jdouble double_0,jdouble double_1);
								MullerSolver2(jdouble double_0);
								virtual ~MullerSolver2();
							}; // end class MullerSolver2
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace solvers

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						namespace interpolation{
							
							class LoessInterpolator : public java::lang::Object {
								public:
							            LoessInterpolator(jobject _jthis, bool copy);
							            LoessInterpolator(const LoessInterpolator &);
							        
								LoessInterpolator(jdouble double_0,jint int_1);
								LoessInterpolator();
								LoessInterpolator(jdouble double_0,jint int_1,jdouble double_2);
								virtual ~LoessInterpolator();
								virtual polynomials::PolynomialSplineFunction interpolate(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								virtual jdoubleArray smooth(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
								virtual jdoubleArray smooth(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
							}; // end class LoessInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace analysis
	} // end namespace interpolation

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class MultivariateMatrixFunction : public java::lang::Object {
							public:
						            MultivariateMatrixFunction(jobject _jthis, bool copy);
						            MultivariateMatrixFunction(const MultivariateMatrixFunction &);
						        
							MultivariateMatrixFunction();
							virtual ~MultivariateMatrixFunction();
						}; // end class MultivariateMatrixFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace analysis{
						
						class MultivariateFunction : public java::lang::Object {
							public:
						            MultivariateFunction(jobject _jthis, bool copy);
						            MultivariateFunction(const MultivariateFunction &);
						        
							MultivariateFunction();
							virtual ~MultivariateFunction();
						}; // end class MultivariateFunction
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace analysis

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class ClassicalRungeKuttaStepInterpolator : public RungeKuttaStepInterpolator {
								public:
							            ClassicalRungeKuttaStepInterpolator(jobject _jthis, bool copy);
							            ClassicalRungeKuttaStepInterpolator(const ClassicalRungeKuttaStepInterpolator &);
							        
								ClassicalRungeKuttaStepInterpolator(ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator_0);
								ClassicalRungeKuttaStepInterpolator();
								virtual ~ClassicalRungeKuttaStepInterpolator();
							}; // end class ClassicalRungeKuttaStepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class DormandPrince54StepInterpolator : public RungeKuttaStepInterpolator {
								public:
							            DormandPrince54StepInterpolator(jobject _jthis, bool copy);
							            DormandPrince54StepInterpolator(const DormandPrince54StepInterpolator &);
							        
								DormandPrince54StepInterpolator();
								DormandPrince54StepInterpolator(DormandPrince54StepInterpolator dormandPrince54StepInterpolator_0);
								virtual ~DormandPrince54StepInterpolator();
								void storeTime(jdouble double_0);
							}; // end class DormandPrince54StepInterpolator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class AdamsBashforthIntegrator : public AdamsIntegrator {
								public:
							            AdamsBashforthIntegrator(jobject _jthis, bool copy);
							            AdamsBashforthIntegrator(const AdamsBashforthIntegrator &);
							        
								AdamsBashforthIntegrator(jint int_0,jdouble double_1,jdouble double_2,jdoubleArray doubleArray_3,jdoubleArray doubleArray_4);
								AdamsBashforthIntegrator(jint int_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
								virtual ~AdamsBashforthIntegrator();
								void integrate(ExpandableStatefulODE expandableStatefulODE_0,jdouble double_1);
							}; // end class AdamsBashforthIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class HighamHall54Integrator : public EmbeddedRungeKuttaIntegrator {
								public:
							            HighamHall54Integrator(jobject _jthis, bool copy);
							            HighamHall54Integrator(const HighamHall54Integrator &);
							        
								HighamHall54Integrator(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
								HighamHall54Integrator(jdouble double_0,jdouble double_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3);
								virtual ~HighamHall54Integrator();
								jint getOrder();
							}; // end class HighamHall54Integrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class DormandPrince853Integrator : public EmbeddedRungeKuttaIntegrator {
								public:
							            DormandPrince853Integrator(jobject _jthis, bool copy);
							            DormandPrince853Integrator(const DormandPrince853Integrator &);
							        
								DormandPrince853Integrator(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
								DormandPrince853Integrator(jdouble double_0,jdouble double_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3);
								virtual ~DormandPrince853Integrator();
								jint getOrder();
							}; // end class DormandPrince853Integrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class DormandPrince54Integrator : public EmbeddedRungeKuttaIntegrator {
								public:
							            DormandPrince54Integrator(jobject _jthis, bool copy);
							            DormandPrince54Integrator(const DormandPrince54Integrator &);
							        
								DormandPrince54Integrator(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
								DormandPrince54Integrator(jdouble double_0,jdouble double_1,jdoubleArray doubleArray_2,jdoubleArray doubleArray_3);
								virtual ~DormandPrince54Integrator();
								jint getOrder();
							}; // end class DormandPrince54Integrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace nonstiff{
							
							class MidpointIntegrator : public RungeKuttaIntegrator {
								public:
							            MidpointIntegrator(jobject _jthis, bool copy);
							            MidpointIntegrator(const MidpointIntegrator &);
							        
								MidpointIntegrator(jdouble double_0);
								virtual ~MidpointIntegrator();
							}; // end class MidpointIntegrator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace nonstiff

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class ContinuousOutputModel : public java::lang::Object {
							public:
						            ContinuousOutputModel(jobject _jthis, bool copy);
						            ContinuousOutputModel(const ContinuousOutputModel &);
						        
							ContinuousOutputModel();
							virtual ~ContinuousOutputModel();
							jdouble getInterpolatedTime();
							void setInterpolatedTime(jdouble double_0);
							jdoubleArray getInterpolatedState();
							jdoubleArray getInterpolatedSecondaryState(jint int_0);
							void handleStep(sampling::StepInterpolator stepInterpolator_0,jboolean boolean_1);
							jdoubleArray getInterpolatedDerivatives();
							jdoubleArray getInterpolatedSecondaryDerivatives(jint int_0);
							jdouble getFinalTime();
							jdouble getInitialTime();
							void append(ContinuousOutputModel continuousOutputModel_0);
							void init(jdouble double_0,jdoubleArray doubleArray_1,jdouble double_2);
						}; // end class ContinuousOutputModel
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class FirstOrderIntegrator : public java::lang::Object {
							public:
						            FirstOrderIntegrator(jobject _jthis, bool copy);
						            FirstOrderIntegrator(const FirstOrderIntegrator &);
						        
							FirstOrderIntegrator();
							virtual ~FirstOrderIntegrator();
						}; // end class FirstOrderIntegrator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class EquationsMapper : public java::lang::Object {
							public:
						            EquationsMapper(jobject _jthis, bool copy);
						            EquationsMapper(const EquationsMapper &);
						        
							EquationsMapper(jint int_0,jint int_1);
							virtual ~EquationsMapper();
							jint getFirstIndex();
							jint getDimension();
							void extractEquationData(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							void insertEquationData(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
						}; // end class EquationsMapper
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class ExpandableStatefulODE : public java::lang::Object {
							public:
						            ExpandableStatefulODE(jobject _jthis, bool copy);
						            ExpandableStatefulODE(const ExpandableStatefulODE &);
						        
							ExpandableStatefulODE(FirstOrderDifferentialEquations firstOrderDifferentialEquations_0);
							virtual ~ExpandableStatefulODE();
							void setTime(jdouble double_0);
							jdouble getTime();
							jdoubleArray getCompleteState();
							EquationsMapper getPrimaryMapper();
							jobjectArray getSecondaryMappers();
							void computeDerivatives(jdouble double_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
							jdoubleArray getPrimaryStateDot();
							void setSecondaryState(jint int_0,jdoubleArray doubleArray_1);
							jdoubleArray getSecondaryStateDot(jint int_0);
							jint getTotalDimension();
							jint addSecondaryEquations(SecondaryEquations secondaryEquations_0);
							jdoubleArray getSecondaryState(jint int_0);
							void setCompleteState(jdoubleArray doubleArray_0);
							FirstOrderDifferentialEquations getPrimary();
							void setPrimaryState(jdoubleArray doubleArray_0);
							jdoubleArray getPrimaryState();
						}; // end class ExpandableStatefulODE
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class UnknownParameterException : public exception::MathIllegalArgumentException {
							public:
						            UnknownParameterException(jobject _jthis, bool copy);
						            UnknownParameterException(const UnknownParameterException &);
						        
							UnknownParameterException(jstring string_0);
							virtual ~UnknownParameterException();
							jstring getName();
						}; // end class UnknownParameterException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class AbstractParameterizable : public java::lang::Object {
							public:
						            AbstractParameterizable(jobject _jthis, bool copy);
						            AbstractParameterizable(const AbstractParameterizable &);
						        
							virtual ~AbstractParameterizable();
							java::util::Collection getParametersNames();
							void complainIfNotSupported(jstring string_0);
							jboolean isSupported(jstring string_0);
						}; // end class AbstractParameterizable
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class ParameterConfiguration : public java::lang::Object {
							public:
						            ParameterConfiguration(jobject _jthis, bool copy);
						            ParameterConfiguration(const ParameterConfiguration &);
						        
							ParameterConfiguration(jstring string_0,jdouble double_1);
							virtual ~ParameterConfiguration();
							void setHP(jdouble double_0);
							jdouble getHP();
							jstring getParameterName();
						}; // end class ParameterConfiguration
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class SecondOrderIntegrator : public java::lang::Object {
							public:
						            SecondOrderIntegrator(jobject _jthis, bool copy);
						            SecondOrderIntegrator(const SecondOrderIntegrator &);
						        
							SecondOrderIntegrator();
							virtual ~SecondOrderIntegrator();
						}; // end class SecondOrderIntegrator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class ParameterJacobianWrapper : public java::lang::Object {
							public:
						            ParameterJacobianWrapper(jobject _jthis, bool copy);
						            ParameterJacobianWrapper(const ParameterJacobianWrapper &);
						        
							ParameterJacobianWrapper(FirstOrderDifferentialEquations firstOrderDifferentialEquations_0,ParameterizedODE parameterizedODE_1,jobjectArray parameterConfigurationArray_2);
							virtual ~ParameterJacobianWrapper();
							void computeParameterJacobian(jdouble double_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2,jstring string_3,jdoubleArray doubleArray_4);
							java::util::Collection getParametersNames();
							jboolean isSupported(jstring string_0);
						}; // end class ParameterJacobianWrapper
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						
						class FirstOrderConverter : public java::lang::Object {
							public:
						            FirstOrderConverter(jobject _jthis, bool copy);
						            FirstOrderConverter(const FirstOrderConverter &);
						        
							FirstOrderConverter(SecondOrderDifferentialEquations secondOrderDifferentialEquations_0);
							virtual ~FirstOrderConverter();
							jint getDimension();
							void computeDerivatives(jdouble double_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
						}; // end class FirstOrderConverter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace ode

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							
							class Transformer : public java::lang::Enum {
								public:
							            Transformer(jobject _jthis, bool copy);
							            Transformer(const Transformer &);
							        
								virtual ~Transformer();
								static jobjectArray values();
								static Transformer valueOf(jstring string_0);
							}; // end class Transformer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							
							class FilterType : public java::lang::Enum {
								public:
							            FilterType(jobject _jthis, bool copy);
							            FilterType(const FilterType &);
							        
								virtual ~FilterType();
								static jobjectArray values();
								static FilterType valueOf(jstring string_0);
							}; // end class FilterType
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace ode
	} // end namespace events

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class PowellOptimizer : public BaseAbstractMultivariateOptimizer {
								public:
							            PowellOptimizer(jobject _jthis, bool copy);
							            PowellOptimizer(const PowellOptimizer &);
							        
								PowellOptimizer(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
								PowellOptimizer(jdouble double_0,jdouble double_1,ConvergenceChecker convergenceChecker_2);
								PowellOptimizer(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,ConvergenceChecker convergenceChecker_4);
								PowellOptimizer(jdouble double_0,jdouble double_1);
								virtual ~PowellOptimizer();
							}; // end class PowellOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class NelderMeadSimplex : public AbstractSimplex {
								public:
							            NelderMeadSimplex(jobject _jthis, bool copy);
							            NelderMeadSimplex(const NelderMeadSimplex &);
							        
								NelderMeadSimplex(jdoubleArray doubleArray_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
								NelderMeadSimplex(jint int_0);
								NelderMeadSimplex(jint int_0,jdouble double_1);
								NelderMeadSimplex(jint int_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
								NelderMeadSimplex(jint int_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4);
								NelderMeadSimplex(jdoubleArray doubleArray_0);
								virtual ~NelderMeadSimplex();
								void iterate(analysis::MultivariateFunction multivariateFunction_0,java::util::Comparator comparator_1);
							}; // end class NelderMeadSimplex
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class MultivariateFunctionMappingAdapter : public java::lang::Object {
								public:
							            MultivariateFunctionMappingAdapter(jobject _jthis, bool copy);
							            MultivariateFunctionMappingAdapter(const MultivariateFunctionMappingAdapter &);
							        
								MultivariateFunctionMappingAdapter(analysis::MultivariateFunction multivariateFunction_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
								virtual ~MultivariateFunctionMappingAdapter();
								jdoubleArray unboundedToBounded(jdoubleArray doubleArray_0);
								jdoubleArray boundedToUnbounded(jdoubleArray doubleArray_0);
								jdouble value(jdoubleArray doubleArray_0);
							}; // end class MultivariateFunctionMappingAdapter
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace direct{
							
							class MultiDirectionalSimplex : public AbstractSimplex {
								public:
							            MultiDirectionalSimplex(jobject _jthis, bool copy);
							            MultiDirectionalSimplex(const MultiDirectionalSimplex &);
							        
								MultiDirectionalSimplex(jdoubleArray doubleArray_0,jdouble double_1,jdouble double_2);
								MultiDirectionalSimplex(jint int_0);
								MultiDirectionalSimplex(jint int_0,jdouble double_1);
								MultiDirectionalSimplex(jint int_0,jdouble double_1,jdouble double_2);
								MultiDirectionalSimplex(jint int_0,jdouble double_1,jdouble double_2,jdouble double_3);
								MultiDirectionalSimplex(jdoubleArray doubleArray_0);
								virtual ~MultiDirectionalSimplex();
								void iterate(analysis::MultivariateFunction multivariateFunction_0,java::util::Comparator comparator_1);
							}; // end class MultiDirectionalSimplex
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace direct

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							
							class SimpleUnivariateValueChecker : public AbstractConvergenceChecker {
								public:
							            SimpleUnivariateValueChecker(jobject _jthis, bool copy);
							            SimpleUnivariateValueChecker(const SimpleUnivariateValueChecker &);
							        
								SimpleUnivariateValueChecker();
								SimpleUnivariateValueChecker(jdouble double_0,jdouble double_1,jint int_2);
								SimpleUnivariateValueChecker(jdouble double_0,jdouble double_1);
								virtual ~SimpleUnivariateValueChecker();
								jboolean converged(jint int_0,UnivariatePointValuePair univariatePointValuePair_1,UnivariatePointValuePair univariatePointValuePair_2);
							}; // end class SimpleUnivariateValueChecker
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							
							class BaseUnivariateOptimizer : public java::lang::Object {
								public:
							            BaseUnivariateOptimizer(jobject _jthis, bool copy);
							            BaseUnivariateOptimizer(const BaseUnivariateOptimizer &);
							        
								BaseUnivariateOptimizer();
								virtual ~BaseUnivariateOptimizer();
							}; // end class BaseUnivariateOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							
							class BrentOptimizer : public BaseAbstractUnivariateOptimizer {
								public:
							            BrentOptimizer(jobject _jthis, bool copy);
							            BrentOptimizer(const BrentOptimizer &);
							        
								BrentOptimizer(jdouble double_0,jdouble double_1,ConvergenceChecker convergenceChecker_2);
								BrentOptimizer(jdouble double_0,jdouble double_1);
								virtual ~BrentOptimizer();
							}; // end class BrentOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						namespace univariate{
							
							class UnivariateOptimizer : public java::lang::Object {
								public:
							            UnivariateOptimizer(jobject _jthis, bool copy);
							            UnivariateOptimizer(const UnivariateOptimizer &);
							        
								UnivariateOptimizer();
								virtual ~UnivariateOptimizer();
							}; // end class UnivariateOptimizer
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optimization
	} // end namespace univariate

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class SimpleValueChecker : public AbstractConvergenceChecker {
							public:
						            SimpleValueChecker(jobject _jthis, bool copy);
						            SimpleValueChecker(const SimpleValueChecker &);
						        
							SimpleValueChecker();
							SimpleValueChecker(jdouble double_0,jdouble double_1,jint int_2);
							SimpleValueChecker(jdouble double_0,jdouble double_1);
							virtual ~SimpleValueChecker();
							jboolean converged(jint int_0,PointValuePair pointValuePair_1,PointValuePair pointValuePair_2);
						}; // end class SimpleValueChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class MultivariateMultiStartOptimizer : public BaseMultivariateMultiStartOptimizer {
							public:
						            MultivariateMultiStartOptimizer(jobject _jthis, bool copy);
						            MultivariateMultiStartOptimizer(const MultivariateMultiStartOptimizer &);
						        
							MultivariateMultiStartOptimizer(MultivariateOptimizer multivariateOptimizer_0,jint int_1,random::RandomVectorGenerator randomVectorGenerator_2);
							virtual ~MultivariateMultiStartOptimizer();
						}; // end class MultivariateMultiStartOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class LeastSquaresConverter : public java::lang::Object {
							public:
						            LeastSquaresConverter(jobject _jthis, bool copy);
						            LeastSquaresConverter(const LeastSquaresConverter &);
						        
							LeastSquaresConverter(analysis::MultivariateVectorFunction multivariateVectorFunction_0,jdoubleArray doubleArray_1,linear::RealMatrix realMatrix_2);
							LeastSquaresConverter(analysis::MultivariateVectorFunction multivariateVectorFunction_0,jdoubleArray doubleArray_1,jdoubleArray doubleArray_2);
							LeastSquaresConverter(analysis::MultivariateVectorFunction multivariateVectorFunction_0,jdoubleArray doubleArray_1);
							virtual ~LeastSquaresConverter();
							jdouble value(jdoubleArray doubleArray_0);
						}; // end class LeastSquaresConverter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class Weight : public java::lang::Object {
							public:
						            Weight(jobject _jthis, bool copy);
						            Weight(const Weight &);
						        
							Weight(linear::RealMatrix realMatrix_0);
							Weight(jdoubleArray doubleArray_0);
							virtual ~Weight();
							linear::RealMatrix getWeight();
						}; // end class Weight
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class SimpleVectorValueChecker : public AbstractConvergenceChecker {
							public:
						            SimpleVectorValueChecker(jobject _jthis, bool copy);
						            SimpleVectorValueChecker(const SimpleVectorValueChecker &);
						        
							SimpleVectorValueChecker();
							SimpleVectorValueChecker(jdouble double_0,jdouble double_1,jint int_2);
							SimpleVectorValueChecker(jdouble double_0,jdouble double_1);
							virtual ~SimpleVectorValueChecker();
							jboolean converged(jint int_0,PointVectorValuePair pointVectorValuePair_1,PointVectorValuePair pointVectorValuePair_2);
						}; // end class SimpleVectorValueChecker
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class InitialGuess : public java::lang::Object {
							public:
						            InitialGuess(jobject _jthis, bool copy);
						            InitialGuess(const InitialGuess &);
						        
							InitialGuess(jdoubleArray doubleArray_0);
							virtual ~InitialGuess();
							jdoubleArray getInitialGuess();
						}; // end class InitialGuess
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class MultivariateDifferentiableMultiStartOptimizer : public BaseMultivariateMultiStartOptimizer {
							public:
						            MultivariateDifferentiableMultiStartOptimizer(jobject _jthis, bool copy);
						            MultivariateDifferentiableMultiStartOptimizer(const MultivariateDifferentiableMultiStartOptimizer &);
						        
							MultivariateDifferentiableMultiStartOptimizer(MultivariateDifferentiableOptimizer multivariateDifferentiableOptimizer_0,jint int_1,random::RandomVectorGenerator randomVectorGenerator_2);
							virtual ~MultivariateDifferentiableMultiStartOptimizer();
						}; // end class MultivariateDifferentiableMultiStartOptimizer
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optimization{
						
						class SimpleBounds : public java::lang::Object {
							public:
						            SimpleBounds(jobject _jthis, bool copy);
						            SimpleBounds(const SimpleBounds &);
						        
							SimpleBounds(jdoubleArray doubleArray_0,jdoubleArray doubleArray_1);
							virtual ~SimpleBounds();
							jdoubleArray getLower();
							jdoubleArray getUpper();
						}; // end class SimpleBounds
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace optimization

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								namespace util{
									
									class ExponentialDecayFunction : public java::lang::Object {
										public:
									            ExponentialDecayFunction(jobject _jthis, bool copy);
									            ExponentialDecayFunction(const ExponentialDecayFunction &);
									        
										ExponentialDecayFunction(jdouble double_0,jdouble double_1,jlong long_2);
										virtual ~ExponentialDecayFunction();
										jdouble value(jlong long_0);
									}; // end class ExponentialDecayFunction
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace ml
			} // end namespace neuralnet
		} // end namespace sofm
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace neuralnet{
							namespace sofm{
								
								class NeighbourhoodSizeFunctionFactory : public java::lang::Object {
									public:
								            NeighbourhoodSizeFunctionFactory(jobject _jthis, bool copy);
								            NeighbourhoodSizeFunctionFactory(const NeighbourhoodSizeFunctionFactory &);
								        
									virtual ~NeighbourhoodSizeFunctionFactory();
									static NeighbourhoodSizeFunction exponentialDecay(jdouble double_0,jdouble double_1,jlong long_2);
									static NeighbourhoodSizeFunction quasiSigmoidDecay(jdouble double_0,jdouble double_1,jlong long_2);
								}; // end class NeighbourhoodSizeFunctionFactory
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace neuralnet
	} // end namespace sofm

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class VectorialMean : public java::lang::Object {
									public:
								            VectorialMean(jobject _jthis, bool copy);
								            VectorialMean(const VectorialMean &);
								        
									VectorialMean(jint int_0);
									virtual ~VectorialMean();
									jlong getN();
									jint hashCode();
									void increment(jdoubleArray doubleArray_0);
									jdoubleArray getResult();
								}; // end class VectorialMean
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								
								class GeometricMean : public AbstractStorelessUnivariateStatistic {
									public:
								            GeometricMean(jobject _jthis, bool copy);
								            GeometricMean(const GeometricMean &);
								        
									GeometricMean();
									GeometricMean(summary::SumOfLogs sumOfLogs_0);
									GeometricMean(GeometricMean geometricMean_0);
									virtual ~GeometricMean();
									jdouble evaluate(jdoubleArray doubleArray_0,jint int_1,jint int_2);
									jlong getN();
									StorelessUnivariateStatistic getSumLogImpl();
									void setSumLogImpl(StorelessUnivariateStatistic storelessUnivariateStatistic_0);
									void clear();
									void increment(jdouble double_0);
									static void copy(GeometricMean geometricMean_0,GeometricMean geometricMean_1);
									GeometricMean copy();
									jdouble getResult();
								}; // end class GeometricMean
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace stat
		} // end namespace descriptive
	} // end namespace moment

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace complex{
						
						class ComplexFormat : public java::lang::Object {
							public:
						            ComplexFormat(jobject _jthis, bool copy);
						            ComplexFormat(const ComplexFormat &);
						        
							ComplexFormat();
							ComplexFormat(jstring string_0,java::text::NumberFormat numberFormat_1,java::text::NumberFormat numberFormat_2);
							ComplexFormat(java::text::NumberFormat numberFormat_0);
							ComplexFormat(jstring string_0);
							ComplexFormat(jstring string_0,java::text::NumberFormat numberFormat_1);
							ComplexFormat(java::text::NumberFormat numberFormat_0,java::text::NumberFormat numberFormat_1);
							virtual ~ComplexFormat();
							java::text::NumberFormat getRealFormat();
							jstring getImaginaryCharacter();
							java::text::NumberFormat getImaginaryFormat();
							java::lang::StringBuffer format(Complex complex_0,java::lang::StringBuffer stringBuffer_1,java::text::FieldPosition fieldPosition_2);
							jstring format(Complex complex_0);
							jstring format(java::lang::Double double_0);
							static ComplexFormat getInstance(java::util::Locale locale_0);
							static ComplexFormat getInstance(jstring string_0,java::util::Locale locale_1);
							static ComplexFormat getInstance();
							Complex parse(jstring string_0);
							Complex parse(jstring string_0,java::text::ParsePosition parsePosition_1);
							static jobjectArray getAvailableLocales();
						}; // end class ComplexFormat
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace complex

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						
						class DfpField : public java::lang::Object {
							public:
						            DfpField(jobject _jthis, bool copy);
						            DfpField(const DfpField &);
						        
							DfpField(jint int_0);
							virtual ~DfpField();
							Dfp getZero();
							Dfp getOne();
							void setIEEEFlagsBits(jint int_0);
							Dfp newDfp(jlong long_0);
							Dfp newDfp(jdouble double_0);
							Dfp newDfp(jint int_0);
							Dfp newDfp(Dfp dfp_0);
							Dfp newDfp(jstring string_0);
							Dfp newDfp(jbyte byte_0,jbyte byte_1);
							Dfp newDfp(jbyte byte_0);
							Dfp newDfp();
							DfpField::RoundingMode getRoundingMode();
							jint getRadixDigits();
							Dfp getTwo();
							void setRoundingMode(DfpField::RoundingMode roundingMode_0);
							jint getIEEEFlags();
							void clearIEEEFlags();
							void setIEEEFlags(jint int_0);
							Dfp getSqr2();
							jobjectArray getSqr2Split();
							Dfp getSqr2Reciprocal();
							Dfp getSqr3();
							Dfp getSqr3Reciprocal();
							Dfp getPi();
							jobjectArray getPiSplit();
							Dfp getE();
							jobjectArray getESplit();
							Dfp getLn2();
							jobjectArray getLn2Split();
							Dfp getLn5();
							jobjectArray getLn5Split();
							Dfp getLn10();
							static Dfp computeExp(Dfp dfp_0,Dfp dfp_1);
							static Dfp computeLn(Dfp dfp_0,Dfp dfp_1,Dfp dfp_2);
						}; // end class DfpField
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace dfp

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						
						class BesselJ : public java::lang::Object {
							public:
						            BesselJ(jobject _jthis, bool copy);
						            BesselJ(const BesselJ &);
						        
							BesselJ(jdouble double_0);
							virtual ~BesselJ();
							static BesselJ::BesselJResult rjBesl(jdouble double_0,jdouble double_1,jint int_2);
							jdouble value(jdouble double_0);
							static jdouble value(jdouble double_0,jdouble double_1);
						}; // end class BesselJ
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace special

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						
						class Erf : public java::lang::Object {
							public:
						            Erf(jobject _jthis, bool copy);
						            Erf(const Erf &);
						        
							virtual ~Erf();
							static jdouble erfInv(jdouble double_0);
							static jdouble erf(jdouble double_0,jdouble double_1);
							static jdouble erf(jdouble double_0);
							static jdouble erfc(jdouble double_0);
							static jdouble erfcInv(jdouble double_0);
						}; // end class Erf
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace special

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace primes{
						
						class SmallPrimes : public java::lang::Object {
							public:
						            SmallPrimes(jobject _jthis, bool copy);
						            SmallPrimes(const SmallPrimes &);
						        
							virtual ~SmallPrimes();
							static jint boundedTrialDivision(jint int_0,jint int_1,java::util::List list_2);
							static jboolean millerRabinPrimeTest(jint int_0);
							static java::util::List trialDivision(jint int_0);
							static jint smallTrialDivision(jint int_0,java::util::List list_1);
						}; // end class SmallPrimes
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace primes

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								
								class Weight : public java::lang::Object {
									public:
								            Weight(jobject _jthis, bool copy);
								            Weight(const Weight &);
								        
									Weight(linear::RealMatrix realMatrix_0);
									Weight(jdoubleArray doubleArray_0);
									virtual ~Weight();
									linear::RealMatrix getWeight();
								}; // end class Weight
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace nonlinear{
							namespace vector{
								
								class MultiStartMultivariateVectorOptimizer : public BaseMultiStartMultivariateOptimizer {
									public:
								            MultiStartMultivariateVectorOptimizer(jobject _jthis, bool copy);
								            MultiStartMultivariateVectorOptimizer(const MultiStartMultivariateVectorOptimizer &);
								        
									MultiStartMultivariateVectorOptimizer(MultivariateVectorOptimizer multivariateVectorOptimizer_0,jint int_1,random::RandomVectorGenerator randomVectorGenerator_2);
									virtual ~MultiStartMultivariateVectorOptimizer();
									jobjectArray getOptima();
								}; // end class MultiStartMultivariateVectorOptimizer
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace optim
		} // end namespace nonlinear
	} // end namespace vector

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class NonNegativeConstraint : public java::lang::Object {
								public:
							            NonNegativeConstraint(jobject _jthis, bool copy);
							            NonNegativeConstraint(const NonNegativeConstraint &);
							        
								NonNegativeConstraint(jboolean boolean_0);
								virtual ~NonNegativeConstraint();
								jboolean isRestrictedToNonNegative();
							}; // end class NonNegativeConstraint
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class NoFeasibleSolutionException : public exception::MathIllegalStateException {
								public:
							            NoFeasibleSolutionException(jobject _jthis, bool copy);
							            NoFeasibleSolutionException(const NoFeasibleSolutionException &);
							        
								NoFeasibleSolutionException();
								virtual ~NoFeasibleSolutionException();
							}; // end class NoFeasibleSolutionException
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace optim{
						namespace linear{
							
							class LinearObjectiveFunction : public java::lang::Object {
								public:
							            LinearObjectiveFunction(jobject _jthis, bool copy);
							            LinearObjectiveFunction(const LinearObjectiveFunction &);
							        
								LinearObjectiveFunction(jdoubleArray doubleArray_0,jdouble double_1);
								LinearObjectiveFunction(linear::RealVector realVector_0,jdouble double_1);
								virtual ~LinearObjectiveFunction();
								linear::RealVector getCoefficients();
								jdouble getConstantTerm();
								jdouble value(linear::RealVector realVector_0);
								jdouble value(jdoubleArray doubleArray_0);
								jint hashCode();
							}; // end class LinearObjectiveFunction
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace optim
	} // end namespace linear

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fraction{
						
						class FractionField : public java::lang::Object {
							public:
						            FractionField(jobject _jthis, bool copy);
						            FractionField(const FractionField &);
						        
							virtual ~FractionField();
							Fraction getZero();
							Fraction getOne();
							static FractionField getInstance();
						}; // end class FractionField
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace fraction

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace enclosing{
							
							class Encloser : public java::lang::Object {
								public:
							            Encloser(jobject _jthis, bool copy);
							            Encloser(const Encloser &);
							        
								Encloser();
								virtual ~Encloser();
							}; // end class Encloser
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace geometry
	} // end namespace enclosing

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class OutlineExtractor : public java::lang::Object {
									public:
								            OutlineExtractor(jobject _jthis, bool copy);
								            OutlineExtractor(const OutlineExtractor &);
								        
									OutlineExtractor(Vector3D vector3D_0,Vector3D vector3D_1);
									virtual ~OutlineExtractor();
								}; // end class OutlineExtractor
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class SubPlane : public partitioning::AbstractSubHyperplane {
									public:
								            SubPlane(jobject _jthis, bool copy);
								            SubPlane(const SubPlane &);
								        
									SubPlane(partitioning::Hyperplane hyperplane_0,partitioning::Region region_1);
									virtual ~SubPlane();
									partitioning::Side side(partitioning::Hyperplane hyperplane_0);
									partitioning::SubHyperplane::SplitSubHyperplane split(partitioning::Hyperplane hyperplane_0);
								}; // end class SubPlane
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class SphereGenerator : public java::lang::Object {
									public:
								            SphereGenerator(jobject _jthis, bool copy);
								            SphereGenerator(const SphereGenerator &);
								        
									SphereGenerator();
									virtual ~SphereGenerator();
									enclosing::EnclosingBall ballOnSupport(java::util::List list_0);
								}; // end class SphereGenerator
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class Segment : public java::lang::Object {
									public:
								            Segment(jobject _jthis, bool copy);
								            Segment(const Segment &);
								        
									Segment(Vector3D vector3D_0,Vector3D vector3D_1,Line line_2);
									virtual ~Segment();
									Vector3D getStart();
									Vector3D getEnd();
									Line getLine();
								}; // end class Segment
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class Line : public java::lang::Object {
									public:
								            Line(jobject _jthis, bool copy);
								            Line(const Line &);
								        
									Line(Line line_0);
									Line(Vector3D vector3D_0,Vector3D vector3D_1,jdouble double_2);
									Line(Vector3D vector3D_0,Vector3D vector3D_1);
									virtual ~Line();
									Vector3D intersection(Line line_0);
									jdouble distance(Line line_0);
									jdouble distance(Vector3D vector3D_0);
									Vector3D getDirection();
									jdouble getTolerance();
									oned::Vector1D toSubSpace(Vector vector_0);
									oned::Vector1D toSubSpace(Point point_0);
									jdouble getAbscissa(Vector3D vector3D_0);
									Line revert();
									Vector3D getOrigin();
									Vector3D pointAt(jdouble double_0);
									Vector3D toSpace(Point point_0);
									Vector3D toSpace(Vector vector_0);
									jboolean isSimilarTo(Line line_0);
									Vector3D closestPoint(Line line_0);
									SubLine wholeLine();
									jboolean contains(Vector3D vector3D_0);
									void reset(Vector3D vector3D_0,Vector3D vector3D_1);
								}; // end class Line
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class CardanEulerSingularityException : public exception::MathIllegalStateException {
									public:
								            CardanEulerSingularityException(jobject _jthis, bool copy);
								            CardanEulerSingularityException(const CardanEulerSingularityException &);
								        
									CardanEulerSingularityException(jboolean boolean_0);
									virtual ~CardanEulerSingularityException();
								}; // end class CardanEulerSingularityException
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class RotationOrder : public java::lang::Object {
									public:
								            RotationOrder(jobject _jthis, bool copy);
								            RotationOrder(const RotationOrder &);
								        
									virtual ~RotationOrder();
									Vector3D getA1();
									Vector3D getA2();
									Vector3D getA3();
									jstring toString();
								}; // end class RotationOrder
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class NotARotationMatrixException : public exception::MathIllegalArgumentException {
									public:
								            NotARotationMatrixException(jobject _jthis, bool copy);
								            NotARotationMatrixException(const NotARotationMatrixException &);
								        
									virtual ~NotARotationMatrixException();
								}; // end class NotARotationMatrixException
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace threed{
								
								class FieldVector3D : public java::lang::Object {
									public:
								            FieldVector3D(jobject _jthis, bool copy);
								            FieldVector3D(const FieldVector3D &);
								        
									FieldVector3D(jdouble double_0,FieldVector3D fieldVector3D_1,jdouble double_2,FieldVector3D fieldVector3D_3,jdouble double_4,FieldVector3D fieldVector3D_5);
									FieldVector3D(RealFieldElement realFieldElement_0,FieldVector3D fieldVector3D_1,RealFieldElement realFieldElement_2,FieldVector3D fieldVector3D_3,RealFieldElement realFieldElement_4,FieldVector3D fieldVector3D_5,RealFieldElement realFieldElement_6,FieldVector3D fieldVector3D_7);
									FieldVector3D(RealFieldElement realFieldElement_0,Vector3D vector3D_1);
									FieldVector3D(jdouble double_0,FieldVector3D fieldVector3D_1,jdouble double_2,FieldVector3D fieldVector3D_3,jdouble double_4,FieldVector3D fieldVector3D_5,jdouble double_6,FieldVector3D fieldVector3D_7);
									FieldVector3D(RealFieldElement realFieldElement_0,FieldVector3D fieldVector3D_1);
									FieldVector3D(jdouble double_0,FieldVector3D fieldVector3D_1);
									FieldVector3D(RealFieldElement realFieldElement_0,FieldVector3D fieldVector3D_1,RealFieldElement realFieldElement_2,FieldVector3D fieldVector3D_3);
									FieldVector3D(RealFieldElement realFieldElement_0,Vector3D vector3D_1,RealFieldElement realFieldElement_2,Vector3D vector3D_3);
									FieldVector3D(jdouble double_0,FieldVector3D fieldVector3D_1,jdouble double_2,FieldVector3D fieldVector3D_3);
									FieldVector3D(RealFieldElement realFieldElement_0,FieldVector3D fieldVector3D_1,RealFieldElement realFieldElement_2,FieldVector3D fieldVector3D_3,RealFieldElement realFieldElement_4,FieldVector3D fieldVector3D_5);
									FieldVector3D(RealFieldElement realFieldElement_0,Vector3D vector3D_1,RealFieldElement realFieldElement_2,Vector3D vector3D_3,RealFieldElement realFieldElement_4,Vector3D vector3D_5);
									FieldVector3D(RealFieldElement realFieldElement_0,RealFieldElement realFieldElement_1);
									FieldVector3D(jobjectArray realFieldElementArray_0);
									FieldVector3D(RealFieldElement realFieldElement_0,Vector3D vector3D_1,RealFieldElement realFieldElement_2,Vector3D vector3D_3,RealFieldElement realFieldElement_4,Vector3D vector3D_5,RealFieldElement realFieldElement_6,Vector3D vector3D_7);
									FieldVector3D(RealFieldElement realFieldElement_0,RealFieldElement realFieldElement_1,RealFieldElement realFieldElement_2);
									virtual ~FieldVector3D();
									Vector3D toVector3D();
									RealFieldElement distanceSq(FieldVector3D fieldVector3D_0);
									static RealFieldElement distanceSq(FieldVector3D fieldVector3D_0,FieldVector3D fieldVector3D_1);
									RealFieldElement distanceSq(Vector3D vector3D_0);
									static RealFieldElement distanceSq(Vector3D vector3D_0,FieldVector3D fieldVector3D_1);
									static RealFieldElement distanceSq(FieldVector3D fieldVector3D_0,Vector3D vector3D_1);
									static RealFieldElement distance(FieldVector3D fieldVector3D_0,Vector3D vector3D_1);
									static RealFieldElement distance(FieldVector3D fieldVector3D_0,FieldVector3D fieldVector3D_1);
									RealFieldElement distance(Vector3D vector3D_0);
									static RealFieldElement distance(Vector3D vector3D_0,FieldVector3D fieldVector3D_1);
									RealFieldElement distance(FieldVector3D fieldVector3D_0);
									RealFieldElement getX();
									RealFieldElement getY();
									RealFieldElement getAlpha();
									static RealFieldElement angle(FieldVector3D fieldVector3D_0,FieldVector3D fieldVector3D_1);
									static RealFieldElement angle(FieldVector3D fieldVector3D_0,Vector3D vector3D_1);
									static RealFieldElement angle(Vector3D vector3D_0,FieldVector3D fieldVector3D_1);
									FieldVector3D subtract(jdouble double_0,Vector3D vector3D_1);
									FieldVector3D subtract(RealFieldElement realFieldElement_0,Vector3D vector3D_1);
									FieldVector3D subtract(jdouble double_0,FieldVector3D fieldVector3D_1);
									FieldVector3D subtract(Vector3D vector3D_0);
									FieldVector3D subtract(FieldVector3D fieldVector3D_0);
									FieldVector3D subtract(RealFieldElement realFieldElement_0,FieldVector3D fieldVector3D_1);
									RealFieldElement getZ();
									FieldVector3D negate();
									FieldVector3D scalarMultiply(RealFieldElement realFieldElement_0);
									FieldVector3D scalarMultiply(jdouble double_0);
									RealFieldElement getNorm();
									RealFieldElement dotProduct(Vector3D vector3D_0);
									RealFieldElement dotProduct(FieldVector3D fieldVector3D_0);
									static RealFieldElement dotProduct(Vector3D vector3D_0,FieldVector3D fieldVector3D_1);
									static RealFieldElement dotProduct(FieldVector3D fieldVector3D_0,Vector3D vector3D_1);
									static RealFieldElement dotProduct(FieldVector3D fieldVector3D_0,FieldVector3D fieldVector3D_1);
									RealFieldElement distanceInf(FieldVector3D fieldVector3D_0);
									static RealFieldElement distanceInf(Vector3D vector3D_0,FieldVector3D fieldVector3D_1);
									static RealFieldElement distanceInf(FieldVector3D fieldVector3D_0,Vector3D vector3D_1);
									static RealFieldElement distanceInf(FieldVector3D fieldVector3D_0,FieldVector3D fieldVector3D_1);
									RealFieldElement distanceInf(Vector3D vector3D_0);
									RealFieldElement distance1(Vector3D vector3D_0);
									static RealFieldElement distance1(FieldVector3D fieldVector3D_0,FieldVector3D fieldVector3D_1);
									static RealFieldElement distance1(FieldVector3D fieldVector3D_0,Vector3D vector3D_1);
									static RealFieldElement distance1(Vector3D vector3D_0,FieldVector3D fieldVector3D_1);
									RealFieldElement distance1(FieldVector3D fieldVector3D_0);
									RealFieldElement getNorm1();
									RealFieldElement getNormSq();
									RealFieldElement getNormInf();
									FieldVector3D crossProduct(FieldVector3D fieldVector3D_0);
									FieldVector3D crossProduct(Vector3D vector3D_0);
									static FieldVector3D crossProduct(FieldVector3D fieldVector3D_0,FieldVector3D fieldVector3D_1);
									static FieldVector3D crossProduct(FieldVector3D fieldVector3D_0,Vector3D vector3D_1);
									static FieldVector3D crossProduct(Vector3D vector3D_0,FieldVector3D fieldVector3D_1);
									FieldVector3D orthogonal();
									RealFieldElement getDelta();
									FieldVector3D add(Vector3D vector3D_0);
									FieldVector3D add(FieldVector3D fieldVector3D_0);
									FieldVector3D add(RealFieldElement realFieldElement_0,Vector3D vector3D_1);
									FieldVector3D add(RealFieldElement realFieldElement_0,FieldVector3D fieldVector3D_1);
									FieldVector3D add(jdouble double_0,Vector3D vector3D_1);
									FieldVector3D add(jdouble double_0,FieldVector3D fieldVector3D_1);
									jstring toString();
									jstring toString(java::text::NumberFormat numberFormat_0);
									jint hashCode();
									jobjectArray toArray();
									jboolean isNaN();
									FieldVector3D normalize();
									jboolean isInfinite();
								}; // end class FieldVector3D
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace threed

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									
									class MonotoneChain : public AbstractConvexHullGenerator2D {
										public:
									            MonotoneChain(jobject _jthis, bool copy);
									            MonotoneChain(const MonotoneChain &);
									        
										MonotoneChain();
										MonotoneChain(jboolean boolean_0,jdouble double_1);
										MonotoneChain(jboolean boolean_0);
										virtual ~MonotoneChain();
										java::util::Collection findHullVertices(java::util::Collection collection_0);
									}; // end class MonotoneChain
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									
									class AklToussaintHeuristic : public java::lang::Object {
										public:
									            AklToussaintHeuristic(jobject _jthis, bool copy);
									            AklToussaintHeuristic(const AklToussaintHeuristic &);
									        
										virtual ~AklToussaintHeuristic();
										static java::util::Collection reducePoints(java::util::Collection collection_0);
									}; // end class AklToussaintHeuristic
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									
									class ConvexHullGenerator2D : public java::lang::Object {
										public:
									            ConvexHullGenerator2D(jobject _jthis, bool copy);
									            ConvexHullGenerator2D(const ConvexHullGenerator2D &);
									        
										ConvexHullGenerator2D();
										virtual ~ConvexHullGenerator2D();
									}; // end class ConvexHullGenerator2D
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								namespace hull{
									
									class ConvexHull2D : public java::lang::Object {
										public:
									            ConvexHull2D(jobject _jthis, bool copy);
									            ConvexHull2D(const ConvexHull2D &);
									        
										ConvexHull2D(jobjectArray vector2DArray_0,jdouble double_1);
										virtual ~ConvexHull2D();
										jobjectArray getVertices();
										partitioning::Region createRegion();
										jobjectArray getLineSegments();
									}; // end class ConvexHull2D
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace euclidean
		} // end namespace twod
	} // end namespace hull

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace euclidean{
							namespace twod{
								
								class DiskGenerator : public java::lang::Object {
									public:
								            DiskGenerator(jobject _jthis, bool copy);
								            DiskGenerator(const DiskGenerator &);
								        
									DiskGenerator();
									virtual ~DiskGenerator();
									enclosing::EnclosingBall ballOnSupport(java::util::List list_0);
								}; // end class DiskGenerator
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace euclidean
	} // end namespace twod

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MathRuntimeException : public java::lang::RuntimeException {
							public:
						            MathRuntimeException(jobject _jthis, bool copy);
						            MathRuntimeException(const MathRuntimeException &);
						        
							virtual ~MathRuntimeException();
							jstring getMessage();
							jstring getLocalizedMessage();
							util::ExceptionContext getContext();
						}; // end class MathRuntimeException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class InsufficientDataException : public MathIllegalArgumentException {
							public:
						            InsufficientDataException(jobject _jthis, bool copy);
						            InsufficientDataException(const InsufficientDataException &);
						        
							InsufficientDataException();
							virtual ~InsufficientDataException();
						}; // end class InsufficientDataException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace exception{
						
						class MathParseException : public MathIllegalStateException {
							public:
						            MathParseException(jobject _jthis, bool copy);
						            MathParseException(const MathParseException &);
						        
							MathParseException(jstring string_0,jint int_1);
							virtual ~MathParseException();
						}; // end class MathParseException
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace math3
	} // end namespace exception

	namespace crcl{
		namespace base{
			
			class VacuumGripperStatusType : public GripperStatusType {
				public:
			            VacuumGripperStatusType(jobject _jthis, bool copy);
			            VacuumGripperStatusType(const VacuumGripperStatusType &);
			        
				VacuumGripperStatusType();
				virtual ~VacuumGripperStatusType();
				jboolean isIsPowered();
				void setIsPowered(jboolean boolean_0);
			}; // end class VacuumGripperStatusType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class GetStatusType : public MiddleCommandType {
				public:
			            GetStatusType(jobject _jthis, bool copy);
			            GetStatusType(const GetStatusType &);
			        
				GetStatusType();
				virtual ~GetStatusType();
			}; // end class GetStatusType
		} // end namespace crcl
	} // end namespace base

	namespace crcl{
		namespace base{
			
			class RotSpeedAbsoluteType : public RotSpeedType {
				public:
			            RotSpeedAbsoluteType(jobject _jthis, bool copy);
			            RotSpeedAbsoluteType(const RotSpeedAbsoluteType &);
			        
				RotSpeedAbsoluteType();
				virtual ~RotSpeedAbsoluteType();
				java::math::BigDecimal getSetting();
				void setSetting(java::math::BigDecimal bigDecimal_0);
			}; // end class RotSpeedAbsoluteType
		} // end namespace crcl
	} // end namespace base

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace comparator{
						
						class DefaultFileComparator : public AbstractFileComparator {
							public:
						            DefaultFileComparator(jobject _jthis, bool copy);
						            DefaultFileComparator(const DefaultFileComparator &);
						        
							DefaultFileComparator();
							virtual ~DefaultFileComparator();
							jint compare(java::io::File file_0,java::io::File file_1);
						}; // end class DefaultFileComparator
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace comparator

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					
					class FileCleaningTracker : public java::lang::Object {
						public:
					            FileCleaningTracker(jobject _jthis, bool copy);
					            FileCleaningTracker(const FileCleaningTracker &);
					        
						FileCleaningTracker();
						virtual ~FileCleaningTracker();
						java::util::List getDeleteFailures();
						jint getTrackCount();
						void exitWhenFinished();
					}; // end class FileCleaningTracker
				} // end namespace org
			} // end namespace apache
		} // end namespace commons
	} // end namespace io

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class ConditionalFileFilter : public java::lang::Object {
							public:
						            ConditionalFileFilter(jobject _jthis, bool copy);
						            ConditionalFileFilter(const ConditionalFileFilter &);
						        
							ConditionalFileFilter();
							virtual ~ConditionalFileFilter();
						}; // end class ConditionalFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class IOFileFilter : public java::lang::Object {
							public:
						            IOFileFilter(jobject _jthis, bool copy);
						            IOFileFilter(const IOFileFilter &);
						        
							IOFileFilter();
							virtual ~IOFileFilter();
						}; // end class IOFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace filefilter{
						
						class SizeFileFilter : public AbstractFileFilter {
							public:
						            SizeFileFilter(jobject _jthis, bool copy);
						            SizeFileFilter(const SizeFileFilter &);
						        
							SizeFileFilter(jlong long_0);
							SizeFileFilter(jlong long_0,jboolean boolean_1);
							virtual ~SizeFileFilter();
							jstring toString();
							jboolean accept(java::io::File file_0);
						}; // end class SizeFileFilter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace filefilter

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class CharSequenceReader : public java::io::Reader {
							public:
						            CharSequenceReader(jobject _jthis, bool copy);
						            CharSequenceReader(const CharSequenceReader &);
						        
							CharSequenceReader(java::lang::CharSequence charSequence_0);
							virtual ~CharSequenceReader();
							jstring toString();
							jint read();
							jint read(jcharArray charArray_0,jint int_1,jint int_2);
							void close();
							void mark(jint int_0);
							jlong skip(jlong long_0);
							jboolean markSupported();
							void reset();
						}; // end class CharSequenceReader
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class ClassLoaderObjectInputStream : public java::io::ObjectInputStream {
							public:
						            ClassLoaderObjectInputStream(jobject _jthis, bool copy);
						            ClassLoaderObjectInputStream(const ClassLoaderObjectInputStream &);
						        
							ClassLoaderObjectInputStream(java::lang::ClassLoader classLoader_0,java::io::InputStream inputStream_1);
							virtual ~ClassLoaderObjectInputStream();
						}; // end class ClassLoaderObjectInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace input{
						
						class CloseShieldInputStream : public ProxyInputStream {
							public:
						            CloseShieldInputStream(jobject _jthis, bool copy);
						            CloseShieldInputStream(const CloseShieldInputStream &);
						        
							CloseShieldInputStream(java::io::InputStream inputStream_0);
							virtual ~CloseShieldInputStream();
							void close();
						}; // end class CloseShieldInputStream
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace input

	namespace org{
		namespace apache{
			namespace commons{
				namespace io{
					namespace output{
						
						class XmlStreamWriter : public java::io::Writer {
							public:
						            XmlStreamWriter(jobject _jthis, bool copy);
						            XmlStreamWriter(const XmlStreamWriter &);
						        
							XmlStreamWriter(java::io::File file_0,jstring string_1);
							XmlStreamWriter(java::io::OutputStream outputStream_0);
							XmlStreamWriter(java::io::OutputStream outputStream_0,jstring string_1);
							XmlStreamWriter(java::io::File file_0);
							virtual ~XmlStreamWriter();
							jstring getDefaultEncoding();
							void write(jcharArray charArray_0,jint int_1,jint int_2);
							void flush();
							void close();
							jstring getEncoding();
						}; // end class XmlStreamWriter
					} // end namespace org
				} // end namespace apache
			} // end namespace commons
		} // end namespace io
	} // end namespace output

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class LexicalTypeDecoder : public AbstractTypeDecoder {
							public:
						            LexicalTypeDecoder(jobject _jthis, bool copy);
						            LexicalTypeDecoder(const LexicalTypeDecoder &);
						        
							LexicalTypeDecoder(jobjectArray qNameArray_0,jobjectArray qNameArray_1);
							LexicalTypeDecoder();
							virtual ~LexicalTypeDecoder();
							values::Value readValue(datatype::Datatype datatype_0,context::QNameContext qNameContext_1,io::channel::DecoderChannel decoderChannel_2,datatype::strings::StringDecoder stringDecoder_3);
						}; // end class LexicalTypeDecoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class LexicalTypeEncoder : public AbstractTypeEncoder {
							public:
						            LexicalTypeEncoder(jobject _jthis, bool copy);
						            LexicalTypeEncoder(const LexicalTypeEncoder &);
						        
							LexicalTypeEncoder(jobjectArray qNameArray_0,jobjectArray qNameArray_1);
							LexicalTypeEncoder();
							virtual ~LexicalTypeEncoder();
							jboolean isValid(datatype::Datatype datatype_0,values::Value value_1);
							void writeValue(context::QNameContext qNameContext_0,io::channel::EncoderChannel encoderChannel_1,datatype::strings::StringEncoder stringEncoder_2);
						}; // end class LexicalTypeEncoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace types{
						
						class TypeEncoder : public java::lang::Object {
							public:
						            TypeEncoder(jobject _jthis, bool copy);
						            TypeEncoder(const TypeEncoder &);
						        
							TypeEncoder();
							virtual ~TypeEncoder();
						}; // end class TypeEncoder
					} // end namespace com
				} // end namespace siemens
			} // end namespace ct
		} // end namespace exi
	} // end namespace types

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						namespace sort{
							
							class LexicographicSort : public java::lang::Object {
								public:
							            LexicographicSort(jobject _jthis, bool copy);
							            LexicographicSort(const LexicographicSort &);
							        
								LexicographicSort();
								virtual ~LexicographicSort();
								static jint compare(org::apache::xerces::xs::XSAttributeDeclaration xSAttributeDeclaration_0,org::apache::xerces::xs::XSAttributeDeclaration xSAttributeDeclaration_1);
								static jint compare(javax::xml::namespace::QName qName_0,javax::xml::namespace::QName qName_1);
								static jint compare(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
								static jint compare(org::apache::xerces::xs::XSElementDeclaration xSElementDeclaration_0,org::apache::xerces::xs::XSElementDeclaration xSElementDeclaration_1);
							}; // end class LexicographicSort
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace util
	} // end namespace sort

	namespace com{
		namespace siemens{
			namespace ct{
				namespace exi{
					namespace util{
						namespace xml{
							
							class XMLWhitespace : public java::lang::Object {
								public:
							            XMLWhitespace(jobject _jthis, bool copy);
							            XMLWhitespace(const XMLWhitespace &);
							        
								XMLWhitespace();
								virtual ~XMLWhitespace();
								static jint getLeadingWhitespaces(jcharArray charArray_0,jint int_1,jint int_2);
								static jboolean isWhiteSpace(jchar char_0);
								static jint getTrailingWhitespaces(jcharArray charArray_0,jint int_1,jint int_2);
								static jboolean isWhiteSpaceOnly(jstring string_0);
								static jboolean isWhiteSpaceOnly(jcharArray charArray_0,jint int_1,jint int_2);
							}; // end class XMLWhitespace
						} // end namespace com
					} // end namespace siemens
				} // end namespace ct
			} // end namespace exi
		} // end namespace util
	} // end namespace xml

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLBaseFontElementImpl : public HTMLElementImpl {
						public:
					            HTMLBaseFontElementImpl(jobject _jthis, bool copy);
					            HTMLBaseFontElementImpl(const HTMLBaseFontElementImpl &);
					        
						HTMLBaseFontElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLBaseFontElementImpl();
						void setColor(jstring string_0);
						jstring getColor();
						void setFace(jstring string_0);
						jstring getFace();
						jstring getSize();
						void setSize(jstring string_0);
					}; // end class HTMLBaseFontElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLDivElementImpl : public HTMLElementImpl {
						public:
					            HTMLDivElementImpl(jobject _jthis, bool copy);
					            HTMLDivElementImpl(const HTMLDivElementImpl &);
					        
						HTMLDivElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLDivElementImpl();
						jstring getAlign();
						void setAlign(jstring string_0);
					}; // end class HTMLDivElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLFrameSetElementImpl : public HTMLElementImpl {
						public:
					            HTMLFrameSetElementImpl(jobject _jthis, bool copy);
					            HTMLFrameSetElementImpl(const HTMLFrameSetElementImpl &);
					        
						HTMLFrameSetElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLFrameSetElementImpl();
						void setCols(jstring string_0);
						jstring getRows();
						void setRows(jstring string_0);
						jstring getCols();
					}; // end class HTMLFrameSetElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLHRElementImpl : public HTMLElementImpl {
						public:
					            HTMLHRElementImpl(jobject _jthis, bool copy);
					            HTMLHRElementImpl(const HTMLHRElementImpl &);
					        
						HTMLHRElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLHRElementImpl();
						jstring getAlign();
						void setAlign(jstring string_0);
						void setWidth(jstring string_0);
						jstring getWidth();
						jboolean getNoShade();
						void setNoShade(jboolean boolean_0);
						jstring getSize();
						void setSize(jstring string_0);
					}; // end class HTMLHRElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLLIElementImpl : public HTMLElementImpl {
						public:
					            HTMLLIElementImpl(jobject _jthis, bool copy);
					            HTMLLIElementImpl(const HTMLLIElementImpl &);
					        
						HTMLLIElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLLIElementImpl();
						void setType(jstring string_0);
						jint getValue();
						void setValue(jint int_0);
						jstring getType();
					}; // end class HTMLLIElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace html{
				namespace dom{
					
					class HTMLObjectElementImpl : public HTMLElementImpl {
						public:
					            HTMLObjectElementImpl(jobject _jthis, bool copy);
					            HTMLObjectElementImpl(const HTMLObjectElementImpl &);
					        
						HTMLObjectElementImpl(HTMLDocumentImpl hTMLDocumentImpl_0,jstring string_1);
						virtual ~HTMLObjectElementImpl();
						jint getTabIndex();
						void setTabIndex(jint int_0);
						jstring getAlign();
						void setAlign(jstring string_0);
						void setHeight(jstring string_0);
						jstring getHspace();
						void setHspace(jstring string_0);
						jstring getUseMap();
						void setUseMap(jstring string_0);
						jstring getVspace();
						void setVspace(jstring string_0);
						jstring getData();
						jstring getCodeType();
						void setCodeType(jstring string_0);
						jboolean getDeclare();
						void setDeclare(jboolean boolean_0);
						jstring getStandby();
						void setStandby(jstring string_0);
						jstring getBorder();
						void setBorder(jstring string_0);
						void setWidth(jstring string_0);
						jstring getWidth();
						jstring getHeight();
						void setType(jstring string_0);
						void setData(jstring string_0);
						jstring getCode();
						jstring getArchive();
						void setArchive(jstring string_0);
						void setCode(jstring string_0);
						void setCodeBase(jstring string_0);
						jstring getName();
						void setName(jstring string_0);
						jstring getType();
						jstring getCodeBase();
					}; // end class HTMLObjectElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace html
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLMetaElement : public java::lang::Object {
					public:
				            WMLMetaElement(jobject _jthis, bool copy);
				            WMLMetaElement(const WMLMetaElement &);
				        
					WMLMetaElement();
					virtual ~WMLMetaElement();
				}; // end class WMLMetaElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLRefreshElement : public java::lang::Object {
					public:
				            WMLRefreshElement(jobject _jthis, bool copy);
				            WMLRefreshElement(const WMLRefreshElement &);
				        
					WMLRefreshElement();
					virtual ~WMLRefreshElement();
				}; // end class WMLRefreshElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				
				class WMLTimerElement : public java::lang::Object {
					public:
				            WMLTimerElement(jobject _jthis, bool copy);
				            WMLTimerElement(const WMLTimerElement &);
				        
					WMLTimerElement();
					virtual ~WMLTimerElement();
				}; // end class WMLTimerElement
			} // end namespace org
		} // end namespace apache
	} // end namespace wml

	namespace org{
		namespace apache{
			namespace wml{
				namespace dom{
					
					class WMLGoElementImpl : public WMLElementImpl {
						public:
					            WMLGoElementImpl(jobject _jthis, bool copy);
					            WMLGoElementImpl(const WMLGoElementImpl &);
					        
						WMLGoElementImpl(WMLDocumentImpl wMLDocumentImpl_0,jstring string_1);
						virtual ~WMLGoElementImpl();
						void setSendreferer(jstring string_0);
						void setId(jstring string_0);
						void setClassName(jstring string_0);
						jstring getAcceptCharset();
						void setAcceptCharset(jstring string_0);
						void setMethod(jstring string_0);
						jstring getHref();
						void setHref(jstring string_0);
						jstring getSendreferer();
						jstring getMethod();
						jstring getId();
						jstring getClassName();
					}; // end class WMLGoElementImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace wml
	} // end namespace dom

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					
					class XMLEntityManager : public java::lang::Object {
						public:
					            XMLEntityManager(jobject _jthis, bool copy);
					            XMLEntityManager(const XMLEntityManager &);
					        
						XMLEntityManager(XMLEntityManager xMLEntityManager_0);
						XMLEntityManager();
						virtual ~XMLEntityManager();
						void startEntity(jstring string_0,xni::parser::XMLInputSource xMLInputSource_1,jboolean boolean_2,jboolean boolean_3);
						void startEntity(jstring string_0,jboolean boolean_1);
						xni::parser::XMLInputSource resolveEntity(xni::XMLResourceIdentifier xMLResourceIdentifier_0);
						void setFeature(jstring string_0,jboolean boolean_1);
						void setStandalone(jboolean boolean_0);
						jobjectArray getRecognizedFeatures();
						jobjectArray getRecognizedProperties();
						java::lang::Boolean getFeatureDefault(jstring string_0);
						void setEntityHandler(XMLEntityHandler xMLEntityHandler_0);
						void startDTDEntity(xni::parser::XMLInputSource xMLInputSource_0);
						XMLEntityScanner getEntityScanner();
						void startExternalSubset();
						void endExternalSubset();
						jboolean isDeclaredEntity(jstring string_0);
						void addUnparsedEntity(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						void addExternalEntity(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
						static jstring expandSystemId(jstring string_0,jstring string_1,jboolean boolean_2);
						void addInternalEntity(jstring string_0,jstring string_1);
						XMLEntityManager::ScannedEntity getCurrentEntity();
						jboolean isExternalEntity(jstring string_0);
						void closeReaders();
						void setScannerVersion(jshort short_0);
						void startDocumentEntity(xni::parser::XMLInputSource xMLInputSource_0);
						jboolean isStandalone();
						static void absolutizeAgainstUserDir(util::URI uRI_0);
						static java::io::OutputStream createOutputStream(jstring string_0);
						jboolean isEntityDeclInExternalSubset(jstring string_0);
						xni::XMLResourceIdentifier getCurrentResourceIdentifier();
						jboolean isUnparsedEntity(jstring string_0);
						jstring setupCurrentEntity(jstring string_0,xni::parser::XMLInputSource xMLInputSource_1,jboolean boolean_2,jboolean boolean_3);
						void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
						void reset();
					}; // end class XMLEntityManager
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace impl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						
						class XPathException : public java::lang::Exception {
							public:
						            XPathException(jobject _jthis, bool copy);
						            XPathException(const XPathException &);
						        
							XPathException();
							XPathException(jstring string_0);
							virtual ~XPathException();
							jstring getKey();
						}; // end class XPathException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xpath

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace regex{
							
							class BMPattern : public java::lang::Object {
								public:
							            BMPattern(jobject _jthis, bool copy);
							            BMPattern(const BMPattern &);
							        
								BMPattern(jstring string_0,jboolean boolean_1);
								BMPattern(jstring string_0,jint int_1,jboolean boolean_2);
								virtual ~BMPattern();
								jint matches(jcharArray charArray_0,jint int_1,jint int_2);
								jint matches(jstring string_0,jint int_1,jint int_2);
								jint matches(java::text::CharacterIterator characterIterator_0,jint int_1,jint int_2);
							}; // end class BMPattern
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace regex

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class PSVIErrorList : public java::util::AbstractList {
							public:
						            PSVIErrorList(jobject _jthis, bool copy);
						            PSVIErrorList(const PSVIErrorList &);
						        
							PSVIErrorList(jobjectArray stringArray_0,jboolean boolean_1);
							virtual ~PSVIErrorList();
							jstring item(jint int_0);
							jint getLength();
							jboolean contains(jstring string_0);
							jint size();
						}; // end class PSVIErrorList
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class SchemaNamespaceSupport : public util::NamespaceSupport {
							public:
						            SchemaNamespaceSupport(jobject _jthis, bool copy);
						            SchemaNamespaceSupport(const SchemaNamespaceSupport &);
						        
							SchemaNamespaceSupport(SchemaNamespaceSupport schemaNamespaceSupport_0);
							SchemaNamespaceSupport(w3c::dom::Element element_0,util::SymbolTable symbolTable_1);
							virtual ~SchemaNamespaceSupport();
							jstring getURI(jstring string_0);
							void setEffectiveContext(jobjectArray stringArray_0);
							void setEffectiveContext(int argc,const char **argv);
							jobjectArray getEffectiveLocalContext();
							void makeGlobal();
						}; // end class SchemaNamespaceSupport
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class SubstitutionGroupHandler : public java::lang::Object {
							public:
						            SubstitutionGroupHandler(jobject _jthis, bool copy);
						            SubstitutionGroupHandler(const SubstitutionGroupHandler &);
						        
							SubstitutionGroupHandler(XSElementDeclHelper xSElementDeclHelper_0);
							virtual ~SubstitutionGroupHandler();
							jobjectArray getSubstitutionGroup(XSElementDecl xSElementDecl_0);
							XSElementDecl getMatchingElemDecl(xni::QName qName_0,XSElementDecl xSElementDecl_1);
							jboolean inSubstitutionGroup(XSElementDecl xSElementDecl_0,XSElementDecl xSElementDecl_1);
							void addSubstitutionGroup(jobjectArray xSElementDeclArray_0);
							void reset();
						}; // end class SubstitutionGroupHandler
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XMLSchemaException : public java::lang::Exception {
							public:
						            XMLSchemaException(jobject _jthis, bool copy);
						            XMLSchemaException(const XMLSchemaException &);
						        
							virtual ~XMLSchemaException();
							jstring getKey();
						}; // end class XMLSchemaException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						
						class XMLSchemaValidator : public java::lang::Object {
							public:
						            XMLSchemaValidator(jobject _jthis, bool copy);
						            XMLSchemaValidator(const XMLSchemaValidator &);
						        
							XMLSchemaValidator();
							virtual ~XMLSchemaValidator();
							void startCDATA(xni::Augmentations augmentations_0);
							void endCDATA(xni::Augmentations augmentations_0);
							void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
							void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void setFeature(jstring string_0,jboolean boolean_1);
							void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
							void endDocument(xni::Augmentations augmentations_0);
							void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
							XSElementDecl getGlobalElementDecl(xni::QName qName_0);
							jobjectArray getRecognizedFeatures();
							jobjectArray getRecognizedProperties();
							java::lang::Boolean getFeatureDefault(jstring string_0);
							void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
							xni::XMLDocumentHandler getDocumentHandler();
							void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
							xni::parser::XMLDocumentSource getDocumentSource();
							void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
							jboolean characterData(jstring string_0,xni::Augmentations augmentations_1);
							void elementDefault(jstring string_0);
							void startValueScopeFor(identity::IdentityConstraint identityConstraint_0,jint int_1);
							identity::XPathMatcher activateField(identity::Field field_0,jint int_1);
							void endValueScopeFor(identity::IdentityConstraint identityConstraint_0,jint int_1);
							void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
						}; // end class XMLSchemaValidator
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							
							class FieldActivator : public java::lang::Object {
								public:
							            FieldActivator(jobject _jthis, bool copy);
							            FieldActivator(const FieldActivator &);
							        
								FieldActivator();
								virtual ~FieldActivator();
							}; // end class FieldActivator
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							
							class KeyRef : public IdentityConstraint {
								public:
							            KeyRef(jobject _jthis, bool copy);
							            KeyRef(const KeyRef &);
							        
								KeyRef(jstring string_0,jstring string_1,jstring string_2,UniqueOrKey uniqueOrKey_3);
								virtual ~KeyRef();
								xs::XSIDCDefinition getRefKey();
								UniqueOrKey getKey();
							}; // end class KeyRef
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							
							class Selector : public java::lang::Object {
								public:
							            Selector(jobject _jthis, bool copy);
							            Selector(const Selector &);
							        
								virtual ~Selector();
								xpath::XPath getXPath();
								XPathMatcher createMatcher(FieldActivator fieldActivator_0,jint int_1);
								IdentityConstraint getIDConstraint();
								jstring toString();
							}; // end class Selector
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace identity{
							
							class UniqueOrKey : public IdentityConstraint {
								public:
							            UniqueOrKey(jobject _jthis, bool copy);
							            UniqueOrKey(const UniqueOrKey &);
							        
								UniqueOrKey(jstring string_0,jstring string_1,jstring string_2,jshort short_3);
								virtual ~UniqueOrKey();
							}; // end class UniqueOrKey
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace identity

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class CMNodeFactory : public java::lang::Object {
								public:
							            CMNodeFactory(jobject _jthis, bool copy);
							            CMNodeFactory(const CMNodeFactory &);
							        
								CMNodeFactory();
								virtual ~CMNodeFactory();
								void nodeCountCheck();
								void resetNodeCount();
								dtd::models::CMNode getCMBinOpNode(jint int_0,dtd::models::CMNode cMNode_1,dtd::models::CMNode cMNode_2);
								dtd::models::CMNode getCMUniOpNode(jint int_0,dtd::models::CMNode cMNode_1);
								void reset();
								void reset(xni::parser::XMLComponentManager xMLComponentManager_0);
							}; // end class CMNodeFactory
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class XSCMBinOp : public dtd::models::CMNode {
								public:
							            XSCMBinOp(jobject _jthis, bool copy);
							            XSCMBinOp(const XSCMBinOp &);
							        
								XSCMBinOp(jint int_0,dtd::models::CMNode cMNode_1,dtd::models::CMNode cMNode_2);
								virtual ~XSCMBinOp();
								jboolean isNullable();
							}; // end class XSCMBinOp
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xs{
						namespace models{
							
							class XSCMUniOp : public dtd::models::CMNode {
								public:
							            XSCMUniOp(jobject _jthis, bool copy);
							            XSCMUniOp(const XSCMUniOp &);
							        
								XSCMUniOp(jint int_0,dtd::models::CMNode cMNode_1);
								virtual ~XSCMUniOp();
								jboolean isNullable();
							}; // end class XSCMUniOp
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xs
	} // end namespace models

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class SoftReferenceGrammarPool : public java::lang::Object {
							public:
						            SoftReferenceGrammarPool(jobject _jthis, bool copy);
						            SoftReferenceGrammarPool(const SoftReferenceGrammarPool &);
						        
							SoftReferenceGrammarPool();
							SoftReferenceGrammarPool(jint int_0);
							virtual ~SoftReferenceGrammarPool();
							xni::grammars::Grammar getGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
							void putGrammar(xni::grammars::Grammar grammar_0);
							void cacheGrammars(jstring string_0,jobjectArray grammarArray_1);
							xni::grammars::Grammar retrieveGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
							xni::grammars::Grammar removeGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
							jboolean containsGrammar(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
							void lockPool();
							void unlockPool();
							jobjectArray retrieveInitialGrammarSet(jstring string_0);
							jboolean equals(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0,xni::grammars::XMLGrammarDescription xMLGrammarDescription_1);
							jint hashCode(xni::grammars::XMLGrammarDescription xMLGrammarDescription_0);
							void clear();
						}; // end class SoftReferenceGrammarPool
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class StAXStreamResultBuilder : public java::lang::Object {
							public:
						            StAXStreamResultBuilder(jobject _jthis, bool copy);
						            StAXStreamResultBuilder(const StAXStreamResultBuilder &);
						        
							StAXStreamResultBuilder(util::JAXPNamespaceContextWrapper jAXPNamespaceContextWrapper_0);
							virtual ~StAXStreamResultBuilder();
							void entityReference(javax::xml::stream::events::EntityReference entityReference_0);
							void entityReference(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void setIgnoringCharacters(jboolean boolean_0);
							void setStAXResult(javax::xml::transform::stax::StAXResult stAXResult_0);
							void cdata(javax::xml::stream::events::Characters characters_0);
							void startCDATA(xni::Augmentations augmentations_0);
							void endCDATA(xni::Augmentations augmentations_0);
							void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void processingInstruction(javax::xml::stream::events::ProcessingInstruction processingInstruction_0);
							void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
							void processingInstruction(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void comment(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void comment(javax::xml::stream::events::Comment comment_0);
							void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
							void characters(javax::xml::stream::events::Characters characters_0);
							void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void startDocument(xni::XMLLocator xMLLocator_0,jstring string_1,xni::NamespaceContext namespaceContext_2,xni::Augmentations augmentations_3);
							void startDocument(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void startDocument(javax::xml::stream::events::StartDocument startDocument_0);
							void endDocument(javax::xml::stream::XMLStreamReader xMLStreamReader_0);
							void endDocument(xni::Augmentations augmentations_0);
							void endDocument(javax::xml::stream::events::EndDocument endDocument_0);
							void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
							void setDocumentSource(xni::parser::XMLDocumentSource xMLDocumentSource_0);
							xni::parser::XMLDocumentSource getDocumentSource();
							void startGeneralEntity(jstring string_0,xni::XMLResourceIdentifier xMLResourceIdentifier_1,jstring string_2,xni::Augmentations augmentations_3);
							void textDecl(jstring string_0,jstring string_1,xni::Augmentations augmentations_2);
							void xmlDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void doctypeDecl(javax::xml::stream::events::DTD dTD_0);
							void doctypeDecl(jstring string_0,jstring string_1,jstring string_2,xni::Augmentations augmentations_3);
							void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
							void endGeneralEntity(jstring string_0,xni::Augmentations augmentations_1);
						}; // end class StAXStreamResultBuilder
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class Util : public java::lang::Object {
							public:
						            Util(jobject _jthis, bool copy);
						            Util(const Util &);
						        
							virtual ~Util();
							static xni::parser::XMLInputSource toXMLInputSource(javax::xml::transform::stream::StreamSource streamSource_0);
							static xml::sax::SAXParseException toSAXParseException(xni::parser::XMLParseException xMLParseException_0);
							static xml::sax::SAXException toSAXException(xni::XNIException xNIException_0);
						}; // end class Util
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class ValidatorHelper : public java::lang::Object {
							public:
						            ValidatorHelper(jobject _jthis, bool copy);
						            ValidatorHelper(const ValidatorHelper &);
						        
							ValidatorHelper();
							virtual ~ValidatorHelper();
						}; // end class ValidatorHelper
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class ValidatorImpl : public javax::xml::validation::Validator {
							public:
						            ValidatorImpl(jobject _jthis, bool copy);
						            ValidatorImpl(const ValidatorImpl &);
						        
							ValidatorImpl(XSGrammarPoolContainer xSGrammarPoolContainer_0);
							virtual ~ValidatorImpl();
							void setResourceResolver(w3c::dom::ls::LSResourceResolver lSResourceResolver_0);
							w3c::dom::ls::LSResourceResolver getResourceResolver();
							void validate(javax::xml::transform::Source source_0,javax::xml::transform::Result result_1);
							jboolean getFeature(jstring string_0);
							void setFeature(jstring string_0,jboolean boolean_1);
							xml::sax::ErrorHandler getErrorHandler();
							void setErrorHandler(xml::sax::ErrorHandler errorHandler_0);
							xs::ElementPSVI getElementPSVI();
							xs::AttributePSVI getAttributePSVI(jint int_0);
							xs::AttributePSVI getAttributePSVIByName(jstring string_0,jstring string_1);
							void reset();
						}; // end class ValidatorImpl
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace jaxp{
					namespace validation{
						
						class XMLSchema : public AbstractXMLSchema {
							public:
						            XMLSchema(jobject _jthis, bool copy);
						            XMLSchema(const XMLSchema &);
						        
							XMLSchema(xni::grammars::XMLGrammarPool xMLGrammarPool_0,jboolean boolean_1);
							XMLSchema(xni::grammars::XMLGrammarPool xMLGrammarPool_0);
							virtual ~XMLSchema();
							xni::grammars::XMLGrammarPool getGrammarPool();
							jboolean isFullyComposed();
						}; // end class XMLSchema
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace jaxp
	} // end namespace validation

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class SAXLocatorWrapper : public java::lang::Object {
						public:
					            SAXLocatorWrapper(jobject _jthis, bool copy);
					            SAXLocatorWrapper(const SAXLocatorWrapper &);
					        
						SAXLocatorWrapper();
						virtual ~SAXLocatorWrapper();
						xml::sax::Locator getLocator();
						void setLocator(xml::sax::Locator locator_0);
						jint getCharacterOffset();
						jint getColumnNumber();
						jstring getPublicId();
						jstring getExpandedSystemId();
						jstring getLiteralSystemId();
						jstring getBaseSystemId();
						jstring getXMLVersion();
						jint getLineNumber();
						jstring getEncoding();
					}; // end class SAXLocatorWrapper
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class SAXMessageFormatter : public java::lang::Object {
						public:
					            SAXMessageFormatter(jobject _jthis, bool copy);
					            SAXMessageFormatter(const SAXMessageFormatter &);
					        
						SAXMessageFormatter();
						virtual ~SAXMessageFormatter();
					}; // end class SAXMessageFormatter
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class SecurityManager : public java::lang::Object {
						public:
					            SecurityManager(jobject _jthis, bool copy);
					            SecurityManager(const SecurityManager &);
					        
						SecurityManager();
						virtual ~SecurityManager();
						jint getEntityExpansionLimit();
						void setEntityExpansionLimit(jint int_0);
						void setMaxOccurNodeLimit(jint int_0);
						jint getMaxOccurNodeLimit();
					}; // end class SecurityManager
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class ShadowedSymbolTable : public SymbolTable {
						public:
					            ShadowedSymbolTable(jobject _jthis, bool copy);
					            ShadowedSymbolTable(const ShadowedSymbolTable &);
					        
						ShadowedSymbolTable(SymbolTable symbolTable_0);
						virtual ~ShadowedSymbolTable();
						jstring addSymbol(jcharArray charArray_0,jint int_1,jint int_2);
						jstring addSymbol(jstring string_0);
						jint hash(jstring string_0);
						jint hash(jcharArray charArray_0,jint int_1,jint int_2);
					}; // end class ShadowedSymbolTable
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class SoftReferenceSymbolTable : public SymbolTable {
						public:
					            SoftReferenceSymbolTable(jobject _jthis, bool copy);
					            SoftReferenceSymbolTable(const SoftReferenceSymbolTable &);
					        
						SoftReferenceSymbolTable();
						SoftReferenceSymbolTable(jint int_0);
						SoftReferenceSymbolTable(jint int_0,jfloat float_1);
						virtual ~SoftReferenceSymbolTable();
						jstring addSymbol(jcharArray charArray_0,jint int_1,jint int_2);
						jstring addSymbol(jstring string_0);
						jboolean containsSymbol(jcharArray charArray_0,jint int_1,jint int_2);
						jboolean containsSymbol(jstring string_0);
					}; // end class SoftReferenceSymbolTable
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class StAXLocationWrapper : public java::lang::Object {
						public:
					            StAXLocationWrapper(jobject _jthis, bool copy);
					            StAXLocationWrapper(const StAXLocationWrapper &);
					        
						StAXLocationWrapper();
						virtual ~StAXLocationWrapper();
						void setLocation(javax::xml::stream::Location location_0);
						jint getCharacterOffset();
						jint getColumnNumber();
						jstring getPublicId();
						jstring getExpandedSystemId();
						jstring getLiteralSystemId();
						jstring getBaseSystemId();
						jstring getXMLVersion();
						javax::xml::stream::Location getLocation();
						jint getLineNumber();
						jstring getEncoding();
					}; // end class StAXLocationWrapper
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class SymbolHash : public java::lang::Object {
						public:
					            SymbolHash(jobject _jthis, bool copy);
					            SymbolHash(const SymbolHash &);
					        
						SymbolHash();
						SymbolHash(jint int_0);
						virtual ~SymbolHash();
						SymbolHash makeClone();
						jint getLength();
						void clear();
					}; // end class SymbolHash
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class SynchronizedSymbolTable : public SymbolTable {
						public:
					            SynchronizedSymbolTable(jobject _jthis, bool copy);
					            SynchronizedSymbolTable(const SynchronizedSymbolTable &);
					        
						SynchronizedSymbolTable(jint int_0);
						SynchronizedSymbolTable();
						SynchronizedSymbolTable(SymbolTable symbolTable_0);
						virtual ~SynchronizedSymbolTable();
						jstring addSymbol(jcharArray charArray_0,jint int_1,jint int_2);
						jstring addSymbol(jstring string_0);
						jboolean containsSymbol(jstring string_0);
						jboolean containsSymbol(jcharArray charArray_0,jint int_1,jint int_2);
					}; // end class SynchronizedSymbolTable
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class URI : public java::lang::Object {
						public:
					            URI(jobject _jthis, bool copy);
					            URI(const URI &);
					        
						URI(URI uRI_0,jstring string_1);
						URI(URI uRI_0,jstring string_1,jboolean boolean_2);
						URI(jstring string_0,jstring string_1);
						URI(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						URI(jstring string_0,jstring string_1,jstring string_2,jint int_3,jstring string_4,jstring string_5,jstring string_6);
						URI();
						URI(URI uRI_0);
						URI(jstring string_0);
						URI(jstring string_0,jboolean boolean_1);
						virtual ~URI();
						void setPath(jstring string_0);
						void appendPath(jstring string_0);
						jstring getSchemeSpecificPart();
						void setHost(jstring string_0);
						void setPort(jint int_0);
						void setFragment(jstring string_0);
						jboolean isAbsoluteURI();
						void absolutize(URI uRI_0);
						static jboolean isConformantSchemeName(jstring string_0);
						static jboolean isWellFormedAddress(jstring string_0);
						static jboolean isWellFormedIPv4Address(jstring string_0);
						static jboolean isWellFormedIPv6Reference(jstring string_0);
						void setScheme(jstring string_0);
						jstring getUserinfo();
						jstring getRegBasedAuthority();
						jstring getQueryString();
						void setUserinfo(jstring string_0);
						void setRegBasedAuthority(jstring string_0);
						void setQueryString(jstring string_0);
						jboolean isGenericURI();
						jstring toString();
						jstring getPath(jboolean boolean_0,jboolean boolean_1);
						jstring getPath();
						jstring getScheme();
						jstring getAuthority();
						jstring getFragment();
						jstring getHost();
						jint getPort();
					}; // end class URI
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XML11Char : public java::lang::Object {
						public:
					            XML11Char(jobject _jthis, bool copy);
					            XML11Char(const XML11Char &);
					        
						XML11Char();
						virtual ~XML11Char();
						static jboolean isXML11ValidName(jstring string_0);
						static jboolean isXML11ValidNCName(jstring string_0);
						static jboolean isXML11NameHighSurrogate(jint int_0);
						static jboolean isXML11Valid(jint int_0);
						static jboolean isXML11ValidLiteral(jint int_0);
						static jboolean isXML11Name(jint int_0);
						static jboolean isXML11NameStart(jint int_0);
						static jboolean isXML11NCName(jint int_0);
						static jboolean isXML11NCNameStart(jint int_0);
						static jboolean isXML11Content(jint int_0);
						static jboolean isXML11InternalEntityContent(jint int_0);
						static jboolean isXML11Space(jint int_0);
						static jboolean isXML11ValidNmtoken(jstring string_0);
						static jboolean isXML11Invalid(jint int_0);
					}; // end class XML11Char
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XMLAttributesImpl : public java::lang::Object {
						public:
					            XMLAttributesImpl(jobject _jthis, bool copy);
					            XMLAttributesImpl(const XMLAttributesImpl &);
					        
						XMLAttributesImpl(jint int_0);
						XMLAttributesImpl();
						virtual ~XMLAttributesImpl();
						xni::QName checkDuplicatesNS();
						jint getIndexFast(jstring string_0);
						jint getIndexFast(jstring string_0,jstring string_1);
						jint addAttribute(xni::QName qName_0,jstring string_1,jstring string_2);
						jint getIndex(jstring string_0);
						jint getIndex(jstring string_0,jstring string_1);
						void setURI(jint int_0,jstring string_1);
						void setType(jint int_0,jstring string_1);
						jstring getPrefix(jint int_0);
						jstring getQName(jint int_0);
						jstring getLocalName(jint int_0);
						jstring getURI(jint int_0);
						jboolean isSpecified(jint int_0);
						void setSpecified(jint int_0,jboolean boolean_1);
						void removeAttributeAt(jint int_0);
						void setNonNormalizedValue(jint int_0,jstring string_1);
						jstring getNonNormalizedValue(jint int_0);
						void setAugmentations(jint int_0,xni::Augmentations augmentations_1);
						void removeAllAttributes();
						xni::Augmentations getAugmentations(jstring string_0,jstring string_1);
						xni::Augmentations getAugmentations(jstring string_0);
						xni::Augmentations getAugmentations(jint int_0);
						void setNamespaces(jboolean boolean_0);
						void addAttributeNS(xni::QName qName_0,jstring string_1,jstring string_2);
						jint getLength();
						void getName(jint int_0,xni::QName qName_1);
						jstring getName(jint int_0);
						jstring getValue(jstring string_0,jstring string_1);
						jstring getValue(jstring string_0);
						jstring getValue(jint int_0);
						void setName(jint int_0,xni::QName qName_1);
						void setValue(jint int_0,jstring string_1);
						jstring getType(jstring string_0,jstring string_1);
						jstring getType(jint int_0);
						jstring getType(jstring string_0);
					}; // end class XMLAttributesImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XMLChar : public java::lang::Object {
						public:
					            XMLChar(jobject _jthis, bool copy);
					            XMLChar(const XMLChar &);
					        
						XMLChar();
						virtual ~XMLChar();
						static jboolean isValid(jint int_0);
						static jboolean isValidName(jstring string_0);
						static jboolean isValidNCName(jstring string_0);
						static jboolean isMarkup(jint int_0);
						static jboolean isPubid(jint int_0);
						static jboolean isSupplemental(jint int_0);
						static jboolean isName(jint int_0);
						static jboolean isNameStart(jint int_0);
						static jboolean isNCName(jint int_0);
						static jint supplemental(jchar char_0,jchar char_1);
						static jboolean isNCNameStart(jint int_0);
						static jboolean isValidNmtoken(jstring string_0);
						static jboolean isValidIANAEncoding(jstring string_0);
						static jboolean isValidJavaEncoding(jstring string_0);
						static jboolean isContent(jint int_0);
						static jstring trim(jstring string_0);
						static jchar highSurrogate(jint int_0);
						static jchar lowSurrogate(jint int_0);
						static jboolean isLowSurrogate(jint int_0);
						static jboolean isHighSurrogate(jint int_0);
						static jboolean isInvalid(jint int_0);
						static jboolean isSpace(jint int_0);
					}; // end class XMLChar
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XMLEntityDescriptionImpl : public XMLResourceIdentifierImpl {
						public:
					            XMLEntityDescriptionImpl(jobject _jthis, bool copy);
					            XMLEntityDescriptionImpl(const XMLEntityDescriptionImpl &);
					        
						XMLEntityDescriptionImpl();
						XMLEntityDescriptionImpl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jstring string_5);
						XMLEntityDescriptionImpl(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						virtual ~XMLEntityDescriptionImpl();
						void setEntityName(jstring string_0);
						void setDescription(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4,jstring string_5);
						void setDescription(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
						jstring getEntityName();
						jstring toString();
						jint hashCode();
						void clear();
					}; // end class XMLEntityDescriptionImpl
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XMLErrorCode : public java::lang::Object {
						public:
					            XMLErrorCode(jobject _jthis, bool copy);
					            XMLErrorCode(const XMLErrorCode &);
					        
						XMLErrorCode(jstring string_0,jstring string_1);
						virtual ~XMLErrorCode();
						void setValues(jstring string_0,jstring string_1);
						jint hashCode();
					}; // end class XMLErrorCode
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XMLLocatorWrapper : public java::lang::Object {
						public:
					            XMLLocatorWrapper(jobject _jthis, bool copy);
					            XMLLocatorWrapper(const XMLLocatorWrapper &);
					        
						XMLLocatorWrapper();
						virtual ~XMLLocatorWrapper();
						xni::XMLLocator getLocator();
						void setLocator(xni::XMLLocator xMLLocator_0);
						jint getCharacterOffset();
						jint getColumnNumber();
						jstring getPublicId();
						jstring getExpandedSystemId();
						jstring getLiteralSystemId();
						jstring getBaseSystemId();
						jstring getXMLVersion();
						jint getLineNumber();
						jstring getEncoding();
					}; // end class XMLLocatorWrapper
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XMLStringBuffer : public xni::XMLString {
						public:
					            XMLStringBuffer(jobject _jthis, bool copy);
					            XMLStringBuffer(const XMLStringBuffer &);
					        
						XMLStringBuffer(xni::XMLString xMLString_0);
						XMLStringBuffer(jcharArray charArray_0,jint int_1,jint int_2);
						XMLStringBuffer(jstring string_0);
						XMLStringBuffer();
						XMLStringBuffer(jint int_0);
						XMLStringBuffer(jchar char_0);
						virtual ~XMLStringBuffer();
						void append(jstring string_0);
						void append(jcharArray charArray_0,jint int_1,jint int_2);
						void append(xni::XMLString xMLString_0);
						void append(jchar char_0);
						void clear();
					}; // end class XMLStringBuffer
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace util{
					
					class XMLSymbols : public java::lang::Object {
						public:
					            XMLSymbols(jobject _jthis, bool copy);
					            XMLSymbols(const XMLSymbols &);
					        
						XMLSymbols();
						virtual ~XMLSymbols();
					}; // end class XMLSymbols
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					
					class ObjectFactory : public java::lang::Object {
						public:
					            ObjectFactory(jobject _jthis, bool copy);
					            ObjectFactory(const ObjectFactory &);
					        
						virtual ~ObjectFactory();
					}; // end class ObjectFactory
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					
					class SecuritySupport : public java::lang::Object {
						public:
					            SecuritySupport(jobject _jthis, bool copy);
					            SecuritySupport(const SecuritySupport &);
					        
						virtual ~SecuritySupport();
					}; // end class SecuritySupport
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xinclude{
					
					class XInclude11TextReader : public XIncludeTextReader {
						public:
					            XInclude11TextReader(jobject _jthis, bool copy);
					            XInclude11TextReader(const XInclude11TextReader &);
					        
						XInclude11TextReader(xni::parser::XMLInputSource xMLInputSource_0,XIncludeHandler xIncludeHandler_1,jint int_2);
						virtual ~XInclude11TextReader();
					}; // end class XInclude11TextReader
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xinclude

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					
					class XMLResourceIdentifier : public java::lang::Object {
						public:
					            XMLResourceIdentifier(jobject _jthis, bool copy);
					            XMLResourceIdentifier(const XMLResourceIdentifier &);
					        
						XMLResourceIdentifier();
						virtual ~XMLResourceIdentifier();
					}; // end class XMLResourceIdentifier
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xni

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						
						class XMLGrammarDescription : public java::lang::Object {
							public:
						            XMLGrammarDescription(jobject _jthis, bool copy);
						            XMLGrammarDescription(const XMLGrammarDescription &);
						        
							XMLGrammarDescription();
							virtual ~XMLGrammarDescription();
						}; // end class XMLGrammarDescription
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace grammars{
						
						class XMLSchemaDescription : public java::lang::Object {
							public:
						            XMLSchemaDescription(jobject _jthis, bool copy);
						            XMLSchemaDescription(const XMLSchemaDescription &);
						        
							XMLSchemaDescription();
							virtual ~XMLSchemaDescription();
						}; // end class XMLSchemaDescription
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace grammars

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLConfigurationException : public XNIException {
							public:
						            XMLConfigurationException(jobject _jthis, bool copy);
						            XMLConfigurationException(const XMLConfigurationException &);
						        
							XMLConfigurationException(jshort short_0,jstring string_1);
							XMLConfigurationException(jshort short_0,jstring string_1,jstring string_2);
							virtual ~XMLConfigurationException();
							jstring getIdentifier();
							jshort getType();
						}; // end class XMLConfigurationException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLDTDScanner : public java::lang::Object {
							public:
						            XMLDTDScanner(jobject _jthis, bool copy);
						            XMLDTDScanner(const XMLDTDScanner &);
						        
							XMLDTDScanner();
							virtual ~XMLDTDScanner();
						}; // end class XMLDTDScanner
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLEntityResolver : public java::lang::Object {
							public:
						            XMLEntityResolver(jobject _jthis, bool copy);
						            XMLEntityResolver(const XMLEntityResolver &);
						        
							XMLEntityResolver();
							virtual ~XMLEntityResolver();
						}; // end class XMLEntityResolver
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xni{
					namespace parser{
						
						class XMLParseException : public XNIException {
							public:
						            XMLParseException(jobject _jthis, bool copy);
						            XMLParseException(const XMLParseException &);
						        
							XMLParseException(XMLLocator xMLLocator_0,jstring string_1,java::lang::Exception exception_2);
							XMLParseException(XMLLocator xMLLocator_0,jstring string_1);
							virtual ~XMLParseException();
							jint getCharacterOffset();
							jint getColumnNumber();
							jstring getPublicId();
							jstring getExpandedSystemId();
							jstring getLiteralSystemId();
							jstring getBaseSystemId();
							jstring toString();
							jint getLineNumber();
						}; // end class XMLParseException
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xni
	} // end namespace parser

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					
					class ElementSchemePointer : public java::lang::Object {
						public:
					            ElementSchemePointer(jobject _jthis, bool copy);
					            ElementSchemePointer(const ElementSchemePointer &);
					        
						ElementSchemePointer(util::SymbolTable symbolTable_0);
						ElementSchemePointer(util::SymbolTable symbolTable_0,impl::XMLErrorReporter xMLErrorReporter_1);
						ElementSchemePointer();
						virtual ~ElementSchemePointer();
						jboolean resolveXPointer(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2,jint int_3);
						jstring getSchemeName();
						void parseXPointer(jstring string_0);
						jboolean isFragmentResolved();
						jboolean isChildFragmentResolved();
						jstring getSchemeData();
						void setSchemeName(jstring string_0);
						void setSchemeData(jstring string_0);
					}; // end class ElementSchemePointer
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xpointer{
					
					class XPointerHandler : public xinclude::XIncludeHandler {
						public:
					            XPointerHandler(jobject _jthis, bool copy);
					            XPointerHandler(const XPointerHandler &);
					        
						XPointerHandler();
						XPointerHandler(util::SymbolTable symbolTable_0,xni::parser::XMLErrorHandler xMLErrorHandler_1,impl::XMLErrorReporter xMLErrorReporter_2);
						virtual ~XPointerHandler();
						jboolean isXPointerResolved();
						void startCDATA(xni::Augmentations augmentations_0);
						void endCDATA(xni::Augmentations augmentations_0);
						void ignorableWhitespace(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void processingInstruction(jstring string_0,xni::XMLString xMLString_1,xni::Augmentations augmentations_2);
						void comment(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void characters(xni::XMLString xMLString_0,xni::Augmentations augmentations_1);
						void startElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						void endElement(xni::QName qName_0,xni::Augmentations augmentations_1);
						void setDocumentHandler(xni::XMLDocumentHandler xMLDocumentHandler_0);
						void emptyElement(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2);
						jboolean resolveXPointer(xni::QName qName_0,xni::XMLAttributes xMLAttributes_1,xni::Augmentations augmentations_2,jint int_3);
						void parseXPointer(jstring string_0);
						jboolean isFragmentResolved();
						jboolean isChildFragmentResolved();
						XPointerPart getXPointerPart();
						java::util::ArrayList getPointerParts();
					}; // end class XPointerHandler
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xpointer

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class ShortList : public java::lang::Object {
						public:
					            ShortList(jobject _jthis, bool copy);
					            ShortList(const ShortList &);
					        
						ShortList();
						virtual ~ShortList();
					}; // end class ShortList
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSAttributeDeclaration : public java::lang::Object {
						public:
					            XSAttributeDeclaration(jobject _jthis, bool copy);
					            XSAttributeDeclaration(const XSAttributeDeclaration &);
					        
						XSAttributeDeclaration();
						virtual ~XSAttributeDeclaration();
					}; // end class XSAttributeDeclaration
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSImplementation : public java::lang::Object {
						public:
					            XSImplementation(jobject _jthis, bool copy);
					            XSImplementation(const XSImplementation &);
					        
						XSImplementation();
						virtual ~XSImplementation();
					}; // end class XSImplementation
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSNamespaceItemList : public java::lang::Object {
						public:
					            XSNamespaceItemList(jobject _jthis, bool copy);
					            XSNamespaceItemList(const XSNamespaceItemList &);
					        
						XSNamespaceItemList();
						virtual ~XSNamespaceItemList();
					}; // end class XSNamespaceItemList
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					
					class XSValue : public java::lang::Object {
						public:
					            XSValue(jobject _jthis, bool copy);
					            XSValue(const XSValue &);
					        
						XSValue();
						virtual ~XSValue();
					}; // end class XSValue
				} // end namespace org
			} // end namespace apache
		} // end namespace xerces
	} // end namespace xs

	namespace org{
		namespace apache{
			namespace xerces{
				namespace xs{
					namespace datatypes{
						
						class XSQName : public java::lang::Object {
							public:
						            XSQName(jobject _jthis, bool copy);
						            XSQName(const XSQName &);
						        
							XSQName();
							virtual ~XSQName();
						}; // end class XSQName
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace xs
	} // end namespace datatypes

	namespace javax{
		namespace xml{
			namespace datatype{
				
				class DatatypeConstants : public java::lang::Object {
					public:
				            DatatypeConstants(jobject _jthis, bool copy);
				            DatatypeConstants(const DatatypeConstants &);
				        
					virtual ~DatatypeConstants();
				}; // end class DatatypeConstants
			} // end namespace javax
		} // end namespace xml
	} // end namespace datatype

	namespace javax{
		namespace xml{
			namespace parsers{
				
				class FactoryConfigurationError : public java::lang::Error {
					public:
				            FactoryConfigurationError(jobject _jthis, bool copy);
				            FactoryConfigurationError(const FactoryConfigurationError &);
				        
					FactoryConfigurationError(java::lang::Exception exception_0,jstring string_1);
					FactoryConfigurationError(java::lang::Exception exception_0);
					FactoryConfigurationError(jstring string_0);
					FactoryConfigurationError();
					virtual ~FactoryConfigurationError();
					java::lang::Throwable getCause();
					jstring getMessage();
					java::lang::Exception getException();
				}; // end class FactoryConfigurationError
			} // end namespace javax
		} // end namespace xml
	} // end namespace parsers

	namespace javax{
		namespace xml{
			namespace stream{
				
				class EventFilter : public java::lang::Object {
					public:
				            EventFilter(jobject _jthis, bool copy);
				            EventFilter(const EventFilter &);
				        
					EventFilter();
					virtual ~EventFilter();
				}; // end class EventFilter
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				
				class XMLInputFactory : public java::lang::Object {
					public:
				            XMLInputFactory(jobject _jthis, bool copy);
				            XMLInputFactory(const XMLInputFactory &);
				        
					virtual ~XMLInputFactory();
					static XMLInputFactory newFactory(jstring string_0,java::lang::ClassLoader classLoader_1);
					static XMLInputFactory newFactory();
					static XMLInputFactory newInstance(jstring string_0,java::lang::ClassLoader classLoader_1);
					static XMLInputFactory newInstance();
				}; // end class XMLInputFactory
			} // end namespace javax
		} // end namespace xml
	} // end namespace stream

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class Attribute : public java::lang::Object {
						public:
					            Attribute(jobject _jthis, bool copy);
					            Attribute(const Attribute &);
					        
						Attribute();
						virtual ~Attribute();
					}; // end class Attribute
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace events{
					
					class Namespace : public java::lang::Object {
						public:
					            Namespace(jobject _jthis, bool copy);
					            Namespace(const Namespace &);
					        
						Namespace();
						virtual ~Namespace();
					}; // end class Namespace
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace events

	namespace javax{
		namespace xml{
			namespace stream{
				namespace util{
					
					class XMLEventAllocator : public java::lang::Object {
						public:
					            XMLEventAllocator(jobject _jthis, bool copy);
					            XMLEventAllocator(const XMLEventAllocator &);
					        
						XMLEventAllocator();
						virtual ~XMLEventAllocator();
					}; // end class XMLEventAllocator
				} // end namespace javax
			} // end namespace xml
		} // end namespace stream
	} // end namespace util

	namespace javax{
		namespace xml{
			namespace transform{
				
				class Templates : public java::lang::Object {
					public:
				            Templates(jobject _jthis, bool copy);
				            Templates(const Templates &);
				        
					Templates();
					virtual ~Templates();
				}; // end class Templates
			} // end namespace javax
		} // end namespace xml
	} // end namespace transform

	namespace javax{
		namespace xml{
			namespace transform{
				namespace dom{
					
					class DOMResult : public java::lang::Object {
						public:
					            DOMResult(jobject _jthis, bool copy);
					            DOMResult(const DOMResult &);
					        
						DOMResult(org::w3c::dom::Node node_0,jstring string_1);
						DOMResult(org::w3c::dom::Node node_0);
						DOMResult();
						DOMResult(org::w3c::dom::Node node_0,org::w3c::dom::Node node_1);
						DOMResult(org::w3c::dom::Node node_0,org::w3c::dom::Node node_1,jstring string_2);
						virtual ~DOMResult();
						void setNode(org::w3c::dom::Node node_0);
						org::w3c::dom::Node getNextSibling();
						void setNextSibling(org::w3c::dom::Node node_0);
						jstring getSystemId();
						void setSystemId(jstring string_0);
						org::w3c::dom::Node getNode();
					}; // end class DOMResult
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace dom

	namespace javax{
		namespace xml{
			namespace transform{
				namespace stax{
					
					class StAXSource : public java::lang::Object {
						public:
					            StAXSource(jobject _jthis, bool copy);
					            StAXSource(const StAXSource &);
					        
						StAXSource(stream::XMLStreamReader xMLStreamReader_0);
						StAXSource(stream::XMLEventReader xMLEventReader_0);
						virtual ~StAXSource();
						stream::XMLStreamReader getXMLStreamReader();
						stream::XMLEventReader getXMLEventReader();
						jstring getSystemId();
						void setSystemId(jstring string_0);
					}; // end class StAXSource
				} // end namespace javax
			} // end namespace xml
		} // end namespace transform
	} // end namespace stax

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class SecuritySupport : public java::lang::Object {
					public:
				            SecuritySupport(jobject _jthis, bool copy);
				            SecuritySupport(const SecuritySupport &);
				        
					virtual ~SecuritySupport();
				}; // end class SecuritySupport
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace javax{
		namespace xml{
			namespace xpath{
				
				class XPathVariableResolver : public java::lang::Object {
					public:
				            XPathVariableResolver(jobject _jthis, bool copy);
				            XPathVariableResolver(const XPathVariableResolver &);
				        
					XPathVariableResolver();
					virtual ~XPathVariableResolver();
				}; // end class XPathVariableResolver
			} // end namespace javax
		} // end namespace xml
	} // end namespace xpath

	namespace org{
		namespace w3c{
			namespace dom{
				
				class DOMError : public java::lang::Object {
					public:
				            DOMError(jobject _jthis, bool copy);
				            DOMError(const DOMError &);
				        
					DOMError();
					virtual ~DOMError();
				}; // end class DOMError
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class Document : public java::lang::Object {
					public:
				            Document(jobject _jthis, bool copy);
				            Document(const Document &);
				        
					Document();
					virtual ~Document();
				}; // end class Document
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				
				class NamedNodeMap : public java::lang::Object {
					public:
				            NamedNodeMap(jobject _jthis, bool copy);
				            NamedNodeMap(const NamedNodeMap &);
				        
					NamedNodeMap();
					virtual ~NamedNodeMap();
				}; // end class NamedNodeMap
			} // end namespace org
		} // end namespace w3c
	} // end namespace dom

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSMediaRule : public java::lang::Object {
						public:
					            CSSMediaRule(jobject _jthis, bool copy);
					            CSSMediaRule(const CSSMediaRule &);
					        
						CSSMediaRule();
						virtual ~CSSMediaRule();
					}; // end class CSSMediaRule
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSStyleSheet : public java::lang::Object {
						public:
					            CSSStyleSheet(jobject _jthis, bool copy);
					            CSSStyleSheet(const CSSStyleSheet &);
					        
						CSSStyleSheet();
						virtual ~CSSStyleSheet();
					}; // end class CSSStyleSheet
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class CSSUnknownRule : public java::lang::Object {
						public:
					            CSSUnknownRule(jobject _jthis, bool copy);
					            CSSUnknownRule(const CSSUnknownRule &);
					        
						CSSUnknownRule();
						virtual ~CSSUnknownRule();
					}; // end class CSSUnknownRule
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace css{
					
					class Rect : public java::lang::Object {
						public:
					            Rect(jobject _jthis, bool copy);
					            Rect(const Rect &);
					        
						Rect();
						virtual ~Rect();
					}; // end class Rect
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace css

	namespace org{
		namespace w3c{
			namespace dom{
				namespace events{
					
					class MutationEvent : public java::lang::Object {
						public:
					            MutationEvent(jobject _jthis, bool copy);
					            MutationEvent(const MutationEvent &);
					        
						MutationEvent();
						virtual ~MutationEvent();
					}; // end class MutationEvent
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace events

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLBodyElement : public java::lang::Object {
						public:
					            HTMLBodyElement(jobject _jthis, bool copy);
					            HTMLBodyElement(const HTMLBodyElement &);
					        
						HTMLBodyElement();
						virtual ~HTMLBodyElement();
					}; // end class HTMLBodyElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLFieldSetElement : public java::lang::Object {
						public:
					            HTMLFieldSetElement(jobject _jthis, bool copy);
					            HTMLFieldSetElement(const HTMLFieldSetElement &);
					        
						HTMLFieldSetElement();
						virtual ~HTMLFieldSetElement();
					}; // end class HTMLFieldSetElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLHtmlElement : public java::lang::Object {
						public:
					            HTMLHtmlElement(jobject _jthis, bool copy);
					            HTMLHtmlElement(const HTMLHtmlElement &);
					        
						HTMLHtmlElement();
						virtual ~HTMLHtmlElement();
					}; // end class HTMLHtmlElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLLinkElement : public java::lang::Object {
						public:
					            HTMLLinkElement(jobject _jthis, bool copy);
					            HTMLLinkElement(const HTMLLinkElement &);
					        
						HTMLLinkElement();
						virtual ~HTMLLinkElement();
					}; // end class HTMLLinkElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLOptionElement : public java::lang::Object {
						public:
					            HTMLOptionElement(jobject _jthis, bool copy);
					            HTMLOptionElement(const HTMLOptionElement &);
					        
						HTMLOptionElement();
						virtual ~HTMLOptionElement();
					}; // end class HTMLOptionElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLTableCaptionElement : public java::lang::Object {
						public:
					            HTMLTableCaptionElement(jobject _jthis, bool copy);
					            HTMLTableCaptionElement(const HTMLTableCaptionElement &);
					        
						HTMLTableCaptionElement();
						virtual ~HTMLTableCaptionElement();
					}; // end class HTMLTableCaptionElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace html{
					
					class HTMLUListElement : public java::lang::Object {
						public:
					            HTMLUListElement(jobject _jthis, bool copy);
					            HTMLUListElement(const HTMLUListElement &);
					        
						HTMLUListElement();
						virtual ~HTMLUListElement();
					}; // end class HTMLUListElement
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace html

	namespace org{
		namespace w3c{
			namespace dom{
				namespace ls{
					
					class LSProgressEvent : public java::lang::Object {
						public:
					            LSProgressEvent(jobject _jthis, bool copy);
					            LSProgressEvent(const LSProgressEvent &);
					        
						LSProgressEvent();
						virtual ~LSProgressEvent();
					}; // end class LSProgressEvent
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace ls

	namespace org{
		namespace w3c{
			namespace dom{
				namespace stylesheets{
					
					class LinkStyle : public java::lang::Object {
						public:
					            LinkStyle(jobject _jthis, bool copy);
					            LinkStyle(const LinkStyle &);
					        
						LinkStyle();
						virtual ~LinkStyle();
					}; // end class LinkStyle
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace stylesheets

	namespace org{
		namespace w3c{
			namespace dom{
				namespace xpath{
					
					class XPathResult : public java::lang::Object {
						public:
					            XPathResult(jobject _jthis, bool copy);
					            XPathResult(const XPathResult &);
					        
						XPathResult();
						virtual ~XPathResult();
					}; // end class XPathResult
				} // end namespace org
			} // end namespace w3c
		} // end namespace dom
	} // end namespace xpath

	namespace org{
		namespace xml{
			namespace sax{
				
				class HandlerBase : public java::lang::Object {
					public:
				            HandlerBase(jobject _jthis, bool copy);
				            HandlerBase(const HandlerBase &);
				        
					HandlerBase();
					virtual ~HandlerBase();
					InputSource resolveEntity(jstring string_0,jstring string_1);
					void notationDecl(jstring string_0,jstring string_1,jstring string_2);
					void unparsedEntityDecl(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
					void setDocumentLocator(Locator locator_0);
					void ignorableWhitespace(jcharArray charArray_0,jint int_1,jint int_2);
					void processingInstruction(jstring string_0,jstring string_1);
					void fatalError(SAXParseException sAXParseException_0);
					void warning(SAXParseException sAXParseException_0);
					void characters(jcharArray charArray_0,jint int_1,jint int_2);
					void startElement(jstring string_0,AttributeList attributeList_1);
					void startDocument();
					void endDocument();
					void endElement(jstring string_0);
					void error(SAXParseException sAXParseException_0);
				}; // end class HandlerBase
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				
				class XMLFilter : public java::lang::Object {
					public:
				            XMLFilter(jobject _jthis, bool copy);
				            XMLFilter(const XMLFilter &);
				        
					XMLFilter();
					virtual ~XMLFilter();
				}; // end class XMLFilter
			} // end namespace org
		} // end namespace xml
	} // end namespace sax

	namespace org{
		namespace xml{
			namespace sax{
				namespace ext{
					
					class Locator2 : public java::lang::Object {
						public:
					            Locator2(jobject _jthis, bool copy);
					            Locator2(const Locator2 &);
					        
						Locator2();
						virtual ~Locator2();
					}; // end class Locator2
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace ext

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class NewInstance : public java::lang::Object {
						public:
					            NewInstance(jobject _jthis, bool copy);
					            NewInstance(const NewInstance &);
					        
						virtual ~NewInstance();
					}; // end class NewInstance
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace org{
		namespace xml{
			namespace sax{
				namespace helpers{
					
					class SecuritySupport : public java::lang::Object {
						public:
					            SecuritySupport(jobject _jthis, bool copy);
					            SecuritySupport(const SecuritySupport &);
					        
						virtual ~SecuritySupport();
					}; // end class SecuritySupport
				} // end namespace org
			} // end namespace xml
		} // end namespace sax
	} // end namespace helpers

	namespace crcl{
		namespace utils{
			
			class PendantClient : public javax::swing::JFrame {
				public:
			            PendantClient(jobject _jthis, bool copy);
			            PendantClient(const PendantClient &);
			        
				PendantClient(java::awt::GraphicsConfiguration graphicsConfiguration_0);
				PendantClient(jstring string_0);
				PendantClient();
				virtual ~PendantClient();
				void setStatus(base::CRCLStatusType cRCLStatusType_0);
				jboolean isConnected();
				void finishConnect();
				void showMessage(java::lang::Throwable throwable_0);
				void showMessage(jstring string_0);
				jboolean showDebugMessage(jstring string_0);
				jboolean validateXmlSelected();
				jboolean replaceStateSelected();
				void finishDisconnect();
				void finishSetStatus();
				void checkXmlQuery(CRCLSocket cRCLSocket_0);
				void stopPollTimer();
				void checkPollSelected();
				jboolean isDebugWaitForDoneSelected();
				jboolean isDebugSendCommandSelected();
				jboolean isDebugReadStatusSelected();
				void showCurrentProgramLine(jint int_0);
				void finishOpenXmlProgramFile(java::io::File file_0,base::CRCLProgramType cRCLProgramType_1);
				base::CRCLProgramType editProgram(base::CRCLProgramType cRCLProgramType_0);
				void showLastProgramLineExecTimeMillisDists(jlong long_0,jdouble double_1);
				jboolean isRecordPoseSelected();
				jboolean isEXISelected();
				jboolean isUseReadStatusThreadSelected();
				void showProgram(base::CRCLProgramType cRCLProgramType_0);
				jdouble getRpyJogIncrement();
				void setRpyJogIncrement(jdouble double_0);
				void openXmlProgramFile(java::io::File file_0);
				void saveXmlProgramFile(java::io::File file_0);
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
				void connect(jstring string_0,jint int_1);
				jstring getHost();
				jint getPort();
			}; // end class PendantClient
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class CmdLineClient : public java::lang::Object {
				public:
			            CmdLineClient(jobject _jthis, bool copy);
			            CmdLineClient(const CmdLineClient &);
			        
				CmdLineClient();
				virtual ~CmdLineClient();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class CmdLineClient
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class CRCLSocketExample : public java::lang::Object {
				public:
			            CRCLSocketExample(jobject _jthis, bool copy);
			            CRCLSocketExample(const CRCLSocketExample &);
			        
				CRCLSocketExample();
				virtual ~CRCLSocketExample();
				static void main(jobjectArray stringArray_0);
				static void main(int argc,const char **argv);
			}; // end class CRCLSocketExample
		} // end namespace crcl
	} // end namespace utils

	namespace crcl{
		namespace utils{
			
			class PendantClientInner : public java::lang::Object {
				public:
			            PendantClientInner(jobject _jthis, bool copy);
			            PendantClientInner(const PendantClientInner &);
			        
				PendantClientInner(PendantClientOuter pendantClientOuter_0);
				virtual ~PendantClientInner();
				jlong getWaitForDoneDelay();
				void setWaitForDoneDelay(jlong long_0);
				static java::util::Optional tryGet(PendantClientInner::TrySupplier trySupplier_0);
				static java::util::stream::Stream getJointValues(base::CRCLStatusType cRCLStatusType_0,java::util::Collection collection_1);
				static jstring getJointString(base::CRCLStatusType cRCLStatusType_0,java::util::function::Function function_1,java::util::Collection collection_2);
				void waitForPause();
				jboolean runProgram(base::CRCLProgramType cRCLProgramType_0);
				jboolean runTest();
				void setCmdId(java::math::BigInteger bigInteger_0);
				void setJogInterval(jint int_0);
				void setStatus(base::CRCLStatusType cRCLStatusType_0);
				base::AngleUnitEnumType getAngleType();
				void setAngleType(base::AngleUnitEnumType angleUnitEnumType_0);
				base::PoseToleranceType getExpectedEndPoseTolerance();
				void setExpectedEndPoseTolerance(base::PoseToleranceType poseToleranceType_0);
				base::PoseToleranceType getExpectedIntermediatePoseTolerance();
				void setExpectedIntermediatePoseTolerance(base::PoseToleranceType poseToleranceType_0);
				XpathUtils getXpu();
				void abort();
				void disconnect();
				jboolean isConnected();
				jboolean isDone(java::math::BigInteger bigInteger_0);
				void pause();
				void setProgramSchema(jobjectArray fileArray_0);
				void setCmdSchema(jobjectArray fileArray_0);
				void setStatSchema(jobjectArray fileArray_0);
				static java::util::Optional getJointStatus(base::CRCLStatusType cRCLStatusType_0,java::math::BigInteger bigInteger_1);
				void readStatus();
				java::math::BigDecimal getJointPosition(java::math::BigInteger bigInteger_0);
				jdouble getJogIncrement();
				void setProgram(base::CRCLProgramType cRCLProgramType_0);
				jboolean incAndSendCommand(base::CRCLCommandType cRCLCommandType_0);
				CRCLSocket getCRCLSocket();
				jint getJogInterval();
				jdouble getXyzJogIncrement();
				CRCLSocket getTempCRCLSocket();
				jobjectArray getProgramSchemaFiles();
				java::util::function::Predicate getCheckProgramValidPredicate();
				java::util::function::Predicate getCheckCommandValidPredicate();
				jint getPoll_ms();
				void setPoll_ms(jint int_0);
				void setJogIncrement(jdouble double_0);
				void setXyzJogIncrement(jdouble double_0);
				void startRunTestThread();
				void startRunProgramThread();
				jboolean isPaused();
				jboolean isRunningProgram();
				void unpause();
				base::CRCLProgramType getProgram();
				void savePoseListToCsvFile(jstring string_0);
				java::util::List getPoseList();
				void startStatusReaderThread();
				void stopStatusReaderThread();
				void closeTestProgramThread();
				jboolean requestStatus();
				jboolean checkProgramValid(base::CRCLProgramType cRCLProgramType_0);
				jboolean checkCommandValid(base::CRCLCommandType cRCLCommandType_0);
				jobjectArray getCmdSchemaFiles();
				jboolean sendCommand(base::CRCLCommandType cRCLCommandType_0);
				void stopMotion(base::StopConditionEnumType stopConditionEnumType_0);
				jboolean waitForDone(java::math::BigInteger bigInteger_0,jlong long_1);
				void openXmlProgramFile(java::io::File file_0);
				void saveXmlProgramFile(java::io::File file_0);
				java::math::BigInteger getCmdId();
				base::CRCLStatusType getStatus();
				void connect(jstring string_0,jint int_1);
			}; // end class PendantClientInner
		} // end namespace crcl
	} // end namespace utils

	namespace java{
		namespace util{
			
			class LinkedList : public AbstractSequentialList {
				public:
			            LinkedList(jobject _jthis, bool copy);
			            LinkedList(const LinkedList &);
			        
				LinkedList();
				LinkedList(Collection collection_0);
				virtual ~LinkedList();
				Iterator descendingIterator();
				void clear();
				jint size();
				jboolean addAll(Collection collection_0);
				jboolean addAll(jint int_0,Collection collection_1);
				ListIterator listIterator(jint int_0);
			}; // end class LinkedList
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace io{
			
			class File : public lang::Object {
				public:
			            File(jobject _jthis, bool copy);
			            File(const File &);
			        
				File(jstring string_0,jstring string_1);
				File(jstring string_0);
				File(File file_0,jstring string_1);
				File(net::URI uRI_0);
				virtual ~File();
				jstring toString();
				jint hashCode();
				jint compareTo(File file_0);
				jstring getName();
				jlong length();
				jstring getParent();
				jboolean isAbsolute();
				jstring getCanonicalPath();
				jboolean delete();
				jboolean setReadOnly();
				jobjectArray list();
				jobjectArray list(FilenameFilter filenameFilter_0);
				File getParentFile();
				jstring getPath();
				jstring getAbsolutePath();
				File getAbsoluteFile();
				File getCanonicalFile();
				net::URL toURL();
				net::URI toURI();
				jboolean canRead();
				jboolean canWrite();
				jboolean exists();
				jboolean isDirectory();
				jboolean isFile();
				jboolean isHidden();
				jlong lastModified();
				jboolean createNewFile();
				void deleteOnExit();
				jobjectArray listFiles();
				jobjectArray listFiles(FilenameFilter filenameFilter_0);
				jobjectArray listFiles(FileFilter fileFilter_0);
				jboolean mkdir();
				jboolean mkdirs();
				jboolean renameTo(File file_0);
				jboolean setLastModified(jlong long_0);
				jboolean setWritable(jboolean boolean_0);
				jboolean setWritable(jboolean boolean_0,jboolean boolean_1);
				jboolean setReadable(jboolean boolean_0,jboolean boolean_1);
				jboolean setReadable(jboolean boolean_0);
				jboolean setExecutable(jboolean boolean_0);
				jboolean setExecutable(jboolean boolean_0,jboolean boolean_1);
				jboolean canExecute();
				static jobjectArray listRoots();
				jlong getTotalSpace();
				jlong getFreeSpace();
				jlong getUsableSpace();
				static File createTempFile(jstring string_0,jstring string_1);
				static File createTempFile(jstring string_0,jstring string_1,File file_2);
			}; // end class File
		} // end namespace java
	} // end namespace io

	namespace javax{
		namespace swing{
			namespace text{
				
				class Style : public java::lang::Object {
					public:
				            Style(jobject _jthis, bool copy);
				            Style(const Style &);
				        
					Style();
					virtual ~Style();
				}; // end class Style
			} // end namespace javax
		} // end namespace swing
	} // end namespace text

	namespace javax{
		namespace swing{
			
			class TransferHandler : public java::lang::Object {
				public:
			            TransferHandler(jobject _jthis, bool copy);
			            TransferHandler(const TransferHandler &);
			        
				TransferHandler(jstring string_0);
				virtual ~TransferHandler();
				void setDragImage(java::awt::Image image_0);
				java::awt::Image getDragImage();
				void setDragImageOffset(java::awt::Point point_0);
				java::awt::Point getDragImageOffset();
				void exportAsDrag(JComponent jComponent_0,java::awt::event::InputEvent inputEvent_1,jint int_2);
				jint getSourceActions(JComponent jComponent_0);
			}; // end class TransferHandler
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			
			class JMenuBar : public JComponent {
				public:
			            JMenuBar(jobject _jthis, bool copy);
			            JMenuBar(const JMenuBar &);
			        
				JMenuBar();
				virtual ~JMenuBar();
				void menuSelectionChanged(jboolean boolean_0);
				jint getMenuCount();
				java::awt::Component getComponentAtIndex(jint int_0);
				jint getComponentIndex(java::awt::Component component_0);
				void setMargin(java::awt::Insets insets_0);
				java::awt::Insets getMargin();
				jboolean isBorderPainted();
				void setBorderPainted(jboolean boolean_0);
				java::awt::Component getComponent();
				void updateUI();
				jstring getUIClassID();
				accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void removeNotify();
				void setSelected(java::awt::Component component_0);
				jboolean isSelected();
			}; // end class JMenuBar
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			
			class JRootPane : public JComponent {
				public:
			            JRootPane(jobject _jthis, bool copy);
			            JRootPane(const JRootPane &);
			        
				JRootPane();
				virtual ~JRootPane();
				jint getWindowDecorationStyle();
				jboolean isOptimizedDrawingEnabled();
				void setDoubleBuffered(jboolean boolean_0);
				jboolean isValidateRoot();
				void updateUI();
				jstring getUIClassID();
				JMenuBar getJMenuBar();
				void setContentPane(java::awt::Container container_0);
				JLayeredPane getLayeredPane();
				void setLayeredPane(JLayeredPane jLayeredPane_0);
				java::awt::Component getGlassPane();
				void setGlassPane(java::awt::Component component_0);
				accessibility::AccessibleContext getAccessibleContext();
				void setWindowDecorationStyle(jint int_0);
				void setMenuBar(JMenuBar jMenuBar_0);
				JMenuBar getMenuBar();
				void addNotify();
				void removeNotify();
				java::awt::Container getContentPane();
				void setJMenuBar(JMenuBar jMenuBar_0);
			}; // end class JRootPane
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			
			class JLayeredPane : public JComponent {
				public:
			            JLayeredPane(jobject _jthis, bool copy);
			            JLayeredPane(const JLayeredPane &);
			        
				JLayeredPane();
				virtual ~JLayeredPane();
				static void putLayer(JComponent jComponent_0,jint int_1);
				jint getLayer(java::awt::Component component_0);
				static jint getLayer(JComponent jComponent_0);
				static JLayeredPane getLayeredPaneAbove(java::awt::Component component_0);
				void setLayer(java::awt::Component component_0,jint int_1);
				void setLayer(java::awt::Component component_0,jint int_1,jint int_2);
				jint getIndexOf(java::awt::Component component_0);
				void moveToFront(java::awt::Component component_0);
				void moveToBack(java::awt::Component component_0);
				void setPosition(java::awt::Component component_0,jint int_1);
				jint highestLayer();
				jint lowestLayer();
				jint getComponentCountInLayer(jint int_0);
				jobjectArray getComponentsInLayer(jint int_0);
				jboolean isOptimizedDrawingEnabled();
				jint getPosition(java::awt::Component component_0);
				accessibility::AccessibleContext getAccessibleContext();
				void paint(java::awt::Graphics graphics_0);
				void remove(jint int_0);
				void removeAll();
			}; // end class JLayeredPane
		} // end namespace javax
	} // end namespace swing

	namespace java{
		namespace awt{
			
			class Graphics : public lang::Object {
				public:
			            Graphics(jobject _jthis, bool copy);
			            Graphics(const Graphics &);
			        
				virtual ~Graphics();
				void drawRect(jint int_0,jint int_1,jint int_2,jint int_3);
				void draw3DRect(jint int_0,jint int_1,jint int_2,jint int_3,jboolean boolean_4);
				void fill3DRect(jint int_0,jint int_1,jint int_2,jint int_3,jboolean boolean_4);
				void drawChars(jcharArray charArray_0,jint int_1,jint int_2,jint int_3,jint int_4);
				void drawBytes(jbyteArray byteArray_0,jint int_1,jint int_2,jint int_3,jint int_4);
				Rectangle getClipRect();
				Rectangle getClipBounds(Rectangle rectangle_0);
				jboolean hitClip(jint int_0,jint int_1,jint int_2,jint int_3);
				FontMetrics getFontMetrics();
				void finalize();
				jstring toString();
				Graphics create(jint int_0,jint int_1,jint int_2,jint int_3);
			}; // end class Graphics
		} // end namespace java
	} // end namespace awt

	namespace javax{
		namespace accessibility{
			
			class AccessibleContext : public java::lang::Object {
				public:
			            AccessibleContext(jobject _jthis, bool copy);
			            AccessibleContext(const AccessibleContext &);
			        
				AccessibleContext();
				virtual ~AccessibleContext();
				jstring getAccessibleName();
				void setAccessibleName(jstring string_0);
				jstring getAccessibleDescription();
				void setAccessibleDescription(jstring string_0);
				void removePropertyChangeListener(java::beans::PropertyChangeListener propertyChangeListener_0);
				void addPropertyChangeListener(java::beans::PropertyChangeListener propertyChangeListener_0);
			}; // end class AccessibleContext
		} // end namespace javax
	} // end namespace accessibility

	namespace java{
		namespace awt{
			
			class LayoutManager : public lang::Object {
				public:
			            LayoutManager(jobject _jthis, bool copy);
			            LayoutManager(const LayoutManager &);
			        
				LayoutManager();
				virtual ~LayoutManager();
			}; // end class LayoutManager
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class Color : public lang::Object {
				public:
			            Color(jobject _jthis, bool copy);
			            Color(const Color &);
			        
				Color(jint int_0,jboolean boolean_1);
				Color(jint int_0);
				Color(jint int_0,jint int_1,jint int_2,jint int_3);
				Color(jint int_0,jint int_1,jint int_2);
				Color(jfloat float_0,jfloat float_1,jfloat float_2,jfloat float_3);
				Color(jfloat float_0,jfloat float_1,jfloat float_2);
				virtual ~Color();
				Color brighter();
				jint getRed();
				jint getGreen();
				jint getBlue();
				jint getRGB();
				static jint HSBtoRGB(jfloat float_0,jfloat float_1,jfloat float_2);
				static jfloatArray RGBtoHSB(jint int_0,jint int_1,jint int_2,jfloatArray floatArray_3);
				static Color getHSBColor(jfloat float_0,jfloat float_1,jfloat float_2);
				jfloatArray getRGBComponents(jfloatArray floatArray_0);
				jfloatArray getRGBColorComponents(jfloatArray floatArray_0);
				jfloatArray getColorComponents(jfloatArray floatArray_0);
				jint getTransparency();
				jfloatArray getComponents(jfloatArray floatArray_0);
				static Color getColor(jstring string_0,Color color_1);
				static Color getColor(jstring string_0);
				static Color getColor(jstring string_0,jint int_1);
				jint getAlpha();
				Color darker();
				jstring toString();
				jint hashCode();
				static Color decode(jstring string_0);
			}; // end class Color
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class MenuBar : public MenuComponent {
				public:
			            MenuBar(jobject _jthis, bool copy);
			            MenuBar(const MenuBar &);
			        
				MenuBar();
				virtual ~MenuBar();
				jint countMenus();
				util::Enumeration shortcuts();
				Menu getMenu(jint int_0);
				jint getMenuCount();
				void setHelpMenu(Menu menu_0);
				Menu getHelpMenu();
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void removeNotify();
				Menu add(Menu menu_0);
				void remove(jint int_0);
				void remove(MenuComponent menuComponent_0);
			}; // end class MenuBar
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class Rectangle : public geom::Rectangle2D {
				public:
			            Rectangle(jobject _jthis, bool copy);
			            Rectangle(const Rectangle &);
			        
				Rectangle(jint int_0,jint int_1,jint int_2,jint int_3);
				Rectangle(Rectangle rectangle_0);
				Rectangle(Point point_0);
				Rectangle();
				Rectangle(jint int_0,jint int_1);
				Rectangle(Dimension dimension_0);
				Rectangle(Point point_0,Dimension dimension_1);
				virtual ~Rectangle();
				Rectangle union(Rectangle rectangle_0);
				Rectangle intersection(Rectangle rectangle_0);
				geom::Rectangle2D getBounds2D();
				void setRect(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
				jint outcode(jdouble double_0,jdouble double_1);
				geom::Rectangle2D createIntersection(geom::Rectangle2D rectangle2D_0);
				geom::Rectangle2D createUnion(geom::Rectangle2D rectangle2D_0);
				void setBounds(jint int_0,jint int_1,jint int_2,jint int_3);
				void setBounds(Rectangle rectangle_0);
				Rectangle getBounds();
				jdouble getX();
				jdouble getY();
				jdouble getWidth();
				jdouble getHeight();
				void translate(jint int_0,jint int_1);
				jboolean inside(jint int_0,jint int_1);
				void move(jint int_0,jint int_1);
				void setLocation(jint int_0,jint int_1);
				void setLocation(Point point_0);
				void reshape(jint int_0,jint int_1,jint int_2,jint int_3);
				void add(jint int_0,jint int_1);
				void add(Rectangle rectangle_0);
				void add(Point point_0);
				jstring toString();
				jboolean isEmpty();
				jboolean contains(Point point_0);
				jboolean contains(Rectangle rectangle_0);
				jboolean contains(jint int_0,jint int_1);
				jboolean contains(jint int_0,jint int_1,jint int_2,jint int_3);
				Point getLocation();
				Dimension getSize();
				void grow(jint int_0,jint int_1);
				void setSize(Dimension dimension_0);
				void setSize(jint int_0,jint int_1);
				void resize(jint int_0,jint int_1);
				jboolean intersects(Rectangle rectangle_0);
			}; // end class Rectangle
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class Shape : public lang::Object {
				public:
			            Shape(jobject _jthis, bool copy);
			            Shape(const Shape &);
			        
				Shape();
				virtual ~Shape();
			}; // end class Shape
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace util{
			
			class Set : public lang::Object {
				public:
			            Set(jobject _jthis, bool copy);
			            Set(const Set &);
			        
				Set();
				virtual ~Set();
			}; // end class Set
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace util{
			
			class ResourceBundle : public lang::Object {
				public:
			            ResourceBundle(jobject _jthis, bool copy);
			            ResourceBundle(const ResourceBundle &);
			        
				ResourceBundle();
				virtual ~ResourceBundle();
				jstring getBaseBundleName();
				virtual jobjectArray getStringArray(jstring string_0);
				static void clearCache();
				static void clearCache(lang::ClassLoader classLoader_0);
				virtual jstring getString(jstring string_0);
				static ResourceBundle getBundle(jstring string_0,Locale locale_1,lang::ClassLoader classLoader_2);
				static ResourceBundle getBundle(jstring string_0,Locale locale_1);
				static ResourceBundle getBundle(jstring string_0);
				Locale getLocale();
				Set keySet();
				jboolean containsKey(jstring string_0);
			}; // end class ResourceBundle
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace awt{
			
			class BufferCapabilities : public lang::Object {
				public:
			            BufferCapabilities(jobject _jthis, bool copy);
			            BufferCapabilities(const BufferCapabilities &);
			        
				virtual ~BufferCapabilities();
				ImageCapabilities getFrontBufferCapabilities();
				ImageCapabilities getBackBufferCapabilities();
				jboolean isFullScreenRequired();
				jboolean isMultiBufferAvailable();
				jboolean isPageFlipping();
			}; // end class BufferCapabilities
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			namespace image{
				
				class BufferStrategy : public lang::Object {
					public:
				            BufferStrategy(jobject _jthis, bool copy);
				            BufferStrategy(const BufferStrategy &);
				        
					BufferStrategy();
					virtual ~BufferStrategy();
					void dispose();
				}; // end class BufferStrategy
			} // end namespace java
		} // end namespace awt
	} // end namespace image

	namespace java{
		namespace awt{
			
			class Cursor : public lang::Object {
				public:
			            Cursor(jobject _jthis, bool copy);
			            Cursor(const Cursor &);
			        
				Cursor(jint int_0);
				virtual ~Cursor();
				static Cursor getSystemCustomCursor(jstring string_0);
				static Cursor getDefaultCursor();
				static Cursor getPredefinedCursor(jint int_0);
				jstring toString();
				jstring getName();
				jint getType();
			}; // end class Cursor
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class Toolkit : public lang::Object {
				public:
			            Toolkit(jobject _jthis, bool copy);
			            Toolkit(const Toolkit &);
			        
				Toolkit();
				virtual ~Toolkit();
				jint getMenuShortcutKeyMask();
				jboolean areExtraMouseButtonsEnabled();
				void setDynamicLayout(jboolean boolean_0);
				jboolean isDynamicLayoutActive();
				jboolean getLockingKeyState(jint int_0);
				void setLockingKeyState(jint int_0,jboolean boolean_1);
				Cursor createCustomCursor(Image image_0,Point point_1,jstring string_2);
				Dimension getBestCursorSize(jint int_0,jint int_1);
				jint getMaximumCursorColors();
				jboolean isAlwaysOnTopSupported();
				Insets getScreenInsets(GraphicsConfiguration graphicsConfiguration_0);
				static Toolkit getDefaultToolkit();
				Image createImage(jbyteArray byteArray_0);
				void removePropertyChangeListener(jstring string_0,beans::PropertyChangeListener propertyChangeListener_1);
				jobjectArray getPropertyChangeListeners(jstring string_0);
				jobjectArray getPropertyChangeListeners();
				jboolean isFrameStateSupported(jint int_0);
				void addPropertyChangeListener(jstring string_0,beans::PropertyChangeListener propertyChangeListener_1);
				static jstring getProperty(jstring string_0,jstring string_1);
			}; // end class Toolkit
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class Event : public lang::Object {
				public:
			            Event(jobject _jthis, bool copy);
			            Event(const Event &);
			        
				virtual ~Event();
				jboolean shiftDown();
				jboolean controlDown();
				jboolean metaDown();
				void translate(jint int_0,jint int_1);
				jstring toString();
			}; // end class Event
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace util{
			
			class List : public lang::Object {
				public:
			            List(jobject _jthis, bool copy);
			            List(const List &);
			        
				List();
				virtual ~List();
				void replaceAll(function::UnaryOperator unaryOperator_0);
				void sort(Comparator comparator_0);
			}; // end class List
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace awt{
			
			class Dimension : public geom::Dimension2D {
				public:
			            Dimension(jobject _jthis, bool copy);
			            Dimension(const Dimension &);
			        
				Dimension();
				Dimension(jint int_0,jint int_1);
				Dimension(Dimension dimension_0);
				virtual ~Dimension();
				jdouble getWidth();
				jdouble getHeight();
				jstring toString();
				jint hashCode();
				Dimension getSize();
				void setSize(jdouble double_0,jdouble double_1);
				void setSize(jint int_0,jint int_1);
				void setSize(Dimension dimension_0);
			}; // end class Dimension
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class Point : public geom::Point2D {
				public:
			            Point(jobject _jthis, bool copy);
			            Point(const Point &);
			        
				Point(Point point_0);
				Point(jint int_0,jint int_1);
				Point();
				virtual ~Point();
				jdouble getX();
				jdouble getY();
				void translate(jint int_0,jint int_1);
				void move(jint int_0,jint int_1);
				void setLocation(jdouble double_0,jdouble double_1);
				void setLocation(jint int_0,jint int_1);
				void setLocation(Point point_0);
				jstring toString();
				Point getLocation();
			}; // end class Point
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace util{
			
			class Locale : public lang::Object {
				public:
			            Locale(jobject _jthis, bool copy);
			            Locale(const Locale &);
			        
				Locale(jstring string_0);
				Locale(jstring string_0,jstring string_1);
				Locale(jstring string_0,jstring string_1,jstring string_2);
				virtual ~Locale();
				virtual jstring toString();
				jint hashCode();
				jstring getLanguage();
				static Locale getDefault();
				static Locale lookup(List list_0,Collection collection_1);
				static List filter(List list_0,Collection collection_1);
				static void setDefault(Locale locale_0);
				static jobjectArray getAvailableLocales();
				static jobjectArray getISOCountries();
				static jobjectArray getISOLanguages();
				jstring getScript();
				jstring getCountry();
				jstring getVariant();
				jboolean hasExtensions();
				Locale stripExtensions();
				jstring getExtension(jchar char_0);
				Set getExtensionKeys();
				Set getUnicodeLocaleAttributes();
				jstring getUnicodeLocaleType(jstring string_0);
				Set getUnicodeLocaleKeys();
				jstring toLanguageTag();
				static Locale forLanguageTag(jstring string_0);
				jstring getISO3Language();
				jstring getISO3Country();
				jstring getDisplayLanguage(Locale locale_0);
				virtual jstring getDisplayLanguage();
				jstring getDisplayScript(Locale locale_0);
				jstring getDisplayScript();
				jstring getDisplayCountry(Locale locale_0);
				virtual jstring getDisplayCountry();
				virtual jstring getDisplayVariant();
				jstring getDisplayVariant(Locale locale_0);
				jstring getDisplayName(Locale locale_0);
				virtual jstring getDisplayName();
				static List filterTags(List list_0,Collection collection_1);
				static jstring lookupTag(List list_0,Collection collection_1);
			}; // end class Locale
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace awt{
			namespace im{
				
				class InputContext : public lang::Object {
					public:
				            InputContext(jobject _jthis, bool copy);
				            InputContext(const InputContext &);
				        
					virtual ~InputContext();
					jboolean selectInputMethod(util::Locale locale_0);
					void setCompositionEnabled(jboolean boolean_0);
					jboolean isCompositionEnabled();
					void reconvert();
					void dispatchEvent(AWTEvent aWTEvent_0);
					void endComposition();
					void dispose();
					void removeNotify(Component component_0);
					util::Locale getLocale();
					static InputContext getInstance();
				}; // end class InputContext
			} // end namespace java
		} // end namespace awt
	} // end namespace im

	namespace java{
		namespace awt{
			namespace Dialog{
				
				class ModalExclusionType : public lang::Enum {
					public:
				            ModalExclusionType(jobject _jthis, bool copy);
				            ModalExclusionType(const ModalExclusionType &);
				        
					virtual ~ModalExclusionType();
					static jobjectArray values();
					static ModalExclusionType valueOf(jstring string_0);
				}; // end class ModalExclusionType
			} // end namespace java
		} // end namespace awt
	} // end namespace Dialog

	namespace java{
		namespace awt{
			namespace event{
				
				class WindowStateListener : public lang::Object {
					public:
				            WindowStateListener(jobject _jthis, bool copy);
				            WindowStateListener(const WindowStateListener &);
				        
					WindowStateListener();
					virtual ~WindowStateListener();
				}; // end class WindowStateListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class WindowFocusListener : public lang::Object {
					public:
				            WindowFocusListener(jobject _jthis, bool copy);
				            WindowFocusListener(const WindowFocusListener &);
				        
					WindowFocusListener();
					virtual ~WindowFocusListener();
				}; // end class WindowFocusListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class WindowListener : public lang::Object {
					public:
				            WindowListener(jobject _jthis, bool copy);
				            WindowListener(const WindowListener &);
				        
					WindowListener();
					virtual ~WindowListener();
				}; // end class WindowListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace Window{
				
				class Type : public lang::Enum {
					public:
				            Type(jobject _jthis, bool copy);
				            Type(const Type &);
				        
					virtual ~Type();
					static jobjectArray values();
					static Type valueOf(jstring string_0);
				}; // end class Type
			} // end namespace java
		} // end namespace awt
	} // end namespace Window

	namespace java{
		namespace beans{
			
			class PropertyChangeListener : public lang::Object {
				public:
			            PropertyChangeListener(jobject _jthis, bool copy);
			            PropertyChangeListener(const PropertyChangeListener &);
			        
				PropertyChangeListener();
				virtual ~PropertyChangeListener();
			}; // end class PropertyChangeListener
		} // end namespace java
	} // end namespace beans

	namespace java{
		namespace awt{
			
			class FocusTraversalPolicy : public lang::Object {
				public:
			            FocusTraversalPolicy(jobject _jthis, bool copy);
			            FocusTraversalPolicy(const FocusTraversalPolicy &);
			        
				FocusTraversalPolicy();
				virtual ~FocusTraversalPolicy();
				Component getInitialComponent(Window window_0);
			}; // end class FocusTraversalPolicy
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class ComponentOrientation : public lang::Object {
				public:
			            ComponentOrientation(jobject _jthis, bool copy);
			            ComponentOrientation(const ComponentOrientation &);
			        
				virtual ~ComponentOrientation();
				jboolean isHorizontal();
				jboolean isLeftToRight();
				static ComponentOrientation getOrientation(util::ResourceBundle resourceBundle_0);
				static ComponentOrientation getOrientation(util::Locale locale_0);
			}; // end class ComponentOrientation
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class Insets : public lang::Object {
				public:
			            Insets(jobject _jthis, bool copy);
			            Insets(const Insets &);
			        
				Insets(jint int_0,jint int_1,jint int_2,jint int_3);
				virtual ~Insets();
				jstring toString();
				jint hashCode();
				void set(jint int_0,jint int_1,jint int_2,jint int_3);
			}; // end class Insets
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			
			class Font : public lang::Object {
				public:
			            Font(jobject _jthis, bool copy);
			            Font(const Font &);
			        
				Font(jstring string_0,jint int_1,jint int_2);
				Font(util::Map map_0);
				virtual ~Font();
				jboolean hasLayoutAttributes();
				jint getStyle();
				static Font createFont(jint int_0,io::File file_1);
				static Font createFont(jint int_0,io::InputStream inputStream_1);
				geom::AffineTransform getTransform();
				jstring getFamily();
				jstring getFamily(util::Locale locale_0);
				jstring getPSName();
				jstring getFontName(util::Locale locale_0);
				jstring getFontName();
				jfloat getSize2D();
				jboolean isPlain();
				jboolean isBold();
				jboolean isItalic();
				jboolean isTransformed();
				jint getNumGlyphs();
				jint getMissingGlyphCode();
				jbyte getBaselineFor(jchar char_0);
				Font deriveFont(jint int_0,jfloat float_1);
				Font deriveFont(jint int_0,geom::AffineTransform affineTransform_1);
				Font deriveFont(jfloat float_0);
				Font deriveFont(util::Map map_0);
				Font deriveFont(jint int_0);
				Font deriveFont(geom::AffineTransform affineTransform_0);
				jboolean canDisplay(jint int_0);
				jboolean canDisplay(jchar char_0);
				jint canDisplayUpTo(jstring string_0);
				jint canDisplayUpTo(jcharArray charArray_0,jint int_1,jint int_2);
				jint canDisplayUpTo(text::CharacterIterator characterIterator_0,jint int_1,jint int_2);
				jfloat getItalicAngle();
				jboolean hasUniformLineMetrics();
				static Font getFont(jstring string_0);
				static Font getFont(jstring string_0,Font font_1);
				static Font getFont(util::Map map_0);
				jstring toString();
				jint hashCode();
				jstring getName();
				static Font decode(jstring string_0);
				jint getSize();
				util::Map getAttributes();
			}; // end class Font
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			namespace event{
				
				class ContainerListener : public lang::Object {
					public:
				            ContainerListener(jobject _jthis, bool copy);
				            ContainerListener(const ContainerListener &);
				        
					ContainerListener();
					virtual ~ContainerListener();
				}; // end class ContainerListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace io{
			
			class PrintStream : public FilterOutputStream {
				public:
			            PrintStream(jobject _jthis, bool copy);
			            PrintStream(const PrintStream &);
			        
				PrintStream(OutputStream outputStream_0);
				PrintStream(OutputStream outputStream_0,jboolean boolean_1);
				PrintStream(OutputStream outputStream_0,jboolean boolean_1,jstring string_2);
				PrintStream(jstring string_0);
				PrintStream(jstring string_0,jstring string_1);
				PrintStream(File file_0,jstring string_1);
				PrintStream(File file_0);
				virtual ~PrintStream();
				void println(jdouble double_0);
				void println(jfloat float_0);
				void println(jlong long_0);
				void println(jstring string_0);
				void println(jcharArray charArray_0);
				void println();
				void println(jboolean boolean_0);
				void println(jchar char_0);
				void println(jint int_0);
				PrintStream append(jchar char_0);
				PrintStream append(lang::CharSequence charSequence_0,jint int_1,jint int_2);
				PrintStream append(lang::CharSequence charSequence_0);
				void write(jint int_0);
				void write(jbyteArray byteArray_0,jint int_1,jint int_2);
				void print(jboolean boolean_0);
				void print(jlong long_0);
				void print(jdouble double_0);
				void print(jfloat float_0);
				void print(jstring string_0);
				void print(jcharArray charArray_0);
				void print(jchar char_0);
				void print(jint int_0);
				void flush();
				void close();
				jboolean checkError();
			}; // end class PrintStream
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace io{
			
			class PrintWriter : public Writer {
				public:
			            PrintWriter(jobject _jthis, bool copy);
			            PrintWriter(const PrintWriter &);
			        
				PrintWriter(OutputStream outputStream_0,jboolean boolean_1);
				PrintWriter(jstring string_0);
				PrintWriter(File file_0);
				PrintWriter(File file_0,jstring string_1);
				PrintWriter(jstring string_0,jstring string_1);
				PrintWriter(Writer writer_0);
				PrintWriter(OutputStream outputStream_0);
				PrintWriter(Writer writer_0,jboolean boolean_1);
				virtual ~PrintWriter();
				void println(jdouble double_0);
				void println(jcharArray charArray_0);
				void println(jfloat float_0);
				void println(jstring string_0);
				void println(jint int_0);
				void println(jchar char_0);
				void println(jboolean boolean_0);
				void println();
				void println(jlong long_0);
				PrintWriter append(lang::CharSequence charSequence_0,jint int_1,jint int_2);
				PrintWriter append(lang::CharSequence charSequence_0);
				PrintWriter append(jchar char_0);
				void write(jcharArray charArray_0,jint int_1,jint int_2);
				void write(jstring string_0,jint int_1,jint int_2);
				void write(jcharArray charArray_0);
				void write(jint int_0);
				void write(jstring string_0);
				void print(jfloat float_0);
				void print(jlong long_0);
				void print(jint int_0);
				void print(jchar char_0);
				void print(jboolean boolean_0);
				void print(jstring string_0);
				void print(jcharArray charArray_0);
				void print(jdouble double_0);
				void flush();
				void close();
				jboolean checkError();
			}; // end class PrintWriter
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace awt{
			
			class GraphicsConfiguration : public lang::Object {
				public:
			            GraphicsConfiguration(jobject _jthis, bool copy);
			            GraphicsConfiguration(const GraphicsConfiguration &);
			        
				virtual ~GraphicsConfiguration();
				image::BufferedImage createCompatibleImage(jint int_0,jint int_1);
				image::BufferedImage createCompatibleImage(jint int_0,jint int_1,jint int_2);
				image::VolatileImage createCompatibleVolatileImage(jint int_0,jint int_1);
				image::VolatileImage createCompatibleVolatileImage(jint int_0,jint int_1,ImageCapabilities imageCapabilities_2);
				image::VolatileImage createCompatibleVolatileImage(jint int_0,jint int_1,jint int_2);
				image::VolatileImage createCompatibleVolatileImage(jint int_0,jint int_1,ImageCapabilities imageCapabilities_2,jint int_3);
				BufferCapabilities getBufferCapabilities();
				ImageCapabilities getImageCapabilities();
				jboolean isTranslucencyCapable();
			}; // end class GraphicsConfiguration
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			namespace peer{
				
				class ComponentPeer : public lang::Object {
					public:
				            ComponentPeer(jobject _jthis, bool copy);
				            ComponentPeer(const ComponentPeer &);
				        
					ComponentPeer();
					virtual ~ComponentPeer();
				}; // end class ComponentPeer
			} // end namespace java
		} // end namespace awt
	} // end namespace peer

	namespace java{
		namespace awt{
			namespace dnd{
				
				class DropTarget : public lang::Object {
					public:
				            DropTarget(jobject _jthis, bool copy);
				            DropTarget(const DropTarget &);
				        
					DropTarget();
					virtual ~DropTarget();
					jboolean isActive();
					Component getComponent();
					void setComponent(Component component_0);
					void setDefaultActions(jint int_0);
					jint getDefaultActions();
					void setActive(jboolean boolean_0);
					void addNotify(peer::ComponentPeer componentPeer_0);
					void removeNotify(peer::ComponentPeer componentPeer_0);
				}; // end class DropTarget
			} // end namespace java
		} // end namespace awt
	} // end namespace dnd

	namespace java{
		namespace awt{
			namespace image{
				
				class ColorModel : public lang::Object {
					public:
				            ColorModel(jobject _jthis, bool copy);
				            ColorModel(const ColorModel &);
				        
					ColorModel(jint int_0);
					virtual ~ColorModel();
					virtual jboolean isAlphaPremultiplied();
					jint getRGB(jint int_0);
					jint getTransparency();
					jint getNumComponents();
					jintArray getComponents(jint int_0,jintArray intArray_1,jint int_2);
					static ColorModel getRGBdefault();
					virtual jboolean hasAlpha();
					virtual jint getTransferType();
					jint getPixelSize();
					jintArray getComponentSize();
					jint getComponentSize(jint int_0);
					jint getNumColorComponents();
					jintArray getUnnormalizedComponents(jfloatArray floatArray_0,jint int_1,jintArray intArray_2,jint int_3);
					jfloatArray getNormalizedComponents(jintArray intArray_0,jint int_1,jfloatArray floatArray_2,jint int_3);
					jint getDataElement(jfloatArray floatArray_0,jint int_1);
					jint getDataElement(jintArray intArray_0,jint int_1);
					void finalize();
					jstring toString();
					jint hashCode();
				}; // end class ColorModel
			} // end namespace java
		} // end namespace awt
	} // end namespace image

	namespace java{
		namespace awt{
			namespace Component{
				
				class BaselineResizeBehavior : public lang::Enum {
					public:
				            BaselineResizeBehavior(jobject _jthis, bool copy);
				            BaselineResizeBehavior(const BaselineResizeBehavior &);
				        
					virtual ~BaselineResizeBehavior();
					static jobjectArray values();
					static BaselineResizeBehavior valueOf(jstring string_0);
				}; // end class BaselineResizeBehavior
			} // end namespace java
		} // end namespace awt
	} // end namespace Component

	namespace java{
		namespace awt{
			
			class FontMetrics : public lang::Object {
				public:
			            FontMetrics(jobject _jthis, bool copy);
			            FontMetrics(const FontMetrics &);
			        
				virtual ~FontMetrics();
				jint charWidth(jint int_0);
				jint charWidth(jchar char_0);
				jint getHeight();
				jboolean hasUniformLineMetrics();
				geom::Rectangle2D getStringBounds(text::CharacterIterator characterIterator_0,jint int_1,jint int_2,Graphics graphics_3);
				geom::Rectangle2D getStringBounds(jstring string_0,Graphics graphics_1);
				geom::Rectangle2D getStringBounds(jcharArray charArray_0,jint int_1,jint int_2,Graphics graphics_3);
				geom::Rectangle2D getStringBounds(jstring string_0,jint int_1,jint int_2,Graphics graphics_3);
				geom::Rectangle2D getMaxCharBounds(Graphics graphics_0);
				jint getAscent();
				jint getDescent();
				jint getLeading();
				jint getMaxAscent();
				jint getMaxDescent();
				jint getMaxDecent();
				jint getMaxAdvance();
				jint stringWidth(jstring string_0);
				jint charsWidth(jcharArray charArray_0,jint int_1,jint int_2);
				jint bytesWidth(jbyteArray byteArray_0,jint int_1,jint int_2);
				jintArray getWidths();
				Font getFont();
				jstring toString();
			}; // end class FontMetrics
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			namespace image{
				
				class ImageProducer : public lang::Object {
					public:
				            ImageProducer(jobject _jthis, bool copy);
				            ImageProducer(const ImageProducer &);
				        
					ImageProducer();
					virtual ~ImageProducer();
				}; // end class ImageProducer
			} // end namespace java
		} // end namespace awt
	} // end namespace image

	namespace java{
		namespace awt{
			namespace image{
				
				class VolatileImage : public Image {
					public:
				            VolatileImage(jobject _jthis, bool copy);
				            VolatileImage(const VolatileImage &);
				        
					VolatileImage();
					virtual ~VolatileImage();
					jint getTransparency();
					ImageProducer getSource();
					Graphics getGraphics();
				}; // end class VolatileImage
			} // end namespace java
		} // end namespace awt
	} // end namespace image

	namespace java{
		namespace awt{
			
			class ImageCapabilities : public lang::Object {
				public:
			            ImageCapabilities(jobject _jthis, bool copy);
			            ImageCapabilities(const ImageCapabilities &);
			        
				ImageCapabilities(jboolean boolean_0);
				virtual ~ImageCapabilities();
				jboolean isAccelerated();
				jboolean isTrueVolatile();
			}; // end class ImageCapabilities
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			namespace image{
				
				class ImageObserver : public lang::Object {
					public:
				            ImageObserver(jobject _jthis, bool copy);
				            ImageObserver(const ImageObserver &);
				        
					ImageObserver();
					virtual ~ImageObserver();
				}; // end class ImageObserver
			} // end namespace java
		} // end namespace awt
	} // end namespace image

	namespace java{
		namespace awt{
			namespace event{
				
				class ComponentListener : public lang::Object {
					public:
				            ComponentListener(jobject _jthis, bool copy);
				            ComponentListener(const ComponentListener &);
				        
					ComponentListener();
					virtual ~ComponentListener();
				}; // end class ComponentListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class FocusListener : public lang::Object {
					public:
				            FocusListener(jobject _jthis, bool copy);
				            FocusListener(const FocusListener &);
				        
					FocusListener();
					virtual ~FocusListener();
				}; // end class FocusListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class HierarchyListener : public lang::Object {
					public:
				            HierarchyListener(jobject _jthis, bool copy);
				            HierarchyListener(const HierarchyListener &);
				        
					HierarchyListener();
					virtual ~HierarchyListener();
				}; // end class HierarchyListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class HierarchyBoundsListener : public lang::Object {
					public:
				            HierarchyBoundsListener(jobject _jthis, bool copy);
				            HierarchyBoundsListener(const HierarchyBoundsListener &);
				        
					HierarchyBoundsListener();
					virtual ~HierarchyBoundsListener();
				}; // end class HierarchyBoundsListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class KeyListener : public lang::Object {
					public:
				            KeyListener(jobject _jthis, bool copy);
				            KeyListener(const KeyListener &);
				        
					KeyListener();
					virtual ~KeyListener();
				}; // end class KeyListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class MouseListener : public lang::Object {
					public:
				            MouseListener(jobject _jthis, bool copy);
				            MouseListener(const MouseListener &);
				        
					MouseListener();
					virtual ~MouseListener();
				}; // end class MouseListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class MouseMotionListener : public lang::Object {
					public:
				            MouseMotionListener(jobject _jthis, bool copy);
				            MouseMotionListener(const MouseMotionListener &);
				        
					MouseMotionListener();
					virtual ~MouseMotionListener();
				}; // end class MouseMotionListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class MouseWheelListener : public lang::Object {
					public:
				            MouseWheelListener(jobject _jthis, bool copy);
				            MouseWheelListener(const MouseWheelListener &);
				        
					MouseWheelListener();
					virtual ~MouseWheelListener();
				}; // end class MouseWheelListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class InputMethodListener : public lang::Object {
					public:
				            InputMethodListener(jobject _jthis, bool copy);
				            InputMethodListener(const InputMethodListener &);
				        
					InputMethodListener();
					virtual ~InputMethodListener();
				}; // end class InputMethodListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace im{
				
				class InputMethodRequests : public lang::Object {
					public:
				            InputMethodRequests(jobject _jthis, bool copy);
				            InputMethodRequests(const InputMethodRequests &);
				        
					InputMethodRequests();
					virtual ~InputMethodRequests();
				}; // end class InputMethodRequests
			} // end namespace java
		} // end namespace awt
	} // end namespace im

	namespace java{
		namespace awt{
			
			class PopupMenu : public Menu {
				public:
			            PopupMenu(jobject _jthis, bool copy);
			            PopupMenu(const PopupMenu &);
			        
				PopupMenu();
				PopupMenu(jstring string_0);
				virtual ~PopupMenu();
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void show(Component component_0,jint int_1,jint int_2);
			}; // end class PopupMenu
		} // end namespace java
	} // end namespace awt

	namespace java{
		namespace awt{
			namespace event{
				
				class ActionEvent : public AWTEvent {
					public:
				            ActionEvent(jobject _jthis, bool copy);
				            ActionEvent(const ActionEvent &);
				        
					virtual ~ActionEvent();
					jstring getActionCommand();
					jlong getWhen();
					jint getModifiers();
					jstring paramString();
				}; // end class ActionEvent
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace Dialog{
				
				class ModalityType : public lang::Enum {
					public:
				            ModalityType(jobject _jthis, bool copy);
				            ModalityType(const ModalityType &);
				        
					virtual ~ModalityType();
					static jobjectArray values();
					static ModalityType valueOf(jstring string_0);
				}; // end class ModalityType
			} // end namespace java
		} // end namespace awt
	} // end namespace Dialog

	namespace javax{
		namespace swing{
			namespace plaf{
				
				class PanelUI : public ComponentUI {
					public:
				            PanelUI(jobject _jthis, bool copy);
				            PanelUI(const PanelUI &);
				        
					PanelUI();
					virtual ~PanelUI();
				}; // end class PanelUI
			} // end namespace javax
		} // end namespace swing
	} // end namespace plaf

	namespace javax{
		namespace swing{
			namespace border{
				
				class Border : public java::lang::Object {
					public:
				            Border(jobject _jthis, bool copy);
				            Border(const Border &);
				        
					Border();
					virtual ~Border();
				}; // end class Border
			} // end namespace javax
		} // end namespace swing
	} // end namespace border

	namespace javax{
		namespace swing{
			
			class JPopupMenu : public JComponent {
				public:
			            JPopupMenu(jobject _jthis, bool copy);
			            JPopupMenu(const JPopupMenu &);
			        
				JPopupMenu(jstring string_0);
				JPopupMenu();
				virtual ~JPopupMenu();
				void addSeparator();
				void menuSelectionChanged(jboolean boolean_0);
				void setInvoker(java::awt::Component component_0);
				java::awt::Component getInvoker();
				java::awt::Component getComponentAtIndex(jint int_0);
				jint getComponentIndex(java::awt::Component component_0);
				java::awt::Insets getMargin();
				jboolean isBorderPainted();
				void setBorderPainted(jboolean boolean_0);
				jstring getLabel();
				void setLabel(jstring string_0);
				jboolean isVisible();
				java::awt::Component getComponent();
				jboolean isPopupTrigger(java::awt::event::MouseEvent mouseEvent_0);
				void updateUI();
				jstring getUIClassID();
				accessibility::AccessibleContext getAccessibleContext();
				void setLocation(jint int_0,jint int_1);
				void show(java::awt::Component component_0,jint int_1,jint int_2);
				void setSelected(java::awt::Component component_0);
				void pack();
				void setVisible(jboolean boolean_0);
				static void setDefaultLightWeightPopupEnabled(jboolean boolean_0);
				static jboolean getDefaultLightWeightPopupEnabled();
				void setLightWeightPopupEnabled(jboolean boolean_0);
				jboolean isLightWeightPopupEnabled();
				void setPopupSize(jint int_0,jint int_1);
				void setPopupSize(java::awt::Dimension dimension_0);
				void remove(jint int_0);
				void insert(java::awt::Component component_0,jint int_1);
			}; // end class JPopupMenu
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			
			class InputVerifier : public java::lang::Object {
				public:
			            InputVerifier(jobject _jthis, bool copy);
			            InputVerifier(const InputVerifier &);
			        
				InputVerifier();
				virtual ~InputVerifier();
				jboolean shouldYieldFocus(JComponent jComponent_0);
			}; // end class InputVerifier
		} // end namespace javax
	} // end namespace swing

	namespace java{
		namespace awt{
			namespace event{
				
				class ActionListener : public lang::Object {
					public:
				            ActionListener(jobject _jthis, bool copy);
				            ActionListener(const ActionListener &);
				        
					ActionListener();
					virtual ~ActionListener();
				}; // end class ActionListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace javax{
		namespace swing{
			
			class KeyStroke : public java::awt::AWTKeyStroke {
				public:
			            KeyStroke(jobject _jthis, bool copy);
			            KeyStroke(const KeyStroke &);
			        
				virtual ~KeyStroke();
				static KeyStroke getKeyStroke(jchar char_0,jboolean boolean_1);
				static KeyStroke getKeyStroke(jstring string_0);
				static KeyStroke getKeyStroke(jint int_0,jint int_1,jboolean boolean_2);
				static KeyStroke getKeyStroke(jint int_0,jint int_1);
				static KeyStroke getKeyStroke(jchar char_0);
				static KeyStroke getKeyStrokeForEvent(java::awt::event::KeyEvent keyEvent_0);
			}; // end class KeyStroke
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			
			class InputMap : public java::lang::Object {
				public:
			            InputMap(jobject _jthis, bool copy);
			            InputMap(const InputMap &);
			        
				InputMap();
				virtual ~InputMap();
				jobjectArray allKeys();
				void remove(KeyStroke keyStroke_0);
				void clear();
				jint size();
				InputMap getParent();
				jobjectArray keys();
				void setParent(InputMap inputMap_0);
			}; // end class InputMap
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			
			class ActionMap : public java::lang::Object {
				public:
			            ActionMap(jobject _jthis, bool copy);
			            ActionMap(const ActionMap &);
			        
				ActionMap();
				virtual ~ActionMap();
				void clear();
				jint size();
				ActionMap getParent();
				void setParent(ActionMap actionMap_0);
			}; // end class ActionMap
		} // end namespace javax
	} // end namespace swing

	namespace java{
		namespace awt{
			namespace event{
				
				class MouseEvent : public InputEvent {
					public:
				            MouseEvent(jobject _jthis, bool copy);
				            MouseEvent(const MouseEvent &);
				        
					MouseEvent(Component component_0,jint int_1,jlong long_2,jint int_3,jint int_4,jint int_5,jint int_6,jint int_7,jint int_8,jboolean boolean_9,jint int_10);
					MouseEvent(Component component_0,jint int_1,jlong long_2,jint int_3,jint int_4,jint int_5,jint int_6,jboolean boolean_7);
					MouseEvent(Component component_0,jint int_1,jlong long_2,jint int_3,jint int_4,jint int_5,jint int_6,jboolean boolean_7,jint int_8);
					virtual ~MouseEvent();
					jint getModifiersEx();
					void translatePoint(jint int_0,jint int_1);
					jint getButton();
					static jstring getMouseModifiersText(jint int_0);
					Point getPoint();
					jint getX();
					jint getY();
					Point getLocationOnScreen();
					jint getXOnScreen();
					jint getYOnScreen();
					jint getClickCount();
					jboolean isPopupTrigger();
					jstring paramString();
				}; // end class MouseEvent
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace javax{
		namespace swing{
			
			class JToolTip : public JComponent {
				public:
			            JToolTip(jobject _jthis, bool copy);
			            JToolTip(const JToolTip &);
			        
				JToolTip();
				virtual ~JToolTip();
				JComponent getComponent();
				void setComponent(JComponent jComponent_0);
				void updateUI();
				jstring getUIClassID();
				accessibility::AccessibleContext getAccessibleContext();
				void setTipText(jstring string_0);
				jstring getTipText();
			}; // end class JToolTip
		} // end namespace javax
	} // end namespace swing

	namespace java{
		namespace beans{
			
			class VetoableChangeListener : public lang::Object {
				public:
			            VetoableChangeListener(jobject _jthis, bool copy);
			            VetoableChangeListener(const VetoableChangeListener &);
			        
				VetoableChangeListener();
				virtual ~VetoableChangeListener();
			}; // end class VetoableChangeListener
		} // end namespace java
	} // end namespace beans

	namespace javax{
		namespace swing{
			namespace event{
				
				class AncestorListener : public java::lang::Object {
					public:
				            AncestorListener(jobject _jthis, bool copy);
				            AncestorListener(const AncestorListener &);
				        
					AncestorListener();
					virtual ~AncestorListener();
				}; // end class AncestorListener
			} // end namespace javax
		} // end namespace swing
	} // end namespace event

	namespace java{
		namespace awt{
			namespace image{
				
				class BufferedImage : public Image {
					public:
				            BufferedImage(jobject _jthis, bool copy);
				            BufferedImage(const BufferedImage &);
				        
					BufferedImage(jint int_0,jint int_1,jint int_2);
					virtual ~BufferedImage();
					jint getMinX();
					jint getMinY();
					jboolean isAlphaPremultiplied();
					jint getRGB(jint int_0,jint int_1);
					jintArray getRGB(jint int_0,jint int_1,jint int_2,jint int_3,jintArray intArray_4,jint int_5,jint int_6);
					jint getTransparency();
					jint getWidth(ImageObserver imageObserver_0);
					jint getWidth();
					jint getHeight(ImageObserver imageObserver_0);
					jint getHeight();
					ColorModel getColorModel();
					ImageProducer getSource();
					void coerceData(jboolean boolean_0);
					Graphics getGraphics();
					void setRGB(jint int_0,jint int_1,jint int_2,jint int_3,jintArray intArray_4,jint int_5,jint int_6);
					void setRGB(jint int_0,jint int_1,jint int_2);
					BufferedImage getSubimage(jint int_0,jint int_1,jint int_2,jint int_3);
					util::Vector getSources();
					jobjectArray getPropertyNames();
					jint getNumXTiles();
					jint getNumYTiles();
					jint getMinTileX();
					jint getMinTileY();
					jint getTileWidth();
					jint getTileHeight();
					jint getTileGridXOffset();
					jint getTileGridYOffset();
					jboolean isTileWritable(jint int_0,jint int_1);
					jobjectArray getWritableTileIndices();
					jboolean hasTileWriters();
					void releaseWritableTile(jint int_0,jint int_1);
					jstring toString();
					jint getType();
				}; // end class BufferedImage
			} // end namespace java
		} // end namespace awt
	} // end namespace image

	namespace java{
		namespace awt{
			
			class Scrollbar : public Component {
				public:
			            Scrollbar(jobject _jthis, bool copy);
			            Scrollbar(const Scrollbar &);
			        
				Scrollbar(jint int_0);
				Scrollbar();
				Scrollbar(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4);
				virtual ~Scrollbar();
				void setValueIsAdjusting(jboolean boolean_0);
				jboolean getValueIsAdjusting();
				jint getOrientation();
				javax::accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				jint getMaximum();
				jint getMinimum();
				void setMinimum(jint int_0);
				void setMaximum(jint int_0);
				jint getVisibleAmount();
				jint getVisible();
				void setVisibleAmount(jint int_0);
				void setLineIncrement(jint int_0);
				jint getUnitIncrement();
				jint getLineIncrement();
				void setPageIncrement(jint int_0);
				jint getBlockIncrement();
				jint getPageIncrement();
				void setOrientation(jint int_0);
				void setValues(jint int_0,jint int_1,jint int_2,jint int_3);
				void setUnitIncrement(jint int_0);
				void setBlockIncrement(jint int_0);
				jint getValue();
				void setValue(jint int_0);
			}; // end class Scrollbar
		} // end namespace java
	} // end namespace awt

	namespace javax{
		namespace swing{
			
			class JScrollBar : public JComponent {
				public:
			            JScrollBar(jobject _jthis, bool copy);
			            JScrollBar(const JScrollBar &);
			        
				JScrollBar();
				JScrollBar(jint int_0);
				JScrollBar(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4);
				virtual ~JScrollBar();
				void setValueIsAdjusting(jboolean boolean_0);
				jboolean getValueIsAdjusting();
				java::awt::Dimension getMinimumSize();
				jint getOrientation();
				java::awt::Dimension getMaximumSize();
				void setEnabled(jboolean boolean_0);
				void updateUI();
				jstring getUIClassID();
				accessibility::AccessibleContext getAccessibleContext();
				jint getMaximum();
				jint getMinimum();
				void setMinimum(jint int_0);
				void setMaximum(jint int_0);
				jint getVisibleAmount();
				void setVisibleAmount(jint int_0);
				jint getUnitIncrement(jint int_0);
				jint getUnitIncrement();
				jint getBlockIncrement();
				jint getBlockIncrement(jint int_0);
				void setOrientation(jint int_0);
				void setValues(jint int_0,jint int_1,jint int_2,jint int_3);
				void setUnitIncrement(jint int_0);
				void setBlockIncrement(jint int_0);
				jint getValue();
				void setValue(jint int_0);
			}; // end class JScrollBar
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			
			class SwingWorker : public java::lang::Object {
				public:
			            SwingWorker(jobject _jthis, bool copy);
			            SwingWorker(const SwingWorker &);
			        
				SwingWorker();
				virtual ~SwingWorker();
				virtual jboolean cancel(jboolean boolean_0);
				virtual void removePropertyChangeListener(java::beans::PropertyChangeListener propertyChangeListener_0);
				virtual void addPropertyChangeListener(java::beans::PropertyChangeListener propertyChangeListener_0);
				virtual jint getProgress();
				virtual jboolean isCancelled();
				virtual jboolean isDone();
				virtual void run();
				virtual void execute();
			}; // end class SwingWorker
		} // end namespace javax
	} // end namespace swing

	namespace java{
		namespace lang{
			
			class Runnable : public Object {
				public:
			            Runnable(jobject _jthis, bool copy);
			            Runnable(const Runnable &);
			        
				Runnable();
				virtual ~Runnable();
			}; // end class Runnable
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace util{
			
			class Hashtable : public Dictionary {
				public:
			            Hashtable(jobject _jthis, bool copy);
			            Hashtable(const Hashtable &);
			        
				Hashtable(Map map_0);
				Hashtable();
				Hashtable(jint int_0);
				Hashtable(jint int_0,jfloat float_1);
				virtual ~Hashtable();
				jstring toString();
				Collection values();
				jint hashCode();
				void clear();
				jboolean isEmpty();
				jint size();
				Set entrySet();
				void putAll(Map map_0);
				Enumeration elements();
				Enumeration keys();
				Set keySet();
			}; // end class Hashtable
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace net{
			
			class URL : public lang::Object {
				public:
			            URL(jobject _jthis, bool copy);
			            URL(const URL &);
			        
				URL(URL uRL_0,jstring string_1);
				URL(jstring string_0);
				URL(jstring string_0,jstring string_1,jint int_2,jstring string_3);
				URL(jstring string_0,jstring string_1,jstring string_2);
				virtual ~URL();
				jstring toString();
				jint hashCode();
				virtual io::InputStream openStream();
				jstring getPath();
				URI toURI();
				jstring getAuthority();
				jstring getQuery();
				URLConnection openConnection();
				jstring getProtocol();
				jstring getFile();
				jstring getHost();
				jstring getUserInfo();
				jint getPort();
				jint getDefaultPort();
				jstring getRef();
				jboolean sameFile(URL uRL_0);
				jstring toExternalForm();
			}; // end class URL
		} // end namespace java
	} // end namespace net

	namespace java{
		namespace applet{
			
			class AppletStub : public lang::Object {
				public:
			            AppletStub(jobject _jthis, bool copy);
			            AppletStub(const AppletStub &);
			        
				AppletStub();
				virtual ~AppletStub();
			}; // end class AppletStub
		} // end namespace java
	} // end namespace applet

	namespace java{
		namespace applet{
			
			class AppletContext : public lang::Object {
				public:
			            AppletContext(jobject _jthis, bool copy);
			            AppletContext(const AppletContext &);
			        
				AppletContext();
				virtual ~AppletContext();
			}; // end class AppletContext
		} // end namespace java
	} // end namespace applet

	namespace java{
		namespace applet{
			
			class AudioClip : public lang::Object {
				public:
			            AudioClip(jobject _jthis, bool copy);
			            AudioClip(const AudioClip &);
			        
				AudioClip();
				virtual ~AudioClip();
			}; // end class AudioClip
		} // end namespace java
	} // end namespace applet

	namespace java{
		namespace awt{
			namespace event{
				
				class TextListener : public lang::Object {
					public:
				            TextListener(jobject _jthis, bool copy);
				            TextListener(const TextListener &);
				        
					TextListener();
					virtual ~TextListener();
				}; // end class TextListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace lang{
			
			class Long : public Number {
				public:
			            Long(jobject _jthis, bool copy);
			            Long(const Long &);
			        
				Long(jlong long_0);
				Long(jstring string_0);
				virtual ~Long();
				static jint numberOfLeadingZeros(jlong long_0);
				static jint numberOfTrailingZeros(jlong long_0);
				static jint bitCount(jlong long_0);
				jstring toString();
				static jstring toString(jlong long_0,jint int_1);
				static jstring toString(jlong long_0);
				jint hashCode();
				static jint hashCode(jlong long_0);
				static jlong min(jlong long_0,jlong long_1);
				static jlong max(jlong long_0,jlong long_1);
				static jlong reverseBytes(jlong long_0);
				jint compareTo(Long long_0);
				static Long getLong(jstring string_0,Long long_1);
				static Long getLong(jstring string_0,jlong long_1);
				static Long getLong(jstring string_0);
				jbyte byteValue();
				jshort shortValue();
				jint intValue();
				jlong longValue();
				jfloat floatValue();
				jdouble doubleValue();
				static Long valueOf(jstring string_0,jint int_1);
				static Long valueOf(jlong long_0);
				static Long valueOf(jstring string_0);
				static jstring toHexString(jlong long_0);
				static Long decode(jstring string_0);
				static jint compare(jlong long_0,jlong long_1);
				static jlong reverse(jlong long_0);
				static jlong sum(jlong long_0,jlong long_1);
				static jstring toUnsignedString(jlong long_0,jint int_1);
				static jstring toUnsignedString(jlong long_0);
				static jstring toOctalString(jlong long_0);
				static jstring toBinaryString(jlong long_0);
				static jint compareUnsigned(jlong long_0,jlong long_1);
				static jlong divideUnsigned(jlong long_0,jlong long_1);
				static jlong remainderUnsigned(jlong long_0,jlong long_1);
				static jlong highestOneBit(jlong long_0);
				static jlong lowestOneBit(jlong long_0);
				static jlong rotateLeft(jlong long_0,jint int_1);
				static jlong rotateRight(jlong long_0,jint int_1);
				static jint signum(jlong long_0);
				static jlong parseLong(jstring string_0,jint int_1);
				static jlong parseLong(jstring string_0);
				static jlong parseUnsignedLong(jstring string_0,jint int_1);
				static jlong parseUnsignedLong(jstring string_0);
			}; // end class Long
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace util{
			
			class Vector : public AbstractList {
				public:
			            Vector(jobject _jthis, bool copy);
			            Vector(const Vector &);
			        
				Vector(Collection collection_0);
				Vector();
				Vector(jint int_0);
				Vector(jint int_0,jint int_1);
				virtual ~Vector();
				jstring toString();
				jint hashCode();
				void clear();
				jboolean isEmpty();
				void replaceAll(function::UnaryOperator unaryOperator_0);
				jint size();
				List subList(jint int_0,jint int_1);
				Iterator iterator();
				jboolean addAll(Collection collection_0);
				jboolean addAll(jint int_0,Collection collection_1);
				Enumeration elements();
				jint capacity();
				void ensureCapacity(jint int_0);
				void trimToSize();
				void setSize(jint int_0);
				void removeElementAt(jint int_0);
				void removeAllElements();
				jboolean containsAll(Collection collection_0);
				jboolean removeAll(Collection collection_0);
				jboolean retainAll(Collection collection_0);
				ListIterator listIterator();
				ListIterator listIterator(jint int_0);
				jboolean removeIf(function::Predicate predicate_0);
				void sort(Comparator comparator_0);
			}; // end class Vector
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace util{
			
			class Collection : public lang::Object {
				public:
			            Collection(jobject _jthis, bool copy);
			            Collection(const Collection &);
			        
				Collection();
				virtual ~Collection();
				stream::Stream stream();
				jboolean removeIf(function::Predicate predicate_0);
				stream::Stream parallelStream();
			}; // end class Collection
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace io{
			
			class ObjectInput : public lang::Object {
				public:
			            ObjectInput(jobject _jthis, bool copy);
			            ObjectInput(const ObjectInput &);
			        
				ObjectInput();
				virtual ~ObjectInput();
			}; // end class ObjectInput
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace io{
			
			class ObjectOutput : public lang::Object {
				public:
			            ObjectOutput(jobject _jthis, bool copy);
			            ObjectOutput(const ObjectOutput &);
			        
				ObjectOutput();
				virtual ~ObjectOutput();
			}; // end class ObjectOutput
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace util{
			
			class Comparator : public lang::Object {
				public:
			            Comparator(jobject _jthis, bool copy);
			            Comparator(const Comparator &);
			        
				Comparator();
				virtual ~Comparator();
				Comparator reversed();
				Comparator thenComparing(function::Function function_0);
				Comparator thenComparing(function::Function function_0,Comparator comparator_1);
				Comparator thenComparing(Comparator comparator_0);
				Comparator thenComparingDouble(function::ToDoubleFunction toDoubleFunction_0);
				static Comparator reverseOrder();
				static Comparator naturalOrder();
				static Comparator nullsFirst(Comparator comparator_0);
				static Comparator nullsLast(Comparator comparator_0);
				static Comparator comparing(function::Function function_0,Comparator comparator_1);
				static Comparator comparing(function::Function function_0);
				static Comparator comparingDouble(function::ToDoubleFunction toDoubleFunction_0);
			}; // end class Comparator
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace lang{
			
			class Iterable : public Object {
				public:
			            Iterable(jobject _jthis, bool copy);
			            Iterable(const Iterable &);
			        
				Iterable();
				virtual ~Iterable();
			}; // end class Iterable
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace util{
			
			class Iterator : public lang::Object {
				public:
			            Iterator(jobject _jthis, bool copy);
			            Iterator(const Iterator &);
			        
				Iterator();
				virtual ~Iterator();
				void remove();
			}; // end class Iterator
		} // end namespace java
	} // end namespace util

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ml{
						namespace clustering{
							namespace KMeansPlusPlusClusterer{
								
								class EmptyClusterStrategy : public java::lang::Enum {
									public:
								            EmptyClusterStrategy(jobject _jthis, bool copy);
								            EmptyClusterStrategy(const EmptyClusterStrategy &);
								        
									virtual ~EmptyClusterStrategy();
									static jobjectArray values();
									static EmptyClusterStrategy valueOf(jstring string_0);
								}; // end class EmptyClusterStrategy
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ml
		} // end namespace clustering
	} // end namespace KMeansPlusPlusClusterer

	namespace java{
		namespace util{
			namespace stream{
				
				class IntStream : public lang::Object {
					public:
				            IntStream(jobject _jthis, bool copy);
				            IntStream(const IntStream &);
				        
					IntStream();
					virtual ~IntStream();
					static IntStream rangeClosed(jint int_0,jint int_1);
					static IntStream concat(IntStream intStream_0,IntStream intStream_1);
					static IntStream of(jintArray intArray_0);
					static IntStream of(jint int_0);
					static IntStream empty();
					static IntStream range(jint int_0,jint int_1);
				}; // end class IntStream
			} // end namespace java
		} // end namespace util
	} // end namespace stream

	namespace java{
		namespace util{
			namespace stream{
				
				class LongStream : public lang::Object {
					public:
				            LongStream(jobject _jthis, bool copy);
				            LongStream(const LongStream &);
				        
					LongStream();
					virtual ~LongStream();
					static LongStream rangeClosed(jlong long_0,jlong long_1);
					static LongStream concat(LongStream longStream_0,LongStream longStream_1);
					static LongStream of(jlongArray longArray_0);
					static LongStream of(jlong long_0);
					static LongStream empty();
					static LongStream range(jlong long_0,jlong long_1);
				}; // end class LongStream
			} // end namespace java
		} // end namespace util
	} // end namespace stream

	namespace java{
		namespace util{
			namespace stream{
				
				class DoubleStream : public lang::Object {
					public:
				            DoubleStream(jobject _jthis, bool copy);
				            DoubleStream(const DoubleStream &);
				        
					DoubleStream();
					virtual ~DoubleStream();
					static DoubleStream concat(DoubleStream doubleStream_0,DoubleStream doubleStream_1);
					static DoubleStream of(jdouble double_0);
					static DoubleStream of(jdoubleArray doubleArray_0);
					static DoubleStream empty();
				}; // end class DoubleStream
			} // end namespace java
		} // end namespace util
	} // end namespace stream

	namespace java{
		namespace lang{
			
			class StringBuffer : public AbstractStringBuilder {
				public:
			            StringBuffer(jobject _jthis, bool copy);
			            StringBuffer(const StringBuffer &);
			        
				StringBuffer(CharSequence charSequence_0);
				StringBuffer(jstring string_0);
				StringBuffer(jint int_0);
				StringBuffer();
				virtual ~StringBuffer();
				jstring toString();
				StringBuffer append(jfloat float_0);
				StringBuffer append(jdouble double_0);
				StringBuffer append(jboolean boolean_0);
				StringBuffer append(jchar char_0);
				StringBuffer append(jint int_0);
				StringBuffer append(jlong long_0);
				StringBuffer append(jstring string_0);
				StringBuffer append(CharSequence charSequence_0);
				StringBuffer append(CharSequence charSequence_0,jint int_1,jint int_2);
				StringBuffer append(jcharArray charArray_0);
				StringBuffer append(StringBuffer stringBuffer_0);
				StringBuffer append(jcharArray charArray_0,jint int_1,jint int_2);
				jint indexOf(jstring string_0);
				jint indexOf(jstring string_0,jint int_1);
				jint length();
				jchar charAt(jint int_0);
				jint codePointAt(jint int_0);
				jint codePointBefore(jint int_0);
				jint codePointCount(jint int_0,jint int_1);
				jint offsetByCodePoints(jint int_0,jint int_1);
				void getChars(jint int_0,jint int_1,jcharArray charArray_2,jint int_3);
				jint lastIndexOf(jstring string_0,jint int_1);
				jint lastIndexOf(jstring string_0);
				jstring substring(jint int_0);
				jstring substring(jint int_0,jint int_1);
				CharSequence subSequence(jint int_0,jint int_1);
				StringBuffer replace(jint int_0,jint int_1,jstring string_2);
				StringBuffer delete(jint int_0,jint int_1);
				StringBuffer insert(jint int_0,CharSequence charSequence_1);
				StringBuffer insert(jint int_0,CharSequence charSequence_1,jint int_2,jint int_3);
				StringBuffer insert(jint int_0,jboolean boolean_1);
				StringBuffer insert(jint int_0,jchar char_1);
				StringBuffer insert(jint int_0,jint int_1);
				StringBuffer insert(jint int_0,jfloat float_1);
				StringBuffer insert(jint int_0,jdouble double_1);
				StringBuffer insert(jint int_0,jcharArray charArray_1,jint int_2,jint int_3);
				StringBuffer insert(jint int_0,jstring string_1);
				StringBuffer insert(jint int_0,jcharArray charArray_1);
				StringBuffer insert(jint int_0,jlong long_1);
				jint capacity();
				void ensureCapacity(jint int_0);
				void trimToSize();
				void setLength(jint int_0);
				void setCharAt(jint int_0,jchar char_1);
				StringBuffer appendCodePoint(jint int_0);
				StringBuffer deleteCharAt(jint int_0);
				StringBuffer reverse();
			}; // end class StringBuffer
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace text{
			
			class FieldPosition : public lang::Object {
				public:
			            FieldPosition(jobject _jthis, bool copy);
			            FieldPosition(const FieldPosition &);
			        
				FieldPosition(jint int_0);
				virtual ~FieldPosition();
				jint getEndIndex();
				jint getBeginIndex();
				void setBeginIndex(jint int_0);
				void setEndIndex(jint int_0);
				jstring toString();
				jint hashCode();
				jint getField();
			}; // end class FieldPosition
		} // end namespace java
	} // end namespace text

	namespace java{
		namespace text{
			
			class ParsePosition : public lang::Object {
				public:
			            ParsePosition(jobject _jthis, bool copy);
			            ParsePosition(const ParsePosition &);
			        
				ParsePosition(jint int_0);
				virtual ~ParsePosition();
				void setIndex(jint int_0);
				jint getIndex();
				void setErrorIndex(jint int_0);
				jint getErrorIndex();
				jstring toString();
				jint hashCode();
			}; // end class ParsePosition
		} // end namespace java
	} // end namespace text

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace MultidimensionalCounter{
							
							class Iterator : public java::lang::Object {
								public:
							            Iterator(jobject _jthis, bool copy);
							            Iterator(const Iterator &);
							        
								virtual ~Iterator();
								jint getCount();
								jint getCount(jint int_0);
								jintArray getCounts();
								void remove();
								jboolean hasNext();
							}; // end class Iterator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace MultidimensionalCounter

	namespace java{
		namespace math{
			
			class BigDecimal : public lang::Number {
				public:
			            BigDecimal(jobject _jthis, bool copy);
			            BigDecimal(const BigDecimal &);
			        
				BigDecimal(jdouble double_0);
				BigDecimal(jcharArray charArray_0,jint int_1,jint int_2);
				BigDecimal(jcharArray charArray_0);
				BigDecimal(jint int_0);
				BigDecimal(jlong long_0);
				BigDecimal(BigInteger bigInteger_0,jint int_1);
				BigDecimal(BigInteger bigInteger_0);
				BigDecimal(jstring string_0);
				virtual ~BigDecimal();
				jint precision();
				BigDecimal divideToIntegralValue(BigDecimal bigDecimal_0);
				jobjectArray divideAndRemainder(BigDecimal bigDecimal_0);
				BigInteger unscaledValue();
				BigDecimal movePointLeft(jint int_0);
				BigDecimal movePointRight(jint int_0);
				BigDecimal scaleByPowerOfTen(jint int_0);
				BigDecimal stripTrailingZeros();
				jstring toEngineeringString();
				jstring toPlainString();
				BigInteger toBigInteger();
				BigInteger toBigIntegerExact();
				jlong longValueExact();
				jint intValueExact();
				jshort shortValueExact();
				jbyte byteValueExact();
				BigDecimal multiply(BigDecimal bigDecimal_0);
				BigDecimal subtract(BigDecimal bigDecimal_0);
				BigDecimal setScale(jint int_0,RoundingMode roundingMode_1);
				BigDecimal setScale(jint int_0,jint int_1);
				BigDecimal setScale(jint int_0);
				BigDecimal negate();
				BigDecimal plus();
				BigDecimal add(BigDecimal bigDecimal_0);
				jstring toString();
				jint hashCode();
				BigDecimal abs();
				BigDecimal pow(jint int_0);
				BigDecimal min(BigDecimal bigDecimal_0);
				BigDecimal max(BigDecimal bigDecimal_0);
				jint compareTo(BigDecimal bigDecimal_0);
				jint intValue();
				jlong longValue();
				jfloat floatValue();
				jdouble doubleValue();
				static BigDecimal valueOf(jlong long_0,jint int_1);
				static BigDecimal valueOf(jlong long_0);
				static BigDecimal valueOf(jdouble double_0);
				jint signum();
				BigDecimal divide(BigDecimal bigDecimal_0,jint int_1,jint int_2);
				BigDecimal divide(BigDecimal bigDecimal_0,jint int_1,RoundingMode roundingMode_2);
				BigDecimal divide(BigDecimal bigDecimal_0,RoundingMode roundingMode_1);
				BigDecimal divide(BigDecimal bigDecimal_0,jint int_1);
				BigDecimal divide(BigDecimal bigDecimal_0);
				BigDecimal remainder(BigDecimal bigDecimal_0);
				BigDecimal ulp();
				jint scale();
			}; // end class BigDecimal
		} // end namespace java
	} // end namespace math

	namespace java{
		namespace math{
			
			class BigInteger : public lang::Number {
				public:
			            BigInteger(jobject _jthis, bool copy);
			            BigInteger(const BigInteger &);
			        
				BigInteger(jstring string_0,jint int_1);
				BigInteger(jint int_0,jbyteArray byteArray_1);
				BigInteger(jbyteArray byteArray_0);
				BigInteger(jint int_0,util::Random random_1);
				BigInteger(jint int_0,jint int_1,util::Random random_2);
				BigInteger(jstring string_0);
				virtual ~BigInteger();
				BigInteger mod(BigInteger bigInteger_0);
				BigInteger notMethod();
				jobjectArray divideAndRemainder(BigInteger bigInteger_0);
				jlong longValueExact();
				jint intValueExact();
				jshort shortValueExact();
				jbyte byteValueExact();
				jboolean testBit(jint int_0);
				static BigInteger probablePrime(jint int_0,util::Random random_1);
				BigInteger nextProbablePrime();
				BigInteger modPow(BigInteger bigInteger_0,BigInteger bigInteger_1);
				BigInteger modInverse(BigInteger bigInteger_0);
				BigInteger setBit(jint int_0);
				BigInteger clearBit(jint int_0);
				jint getLowestSetBit();
				jboolean isProbablePrime(jint int_0);
				BigInteger multiply(BigInteger bigInteger_0);
				BigInteger subtract(BigInteger bigInteger_0);
				BigInteger negate();
				BigInteger shiftRight(jint int_0);
				BigInteger gcd(BigInteger bigInteger_0);
				BigInteger flipBit(jint int_0);
				jint bitLength();
				BigInteger add(BigInteger bigInteger_0);
				jint bitCount();
				jstring toString();
				jstring toString(jint int_0);
				jint hashCode();
				BigInteger abs();
				BigInteger pow(jint int_0);
				BigInteger min(BigInteger bigInteger_0);
				BigInteger max(BigInteger bigInteger_0);
				jint compareTo(BigInteger bigInteger_0);
				jint intValue();
				jlong longValue();
				jfloat floatValue();
				jdouble doubleValue();
				static BigInteger valueOf(jlong long_0);
				jint signum();
				BigInteger shiftLeft(jint int_0);
				BigInteger divide(BigInteger bigInteger_0);
				BigInteger remainder(BigInteger bigInteger_0);
				jbyteArray toByteArray();
				BigInteger andMethod(BigInteger bigInteger_0);
				BigInteger orMethod(BigInteger bigInteger_0);
				BigInteger xorMethod(BigInteger bigInteger_0);
				BigInteger andNot(BigInteger bigInteger_0);
			}; // end class BigInteger
		} // end namespace java
	} // end namespace math

	namespace java{
		namespace util{
			
			class Enumeration : public lang::Object {
				public:
			            Enumeration(jobject _jthis, bool copy);
			            Enumeration(const Enumeration &);
			        
				Enumeration();
				virtual ~Enumeration();
			}; // end class Enumeration
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace lang{
			
			class Boolean : public Object {
				public:
			            Boolean(jobject _jthis, bool copy);
			            Boolean(const Boolean &);
			        
				Boolean(jboolean boolean_0);
				Boolean(jstring string_0);
				virtual ~Boolean();
				jstring toString();
				static jstring toString(jboolean boolean_0);
				static jint hashCode(jboolean boolean_0);
				jint hashCode();
				jint compareTo(Boolean boolean_0);
				static jboolean getBoolean(jstring string_0);
				jboolean booleanValue();
				static Boolean valueOf(jstring string_0);
				static Boolean valueOf(jboolean boolean_0);
				static jint compare(jboolean boolean_0,jboolean boolean_1);
				static jboolean parseBoolean(jstring string_0);
				static jboolean logicalAnd(jboolean boolean_0,jboolean boolean_1);
				static jboolean logicalOr(jboolean boolean_0,jboolean boolean_1);
				static jboolean logicalXor(jboolean boolean_0,jboolean boolean_1);
			}; // end class Boolean
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace lang{
			
			class ClassLoader : public Object {
				public:
			            ClassLoader(jobject _jthis, bool copy);
			            ClassLoader(const ClassLoader &);
			        
				virtual ~ClassLoader();
				static ClassLoader getSystemClassLoader();
				io::InputStream getResourceAsStream(jstring string_0);
				net::URL getResource(jstring string_0);
				static io::InputStream getSystemResourceAsStream(jstring string_0);
				static net::URL getSystemResource(jstring string_0);
				util::Enumeration getResources(jstring string_0);
				static util::Enumeration getSystemResources(jstring string_0);
				virtual ClassLoader getParent();
				void setDefaultAssertionStatus(jboolean boolean_0);
				void setPackageAssertionStatus(jstring string_0,jboolean boolean_1);
				void setClassAssertionStatus(jstring string_0,jboolean boolean_1);
				void clearAssertionStatus();
			}; // end class ClassLoader
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace awt{
			namespace event{
				
				class ItemEvent : public AWTEvent {
					public:
				            ItemEvent(jobject _jthis, bool copy);
				            ItemEvent(const ItemEvent &);
				        
					virtual ~ItemEvent();
					jint getStateChange();
					jstring paramString();
				}; // end class ItemEvent
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class ItemListener : public lang::Object {
					public:
				            ItemListener(jobject _jthis, bool copy);
				            ItemListener(const ItemListener &);
				        
					ItemListener();
					virtual ~ItemListener();
				}; // end class ItemListener
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace diagapplet{
		namespace utils{
			namespace SaveImage{
				
				class BAYER_PATTERN : public java::lang::Enum {
					public:
				            BAYER_PATTERN(jobject _jthis, bool copy);
				            BAYER_PATTERN(const BAYER_PATTERN &);
				        
					virtual ~BAYER_PATTERN();
					static jobjectArray values();
					static BAYER_PATTERN valueOf(jstring string_0);
				}; // end class BAYER_PATTERN
			} // end namespace diagapplet
		} // end namespace utils
	} // end namespace SaveImage

	namespace java{
		namespace awt{
			namespace event{
				
				class WindowEvent : public ComponentEvent {
					public:
				            WindowEvent(jobject _jthis, bool copy);
				            WindowEvent(const WindowEvent &);
				        
					WindowEvent(Window window_0,jint int_1,Window window_2,jint int_3,jint int_4);
					WindowEvent(Window window_0,jint int_1,Window window_2);
					WindowEvent(Window window_0,jint int_1,jint int_2,jint int_3);
					WindowEvent(Window window_0,jint int_1);
					virtual ~WindowEvent();
					Window getWindow();
					Window getOppositeWindow();
					jint getOldState();
					jint getNewState();
					jstring paramString();
				}; // end class WindowEvent
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace ode{
						namespace events{
							namespace EventHandler{
								
								class Action : public java::lang::Enum {
									public:
								            Action(jobject _jthis, bool copy);
								            Action(const Action &);
								        
									virtual ~Action();
									static jobjectArray values();
									static Action valueOf(jstring string_0);
								}; // end class Action
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace ode
		} // end namespace events
	} // end namespace EventHandler

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace Region{
								
								class Location : public java::lang::Enum {
									public:
								            Location(jobject _jthis, bool copy);
								            Location(const Location &);
								        
									virtual ~Location();
									static jobjectArray values();
									static Location valueOf(jstring string_0);
								}; // end class Location
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace Region

	namespace javax{
		namespace xml{
			namespace bind{
				
				class JAXBElement : public java::lang::Object {
					public:
				            JAXBElement(jobject _jthis, bool copy);
				            JAXBElement(const JAXBElement &);
				        
					virtual ~JAXBElement();
					jboolean isNil();
					void setNil(jboolean boolean_0);
					jboolean isGlobalScope();
					jboolean isTypeSubstituted();
					namespace::QName getName();
				}; // end class JAXBElement
			} // end namespace javax
		} // end namespace xml
	} // end namespace bind

	namespace java{
		namespace io{
			
			class FilenameFilter : public lang::Object {
				public:
			            FilenameFilter(jobject _jthis, bool copy);
			            FilenameFilter(const FilenameFilter &);
			        
				FilenameFilter();
				virtual ~FilenameFilter();
			}; // end class FilenameFilter
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace io{
			
			class FileFilter : public lang::Object {
				public:
			            FileFilter(jobject _jthis, bool copy);
			            FileFilter(const FileFilter &);
			        
				FileFilter();
				virtual ~FileFilter();
			}; // end class FileFilter
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace util{
			
			class Date : public lang::Object {
				public:
			            Date(jobject _jthis, bool copy);
			            Date(const Date &);
			        
				Date();
				Date(jlong long_0);
				Date(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4);
				Date(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
				Date(jstring string_0);
				Date(jint int_0,jint int_1,jint int_2);
				virtual ~Date();
				void setTime(jlong long_0);
				jlong getTime();
				jint getYear();
				jint getMonth();
				jint getDate();
				jint getHours();
				jint getMinutes();
				jint getSeconds();
				static jlong UTC(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
				void setYear(jint int_0);
				void setMonth(jint int_0);
				void setDate(jint int_0);
				jint getDay();
				void setHours(jint int_0);
				void setMinutes(jint int_0);
				void setSeconds(jint int_0);
				jstring toLocaleString();
				jstring toGMTString();
				jint getTimezoneOffset();
				jstring toString();
				jint hashCode();
				jint compareTo(Date date_0);
				static jlong parse(jstring string_0);
				jboolean before(Date date_0);
				jboolean after(Date date_0);
			}; // end class Date
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace lang{
			
			class Thread : public Object {
				public:
			            Thread(jobject _jthis, bool copy);
			            Thread(const Thread &);
			        
				Thread(Runnable runnable_0);
				Thread();
				Thread(Runnable runnable_0,jstring string_1);
				Thread(jstring string_0);
				virtual ~Thread();
				void run();
				jstring toString();
				jboolean isInterrupted();
				static Thread currentThread();
				virtual jstring getName();
				virtual void join(jlong long_0);
				virtual void join(jlong long_0,jint int_1);
				virtual void join();
				virtual void checkAccess();
				static void dumpStack();
				virtual void setPriority(jint int_0);
				virtual void setDaemon(jboolean boolean_0);
				void start();
				static void yield();
				static void sleep(jlong long_0);
				static void sleep(jlong long_0,jint int_1);
				virtual void stop(Throwable throwable_0);
				virtual void stop();
				void interrupt();
				static jboolean interrupted();
				void destroy();
				virtual jboolean isAlive();
				virtual void suspend();
				virtual void resume();
				virtual jint getPriority();
				virtual void setName(jstring string_0);
				static jint activeCount();
				static jint enumerate(jobjectArray threadArray_0);
				jint countStackFrames();
				virtual jboolean isDaemon();
				ClassLoader getContextClassLoader();
				void setContextClassLoader(ClassLoader classLoader_0);
				static util::Map getAllStackTraces();
				jlong getId();
			}; // end class Thread
		} // end namespace java
	} // end namespace lang

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace XMLEntityManager{
						
						class ScannedEntity : public Entity {
							public:
						            ScannedEntity(jobject _jthis, bool copy);
						            ScannedEntity(const ScannedEntity &);
						        
							ScannedEntity(XMLEntityManager xMLEntityManager_0,jstring string_1,xni::XMLResourceIdentifier xMLResourceIdentifier_2,java::io::InputStream inputStream_3,java::io::Reader reader_4,jbyteArray byteArray_5,jstring string_6,jboolean boolean_7,jboolean boolean_8,jboolean boolean_9);
							virtual ~ScannedEntity();
							jint getCharacterOffset();
							jint getColumnNumber();
							jstring getExpandedSystemId();
							jstring getLiteralSystemId();
							virtual jboolean isUnparsed();
							jstring getXMLVersion();
							virtual jboolean isExternal();
							jboolean isEncodingExternallySpecified();
							void setEncodingExternallySpecified(jboolean boolean_0);
							void setReader(java::io::InputStream inputStream_0,jstring string_1,java::lang::Boolean boolean_2);
							jstring toString();
							jint getLineNumber();
							jstring getEncoding();
						}; // end class ScannedEntity
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace XMLEntityManager

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace XMLDocumentFragmentScannerImpl{
						
						class Dispatcher : public java::lang::Object {
							public:
						            Dispatcher(jobject _jthis, bool copy);
						            Dispatcher(const Dispatcher &);
						        
							Dispatcher();
							virtual ~Dispatcher();
						}; // end class Dispatcher
					} // end namespace org
				} // end namespace apache
			} // end namespace xerces
		} // end namespace impl
	} // end namespace XMLDocumentFragmentScannerImpl

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace dtd{
						namespace XMLContentSpec{
							
							class Provider : public java::lang::Object {
								public:
							            Provider(jobject _jthis, bool copy);
							            Provider(const Provider &);
							        
								Provider();
								virtual ~Provider();
							}; // end class Provider
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace dtd
	} // end namespace XMLContentSpec

	namespace java{
		namespace nio{
			
			class CharBuffer : public Buffer {
				public:
			            CharBuffer(jobject _jthis, bool copy);
			            CharBuffer(const CharBuffer &);
			        
				virtual ~CharBuffer();
				CharBuffer get(jcharArray charArray_0,jint int_1,jint int_2);
				CharBuffer get(jcharArray charArray_0);
				virtual CharBuffer put(jstring string_0);
				CharBuffer put(jstring string_0,jint int_1,jint int_2);
				virtual CharBuffer put(jcharArray charArray_0);
				CharBuffer put(jcharArray charArray_0,jint int_1,jint int_2);
				CharBuffer put(CharBuffer charBuffer_0);
				jstring toString();
				CharBuffer append(lang::CharSequence charSequence_0,jint int_1,jint int_2);
				CharBuffer append(jchar char_0);
				CharBuffer append(lang::CharSequence charSequence_0);
				jint hashCode();
				jint compareTo(CharBuffer charBuffer_0);
				virtual jint length();
				virtual jchar charAt(jint int_0);
				util::stream::IntStream chars();
				virtual jboolean hasArray();
				virtual jcharArray array();
				virtual jint arrayOffset();
				jint read(CharBuffer charBuffer_0);
				static CharBuffer wrap(jcharArray charArray_0);
				static CharBuffer wrap(jcharArray charArray_0,jint int_1,jint int_2);
				static CharBuffer wrap(lang::CharSequence charSequence_0,jint int_1,jint int_2);
				static CharBuffer wrap(lang::CharSequence charSequence_0);
				static CharBuffer allocate(jint int_0);
			}; // end class CharBuffer
		} // end namespace java
	} // end namespace nio

	namespace javax{
		namespace swing{
			
			class JTable : public JComponent {
				public:
			            JTable(jobject _jthis, bool copy);
			            JTable(const JTable &);
			        
				JTable(jint int_0,jint int_1);
				JTable();
				JTable(java::util::Vector vector_0,java::util::Vector vector_1);
				virtual ~JTable();
				void doLayout();
				jint getRowCount();
				jint getColumnCount();
				jstring getColumnName(jint int_0);
				jboolean isCellEditable(jint int_0,jint int_1);
				void setRowHeight(jint int_0);
				void setRowHeight(jint int_0,jint int_1);
				jint getRowHeight(jint int_0);
				jint getRowHeight();
				void setRowMargin(jint int_0);
				jint getRowMargin();
				void setIntercellSpacing(java::awt::Dimension dimension_0);
				java::awt::Dimension getIntercellSpacing();
				void setGridColor(java::awt::Color color_0);
				java::awt::Color getGridColor();
				void setShowGrid(jboolean boolean_0);
				void setShowHorizontalLines(jboolean boolean_0);
				void setShowVerticalLines(jboolean boolean_0);
				jboolean getShowHorizontalLines();
				jboolean getShowVerticalLines();
				void setAutoResizeMode(jint int_0);
				jint getAutoResizeMode();
				void setAutoCreateColumnsFromModel(jboolean boolean_0);
				jboolean getAutoCreateColumnsFromModel();
				void createDefaultColumnsFromModel();
				void setDragEnabled(jboolean boolean_0);
				jboolean getDragEnabled();
				jboolean getAutoCreateRowSorter();
				void setUpdateSelectionOnSort(jboolean boolean_0);
				jboolean getUpdateSelectionOnSort();
				void setSelectionMode(jint int_0);
				void setRowSelectionAllowed(jboolean boolean_0);
				jboolean getRowSelectionAllowed();
				void setColumnSelectionAllowed(jboolean boolean_0);
				jboolean getColumnSelectionAllowed();
				void setCellSelectionEnabled(jboolean boolean_0);
				jboolean getCellSelectionEnabled();
				void selectAll();
				void clearSelection();
				void setRowSelectionInterval(jint int_0,jint int_1);
				void setColumnSelectionInterval(jint int_0,jint int_1);
				void addRowSelectionInterval(jint int_0,jint int_1);
				void addColumnSelectionInterval(jint int_0,jint int_1);
				void removeRowSelectionInterval(jint int_0,jint int_1);
				void removeColumnSelectionInterval(jint int_0,jint int_1);
				jint getSelectedRow();
				jint getSelectedColumn();
				jintArray getSelectedRows();
				jintArray getSelectedColumns();
				jint getSelectedRowCount();
				jint getSelectedColumnCount();
				jboolean isRowSelected(jint int_0);
				jboolean isColumnSelected(jint int_0);
				jboolean isCellSelected(jint int_0,jint int_1);
				void changeSelection(jint int_0,jint int_1,jboolean boolean_2,jboolean boolean_3);
				java::awt::Color getSelectionForeground();
				void setSelectionForeground(java::awt::Color color_0);
				java::awt::Color getSelectionBackground();
				void setSelectionBackground(java::awt::Color color_0);
				jint convertColumnIndexToModel(jint int_0);
				jint convertColumnIndexToView(jint int_0);
				jint convertRowIndexToView(jint int_0);
				jint convertRowIndexToModel(jint int_0);
				void moveColumn(jint int_0,jint int_1);
				jint columnAtPoint(java::awt::Point point_0);
				jint rowAtPoint(java::awt::Point point_0);
				java::awt::Rectangle getCellRect(jint int_0,jint int_1,jboolean boolean_2);
				void sizeColumnsToFit(jint int_0);
				void sizeColumnsToFit(jboolean boolean_0);
				jstring getToolTipText(java::awt::event::MouseEvent mouseEvent_0);
				void setSurrendersFocusOnKeystroke(jboolean boolean_0);
				jboolean getSurrendersFocusOnKeystroke();
				jboolean editCellAt(jint int_0,jint int_1,java::util::EventObject eventObject_2);
				jboolean editCellAt(jint int_0,jint int_1);
				jboolean isEditing();
				java::awt::Component getEditorComponent();
				jint getEditingColumn();
				jint getEditingRow();
				void updateUI();
				jstring getUIClassID();
				void tableChanged(event::TableModelEvent tableModelEvent_0);
				void setPreferredScrollableViewportSize(java::awt::Dimension dimension_0);
				java::awt::Dimension getPreferredScrollableViewportSize();
				jint getScrollableUnitIncrement(java::awt::Rectangle rectangle_0,jint int_1,jint int_2);
				jint getScrollableBlockIncrement(java::awt::Rectangle rectangle_0,jint int_1,jint int_2);
				jboolean getScrollableTracksViewportWidth();
				jboolean getScrollableTracksViewportHeight();
				void setFillsViewportHeight(jboolean boolean_0);
				jboolean getFillsViewportHeight();
				table::TableCellEditor getCellEditor();
				table::TableCellEditor getCellEditor(jint int_0,jint int_1);
				void setCellEditor(table::TableCellEditor tableCellEditor_0);
				void setEditingColumn(jint int_0);
				void setEditingRow(jint int_0);
				java::awt::Component prepareEditor(table::TableCellEditor tableCellEditor_0,jint int_1,jint int_2);
				void removeEditor();
				accessibility::AccessibleContext getAccessibleContext();
				void addNotify();
				void removeNotify();
				void setAutoCreateRowSorter(jboolean boolean_0);
				jboolean print();
			}; // end class JTable
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			namespace event{
				
				class CellEditorListener : public java::lang::Object {
					public:
				            CellEditorListener(jobject _jthis, bool copy);
				            CellEditorListener(const CellEditorListener &);
				        
					CellEditorListener();
					virtual ~CellEditorListener();
				}; // end class CellEditorListener
			} // end namespace javax
		} // end namespace swing
	} // end namespace event

	namespace java{
		namespace io{
			
			class FileOutputStream : public OutputStream {
				public:
			            FileOutputStream(jobject _jthis, bool copy);
			            FileOutputStream(const FileOutputStream &);
			        
				FileOutputStream(File file_0,jboolean boolean_1);
				FileOutputStream(File file_0);
				FileOutputStream(jstring string_0,jboolean boolean_1);
				FileOutputStream(jstring string_0);
				virtual ~FileOutputStream();
				void write(jbyteArray byteArray_0);
				void write(jbyteArray byteArray_0,jint int_1,jint int_2);
				void write(jint int_0);
				void close();
			}; // end class FileOutputStream
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace awt{
			namespace event{
				
				class KeyEvent : public InputEvent {
					public:
				            KeyEvent(jobject _jthis, bool copy);
				            KeyEvent(const KeyEvent &);
				        
					KeyEvent(Component component_0,jint int_1,jlong long_2,jint int_3,jint int_4,jchar char_5,jint int_6);
					KeyEvent(Component component_0,jint int_1,jlong long_2,jint int_3,jint int_4);
					KeyEvent(Component component_0,jint int_1,jlong long_2,jint int_3,jint int_4,jchar char_5);
					virtual ~KeyEvent();
					void setKeyCode(jint int_0);
					jint getKeyLocation();
					static jstring getKeyText(jint int_0);
					static jint getExtendedKeyCodeForChar(jint int_0);
					static jstring getKeyModifiersText(jint int_0);
					jint getExtendedKeyCode();
					jboolean isActionKey();
					jint getKeyCode();
					void setKeyChar(jchar char_0);
					void setModifiers(jint int_0);
					jchar getKeyChar();
					jstring paramString();
				}; // end class KeyEvent
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace javafx{
		namespace stage{
			
			class Stage : public Window {
				public:
			            Stage(jobject _jthis, bool copy);
			            Stage(const Stage &);
			        
				Stage();
				virtual ~Stage();
				virtual void setAlwaysOnTop(jboolean boolean_0);
				virtual jboolean isAlwaysOnTop();
				virtual jstring getTitle();
				virtual jboolean isResizable();
				virtual void setResizable(jboolean boolean_0);
				virtual void show();
				void toFront();
				void toBack();
				virtual void setTitle(jstring string_0);
				jstring impl_getMXWindowType();
				virtual void setScene(scene::Scene scene_0);
				void impl_setPrimary(jboolean boolean_0);
				void impl_setImportant(jboolean boolean_0);
				void showAndWait();
				virtual void initOwner(Window window_0);
				virtual void setFullScreen(jboolean boolean_0);
				virtual jboolean isFullScreen();
				virtual void setIconified(jboolean boolean_0);
				virtual jboolean isIconified();
				virtual void setMaximized(jboolean boolean_0);
				virtual jboolean isMaximized();
				virtual void setMinWidth(jdouble double_0);
				virtual jdouble getMinWidth();
				virtual void setMinHeight(jdouble double_0);
				virtual jdouble getMinHeight();
				virtual void setMaxWidth(jdouble double_0);
				virtual jdouble getMaxWidth();
				virtual void setMaxHeight(jdouble double_0);
				virtual jdouble getMaxHeight();
				virtual void setFullScreenExitHint(jstring string_0);
				virtual jstring getFullScreenExitHint();
				void close();
				virtual Window getOwner();
			}; // end class Stage
		} // end namespace javafx
	} // end namespace stage

	namespace javafx{
		namespace application{
			
			class HostServices : public java::lang::Object {
				public:
			            HostServices(jobject _jthis, bool copy);
			            HostServices(const HostServices &);
			        
				virtual ~HostServices();
				virtual jstring getDocumentBase();
				virtual void showDocument(jstring string_0);
				virtual jstring resolveURI(jstring string_0,jstring string_1);
				virtual jstring getCodeBase();
			}; // end class HostServices
		} // end namespace javafx
	} // end namespace application

	namespace javafx{
		namespace application{
			namespace Preloader{
				
				class PreloaderNotification : public java::lang::Object {
					public:
				            PreloaderNotification(jobject _jthis, bool copy);
				            PreloaderNotification(const PreloaderNotification &);
				        
					PreloaderNotification();
					virtual ~PreloaderNotification();
				}; // end class PreloaderNotification
			} // end namespace javafx
		} // end namespace application
	} // end namespace Preloader

	namespace javafx{
		namespace application{
			namespace Application{
				
				class Parameters : public java::lang::Object {
					public:
				            Parameters(jobject _jthis, bool copy);
				            Parameters(const Parameters &);
				        
					Parameters();
					virtual ~Parameters();
				}; // end class Parameters
			} // end namespace javafx
		} // end namespace application
	} // end namespace Application

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							namespace LeastSquaresProblem{
								
								class Evaluation : public java::lang::Object {
									public:
								            Evaluation(jobject _jthis, bool copy);
								            Evaluation(const Evaluation &);
								        
									Evaluation();
									virtual ~Evaluation();
								}; // end class Evaluation
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace fitting
		} // end namespace leastsquares
	} // end namespace LeastSquaresProblem

	namespace java{
		namespace util{
			
			class Currency : public lang::Object {
				public:
			            Currency(jobject _jthis, bool copy);
			            Currency(const Currency &);
			        
				virtual ~Currency();
				static Set getAvailableCurrencies();
				jstring getCurrencyCode();
				jint getDefaultFractionDigits();
				jint getNumericCode();
				jstring getSymbol(Locale locale_0);
				jstring getSymbol();
				jstring toString();
				static Currency getInstance(jstring string_0);
				static Currency getInstance(Locale locale_0);
				jstring getDisplayName(Locale locale_0);
				jstring getDisplayName();
			}; // end class Currency
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace math{
			
			class RoundingMode : public lang::Enum {
				public:
			            RoundingMode(jobject _jthis, bool copy);
			            RoundingMode(const RoundingMode &);
			        
				virtual ~RoundingMode();
				static jobjectArray values();
				static RoundingMode valueOf(jint int_0);
				static RoundingMode valueOf(jstring string_0);
			}; // end class RoundingMode
		} // end namespace java
	} // end namespace math

	namespace java{
		namespace text{
			
			class AttributedCharacterIterator : public lang::Object {
				public:
			            AttributedCharacterIterator(jobject _jthis, bool copy);
			            AttributedCharacterIterator(const AttributedCharacterIterator &);
			        
				AttributedCharacterIterator();
				virtual ~AttributedCharacterIterator();
			}; // end class AttributedCharacterIterator
		} // end namespace java
	} // end namespace text

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace BSPTree{
								
								class VanishingCutHandler : public java::lang::Object {
									public:
								            VanishingCutHandler(jobject _jthis, bool copy);
								            VanishingCutHandler(const VanishingCutHandler &);
								        
									VanishingCutHandler();
									virtual ~VanishingCutHandler();
								}; // end class VanishingCutHandler
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace BSPTree

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace BSPTree{
								
								class LeafMerger : public java::lang::Object {
									public:
								            LeafMerger(jobject _jthis, bool copy);
								            LeafMerger(const LeafMerger &);
								        
									LeafMerger();
									virtual ~LeafMerger();
								}; // end class LeafMerger
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace BSPTree

	namespace java{
		namespace nio{
			namespace charset{
				
				class Charset : public lang::Object {
					public:
				            Charset(jobject _jthis, bool copy);
				            Charset(const Charset &);
				        
					virtual ~Charset();
					virtual jstring name();
					static Charset forName(jstring string_0);
					virtual jstring toString();
					virtual jint hashCode();
					virtual jint compareTo(Charset charset_0);
					virtual jboolean isRegistered();
					static Charset defaultCharset();
					virtual util::Set aliases();
					static jboolean isSupported(jstring string_0);
					jstring displayName(util::Locale locale_0);
					jstring displayName();
					jboolean canEncode();
				}; // end class Charset
			} // end namespace java
		} // end namespace nio
	} // end namespace charset

	namespace java{
		namespace util{
			
			class ListIterator : public lang::Object {
				public:
			            ListIterator(jobject _jthis, bool copy);
			            ListIterator(const ListIterator &);
			        
				ListIterator();
				virtual ~ListIterator();
			}; // end class ListIterator
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace util{
			
			class Map : public lang::Object {
				public:
			            Map(jobject _jthis, bool copy);
			            Map(const Map &);
			        
				Map();
				virtual ~Map();
			}; // end class Map
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace util{
			
			class TimeZone : public lang::Object {
				public:
			            TimeZone(jobject _jthis, bool copy);
			            TimeZone(const TimeZone &);
			        
				TimeZone();
				virtual ~TimeZone();
				static TimeZone getTimeZone(jstring string_0);
				void setID(jstring string_0);
				jint getDSTSavings();
				jboolean observesDaylightTime();
				static jobjectArray getAvailableIDs(jint int_0);
				static jobjectArray getAvailableIDs();
				jboolean hasSameRules(TimeZone timeZone_0);
				static TimeZone getDefault();
				jint getOffset(jlong long_0);
				static void setDefault(TimeZone timeZone_0);
				virtual jstring getDisplayName(jboolean boolean_0,jint int_1);
				virtual jstring getDisplayName(Locale locale_0);
				virtual jstring getDisplayName();
				jstring getDisplayName(jboolean boolean_0,jint int_1,Locale locale_2);
				jstring getID();
			}; // end class TimeZone
		} // end namespace java
	} // end namespace util

	namespace java{
		namespace util{
			
			class GregorianCalendar : public Calendar {
				public:
			            GregorianCalendar(jobject _jthis, bool copy);
			            GregorianCalendar(const GregorianCalendar &);
			        
				GregorianCalendar(jint int_0,jint int_1,jint int_2);
				GregorianCalendar(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4);
				GregorianCalendar(jint int_0,jint int_1,jint int_2,jint int_3,jint int_4,jint int_5);
				GregorianCalendar(TimeZone timeZone_0,Locale locale_1);
				GregorianCalendar(Locale locale_0);
				GregorianCalendar(TimeZone timeZone_0);
				GregorianCalendar();
				virtual ~GregorianCalendar();
				void setTimeZone(TimeZone timeZone_0);
				TimeZone getTimeZone();
				jboolean isLeapYear(jint int_0);
				jstring getCalendarType();
				virtual jboolean isWeekDateSupported();
				jint getWeekYear();
				void setWeekDate(jint int_0,jint int_1,jint int_2);
				jint getWeeksInWeekYear();
				jint getGreatestMinimum(jint int_0);
				jint getLeastMaximum(jint int_0);
				jint getActualMinimum(jint int_0);
				jint getActualMaximum(jint int_0);
				virtual Date getGregorianChange();
				jint getMaximum(jint int_0);
				jint getMinimum(jint int_0);
				void roll(jint int_0,jint int_1);
				void roll(jint int_0,jboolean boolean_1);
				void setGregorianChange(Date date_0);
				void add(jint int_0,jint int_1);
				jint hashCode();
			}; // end class GregorianCalendar
		} // end namespace java
	} // end namespace util

	namespace javax{
		namespace swing{
			
			class Icon : public java::lang::Object {
				public:
			            Icon(jobject _jthis, bool copy);
			            Icon(const Icon &);
			        
				Icon();
				virtual ~Icon();
			}; // end class Icon
		} // end namespace javax
	} // end namespace swing

	namespace javax{
		namespace swing{
			namespace plaf{
				
				class LabelUI : public ComponentUI {
					public:
				            LabelUI(jobject _jthis, bool copy);
				            LabelUI(const LabelUI &);
				        
					LabelUI();
					virtual ~LabelUI();
				}; // end class LabelUI
			} // end namespace javax
		} // end namespace swing
	} // end namespace plaf

	namespace javax{
		namespace swing{
			namespace event{
				
				class TableModelEvent : public java::util::EventObject {
					public:
				            TableModelEvent(jobject _jthis, bool copy);
				            TableModelEvent(const TableModelEvent &);
				        
					virtual ~TableModelEvent();
					jint getLastRow();
					jint getFirstRow();
					jint getColumn();
					jint getType();
				}; // end class TableModelEvent
			} // end namespace javax
		} // end namespace swing
	} // end namespace event

	namespace javax{
		namespace swing{
			namespace event{
				
				class TableModelListener : public java::lang::Object {
					public:
				            TableModelListener(jobject _jthis, bool copy);
				            TableModelListener(const TableModelListener &);
				        
					TableModelListener();
					virtual ~TableModelListener();
				}; // end class TableModelListener
			} // end namespace javax
		} // end namespace swing
	} // end namespace event

	namespace java{
		namespace awt{
			namespace event{
				
				class AdjustmentEvent : public AWTEvent {
					public:
				            AdjustmentEvent(jobject _jthis, bool copy);
				            AdjustmentEvent(const AdjustmentEvent &);
				        
					virtual ~AdjustmentEvent();
					jint getAdjustmentType();
					jboolean getValueIsAdjusting();
					jint getValue();
					jstring paramString();
				}; // end class AdjustmentEvent
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace javax{
		namespace swing{
			namespace event{
				
				class ListSelectionListener : public java::lang::Object {
					public:
				            ListSelectionListener(jobject _jthis, bool copy);
				            ListSelectionListener(const ListSelectionListener &);
				        
					ListSelectionListener();
					virtual ~ListSelectionListener();
				}; // end class ListSelectionListener
			} // end namespace javax
		} // end namespace swing
	} // end namespace event

	namespace javax{
		namespace swing{
			namespace table{
				
				class TableCellEditor : public java::lang::Object {
					public:
				            TableCellEditor(jobject _jthis, bool copy);
				            TableCellEditor(const TableCellEditor &);
				        
					TableCellEditor();
					virtual ~TableCellEditor();
				}; // end class TableCellEditor
			} // end namespace javax
		} // end namespace swing
	} // end namespace table

	namespace javafx{
		namespace scene{
			namespace transform{
				
				class Scale : public Transform {
					public:
				            Scale(jobject _jthis, bool copy);
				            Scale(const Scale &);
				        
					Scale(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					Scale(jdouble double_0,jdouble double_1,jdouble double_2);
					Scale(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
					Scale(jdouble double_0,jdouble double_1);
					Scale();
					virtual ~Scale();
					virtual jdouble getX();
					virtual jdouble getY();
					virtual void setX(jdouble double_0);
					virtual void setY(jdouble double_0);
					virtual jdouble getZ();
					virtual void setZ(jdouble double_0);
					jdouble getMxx();
					jdouble getMyy();
					jdouble getMzz();
					virtual void setPivotX(jdouble double_0);
					virtual jdouble getPivotX();
					virtual void setPivotY(jdouble double_0);
					virtual jdouble getPivotY();
					virtual void setPivotZ(jdouble double_0);
					virtual jdouble getPivotZ();
					jdouble getTx();
					jdouble getTy();
					jdouble getTz();
					Transform createConcatenation(Transform transform_0);
					Scale createInverse();
					jstring toString();
					Scale clone();
				}; // end class Scale
			} // end namespace javafx
		} // end namespace scene
	} // end namespace transform

	namespace javafx{
		namespace scene{
			namespace transform{
				
				class Translate : public Transform {
					public:
				            Translate(jobject _jthis, bool copy);
				            Translate(const Translate &);
				        
					Translate(jdouble double_0,jdouble double_1);
					Translate();
					Translate(jdouble double_0,jdouble double_1,jdouble double_2);
					virtual ~Translate();
					virtual jdouble getX();
					virtual jdouble getY();
					virtual void setX(jdouble double_0);
					virtual void setY(jdouble double_0);
					virtual jdouble getZ();
					virtual void setZ(jdouble double_0);
					jdouble getTx();
					jdouble getTy();
					jdouble getTz();
					Transform createConcatenation(Transform transform_0);
					Translate createInverse();
					jstring toString();
					Translate clone();
				}; // end class Translate
			} // end namespace javafx
		} // end namespace scene
	} // end namespace transform

	namespace javafx{
		namespace scene{
			
			class SubScene : public Node {
				public:
			            SubScene(jobject _jthis, bool copy);
			            SubScene(const SubScene &);
			        
				SubScene(Parent parent_0,jdouble double_1,jdouble double_2);
				virtual ~SubScene();
				virtual void setHeight(jdouble double_0);
				virtual void setWidth(jdouble double_0);
				virtual jdouble getWidth();
				virtual jdouble getHeight();
				virtual void setRoot(Parent parent_0);
				virtual jstring getUserAgentStylesheet();
				virtual void setUserAgentStylesheet(jstring string_0);
				virtual jboolean isDepthBuffer();
				void impl_updatePeer();
				virtual Parent getRoot();
			}; // end class SubScene
		} // end namespace javafx
	} // end namespace scene

	namespace javafx{
		namespace scene{
			
			class Scene : public java::lang::Object {
				public:
			            Scene(jobject _jthis, bool copy);
			            Scene(const Scene &);
			        
				Scene(Parent parent_0,jdouble double_1,jdouble double_2,jboolean boolean_3);
				Scene(Parent parent_0);
				Scene(Parent parent_0,jdouble double_1,jdouble double_2);
				virtual ~Scene();
				virtual stage::Window getWindow();
				virtual Node getFocusOwner();
				virtual jdouble getX();
				virtual jdouble getY();
				virtual jdouble getWidth();
				virtual jdouble getHeight();
				jboolean hasProperties();
				void impl_preferredSize();
				static void impl_setAllowPGAccess(jboolean boolean_0);
				void impl_setWindow(stage::Window window_0);
				void impl_initPeer();
				void impl_disposePeer();
				virtual void setRoot(Parent parent_0);
				virtual jstring getUserAgentStylesheet();
				virtual void setUserAgentStylesheet(jstring string_0);
				virtual jboolean isDepthBuffer();
				void impl_processMouseEvent(input::MouseEvent mouseEvent_0);
				void impl_enableInputMethodEvents(jboolean boolean_0);
				void startFullDrag();
				virtual Parent getRoot();
				Node lookup(jstring string_0);
			}; // end class Scene
		} // end namespace javafx
	} // end namespace scene

	namespace javafx{
		namespace scene{
			
			class Parent : public Node {
				public:
			            Parent(jobject _jthis, bool copy);
			            Parent(const Parent &);
			        
				virtual ~Parent();
				virtual void layout();
				jdouble minWidth(jdouble double_0);
				jdouble minHeight(jdouble double_0);
				void impl_updatePeer();
				jdouble prefWidth(jdouble double_0);
				jdouble prefHeight(jdouble double_0);
				jdouble getBaselineOffset();
				virtual jboolean isNeedsLayout();
				void requestLayout();
				java::util::List impl_getAllParentStylesheets();
				Node lookup(jstring string_0);
			}; // end class Parent
		} // end namespace javafx
	} // end namespace scene

	namespace javafx{
		namespace scene{
			namespace transform{
				
				class Rotate : public Transform {
					public:
				            Rotate(jobject _jthis, bool copy);
				            Rotate(const Rotate &);
				        
					Rotate(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					Rotate(jdouble double_0,jdouble double_1,jdouble double_2);
					Rotate(jdouble double_0);
					Rotate();
					virtual ~Rotate();
					virtual jdouble getAngle();
					virtual void setAngle(jdouble double_0);
					jdouble getMxx();
					jdouble getMxy();
					jdouble getMxz();
					jdouble getMyx();
					jdouble getMyy();
					jdouble getMyz();
					jdouble getMzx();
					jdouble getMzy();
					jdouble getMzz();
					virtual void setPivotX(jdouble double_0);
					virtual jdouble getPivotX();
					virtual void setPivotY(jdouble double_0);
					virtual jdouble getPivotY();
					virtual void setPivotZ(jdouble double_0);
					virtual jdouble getPivotZ();
					jdouble getTx();
					jdouble getTy();
					jdouble getTz();
					Transform createConcatenation(Transform transform_0);
					Transform createInverse();
					jstring toString();
					Rotate clone();
				}; // end class Rotate
			} // end namespace javafx
		} // end namespace scene
	} // end namespace transform

	namespace java{
		namespace util{
			
			class HashMap : public AbstractMap {
				public:
			            HashMap(jobject _jthis, bool copy);
			            HashMap(const HashMap &);
			        
				HashMap(jint int_0);
				HashMap();
				HashMap(Map map_0);
				HashMap(jint int_0,jfloat float_1);
				virtual ~HashMap();
				Collection values();
				void clear();
				jboolean isEmpty();
				jint size();
				Set entrySet();
				void putAll(Map map_0);
				Set keySet();
			}; // end class HashMap
		} // end namespace java
	} // end namespace util

	namespace javafx{
		namespace scene{
			namespace input{
				
				class MouseEvent : public InputEvent {
					public:
				            MouseEvent(jobject _jthis, bool copy);
				            MouseEvent(const MouseEvent &);
				        
					virtual ~MouseEvent();
					virtual jboolean isMetaDown();
					virtual jboolean isAltDown();
					virtual jdouble getX();
					virtual jdouble getY();
					virtual jboolean isControlDown();
					virtual jboolean isShiftDown();
					virtual jint getClickCount();
					virtual jboolean isPopupTrigger();
					virtual jdouble getZ();
					virtual jdouble getScreenX();
					virtual jdouble getScreenY();
					virtual jdouble getSceneX();
					virtual jdouble getSceneY();
					virtual jboolean isPrimaryButtonDown();
					jboolean isDragDetect();
					void setDragDetect(jboolean boolean_0);
					virtual jboolean isStillSincePress();
					jboolean isSynthesized();
					virtual jboolean isShortcutDown();
					virtual jboolean isSecondaryButtonDown();
					virtual jboolean isMiddleButtonDown();
					jstring toString();
				}; // end class MouseEvent
			} // end namespace javafx
		} // end namespace scene
	} // end namespace input

	namespace java{
		namespace util{
			namespace stream{
				
				class Stream : public lang::Object {
					public:
				            Stream(jobject _jthis, bool copy);
				            Stream(const Stream &);
				        
					Stream();
					virtual ~Stream();
					static Stream concat(Stream stream_0,Stream stream_1);
					static Stream empty();
				}; // end class Stream
			} // end namespace java
		} // end namespace util
	} // end namespace stream

	namespace java{
		namespace util{
			namespace function{
				
				class ToDoubleFunction : public lang::Object {
					public:
				            ToDoubleFunction(jobject _jthis, bool copy);
				            ToDoubleFunction(const ToDoubleFunction &);
				        
					ToDoubleFunction();
					virtual ~ToDoubleFunction();
				}; // end class ToDoubleFunction
			} // end namespace java
		} // end namespace util
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							namespace LeastSquaresOptimizer{
								
								class Optimum : public java::lang::Object {
									public:
								            Optimum(jobject _jthis, bool copy);
								            Optimum(const Optimum &);
								        
									Optimum();
									virtual ~Optimum();
								}; // end class Optimum
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace fitting
		} // end namespace leastsquares
	} // end namespace LeastSquaresOptimizer

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace fitting{
						namespace leastsquares{
							namespace GaussNewtonOptimizer{
								
								class Decomposition : public java::lang::Enum {
									public:
								            Decomposition(jobject _jthis, bool copy);
								            Decomposition(const Decomposition &);
								        
									virtual ~Decomposition();
									static jobjectArray values();
									static Decomposition valueOf(jstring string_0);
								}; // end class Decomposition
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace fitting
		} // end namespace leastsquares
	} // end namespace GaussNewtonOptimizer

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace SubHyperplane{
								
								class SplitSubHyperplane : public java::lang::Object {
									public:
								            SplitSubHyperplane(jobject _jthis, bool copy);
								            SplitSubHyperplane(const SplitSubHyperplane &);
								        
									SplitSubHyperplane(SubHyperplane subHyperplane_0,SubHyperplane subHyperplane_1);
									virtual ~SplitSubHyperplane();
									SubHyperplane getPlus();
									SubHyperplane getMinus();
								}; // end class SplitSubHyperplane
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace SubHyperplane

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace BSPTreeVisitor{
								
								class Order : public java::lang::Enum {
									public:
								            Order(jobject _jthis, bool copy);
								            Order(const Order &);
								        
									virtual ~Order();
									static jobjectArray values();
									static Order valueOf(jstring string_0);
								}; // end class Order
							} // end namespace org
						} // end namespace apache
					} // end namespace commons
				} // end namespace math3
			} // end namespace geometry
		} // end namespace partitioning
	} // end namespace BSPTreeVisitor

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace partitioning{
							namespace utilities{
								namespace AVLTree{
									
									class Node : public java::lang::Object {
										public:
									            Node(jobject _jthis, bool copy);
									            Node(const Node &);
									        
										virtual ~Node();
										Node getNext();
										Node getPrevious();
										java::lang::Comparable getElement();
										void delete();
									}; // end class Node
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace partitioning
		} // end namespace utilities
	} // end namespace AVLTree

	namespace java{
		namespace lang{
			
			class Comparable : public Object {
				public:
			            Comparable(jobject _jthis, bool copy);
			            Comparable(const Comparable &);
			        
				Comparable();
				virtual ~Comparable();
			}; // end class Comparable
		} // end namespace java
	} // end namespace lang

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace OpenIntToFieldHashMap{
							
							class Iterator : public java::lang::Object {
								public:
							            Iterator(jobject _jthis, bool copy);
							            Iterator(const Iterator &);
							        
								virtual ~Iterator();
								FieldElement value();
								jboolean hasNext();
								jint key();
								void advance();
							}; // end class Iterator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace OpenIntToFieldHashMap

	namespace java{
		namespace io{
			
			class FileInputStream : public InputStream {
				public:
			            FileInputStream(jobject _jthis, bool copy);
			            FileInputStream(const FileInputStream &);
			        
				FileInputStream(File file_0);
				FileInputStream(jstring string_0);
				virtual ~FileInputStream();
				jint read();
				jint read(jbyteArray byteArray_0,jint int_1,jint int_2);
				jint read(jbyteArray byteArray_0);
				void close();
				jlong skip(jlong long_0);
				jint available();
			}; // end class FileInputStream
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace util{
			namespace zip{
				
				class Checksum : public lang::Object {
					public:
				            Checksum(jobject _jthis, bool copy);
				            Checksum(const Checksum &);
				        
					Checksum();
					virtual ~Checksum();
				}; // end class Checksum
			} // end namespace java
		} // end namespace util
	} // end namespace zip

	namespace java{
		namespace lang{
			
			class CharSequence : public Object {
				public:
			            CharSequence(jobject _jthis, bool copy);
			            CharSequence(const CharSequence &);
			        
				CharSequence();
				virtual ~CharSequence();
				util::stream::IntStream chars();
				util::stream::IntStream codePoints();
			}; // end class CharSequence
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace util{
			namespace concurrent{
				
				class ThreadFactory : public lang::Object {
					public:
				            ThreadFactory(jobject _jthis, bool copy);
				            ThreadFactory(const ThreadFactory &);
				        
					ThreadFactory();
					virtual ~ThreadFactory();
				}; // end class ThreadFactory
			} // end namespace java
		} // end namespace util
	} // end namespace concurrent

	namespace java{
		namespace lang{
			
			class Double : public Number {
				public:
			            Double(jobject _jthis, bool copy);
			            Double(const Double &);
			        
				Double(jdouble double_0);
				Double(jstring string_0);
				virtual ~Double();
				static jstring toString(jdouble double_0);
				jstring toString();
				jint hashCode();
				static jint hashCode(jdouble double_0);
				static jdouble min(jdouble double_0,jdouble double_1);
				static jdouble max(jdouble double_0,jdouble double_1);
				static jlong doubleToRawLongBits(jdouble double_0);
				static jlong doubleToLongBits(jdouble double_0);
				static jdouble longBitsToDouble(jlong long_0);
				jint compareTo(Double double_0);
				jbyte byteValue();
				jshort shortValue();
				jint intValue();
				jlong longValue();
				jfloat floatValue();
				jdouble doubleValue();
				static Double valueOf(jstring string_0);
				static Double valueOf(jdouble double_0);
				static jstring toHexString(jdouble double_0);
				static jint compare(jdouble double_0,jdouble double_1);
				static jboolean isNaN(jdouble double_0);
				jboolean isNaN();
				static jboolean isInfinite(jdouble double_0);
				jboolean isInfinite();
				static jboolean isFinite(jdouble double_0);
				static jdouble sum(jdouble double_0,jdouble double_1);
				static jdouble parseDouble(jstring string_0);
			}; // end class Double
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace lang{
			
			class Float : public Number {
				public:
			            Float(jobject _jthis, bool copy);
			            Float(const Float &);
			        
				Float(jstring string_0);
				Float(jdouble double_0);
				Float(jfloat float_0);
				virtual ~Float();
				static jstring toString(jfloat float_0);
				jstring toString();
				jint hashCode();
				static jint hashCode(jfloat float_0);
				static jfloat min(jfloat float_0,jfloat float_1);
				static jfloat max(jfloat float_0,jfloat float_1);
				static jint floatToRawIntBits(jfloat float_0);
				static jint floatToIntBits(jfloat float_0);
				static jfloat intBitsToFloat(jint int_0);
				jint compareTo(Float float_0);
				jbyte byteValue();
				jshort shortValue();
				jint intValue();
				jlong longValue();
				jfloat floatValue();
				jdouble doubleValue();
				static Float valueOf(jfloat float_0);
				static Float valueOf(jstring string_0);
				static jstring toHexString(jfloat float_0);
				static jint compare(jfloat float_0,jfloat float_1);
				static jboolean isNaN(jfloat float_0);
				jboolean isNaN();
				static jfloat parseFloat(jstring string_0);
				static jboolean isInfinite(jfloat float_0);
				jboolean isInfinite();
				static jboolean isFinite(jfloat float_0);
				static jfloat sum(jfloat float_0,jfloat float_1);
			}; // end class Float
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace text{
			
			class CharacterIterator : public lang::Object {
				public:
			            CharacterIterator(jobject _jthis, bool copy);
			            CharacterIterator(const CharacterIterator &);
			        
				CharacterIterator();
				virtual ~CharacterIterator();
			}; // end class CharacterIterator
		} // end namespace java
	} // end namespace text

	namespace javax{
		namespace xml{
			namespace datatype{
				namespace DatatypeConstants{
					
					class Field : public java::lang::Object {
						public:
					            Field(jobject _jthis, bool copy);
					            Field(const Field &);
					        
						virtual ~Field();
						jstring toString();
						jint getId();
					}; // end class Field
				} // end namespace javax
			} // end namespace xml
		} // end namespace datatype
	} // end namespace DatatypeConstants

	namespace java{
		namespace util{
			namespace function{
				
				class Predicate : public lang::Object {
					public:
				            Predicate(jobject _jthis, bool copy);
				            Predicate(const Predicate &);
				        
					Predicate();
					virtual ~Predicate();
					Predicate negate();
					Predicate andMethod(Predicate predicate_0);
					Predicate orMethod(Predicate predicate_0);
				}; // end class Predicate
			} // end namespace java
		} // end namespace util
	} // end namespace function

	namespace javax{
		namespace swing{
			namespace text{
				
				class DefaultStyledDocument : public AbstractDocument {
					public:
				            DefaultStyledDocument(jobject _jthis, bool copy);
				            DefaultStyledDocument(const DefaultStyledDocument &);
				        
					DefaultStyledDocument();
					virtual ~DefaultStyledDocument();
					Style addStyle(jstring string_0,Style style_1);
					void removeStyle(jstring string_0);
					Style getStyle(jstring string_0);
					void setLogicalStyle(jint int_0,Style style_1);
					Style getLogicalStyle(jint int_0);
					java::util::Enumeration getStyleNames();
				}; // end class DefaultStyledDocument
			} // end namespace javax
		} // end namespace swing
	} // end namespace text

	namespace java{
		namespace awt{
			namespace event{
				
				class TextEvent : public AWTEvent {
					public:
				            TextEvent(jobject _jthis, bool copy);
				            TextEvent(const TextEvent &);
				        
					virtual ~TextEvent();
					jstring paramString();
				}; // end class TextEvent
			} // end namespace java
		} // end namespace awt
	} // end namespace event

	namespace java{
		namespace net{
			
			class DatagramPacket : public lang::Object {
				public:
			            DatagramPacket(jobject _jthis, bool copy);
			            DatagramPacket(const DatagramPacket &);
			        
				DatagramPacket(jbyteArray byteArray_0,jint int_1,jint int_2,InetAddress inetAddress_3,jint int_4);
				DatagramPacket(jbyteArray byteArray_0,jint int_1,jint int_2);
				DatagramPacket(jbyteArray byteArray_0,jint int_1);
				DatagramPacket(jbyteArray byteArray_0,jint int_1,jint int_2,SocketAddress socketAddress_3);
				DatagramPacket(jbyteArray byteArray_0,jint int_1,InetAddress inetAddress_2,jint int_3);
				DatagramPacket(jbyteArray byteArray_0,jint int_1,SocketAddress socketAddress_2);
				virtual ~DatagramPacket();
				void setAddress(InetAddress inetAddress_0);
				void setSocketAddress(SocketAddress socketAddress_0);
				SocketAddress getSocketAddress();
				jbyteArray getData();
				void setData(jbyteArray byteArray_0,jint int_1,jint int_2);
				void setData(jbyteArray byteArray_0);
				void setPort(jint int_0);
				jint getLength();
				InetAddress getAddress();
				void setLength(jint int_0);
				jint getPort();
				jint getOffset();
			}; // end class DatagramPacket
		} // end namespace java
	} // end namespace net

	namespace java{
		namespace net{
			
			class SocketAddress : public lang::Object {
				public:
			            SocketAddress(jobject _jthis, bool copy);
			            SocketAddress(const SocketAddress &);
			        
				SocketAddress();
				virtual ~SocketAddress();
			}; // end class SocketAddress
		} // end namespace java
	} // end namespace net

	namespace java{
		namespace net{
			
			class InetAddress : public lang::Object {
				public:
			            InetAddress(jobject _jthis, bool copy);
			            InetAddress(const InetAddress &);
			        
				virtual ~InetAddress();
				jboolean isMulticastAddress();
				jboolean isAnyLocalAddress();
				jboolean isLoopbackAddress();
				jboolean isLinkLocalAddress();
				jboolean isSiteLocalAddress();
				jboolean isMCGlobal();
				jboolean isMCNodeLocal();
				jboolean isMCLinkLocal();
				jboolean isMCSiteLocal();
				jboolean isMCOrgLocal();
				jboolean isReachable(jint int_0);
				jstring getCanonicalHostName();
				static InetAddress getByAddress(jbyteArray byteArray_0);
				static InetAddress getByAddress(jstring string_0,jbyteArray byteArray_1);
				static jobjectArray getAllByName(jstring string_0);
				static InetAddress getLoopbackAddress();
				static InetAddress getByName(jstring string_0);
				static InetAddress getLocalHost();
				jstring toString();
				jint hashCode();
				jbyteArray getAddress();
				jstring getHostAddress();
				jstring getHostName();
			}; // end class InetAddress
		} // end namespace java
	} // end namespace net

	namespace java{
		namespace net{
			
			class DatagramSocketImplFactory : public lang::Object {
				public:
			            DatagramSocketImplFactory(jobject _jthis, bool copy);
			            DatagramSocketImplFactory(const DatagramSocketImplFactory &);
			        
				DatagramSocketImplFactory();
				virtual ~DatagramSocketImplFactory();
			}; // end class DatagramSocketImplFactory
		} // end namespace java
	} // end namespace net

	namespace java{
		namespace nio{
			namespace channels{
				
				class DatagramChannel : public spi::AbstractSelectableChannel {
					public:
				            DatagramChannel(jobject _jthis, bool copy);
				            DatagramChannel(const DatagramChannel &);
				        
					virtual ~DatagramChannel();
					virtual jint validOps();
					static DatagramChannel open();
				}; // end class DatagramChannel
			} // end namespace java
		} // end namespace nio
	} // end namespace channels

	namespace javax{
		namespace swing{
			
			class DefaultComboBoxModel : public AbstractListModel {
				public:
			            DefaultComboBoxModel(jobject _jthis, bool copy);
			            DefaultComboBoxModel(const DefaultComboBoxModel &);
			        
				DefaultComboBoxModel();
				DefaultComboBoxModel(java::util::Vector vector_0);
				virtual ~DefaultComboBoxModel();
				jint getSize();
				void removeElementAt(jint int_0);
				void removeAllElements();
			}; // end class DefaultComboBoxModel
		} // end namespace javax
	} // end namespace swing

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								namespace Percentile{
									
									class EstimationType : public java::lang::Enum {
										public:
									            EstimationType(jobject _jthis, bool copy);
									            EstimationType(const EstimationType &);
									        
										virtual ~EstimationType();
										jdouble evaluate(jdoubleArray doubleArray_0,jdouble double_1,util::KthSelector kthSelector_2);
										static jobjectArray values();
										static EstimationType valueOf(jstring string_0);
									}; // end class EstimationType
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace stat
			} // end namespace descriptive
		} // end namespace rank
	} // end namespace Percentile

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace geometry{
						namespace spherical{
							namespace oned{
								namespace ArcsSet{
									
									class Split : public java::lang::Object {
										public:
									            Split(jobject _jthis, bool copy);
									            Split(const Split &);
									        
										virtual ~Split();
										ArcsSet getPlus();
										ArcsSet getMinus();
									}; // end class Split
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace geometry
			} // end namespace spherical
		} // end namespace oned
	} // end namespace ArcsSet

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace MathArrays{
							
							class OrderDirection : public java::lang::Enum {
								public:
							            OrderDirection(jobject _jthis, bool copy);
							            OrderDirection(const OrderDirection &);
							        
								virtual ~OrderDirection();
								static jobjectArray values();
								static OrderDirection valueOf(jstring string_0);
							}; // end class OrderDirection
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace MathArrays

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace MathArrays{
							
							class Position : public java::lang::Enum {
								public:
							            Position(jobject _jthis, bool copy);
							            Position(const Position &);
							        
								virtual ~Position();
								static jobjectArray values();
								static Position valueOf(jstring string_0);
							}; // end class Position
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace MathArrays

	namespace java{
		namespace util{
			
			class ArrayList : public AbstractList {
				public:
			            ArrayList(jobject _jthis, bool copy);
			            ArrayList(const ArrayList &);
			        
				ArrayList(Collection collection_0);
				ArrayList();
				ArrayList(jint int_0);
				virtual ~ArrayList();
				void clear();
				jboolean isEmpty();
				void replaceAll(function::UnaryOperator unaryOperator_0);
				jint size();
				List subList(jint int_0,jint int_1);
				Iterator iterator();
				jboolean addAll(jint int_0,Collection collection_1);
				jboolean addAll(Collection collection_0);
				void ensureCapacity(jint int_0);
				void trimToSize();
				jboolean removeAll(Collection collection_0);
				jboolean retainAll(Collection collection_0);
				ListIterator listIterator();
				ListIterator listIterator(jint int_0);
				jboolean removeIf(function::Predicate predicate_0);
				void sort(Comparator comparator_0);
			}; // end class ArrayList
		} // end namespace java
	} // end namespace util

	namespace org{
		namespace apache{
			namespace xerces{
				namespace impl{
					namespace xpath{
						namespace XPath{
							
							class LocationPath : public java::lang::Object {
								public:
							            LocationPath(jobject _jthis, bool copy);
							            LocationPath(const LocationPath &);
							        
								virtual ~LocationPath();
								jstring toString();
							}; // end class LocationPath
						} // end namespace org
					} // end namespace apache
				} // end namespace xerces
			} // end namespace impl
		} // end namespace xpath
	} // end namespace XPath

	namespace java{
		namespace awt{
			namespace geom{
				
				class AffineTransform : public lang::Object {
					public:
				            AffineTransform(jobject _jthis, bool copy);
				            AffineTransform(const AffineTransform &);
				        
					AffineTransform(jfloat float_0,jfloat float_1,jfloat float_2,jfloat float_3,jfloat float_4,jfloat float_5);
					AffineTransform(AffineTransform affineTransform_0);
					AffineTransform();
					AffineTransform(jfloatArray floatArray_0);
					AffineTransform(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
					AffineTransform(jdoubleArray doubleArray_0);
					virtual ~AffineTransform();
					void shear(jdouble double_0,jdouble double_1);
					void translate(jdouble double_0,jdouble double_1);
					static AffineTransform getTranslateInstance(jdouble double_0,jdouble double_1);
					void preConcatenate(AffineTransform affineTransform_0);
					jdouble getTranslateY();
					void deltaTransform(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jint int_4);
					Point2D deltaTransform(Point2D point2D_0,Point2D point2D_1);
					void setTransform(AffineTransform affineTransform_0);
					void setTransform(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3,jdouble double_4,jdouble double_5);
					static AffineTransform getRotateInstance(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					static AffineTransform getRotateInstance(jdouble double_0,jdouble double_1);
					static AffineTransform getRotateInstance(jdouble double_0,jdouble double_1,jdouble double_2);
					static AffineTransform getRotateInstance(jdouble double_0);
					static AffineTransform getQuadrantRotateInstance(jint int_0,jdouble double_1,jdouble double_2);
					static AffineTransform getQuadrantRotateInstance(jint int_0);
					static AffineTransform getScaleInstance(jdouble double_0,jdouble double_1);
					static AffineTransform getShearInstance(jdouble double_0,jdouble double_1);
					jdouble getShearX();
					jdouble getShearY();
					void quadrantRotate(jint int_0);
					void quadrantRotate(jint int_0,jdouble double_1,jdouble double_2);
					void setToRotation(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					void setToRotation(jdouble double_0);
					void setToRotation(jdouble double_0,jdouble double_1);
					void setToRotation(jdouble double_0,jdouble double_1,jdouble double_2);
					void setToQuadrantRotation(jint int_0);
					void setToQuadrantRotation(jint int_0,jdouble double_1,jdouble double_2);
					void setToScale(jdouble double_0,jdouble double_1);
					void setToShear(jdouble double_0,jdouble double_1);
					Shape createTransformedShape(Shape shape_0);
					void transform(jfloatArray floatArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jint int_4);
					void transform(jfloatArray floatArray_0,jint int_1,jfloatArray floatArray_2,jint int_3,jint int_4);
					void transform(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jint int_4);
					Point2D transform(Point2D point2D_0,Point2D point2D_1);
					void transform(jobjectArray point2DArray_0,jint int_1,jobjectArray point2DArray_2,jint int_3,jint int_4);
					void transform(jdoubleArray doubleArray_0,jint int_1,jfloatArray floatArray_2,jint int_3,jint int_4);
					void invert();
					void getMatrix(jdoubleArray doubleArray_0);
					jdouble getDeterminant();
					jdouble getTranslateX();
					jdouble getScaleX();
					jdouble getScaleY();
					void setToIdentity();
					Point2D inverseTransform(Point2D point2D_0,Point2D point2D_1);
					void inverseTransform(jdoubleArray doubleArray_0,jint int_1,jdoubleArray doubleArray_2,jint int_3,jint int_4);
					AffineTransform createInverse();
					void setToTranslation(jdouble double_0,jdouble double_1);
					void concatenate(AffineTransform affineTransform_0);
					jstring toString();
					jint hashCode();
					jint getType();
					jboolean isIdentity();
					void rotate(jdouble double_0,jdouble double_1,jdouble double_2,jdouble double_3);
					void rotate(jdouble double_0,jdouble double_1);
					void rotate(jdouble double_0,jdouble double_1,jdouble double_2);
					void rotate(jdouble double_0);
					void scale(jdouble double_0,jdouble double_1);
				}; // end class AffineTransform
			} // end namespace java
		} // end namespace awt
	} // end namespace geom

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace ResizableDoubleArray{
							
							class ExpansionMode : public java::lang::Enum {
								public:
							            ExpansionMode(jobject _jthis, bool copy);
							            ExpansionMode(const ExpansionMode &);
							        
								virtual ~ExpansionMode();
								static jobjectArray values();
								static ExpansionMode valueOf(jstring string_0);
							}; // end class ExpansionMode
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace ResizableDoubleArray

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace MathArrays{
							
							class Function : public java::lang::Object {
								public:
							            Function(jobject _jthis, bool copy);
							            Function(const Function &);
							        
								Function();
								virtual ~Function();
							}; // end class Function
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace MathArrays

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace util{
						namespace OpenIntToDoubleHashMap{
							
							class Iterator : public java::lang::Object {
								public:
							            Iterator(jobject _jthis, bool copy);
							            Iterator(const Iterator &);
							        
								virtual ~Iterator();
								jdouble value();
								jboolean hasNext();
								jint key();
								void advance();
							}; // end class Iterator
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace util
	} // end namespace OpenIntToDoubleHashMap

	namespace java{
		namespace io{
			
			class Serializable : public lang::Object {
				public:
			            Serializable(jobject _jthis, bool copy);
			            Serializable(const Serializable &);
			        
				Serializable();
				virtual ~Serializable();
			}; // end class Serializable
		} // end namespace java
	} // end namespace io

	namespace javax{
		namespace swing{
			
			class ProgressMonitor : public java::lang::Object {
				public:
			            ProgressMonitor(jobject _jthis, bool copy);
			            ProgressMonitor(const ProgressMonitor &);
			        
				virtual ~ProgressMonitor();
				accessibility::AccessibleContext getAccessibleContext();
				jint getMaximum();
				jint getMinimum();
				void setMinimum(jint int_0);
				void setMaximum(jint int_0);
				void setProgress(jint int_0);
				void setMillisToDecideToPopup(jint int_0);
				jint getMillisToDecideToPopup();
				void setMillisToPopup(jint int_0);
				jint getMillisToPopup();
				void setNote(jstring string_0);
				jstring getNote();
				jboolean isCanceled();
				void close();
			}; // end class ProgressMonitor
		} // end namespace javax
	} // end namespace swing

	namespace java{
		namespace awt{
			namespace print{
				
				class PageFormat : public lang::Object {
					public:
				            PageFormat(jobject _jthis, bool copy);
				            PageFormat(const PageFormat &);
				        
					PageFormat();
					virtual ~PageFormat();
					jint getOrientation();
					jdouble getWidth();
					jdouble getHeight();
					void setOrientation(jint int_0);
					jdoubleArray getMatrix();
					jdouble getImageableWidth();
					jdouble getImageableHeight();
					jdouble getImageableX();
					jdouble getImageableY();
				}; // end class PageFormat
			} // end namespace java
		} // end namespace awt
	} // end namespace print

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace rank{
								namespace PSquarePercentile{
									
									class PSquareMarkers : public java::lang::Object {
										public:
									            PSquareMarkers(jobject _jthis, bool copy);
									            PSquareMarkers(const PSquareMarkers &);
									        
										PSquareMarkers();
										virtual ~PSquareMarkers();
									}; // end class PSquareMarkers
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace stat
			} // end namespace descriptive
		} // end namespace rank
	} // end namespace PSquarePercentile

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace stat{
						namespace descriptive{
							namespace moment{
								namespace SemiVariance{
									
									class Direction : public java::lang::Enum {
										public:
									            Direction(jobject _jthis, bool copy);
									            Direction(const Direction &);
									        
										virtual ~Direction();
										static jobjectArray values();
										static Direction valueOf(jstring string_0);
									}; // end class Direction
								} // end namespace org
							} // end namespace apache
						} // end namespace commons
					} // end namespace math3
				} // end namespace stat
			} // end namespace descriptive
		} // end namespace moment
	} // end namespace SemiVariance

	namespace java{
		namespace io{
			
			class ObjectOutputStream : public OutputStream {
				public:
			            ObjectOutputStream(jobject _jthis, bool copy);
			            ObjectOutputStream(const ObjectOutputStream &);
			        
				ObjectOutputStream(OutputStream outputStream_0);
				virtual ~ObjectOutputStream();
				void useProtocolVersion(jint int_0);
				void writeBoolean(jboolean boolean_0);
				void writeByte(jint int_0);
				void writeShort(jint int_0);
				void writeDouble(jdouble double_0);
				void writeChars(jstring string_0);
				void writeFloat(jfloat float_0);
				void writeLong(jlong long_0);
				void write(jint int_0);
				void write(jbyteArray byteArray_0,jint int_1,jint int_2);
				void write(jbyteArray byteArray_0);
				void defaultWriteObject();
				void flush();
				void close();
				void writeInt(jint int_0);
				void writeFields();
				void reset();
				void writeChar(jint int_0);
				void writeBytes(jstring string_0);
				void writeUTF(jstring string_0);
			}; // end class ObjectOutputStream
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace io{
			
			class BufferedReader : public Reader {
				public:
			            BufferedReader(jobject _jthis, bool copy);
			            BufferedReader(const BufferedReader &);
			        
				BufferedReader(Reader reader_0,jint int_1);
				BufferedReader(Reader reader_0);
				virtual ~BufferedReader();
				jint read(jcharArray charArray_0,jint int_1,jint int_2);
				jint read();
				jstring readLine();
				void close();
				void mark(jint int_0);
				jlong skip(jlong long_0);
				jboolean markSupported();
				void reset();
				jboolean ready();
				util::stream::Stream lines();
			}; // end class BufferedReader
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace io{
			
			class Closeable : public lang::Object {
				public:
			            Closeable(jobject _jthis, bool copy);
			            Closeable(const Closeable &);
			        
				Closeable();
				virtual ~Closeable();
			}; // end class Closeable
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace net{
			
			class Socket : public lang::Object {
				public:
			            Socket(jobject _jthis, bool copy);
			            Socket(const Socket &);
			        
				Socket(jstring string_0,jint int_1,InetAddress inetAddress_2,jint int_3);
				Socket(InetAddress inetAddress_0,jint int_1,InetAddress inetAddress_2,jint int_3);
				Socket(InetAddress inetAddress_0,jint int_1,jboolean boolean_2);
				Socket(jstring string_0,jint int_1,jboolean boolean_2);
				Socket();
				Socket(jstring string_0,jint int_1);
				Socket(InetAddress inetAddress_0,jint int_1);
				virtual ~Socket();
				io::OutputStream getOutputStream();
				SocketAddress getRemoteSocketAddress();
				InetAddress getLocalAddress();
				void setSendBufferSize(jint int_0);
				jint getSendBufferSize();
				void setTrafficClass(jint int_0);
				jint getTrafficClass();
				SocketAddress getLocalSocketAddress();
				jboolean isBound();
				jint getSoTimeout();
				void setReuseAddress(jboolean boolean_0);
				jboolean getReuseAddress();
				void setReceiveBufferSize(jint int_0);
				jint getReceiveBufferSize();
				void setPerformancePreferences(jint int_0,jint int_1,jint int_2);
				InetAddress getInetAddress();
				void setSoTimeout(jint int_0);
				void setTcpNoDelay(jboolean boolean_0);
				jboolean isConnected();
				jboolean getTcpNoDelay();
				void setSoLinger(jboolean boolean_0,jint int_1);
				jint getSoLinger();
				void sendUrgentData(jint int_0);
				void setOOBInline(jboolean boolean_0);
				jboolean getOOBInline();
				void setKeepAlive(jboolean boolean_0);
				jboolean getKeepAlive();
				void shutdownInput();
				void shutdownOutput();
				jboolean isInputShutdown();
				jboolean isOutputShutdown();
				jint getLocalPort();
				void bind(SocketAddress socketAddress_0);
				jboolean isClosed();
				jstring toString();
				void connect(SocketAddress socketAddress_0);
				void connect(SocketAddress socketAddress_0,jint int_1);
				void close();
				io::InputStream getInputStream();
				jint getPort();
			}; // end class Socket
		} // end namespace java
	} // end namespace net

	namespace java{
		namespace nio{
			namespace channels{
				
				class Selector : public lang::Object {
					public:
				            Selector(jobject _jthis, bool copy);
				            Selector(const Selector &);
				        
					virtual ~Selector();
					static Selector open();
				}; // end class Selector
			} // end namespace java
		} // end namespace nio
	} // end namespace channels

	namespace java{
		namespace net{
			
			class ServerSocket : public lang::Object {
				public:
			            ServerSocket(jobject _jthis, bool copy);
			            ServerSocket(const ServerSocket &);
			        
				ServerSocket(jint int_0,jint int_1,InetAddress inetAddress_2);
				ServerSocket();
				ServerSocket(jint int_0);
				ServerSocket(jint int_0,jint int_1);
				virtual ~ServerSocket();
				SocketAddress getLocalSocketAddress();
				jboolean isBound();
				jint getSoTimeout();
				void setReuseAddress(jboolean boolean_0);
				jboolean getReuseAddress();
				void setReceiveBufferSize(jint int_0);
				jint getReceiveBufferSize();
				void setPerformancePreferences(jint int_0,jint int_1,jint int_2);
				InetAddress getInetAddress();
				void setSoTimeout(jint int_0);
				jint getLocalPort();
				void bind(SocketAddress socketAddress_0);
				void bind(SocketAddress socketAddress_0,jint int_1);
				jboolean isClosed();
				jstring toString();
				Socket accept();
				void close();
			}; // end class ServerSocket
		} // end namespace java
	} // end namespace net

	namespace java{
		namespace net{
			
			class URI : public lang::Object {
				public:
			            URI(jobject _jthis, bool copy);
			            URI(const URI &);
			        
				URI(jstring string_0);
				URI(jstring string_0,jstring string_1,jstring string_2,jint int_3,jstring string_4,jstring string_5,jstring string_6);
				URI(jstring string_0,jstring string_1,jstring string_2,jstring string_3,jstring string_4);
				URI(jstring string_0,jstring string_1,jstring string_2);
				URI(jstring string_0,jstring string_1,jstring string_2,jstring string_3);
				virtual ~URI();
				URI parseServerAuthority();
				jstring getRawSchemeSpecificPart();
				jstring getSchemeSpecificPart();
				jstring getRawAuthority();
				jstring getRawUserInfo();
				jstring getRawPath();
				jstring getRawQuery();
				jstring getRawFragment();
				jstring toASCIIString();
				jstring toString();
				jint hashCode();
				jint compareTo(URI uRI_0);
				jboolean isAbsolute();
				URI resolve(URI uRI_0);
				URI resolve(jstring string_0);
				static URI create(jstring string_0);
				URI normalize();
				jstring getPath();
				URL toURL();
				jboolean isOpaque();
				jstring getScheme();
				jstring getAuthority();
				jstring getFragment();
				jstring getQuery();
				jstring getHost();
				jstring getUserInfo();
				jint getPort();
				URI relativize(URI uRI_0);
			}; // end class URI
		} // end namespace java
	} // end namespace net

	namespace java{
		namespace net{
			
			class URLConnection : public lang::Object {
				public:
			            URLConnection(jobject _jthis, bool copy);
			            URLConnection(const URLConnection &);
			        
				virtual ~URLConnection();
				jstring getHeaderField(jint int_0);
				jstring getHeaderField(jstring string_0);
				jlong getContentLengthLong();
				jstring getHeaderFieldKey(jint int_0);
				jlong getLastModified();
				void addRequestProperty(jstring string_0,jstring string_1);
				jstring getRequestProperty(jstring string_0);
				util::Map getRequestProperties();
				jstring getContentType();
				static jstring guessContentTypeFromStream(io::InputStream inputStream_0);
				static jstring guessContentTypeFromName(jstring string_0);
				void setConnectTimeout(jint int_0);
				jint getConnectTimeout();
				void setReadTimeout(jint int_0);
				jint getReadTimeout();
				jstring getContentEncoding();
				jlong getExpiration();
				util::Map getHeaderFields();
				jint getHeaderFieldInt(jstring string_0,jint int_1);
				jlong getHeaderFieldLong(jstring string_0,jlong long_1);
				jlong getHeaderFieldDate(jstring string_0,jlong long_1);
				io::OutputStream getOutputStream();
				void setDoInput(jboolean boolean_0);
				jboolean getDoInput();
				void setDoOutput(jboolean boolean_0);
				jboolean getDoOutput();
				void setAllowUserInteraction(jboolean boolean_0);
				jboolean getAllowUserInteraction();
				static void setDefaultAllowUserInteraction(jboolean boolean_0);
				static jboolean getDefaultAllowUserInteraction();
				jboolean getUseCaches();
				void setIfModifiedSince(jlong long_0);
				jlong getIfModifiedSince();
				jboolean getDefaultUseCaches();
				void setDefaultUseCaches(jboolean boolean_0);
				static void setDefaultRequestProperty(jstring string_0,jstring string_1);
				static jstring getDefaultRequestProperty(jstring string_0);
				void setRequestProperty(jstring string_0,jstring string_1);
				void setUseCaches(jboolean boolean_0);
				jint getContentLength();
				jlong getDate();
				jstring toString();
				URL getURL();
				io::InputStream getInputStream();
			}; // end class URLConnection
		} // end namespace java
	} // end namespace net

	namespace java{
		namespace lang{
			
			class StringBuilder : public AbstractStringBuilder {
				public:
			            StringBuilder(jobject _jthis, bool copy);
			            StringBuilder(const StringBuilder &);
			        
				StringBuilder(CharSequence charSequence_0);
				StringBuilder(jstring string_0);
				StringBuilder(jint int_0);
				StringBuilder();
				virtual ~StringBuilder();
				jstring toString();
				StringBuilder append(jboolean boolean_0);
				StringBuilder append(CharSequence charSequence_0);
				StringBuilder append(jchar char_0);
				StringBuilder append(jint int_0);
				StringBuilder append(StringBuffer stringBuffer_0);
				StringBuilder append(jcharArray charArray_0);
				StringBuilder append(CharSequence charSequence_0,jint int_1,jint int_2);
				StringBuilder append(jdouble double_0);
				StringBuilder append(jcharArray charArray_0,jint int_1,jint int_2);
				StringBuilder append(jstring string_0);
				StringBuilder append(jlong long_0);
				StringBuilder append(jfloat float_0);
				jint indexOf(jstring string_0,jint int_1);
				jint indexOf(jstring string_0);
				jint lastIndexOf(jstring string_0,jint int_1);
				jint lastIndexOf(jstring string_0);
				StringBuilder replace(jint int_0,jint int_1,jstring string_2);
				StringBuilder delete(jint int_0,jint int_1);
				StringBuilder insert(jint int_0,jcharArray charArray_1,jint int_2,jint int_3);
				StringBuilder insert(jint int_0,jdouble double_1);
				StringBuilder insert(jint int_0,jfloat float_1);
				StringBuilder insert(jint int_0,jlong long_1);
				StringBuilder insert(jint int_0,jint int_1);
				StringBuilder insert(jint int_0,jstring string_1);
				StringBuilder insert(jint int_0,jcharArray charArray_1);
				StringBuilder insert(jint int_0,CharSequence charSequence_1);
				StringBuilder insert(jint int_0,CharSequence charSequence_1,jint int_2,jint int_3);
				StringBuilder insert(jint int_0,jboolean boolean_1);
				StringBuilder insert(jint int_0,jchar char_1);
				StringBuilder appendCodePoint(jint int_0);
				StringBuilder deleteCharAt(jint int_0);
				StringBuilder reverse();
			}; // end class StringBuilder
		} // end namespace java
	} // end namespace lang

	namespace java{
		namespace util{
			namespace function{
				
				class UnaryOperator : public lang::Object {
					public:
				            UnaryOperator(jobject _jthis, bool copy);
				            UnaryOperator(const UnaryOperator &);
				        
					UnaryOperator();
					virtual ~UnaryOperator();
					static UnaryOperator identity();
				}; // end class UnaryOperator
			} // end namespace java
		} // end namespace util
	} // end namespace function

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace dfp{
						namespace DfpField{
							
							class RoundingMode : public java::lang::Enum {
								public:
							            RoundingMode(jobject _jthis, bool copy);
							            RoundingMode(const RoundingMode &);
							        
								virtual ~RoundingMode();
								static jobjectArray values();
								static RoundingMode valueOf(jstring string_0);
							}; // end class RoundingMode
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace dfp
	} // end namespace DfpField

	namespace org{
		namespace apache{
			namespace commons{
				namespace math3{
					namespace special{
						namespace BesselJ{
							
							class BesselJResult : public java::lang::Object {
								public:
							            BesselJResult(jobject _jthis, bool copy);
							            BesselJResult(const BesselJResult &);
							        
								BesselJResult(jdoubleArray doubleArray_0,jint int_1);
								virtual ~BesselJResult();
								jdoubleArray getVals();
								jint getnVals();
							}; // end class BesselJResult
						} // end namespace org
					} // end namespace apache
				} // end namespace commons
			} // end namespace math3
		} // end namespace special
	} // end namespace BesselJ

	namespace java{
		namespace io{
			
			class ObjectInputValidation : public lang::Object {
				public:
			            ObjectInputValidation(jobject _jthis, bool copy);
			            ObjectInputValidation(const ObjectInputValidation &);
			        
				ObjectInputValidation();
				virtual ~ObjectInputValidation();
			}; // end class ObjectInputValidation
		} // end namespace java
	} // end namespace io

	namespace java{
		namespace io{
			namespace ObjectInputStream{
				
				class GetField : public lang::Object {
					public:
				            GetField(jobject _jthis, bool copy);
				            GetField(const GetField &);
				        
					GetField();
					virtual ~GetField();
				}; // end class GetField
			} // end namespace java
		} // end namespace io
	} // end namespace ObjectInputStream

	namespace java{
		namespace util{
			
			class Optional : public lang::Object {
				public:
			            Optional(jobject _jthis, bool copy);
			            Optional(const Optional &);
			        
				virtual ~Optional();
				jboolean isPresent();
				Optional flatMap(function::Function function_0);
				jstring toString();
				jint hashCode();
				static Optional empty();
				Optional filter(function::Predicate predicate_0);
				Optional map(function::Function function_0);
			}; // end class Optional
		} // end namespace java
	} // end namespace util

	namespace crcl{
		namespace utils{
			namespace PendantClientInner{
				
				class TrySupplier : public java::lang::Object {
					public:
				            TrySupplier(jobject _jthis, bool copy);
				            TrySupplier(const TrySupplier &);
				        
					TrySupplier();
					virtual ~TrySupplier();
				}; // end class TrySupplier
			} // end namespace crcl
		} // end namespace utils
	} // end namespace PendantClientInner

	namespace java{
		namespace util{
			namespace function{
				
				class Function : public lang::Object {
					public:
				            Function(jobject _jthis, bool copy);
				            Function(const Function &);
				        
					Function();
					virtual ~Function();
					Function compose(Function function_0);
					Function andThen(Function function_0);
					static Function identity();
				}; // end class Function
			} // end namespace java
		} // end namespace util
	} // end namespace function



// end namespace crclj
}

// end #ifndef crclj_h
#endif

